
ejemplo_msc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000082d0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  080083dc  080083dc  000183dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800847c  0800847c  00020120  2**0
                  CONTENTS
  4 .ARM          00000000  0800847c  0800847c  00020120  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800847c  0800847c  00020120  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800847c  0800847c  0001847c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008480  08008480  00018480  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000120  20000000  08008484  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a50  20000120  080085a4  00020120  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000b70  080085a4  00020b70  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020120  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015491  00000000  00000000  00020149  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000361c  00000000  00000000  000355da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bf8  00000000  00000000  00038bf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a68  00000000  00000000  000397f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b9f7  00000000  00000000  0003a258  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010a4c  00000000  00000000  00055c4f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008c5ab  00000000  00000000  0006669b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f2c46  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002d9c  00000000  00000000  000f2c9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000120 	.word	0x20000120
 8000128:	00000000 	.word	0x00000000
 800012c:	080083c4 	.word	0x080083c4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000124 	.word	0x20000124
 8000148:	080083c4 	.word	0x080083c4

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000150:	f000 f94a 	bl	80003e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000154:	f000 f808 	bl	8000168 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  	  disk_initialize(0);
 8000158:	2000      	movs	r0, #0
 800015a:	f007 fa7f 	bl	800765c <disk_initialize>
  	   *
  	   */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800015e:	f000 f85d 	bl	800021c <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 8000162:	f007 fc8f 	bl	8007a84 <MX_USB_DEVICE_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000166:	e7fe      	b.n	8000166 <main+0x1a>

08000168 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000168:	b580      	push	{r7, lr}
 800016a:	b094      	sub	sp, #80	; 0x50
 800016c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800016e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000172:	2228      	movs	r2, #40	; 0x28
 8000174:	2100      	movs	r1, #0
 8000176:	4618      	mov	r0, r3
 8000178:	f008 f91c 	bl	80083b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800017c:	f107 0314 	add.w	r3, r7, #20
 8000180:	2200      	movs	r2, #0
 8000182:	601a      	str	r2, [r3, #0]
 8000184:	605a      	str	r2, [r3, #4]
 8000186:	609a      	str	r2, [r3, #8]
 8000188:	60da      	str	r2, [r3, #12]
 800018a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800018c:	1d3b      	adds	r3, r7, #4
 800018e:	2200      	movs	r2, #0
 8000190:	601a      	str	r2, [r3, #0]
 8000192:	605a      	str	r2, [r3, #4]
 8000194:	609a      	str	r2, [r3, #8]
 8000196:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000198:	2301      	movs	r3, #1
 800019a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800019c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80001a2:	2300      	movs	r3, #0
 80001a4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001a6:	2301      	movs	r3, #1
 80001a8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001aa:	2302      	movs	r3, #2
 80001ac:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80001ae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001b2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80001b4:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80001b8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001ba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80001be:	4618      	mov	r0, r3
 80001c0:	f001 ffdc 	bl	800217c <HAL_RCC_OscConfig>
 80001c4:	4603      	mov	r3, r0
 80001c6:	2b00      	cmp	r3, #0
 80001c8:	d001      	beq.n	80001ce <SystemClock_Config+0x66>
  {
    Error_Handler();
 80001ca:	f000 f873 	bl	80002b4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001ce:	230f      	movs	r3, #15
 80001d0:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80001d2:	2302      	movs	r3, #2
 80001d4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80001d6:	2300      	movs	r3, #0
 80001d8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80001da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80001de:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80001e0:	2300      	movs	r3, #0
 80001e2:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80001e4:	f107 0314 	add.w	r3, r7, #20
 80001e8:	2102      	movs	r1, #2
 80001ea:	4618      	mov	r0, r3
 80001ec:	f002 fa46 	bl	800267c <HAL_RCC_ClockConfig>
 80001f0:	4603      	mov	r3, r0
 80001f2:	2b00      	cmp	r3, #0
 80001f4:	d001      	beq.n	80001fa <SystemClock_Config+0x92>
  {
    Error_Handler();
 80001f6:	f000 f85d 	bl	80002b4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80001fa:	2310      	movs	r3, #16
 80001fc:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 80001fe:	2300      	movs	r3, #0
 8000200:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000202:	1d3b      	adds	r3, r7, #4
 8000204:	4618      	mov	r0, r3
 8000206:	f002 fba1 	bl	800294c <HAL_RCCEx_PeriphCLKConfig>
 800020a:	4603      	mov	r3, r0
 800020c:	2b00      	cmp	r3, #0
 800020e:	d001      	beq.n	8000214 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000210:	f000 f850 	bl	80002b4 <Error_Handler>
  }
}
 8000214:	bf00      	nop
 8000216:	3750      	adds	r7, #80	; 0x50
 8000218:	46bd      	mov	sp, r7
 800021a:	bd80      	pop	{r7, pc}

0800021c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800021c:	b580      	push	{r7, lr}
 800021e:	b088      	sub	sp, #32
 8000220:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000222:	f107 0310 	add.w	r3, r7, #16
 8000226:	2200      	movs	r2, #0
 8000228:	601a      	str	r2, [r3, #0]
 800022a:	605a      	str	r2, [r3, #4]
 800022c:	609a      	str	r2, [r3, #8]
 800022e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000230:	4b1e      	ldr	r3, [pc, #120]	; (80002ac <MX_GPIO_Init+0x90>)
 8000232:	699b      	ldr	r3, [r3, #24]
 8000234:	4a1d      	ldr	r2, [pc, #116]	; (80002ac <MX_GPIO_Init+0x90>)
 8000236:	f043 0310 	orr.w	r3, r3, #16
 800023a:	6193      	str	r3, [r2, #24]
 800023c:	4b1b      	ldr	r3, [pc, #108]	; (80002ac <MX_GPIO_Init+0x90>)
 800023e:	699b      	ldr	r3, [r3, #24]
 8000240:	f003 0310 	and.w	r3, r3, #16
 8000244:	60fb      	str	r3, [r7, #12]
 8000246:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000248:	4b18      	ldr	r3, [pc, #96]	; (80002ac <MX_GPIO_Init+0x90>)
 800024a:	699b      	ldr	r3, [r3, #24]
 800024c:	4a17      	ldr	r2, [pc, #92]	; (80002ac <MX_GPIO_Init+0x90>)
 800024e:	f043 0320 	orr.w	r3, r3, #32
 8000252:	6193      	str	r3, [r2, #24]
 8000254:	4b15      	ldr	r3, [pc, #84]	; (80002ac <MX_GPIO_Init+0x90>)
 8000256:	699b      	ldr	r3, [r3, #24]
 8000258:	f003 0320 	and.w	r3, r3, #32
 800025c:	60bb      	str	r3, [r7, #8]
 800025e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000260:	4b12      	ldr	r3, [pc, #72]	; (80002ac <MX_GPIO_Init+0x90>)
 8000262:	699b      	ldr	r3, [r3, #24]
 8000264:	4a11      	ldr	r2, [pc, #68]	; (80002ac <MX_GPIO_Init+0x90>)
 8000266:	f043 0304 	orr.w	r3, r3, #4
 800026a:	6193      	str	r3, [r2, #24]
 800026c:	4b0f      	ldr	r3, [pc, #60]	; (80002ac <MX_GPIO_Init+0x90>)
 800026e:	699b      	ldr	r3, [r3, #24]
 8000270:	f003 0304 	and.w	r3, r3, #4
 8000274:	607b      	str	r3, [r7, #4]
 8000276:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000278:	2200      	movs	r2, #0
 800027a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800027e:	480c      	ldr	r0, [pc, #48]	; (80002b0 <MX_GPIO_Init+0x94>)
 8000280:	f000 fba6 	bl	80009d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000284:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000288:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800028a:	2301      	movs	r3, #1
 800028c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800028e:	2300      	movs	r3, #0
 8000290:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000292:	2302      	movs	r3, #2
 8000294:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000296:	f107 0310 	add.w	r3, r7, #16
 800029a:	4619      	mov	r1, r3
 800029c:	4804      	ldr	r0, [pc, #16]	; (80002b0 <MX_GPIO_Init+0x94>)
 800029e:	f000 fa13 	bl	80006c8 <HAL_GPIO_Init>

}
 80002a2:	bf00      	nop
 80002a4:	3720      	adds	r7, #32
 80002a6:	46bd      	mov	sp, r7
 80002a8:	bd80      	pop	{r7, pc}
 80002aa:	bf00      	nop
 80002ac:	40021000 	.word	0x40021000
 80002b0:	40011000 	.word	0x40011000

080002b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80002b4:	b480      	push	{r7}
 80002b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80002b8:	bf00      	nop
 80002ba:	46bd      	mov	sp, r7
 80002bc:	bc80      	pop	{r7}
 80002be:	4770      	bx	lr

080002c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80002c0:	b480      	push	{r7}
 80002c2:	b085      	sub	sp, #20
 80002c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80002c6:	4b15      	ldr	r3, [pc, #84]	; (800031c <HAL_MspInit+0x5c>)
 80002c8:	699b      	ldr	r3, [r3, #24]
 80002ca:	4a14      	ldr	r2, [pc, #80]	; (800031c <HAL_MspInit+0x5c>)
 80002cc:	f043 0301 	orr.w	r3, r3, #1
 80002d0:	6193      	str	r3, [r2, #24]
 80002d2:	4b12      	ldr	r3, [pc, #72]	; (800031c <HAL_MspInit+0x5c>)
 80002d4:	699b      	ldr	r3, [r3, #24]
 80002d6:	f003 0301 	and.w	r3, r3, #1
 80002da:	60bb      	str	r3, [r7, #8]
 80002dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80002de:	4b0f      	ldr	r3, [pc, #60]	; (800031c <HAL_MspInit+0x5c>)
 80002e0:	69db      	ldr	r3, [r3, #28]
 80002e2:	4a0e      	ldr	r2, [pc, #56]	; (800031c <HAL_MspInit+0x5c>)
 80002e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80002e8:	61d3      	str	r3, [r2, #28]
 80002ea:	4b0c      	ldr	r3, [pc, #48]	; (800031c <HAL_MspInit+0x5c>)
 80002ec:	69db      	ldr	r3, [r3, #28]
 80002ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80002f2:	607b      	str	r3, [r7, #4]
 80002f4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80002f6:	4b0a      	ldr	r3, [pc, #40]	; (8000320 <HAL_MspInit+0x60>)
 80002f8:	685b      	ldr	r3, [r3, #4]
 80002fa:	60fb      	str	r3, [r7, #12]
 80002fc:	68fb      	ldr	r3, [r7, #12]
 80002fe:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000302:	60fb      	str	r3, [r7, #12]
 8000304:	68fb      	ldr	r3, [r7, #12]
 8000306:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800030a:	60fb      	str	r3, [r7, #12]
 800030c:	4a04      	ldr	r2, [pc, #16]	; (8000320 <HAL_MspInit+0x60>)
 800030e:	68fb      	ldr	r3, [r7, #12]
 8000310:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000312:	bf00      	nop
 8000314:	3714      	adds	r7, #20
 8000316:	46bd      	mov	sp, r7
 8000318:	bc80      	pop	{r7}
 800031a:	4770      	bx	lr
 800031c:	40021000 	.word	0x40021000
 8000320:	40010000 	.word	0x40010000

08000324 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000324:	b480      	push	{r7}
 8000326:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000328:	bf00      	nop
 800032a:	46bd      	mov	sp, r7
 800032c:	bc80      	pop	{r7}
 800032e:	4770      	bx	lr

08000330 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000330:	b480      	push	{r7}
 8000332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000334:	e7fe      	b.n	8000334 <HardFault_Handler+0x4>

08000336 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000336:	b480      	push	{r7}
 8000338:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800033a:	e7fe      	b.n	800033a <MemManage_Handler+0x4>

0800033c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800033c:	b480      	push	{r7}
 800033e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000340:	e7fe      	b.n	8000340 <BusFault_Handler+0x4>

08000342 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000342:	b480      	push	{r7}
 8000344:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000346:	e7fe      	b.n	8000346 <UsageFault_Handler+0x4>

08000348 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000348:	b480      	push	{r7}
 800034a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800034c:	bf00      	nop
 800034e:	46bd      	mov	sp, r7
 8000350:	bc80      	pop	{r7}
 8000352:	4770      	bx	lr

08000354 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000354:	b480      	push	{r7}
 8000356:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000358:	bf00      	nop
 800035a:	46bd      	mov	sp, r7
 800035c:	bc80      	pop	{r7}
 800035e:	4770      	bx	lr

08000360 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000360:	b480      	push	{r7}
 8000362:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000364:	bf00      	nop
 8000366:	46bd      	mov	sp, r7
 8000368:	bc80      	pop	{r7}
 800036a:	4770      	bx	lr

0800036c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800036c:	b580      	push	{r7, lr}
 800036e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000370:	f000 f880 	bl	8000474 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  disk_timerproc();
 8000374:	f007 fb44 	bl	8007a00 <disk_timerproc>
  /* USER CODE END SysTick_IRQn 1 */
}
 8000378:	bf00      	nop
 800037a:	bd80      	pop	{r7, pc}

0800037c <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 800037c:	b580      	push	{r7, lr}
 800037e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000380:	4802      	ldr	r0, [pc, #8]	; (800038c <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000382:	f000 fc6e 	bl	8000c62 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000386:	bf00      	nop
 8000388:	bd80      	pop	{r7, pc}
 800038a:	bf00      	nop
 800038c:	20000884 	.word	0x20000884

08000390 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000390:	b480      	push	{r7}
 8000392:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000394:	bf00      	nop
 8000396:	46bd      	mov	sp, r7
 8000398:	bc80      	pop	{r7}
 800039a:	4770      	bx	lr

0800039c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800039c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800039e:	e003      	b.n	80003a8 <LoopCopyDataInit>

080003a0 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80003a0:	4b0b      	ldr	r3, [pc, #44]	; (80003d0 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80003a2:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80003a4:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80003a6:	3104      	adds	r1, #4

080003a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80003a8:	480a      	ldr	r0, [pc, #40]	; (80003d4 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80003aa:	4b0b      	ldr	r3, [pc, #44]	; (80003d8 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80003ac:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80003ae:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80003b0:	d3f6      	bcc.n	80003a0 <CopyDataInit>
  ldr r2, =_sbss
 80003b2:	4a0a      	ldr	r2, [pc, #40]	; (80003dc <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80003b4:	e002      	b.n	80003bc <LoopFillZerobss>

080003b6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80003b6:	2300      	movs	r3, #0
  str r3, [r2], #4
 80003b8:	f842 3b04 	str.w	r3, [r2], #4

080003bc <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80003bc:	4b08      	ldr	r3, [pc, #32]	; (80003e0 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80003be:	429a      	cmp	r2, r3
  bcc FillZerobss
 80003c0:	d3f9      	bcc.n	80003b6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80003c2:	f7ff ffe5 	bl	8000390 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80003c6:	f007 ffd1 	bl	800836c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80003ca:	f7ff febf 	bl	800014c <main>
  bx lr
 80003ce:	4770      	bx	lr
  ldr r3, =_sidata
 80003d0:	08008484 	.word	0x08008484
  ldr r0, =_sdata
 80003d4:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80003d8:	20000120 	.word	0x20000120
  ldr r2, =_sbss
 80003dc:	20000120 	.word	0x20000120
  ldr r3, = _ebss
 80003e0:	20000b70 	.word	0x20000b70

080003e4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003e4:	e7fe      	b.n	80003e4 <ADC1_2_IRQHandler>
	...

080003e8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80003e8:	b580      	push	{r7, lr}
 80003ea:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80003ec:	4b08      	ldr	r3, [pc, #32]	; (8000410 <HAL_Init+0x28>)
 80003ee:	681b      	ldr	r3, [r3, #0]
 80003f0:	4a07      	ldr	r2, [pc, #28]	; (8000410 <HAL_Init+0x28>)
 80003f2:	f043 0310 	orr.w	r3, r3, #16
 80003f6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80003f8:	2003      	movs	r0, #3
 80003fa:	f000 f923 	bl	8000644 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80003fe:	2000      	movs	r0, #0
 8000400:	f000 f808 	bl	8000414 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000404:	f7ff ff5c 	bl	80002c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000408:	2300      	movs	r3, #0
}
 800040a:	4618      	mov	r0, r3
 800040c:	bd80      	pop	{r7, pc}
 800040e:	bf00      	nop
 8000410:	40022000 	.word	0x40022000

08000414 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000414:	b580      	push	{r7, lr}
 8000416:	b082      	sub	sp, #8
 8000418:	af00      	add	r7, sp, #0
 800041a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800041c:	4b12      	ldr	r3, [pc, #72]	; (8000468 <HAL_InitTick+0x54>)
 800041e:	681a      	ldr	r2, [r3, #0]
 8000420:	4b12      	ldr	r3, [pc, #72]	; (800046c <HAL_InitTick+0x58>)
 8000422:	781b      	ldrb	r3, [r3, #0]
 8000424:	4619      	mov	r1, r3
 8000426:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800042a:	fbb3 f3f1 	udiv	r3, r3, r1
 800042e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000432:	4618      	mov	r0, r3
 8000434:	f000 f93b 	bl	80006ae <HAL_SYSTICK_Config>
 8000438:	4603      	mov	r3, r0
 800043a:	2b00      	cmp	r3, #0
 800043c:	d001      	beq.n	8000442 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800043e:	2301      	movs	r3, #1
 8000440:	e00e      	b.n	8000460 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000442:	687b      	ldr	r3, [r7, #4]
 8000444:	2b0f      	cmp	r3, #15
 8000446:	d80a      	bhi.n	800045e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000448:	2200      	movs	r2, #0
 800044a:	6879      	ldr	r1, [r7, #4]
 800044c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000450:	f000 f903 	bl	800065a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000454:	4a06      	ldr	r2, [pc, #24]	; (8000470 <HAL_InitTick+0x5c>)
 8000456:	687b      	ldr	r3, [r7, #4]
 8000458:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800045a:	2300      	movs	r3, #0
 800045c:	e000      	b.n	8000460 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800045e:	2301      	movs	r3, #1
}
 8000460:	4618      	mov	r0, r3
 8000462:	3708      	adds	r7, #8
 8000464:	46bd      	mov	sp, r7
 8000466:	bd80      	pop	{r7, pc}
 8000468:	20000000 	.word	0x20000000
 800046c:	20000008 	.word	0x20000008
 8000470:	20000004 	.word	0x20000004

08000474 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000474:	b480      	push	{r7}
 8000476:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000478:	4b05      	ldr	r3, [pc, #20]	; (8000490 <HAL_IncTick+0x1c>)
 800047a:	781b      	ldrb	r3, [r3, #0]
 800047c:	461a      	mov	r2, r3
 800047e:	4b05      	ldr	r3, [pc, #20]	; (8000494 <HAL_IncTick+0x20>)
 8000480:	681b      	ldr	r3, [r3, #0]
 8000482:	4413      	add	r3, r2
 8000484:	4a03      	ldr	r2, [pc, #12]	; (8000494 <HAL_IncTick+0x20>)
 8000486:	6013      	str	r3, [r2, #0]
}
 8000488:	bf00      	nop
 800048a:	46bd      	mov	sp, r7
 800048c:	bc80      	pop	{r7}
 800048e:	4770      	bx	lr
 8000490:	20000008 	.word	0x20000008
 8000494:	200003bc 	.word	0x200003bc

08000498 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000498:	b480      	push	{r7}
 800049a:	af00      	add	r7, sp, #0
  return uwTick;
 800049c:	4b02      	ldr	r3, [pc, #8]	; (80004a8 <HAL_GetTick+0x10>)
 800049e:	681b      	ldr	r3, [r3, #0]
}
 80004a0:	4618      	mov	r0, r3
 80004a2:	46bd      	mov	sp, r7
 80004a4:	bc80      	pop	{r7}
 80004a6:	4770      	bx	lr
 80004a8:	200003bc 	.word	0x200003bc

080004ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80004ac:	b480      	push	{r7}
 80004ae:	b085      	sub	sp, #20
 80004b0:	af00      	add	r7, sp, #0
 80004b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80004b4:	687b      	ldr	r3, [r7, #4]
 80004b6:	f003 0307 	and.w	r3, r3, #7
 80004ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80004bc:	4b0c      	ldr	r3, [pc, #48]	; (80004f0 <__NVIC_SetPriorityGrouping+0x44>)
 80004be:	68db      	ldr	r3, [r3, #12]
 80004c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80004c2:	68ba      	ldr	r2, [r7, #8]
 80004c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80004c8:	4013      	ands	r3, r2
 80004ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80004cc:	68fb      	ldr	r3, [r7, #12]
 80004ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80004d0:	68bb      	ldr	r3, [r7, #8]
 80004d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80004d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80004d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80004dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80004de:	4a04      	ldr	r2, [pc, #16]	; (80004f0 <__NVIC_SetPriorityGrouping+0x44>)
 80004e0:	68bb      	ldr	r3, [r7, #8]
 80004e2:	60d3      	str	r3, [r2, #12]
}
 80004e4:	bf00      	nop
 80004e6:	3714      	adds	r7, #20
 80004e8:	46bd      	mov	sp, r7
 80004ea:	bc80      	pop	{r7}
 80004ec:	4770      	bx	lr
 80004ee:	bf00      	nop
 80004f0:	e000ed00 	.word	0xe000ed00

080004f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80004f4:	b480      	push	{r7}
 80004f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80004f8:	4b04      	ldr	r3, [pc, #16]	; (800050c <__NVIC_GetPriorityGrouping+0x18>)
 80004fa:	68db      	ldr	r3, [r3, #12]
 80004fc:	0a1b      	lsrs	r3, r3, #8
 80004fe:	f003 0307 	and.w	r3, r3, #7
}
 8000502:	4618      	mov	r0, r3
 8000504:	46bd      	mov	sp, r7
 8000506:	bc80      	pop	{r7}
 8000508:	4770      	bx	lr
 800050a:	bf00      	nop
 800050c:	e000ed00 	.word	0xe000ed00

08000510 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000510:	b480      	push	{r7}
 8000512:	b083      	sub	sp, #12
 8000514:	af00      	add	r7, sp, #0
 8000516:	4603      	mov	r3, r0
 8000518:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800051a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800051e:	2b00      	cmp	r3, #0
 8000520:	db0b      	blt.n	800053a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000522:	79fb      	ldrb	r3, [r7, #7]
 8000524:	f003 021f 	and.w	r2, r3, #31
 8000528:	4906      	ldr	r1, [pc, #24]	; (8000544 <__NVIC_EnableIRQ+0x34>)
 800052a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800052e:	095b      	lsrs	r3, r3, #5
 8000530:	2001      	movs	r0, #1
 8000532:	fa00 f202 	lsl.w	r2, r0, r2
 8000536:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800053a:	bf00      	nop
 800053c:	370c      	adds	r7, #12
 800053e:	46bd      	mov	sp, r7
 8000540:	bc80      	pop	{r7}
 8000542:	4770      	bx	lr
 8000544:	e000e100 	.word	0xe000e100

08000548 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000548:	b480      	push	{r7}
 800054a:	b083      	sub	sp, #12
 800054c:	af00      	add	r7, sp, #0
 800054e:	4603      	mov	r3, r0
 8000550:	6039      	str	r1, [r7, #0]
 8000552:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000554:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000558:	2b00      	cmp	r3, #0
 800055a:	db0a      	blt.n	8000572 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800055c:	683b      	ldr	r3, [r7, #0]
 800055e:	b2da      	uxtb	r2, r3
 8000560:	490c      	ldr	r1, [pc, #48]	; (8000594 <__NVIC_SetPriority+0x4c>)
 8000562:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000566:	0112      	lsls	r2, r2, #4
 8000568:	b2d2      	uxtb	r2, r2
 800056a:	440b      	add	r3, r1
 800056c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000570:	e00a      	b.n	8000588 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000572:	683b      	ldr	r3, [r7, #0]
 8000574:	b2da      	uxtb	r2, r3
 8000576:	4908      	ldr	r1, [pc, #32]	; (8000598 <__NVIC_SetPriority+0x50>)
 8000578:	79fb      	ldrb	r3, [r7, #7]
 800057a:	f003 030f 	and.w	r3, r3, #15
 800057e:	3b04      	subs	r3, #4
 8000580:	0112      	lsls	r2, r2, #4
 8000582:	b2d2      	uxtb	r2, r2
 8000584:	440b      	add	r3, r1
 8000586:	761a      	strb	r2, [r3, #24]
}
 8000588:	bf00      	nop
 800058a:	370c      	adds	r7, #12
 800058c:	46bd      	mov	sp, r7
 800058e:	bc80      	pop	{r7}
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop
 8000594:	e000e100 	.word	0xe000e100
 8000598:	e000ed00 	.word	0xe000ed00

0800059c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800059c:	b480      	push	{r7}
 800059e:	b089      	sub	sp, #36	; 0x24
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	60f8      	str	r0, [r7, #12]
 80005a4:	60b9      	str	r1, [r7, #8]
 80005a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80005a8:	68fb      	ldr	r3, [r7, #12]
 80005aa:	f003 0307 	and.w	r3, r3, #7
 80005ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80005b0:	69fb      	ldr	r3, [r7, #28]
 80005b2:	f1c3 0307 	rsb	r3, r3, #7
 80005b6:	2b04      	cmp	r3, #4
 80005b8:	bf28      	it	cs
 80005ba:	2304      	movcs	r3, #4
 80005bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005be:	69fb      	ldr	r3, [r7, #28]
 80005c0:	3304      	adds	r3, #4
 80005c2:	2b06      	cmp	r3, #6
 80005c4:	d902      	bls.n	80005cc <NVIC_EncodePriority+0x30>
 80005c6:	69fb      	ldr	r3, [r7, #28]
 80005c8:	3b03      	subs	r3, #3
 80005ca:	e000      	b.n	80005ce <NVIC_EncodePriority+0x32>
 80005cc:	2300      	movs	r3, #0
 80005ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005d0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80005d4:	69bb      	ldr	r3, [r7, #24]
 80005d6:	fa02 f303 	lsl.w	r3, r2, r3
 80005da:	43da      	mvns	r2, r3
 80005dc:	68bb      	ldr	r3, [r7, #8]
 80005de:	401a      	ands	r2, r3
 80005e0:	697b      	ldr	r3, [r7, #20]
 80005e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80005e4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80005e8:	697b      	ldr	r3, [r7, #20]
 80005ea:	fa01 f303 	lsl.w	r3, r1, r3
 80005ee:	43d9      	mvns	r1, r3
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005f4:	4313      	orrs	r3, r2
         );
}
 80005f6:	4618      	mov	r0, r3
 80005f8:	3724      	adds	r7, #36	; 0x24
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bc80      	pop	{r7}
 80005fe:	4770      	bx	lr

08000600 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b082      	sub	sp, #8
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	3b01      	subs	r3, #1
 800060c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000610:	d301      	bcc.n	8000616 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000612:	2301      	movs	r3, #1
 8000614:	e00f      	b.n	8000636 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000616:	4a0a      	ldr	r2, [pc, #40]	; (8000640 <SysTick_Config+0x40>)
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	3b01      	subs	r3, #1
 800061c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800061e:	210f      	movs	r1, #15
 8000620:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000624:	f7ff ff90 	bl	8000548 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000628:	4b05      	ldr	r3, [pc, #20]	; (8000640 <SysTick_Config+0x40>)
 800062a:	2200      	movs	r2, #0
 800062c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800062e:	4b04      	ldr	r3, [pc, #16]	; (8000640 <SysTick_Config+0x40>)
 8000630:	2207      	movs	r2, #7
 8000632:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000634:	2300      	movs	r3, #0
}
 8000636:	4618      	mov	r0, r3
 8000638:	3708      	adds	r7, #8
 800063a:	46bd      	mov	sp, r7
 800063c:	bd80      	pop	{r7, pc}
 800063e:	bf00      	nop
 8000640:	e000e010 	.word	0xe000e010

08000644 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b082      	sub	sp, #8
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800064c:	6878      	ldr	r0, [r7, #4]
 800064e:	f7ff ff2d 	bl	80004ac <__NVIC_SetPriorityGrouping>
}
 8000652:	bf00      	nop
 8000654:	3708      	adds	r7, #8
 8000656:	46bd      	mov	sp, r7
 8000658:	bd80      	pop	{r7, pc}

0800065a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800065a:	b580      	push	{r7, lr}
 800065c:	b086      	sub	sp, #24
 800065e:	af00      	add	r7, sp, #0
 8000660:	4603      	mov	r3, r0
 8000662:	60b9      	str	r1, [r7, #8]
 8000664:	607a      	str	r2, [r7, #4]
 8000666:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000668:	2300      	movs	r3, #0
 800066a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800066c:	f7ff ff42 	bl	80004f4 <__NVIC_GetPriorityGrouping>
 8000670:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000672:	687a      	ldr	r2, [r7, #4]
 8000674:	68b9      	ldr	r1, [r7, #8]
 8000676:	6978      	ldr	r0, [r7, #20]
 8000678:	f7ff ff90 	bl	800059c <NVIC_EncodePriority>
 800067c:	4602      	mov	r2, r0
 800067e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000682:	4611      	mov	r1, r2
 8000684:	4618      	mov	r0, r3
 8000686:	f7ff ff5f 	bl	8000548 <__NVIC_SetPriority>
}
 800068a:	bf00      	nop
 800068c:	3718      	adds	r7, #24
 800068e:	46bd      	mov	sp, r7
 8000690:	bd80      	pop	{r7, pc}

08000692 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000692:	b580      	push	{r7, lr}
 8000694:	b082      	sub	sp, #8
 8000696:	af00      	add	r7, sp, #0
 8000698:	4603      	mov	r3, r0
 800069a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800069c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006a0:	4618      	mov	r0, r3
 80006a2:	f7ff ff35 	bl	8000510 <__NVIC_EnableIRQ>
}
 80006a6:	bf00      	nop
 80006a8:	3708      	adds	r7, #8
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bd80      	pop	{r7, pc}

080006ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80006ae:	b580      	push	{r7, lr}
 80006b0:	b082      	sub	sp, #8
 80006b2:	af00      	add	r7, sp, #0
 80006b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80006b6:	6878      	ldr	r0, [r7, #4]
 80006b8:	f7ff ffa2 	bl	8000600 <SysTick_Config>
 80006bc:	4603      	mov	r3, r0
}
 80006be:	4618      	mov	r0, r3
 80006c0:	3708      	adds	r7, #8
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd80      	pop	{r7, pc}
	...

080006c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80006c8:	b480      	push	{r7}
 80006ca:	b08b      	sub	sp, #44	; 0x2c
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	6078      	str	r0, [r7, #4]
 80006d0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80006d2:	2300      	movs	r3, #0
 80006d4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80006d6:	2300      	movs	r3, #0
 80006d8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80006da:	e169      	b.n	80009b0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80006dc:	2201      	movs	r2, #1
 80006de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006e0:	fa02 f303 	lsl.w	r3, r2, r3
 80006e4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80006e6:	683b      	ldr	r3, [r7, #0]
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	69fa      	ldr	r2, [r7, #28]
 80006ec:	4013      	ands	r3, r2
 80006ee:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80006f0:	69ba      	ldr	r2, [r7, #24]
 80006f2:	69fb      	ldr	r3, [r7, #28]
 80006f4:	429a      	cmp	r2, r3
 80006f6:	f040 8158 	bne.w	80009aa <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80006fa:	683b      	ldr	r3, [r7, #0]
 80006fc:	685b      	ldr	r3, [r3, #4]
 80006fe:	4a9a      	ldr	r2, [pc, #616]	; (8000968 <HAL_GPIO_Init+0x2a0>)
 8000700:	4293      	cmp	r3, r2
 8000702:	d05e      	beq.n	80007c2 <HAL_GPIO_Init+0xfa>
 8000704:	4a98      	ldr	r2, [pc, #608]	; (8000968 <HAL_GPIO_Init+0x2a0>)
 8000706:	4293      	cmp	r3, r2
 8000708:	d875      	bhi.n	80007f6 <HAL_GPIO_Init+0x12e>
 800070a:	4a98      	ldr	r2, [pc, #608]	; (800096c <HAL_GPIO_Init+0x2a4>)
 800070c:	4293      	cmp	r3, r2
 800070e:	d058      	beq.n	80007c2 <HAL_GPIO_Init+0xfa>
 8000710:	4a96      	ldr	r2, [pc, #600]	; (800096c <HAL_GPIO_Init+0x2a4>)
 8000712:	4293      	cmp	r3, r2
 8000714:	d86f      	bhi.n	80007f6 <HAL_GPIO_Init+0x12e>
 8000716:	4a96      	ldr	r2, [pc, #600]	; (8000970 <HAL_GPIO_Init+0x2a8>)
 8000718:	4293      	cmp	r3, r2
 800071a:	d052      	beq.n	80007c2 <HAL_GPIO_Init+0xfa>
 800071c:	4a94      	ldr	r2, [pc, #592]	; (8000970 <HAL_GPIO_Init+0x2a8>)
 800071e:	4293      	cmp	r3, r2
 8000720:	d869      	bhi.n	80007f6 <HAL_GPIO_Init+0x12e>
 8000722:	4a94      	ldr	r2, [pc, #592]	; (8000974 <HAL_GPIO_Init+0x2ac>)
 8000724:	4293      	cmp	r3, r2
 8000726:	d04c      	beq.n	80007c2 <HAL_GPIO_Init+0xfa>
 8000728:	4a92      	ldr	r2, [pc, #584]	; (8000974 <HAL_GPIO_Init+0x2ac>)
 800072a:	4293      	cmp	r3, r2
 800072c:	d863      	bhi.n	80007f6 <HAL_GPIO_Init+0x12e>
 800072e:	4a92      	ldr	r2, [pc, #584]	; (8000978 <HAL_GPIO_Init+0x2b0>)
 8000730:	4293      	cmp	r3, r2
 8000732:	d046      	beq.n	80007c2 <HAL_GPIO_Init+0xfa>
 8000734:	4a90      	ldr	r2, [pc, #576]	; (8000978 <HAL_GPIO_Init+0x2b0>)
 8000736:	4293      	cmp	r3, r2
 8000738:	d85d      	bhi.n	80007f6 <HAL_GPIO_Init+0x12e>
 800073a:	2b12      	cmp	r3, #18
 800073c:	d82a      	bhi.n	8000794 <HAL_GPIO_Init+0xcc>
 800073e:	2b12      	cmp	r3, #18
 8000740:	d859      	bhi.n	80007f6 <HAL_GPIO_Init+0x12e>
 8000742:	a201      	add	r2, pc, #4	; (adr r2, 8000748 <HAL_GPIO_Init+0x80>)
 8000744:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000748:	080007c3 	.word	0x080007c3
 800074c:	0800079d 	.word	0x0800079d
 8000750:	080007af 	.word	0x080007af
 8000754:	080007f1 	.word	0x080007f1
 8000758:	080007f7 	.word	0x080007f7
 800075c:	080007f7 	.word	0x080007f7
 8000760:	080007f7 	.word	0x080007f7
 8000764:	080007f7 	.word	0x080007f7
 8000768:	080007f7 	.word	0x080007f7
 800076c:	080007f7 	.word	0x080007f7
 8000770:	080007f7 	.word	0x080007f7
 8000774:	080007f7 	.word	0x080007f7
 8000778:	080007f7 	.word	0x080007f7
 800077c:	080007f7 	.word	0x080007f7
 8000780:	080007f7 	.word	0x080007f7
 8000784:	080007f7 	.word	0x080007f7
 8000788:	080007f7 	.word	0x080007f7
 800078c:	080007a5 	.word	0x080007a5
 8000790:	080007b9 	.word	0x080007b9
 8000794:	4a79      	ldr	r2, [pc, #484]	; (800097c <HAL_GPIO_Init+0x2b4>)
 8000796:	4293      	cmp	r3, r2
 8000798:	d013      	beq.n	80007c2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800079a:	e02c      	b.n	80007f6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800079c:	683b      	ldr	r3, [r7, #0]
 800079e:	68db      	ldr	r3, [r3, #12]
 80007a0:	623b      	str	r3, [r7, #32]
          break;
 80007a2:	e029      	b.n	80007f8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80007a4:	683b      	ldr	r3, [r7, #0]
 80007a6:	68db      	ldr	r3, [r3, #12]
 80007a8:	3304      	adds	r3, #4
 80007aa:	623b      	str	r3, [r7, #32]
          break;
 80007ac:	e024      	b.n	80007f8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80007ae:	683b      	ldr	r3, [r7, #0]
 80007b0:	68db      	ldr	r3, [r3, #12]
 80007b2:	3308      	adds	r3, #8
 80007b4:	623b      	str	r3, [r7, #32]
          break;
 80007b6:	e01f      	b.n	80007f8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80007b8:	683b      	ldr	r3, [r7, #0]
 80007ba:	68db      	ldr	r3, [r3, #12]
 80007bc:	330c      	adds	r3, #12
 80007be:	623b      	str	r3, [r7, #32]
          break;
 80007c0:	e01a      	b.n	80007f8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80007c2:	683b      	ldr	r3, [r7, #0]
 80007c4:	689b      	ldr	r3, [r3, #8]
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d102      	bne.n	80007d0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80007ca:	2304      	movs	r3, #4
 80007cc:	623b      	str	r3, [r7, #32]
          break;
 80007ce:	e013      	b.n	80007f8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80007d0:	683b      	ldr	r3, [r7, #0]
 80007d2:	689b      	ldr	r3, [r3, #8]
 80007d4:	2b01      	cmp	r3, #1
 80007d6:	d105      	bne.n	80007e4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80007d8:	2308      	movs	r3, #8
 80007da:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	69fa      	ldr	r2, [r7, #28]
 80007e0:	611a      	str	r2, [r3, #16]
          break;
 80007e2:	e009      	b.n	80007f8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80007e4:	2308      	movs	r3, #8
 80007e6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	69fa      	ldr	r2, [r7, #28]
 80007ec:	615a      	str	r2, [r3, #20]
          break;
 80007ee:	e003      	b.n	80007f8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80007f0:	2300      	movs	r3, #0
 80007f2:	623b      	str	r3, [r7, #32]
          break;
 80007f4:	e000      	b.n	80007f8 <HAL_GPIO_Init+0x130>
          break;
 80007f6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80007f8:	69bb      	ldr	r3, [r7, #24]
 80007fa:	2bff      	cmp	r3, #255	; 0xff
 80007fc:	d801      	bhi.n	8000802 <HAL_GPIO_Init+0x13a>
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	e001      	b.n	8000806 <HAL_GPIO_Init+0x13e>
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	3304      	adds	r3, #4
 8000806:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000808:	69bb      	ldr	r3, [r7, #24]
 800080a:	2bff      	cmp	r3, #255	; 0xff
 800080c:	d802      	bhi.n	8000814 <HAL_GPIO_Init+0x14c>
 800080e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000810:	009b      	lsls	r3, r3, #2
 8000812:	e002      	b.n	800081a <HAL_GPIO_Init+0x152>
 8000814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000816:	3b08      	subs	r3, #8
 8000818:	009b      	lsls	r3, r3, #2
 800081a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800081c:	697b      	ldr	r3, [r7, #20]
 800081e:	681a      	ldr	r2, [r3, #0]
 8000820:	210f      	movs	r1, #15
 8000822:	693b      	ldr	r3, [r7, #16]
 8000824:	fa01 f303 	lsl.w	r3, r1, r3
 8000828:	43db      	mvns	r3, r3
 800082a:	401a      	ands	r2, r3
 800082c:	6a39      	ldr	r1, [r7, #32]
 800082e:	693b      	ldr	r3, [r7, #16]
 8000830:	fa01 f303 	lsl.w	r3, r1, r3
 8000834:	431a      	orrs	r2, r3
 8000836:	697b      	ldr	r3, [r7, #20]
 8000838:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800083a:	683b      	ldr	r3, [r7, #0]
 800083c:	685b      	ldr	r3, [r3, #4]
 800083e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000842:	2b00      	cmp	r3, #0
 8000844:	f000 80b1 	beq.w	80009aa <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000848:	4b4d      	ldr	r3, [pc, #308]	; (8000980 <HAL_GPIO_Init+0x2b8>)
 800084a:	699b      	ldr	r3, [r3, #24]
 800084c:	4a4c      	ldr	r2, [pc, #304]	; (8000980 <HAL_GPIO_Init+0x2b8>)
 800084e:	f043 0301 	orr.w	r3, r3, #1
 8000852:	6193      	str	r3, [r2, #24]
 8000854:	4b4a      	ldr	r3, [pc, #296]	; (8000980 <HAL_GPIO_Init+0x2b8>)
 8000856:	699b      	ldr	r3, [r3, #24]
 8000858:	f003 0301 	and.w	r3, r3, #1
 800085c:	60bb      	str	r3, [r7, #8]
 800085e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000860:	4a48      	ldr	r2, [pc, #288]	; (8000984 <HAL_GPIO_Init+0x2bc>)
 8000862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000864:	089b      	lsrs	r3, r3, #2
 8000866:	3302      	adds	r3, #2
 8000868:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800086c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800086e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000870:	f003 0303 	and.w	r3, r3, #3
 8000874:	009b      	lsls	r3, r3, #2
 8000876:	220f      	movs	r2, #15
 8000878:	fa02 f303 	lsl.w	r3, r2, r3
 800087c:	43db      	mvns	r3, r3
 800087e:	68fa      	ldr	r2, [r7, #12]
 8000880:	4013      	ands	r3, r2
 8000882:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	4a40      	ldr	r2, [pc, #256]	; (8000988 <HAL_GPIO_Init+0x2c0>)
 8000888:	4293      	cmp	r3, r2
 800088a:	d013      	beq.n	80008b4 <HAL_GPIO_Init+0x1ec>
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	4a3f      	ldr	r2, [pc, #252]	; (800098c <HAL_GPIO_Init+0x2c4>)
 8000890:	4293      	cmp	r3, r2
 8000892:	d00d      	beq.n	80008b0 <HAL_GPIO_Init+0x1e8>
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	4a3e      	ldr	r2, [pc, #248]	; (8000990 <HAL_GPIO_Init+0x2c8>)
 8000898:	4293      	cmp	r3, r2
 800089a:	d007      	beq.n	80008ac <HAL_GPIO_Init+0x1e4>
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	4a3d      	ldr	r2, [pc, #244]	; (8000994 <HAL_GPIO_Init+0x2cc>)
 80008a0:	4293      	cmp	r3, r2
 80008a2:	d101      	bne.n	80008a8 <HAL_GPIO_Init+0x1e0>
 80008a4:	2303      	movs	r3, #3
 80008a6:	e006      	b.n	80008b6 <HAL_GPIO_Init+0x1ee>
 80008a8:	2304      	movs	r3, #4
 80008aa:	e004      	b.n	80008b6 <HAL_GPIO_Init+0x1ee>
 80008ac:	2302      	movs	r3, #2
 80008ae:	e002      	b.n	80008b6 <HAL_GPIO_Init+0x1ee>
 80008b0:	2301      	movs	r3, #1
 80008b2:	e000      	b.n	80008b6 <HAL_GPIO_Init+0x1ee>
 80008b4:	2300      	movs	r3, #0
 80008b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80008b8:	f002 0203 	and.w	r2, r2, #3
 80008bc:	0092      	lsls	r2, r2, #2
 80008be:	4093      	lsls	r3, r2
 80008c0:	68fa      	ldr	r2, [r7, #12]
 80008c2:	4313      	orrs	r3, r2
 80008c4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80008c6:	492f      	ldr	r1, [pc, #188]	; (8000984 <HAL_GPIO_Init+0x2bc>)
 80008c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008ca:	089b      	lsrs	r3, r3, #2
 80008cc:	3302      	adds	r3, #2
 80008ce:	68fa      	ldr	r2, [r7, #12]
 80008d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80008d4:	683b      	ldr	r3, [r7, #0]
 80008d6:	685b      	ldr	r3, [r3, #4]
 80008d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d006      	beq.n	80008ee <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80008e0:	4b2d      	ldr	r3, [pc, #180]	; (8000998 <HAL_GPIO_Init+0x2d0>)
 80008e2:	681a      	ldr	r2, [r3, #0]
 80008e4:	492c      	ldr	r1, [pc, #176]	; (8000998 <HAL_GPIO_Init+0x2d0>)
 80008e6:	69bb      	ldr	r3, [r7, #24]
 80008e8:	4313      	orrs	r3, r2
 80008ea:	600b      	str	r3, [r1, #0]
 80008ec:	e006      	b.n	80008fc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80008ee:	4b2a      	ldr	r3, [pc, #168]	; (8000998 <HAL_GPIO_Init+0x2d0>)
 80008f0:	681a      	ldr	r2, [r3, #0]
 80008f2:	69bb      	ldr	r3, [r7, #24]
 80008f4:	43db      	mvns	r3, r3
 80008f6:	4928      	ldr	r1, [pc, #160]	; (8000998 <HAL_GPIO_Init+0x2d0>)
 80008f8:	4013      	ands	r3, r2
 80008fa:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80008fc:	683b      	ldr	r3, [r7, #0]
 80008fe:	685b      	ldr	r3, [r3, #4]
 8000900:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000904:	2b00      	cmp	r3, #0
 8000906:	d006      	beq.n	8000916 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000908:	4b23      	ldr	r3, [pc, #140]	; (8000998 <HAL_GPIO_Init+0x2d0>)
 800090a:	685a      	ldr	r2, [r3, #4]
 800090c:	4922      	ldr	r1, [pc, #136]	; (8000998 <HAL_GPIO_Init+0x2d0>)
 800090e:	69bb      	ldr	r3, [r7, #24]
 8000910:	4313      	orrs	r3, r2
 8000912:	604b      	str	r3, [r1, #4]
 8000914:	e006      	b.n	8000924 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000916:	4b20      	ldr	r3, [pc, #128]	; (8000998 <HAL_GPIO_Init+0x2d0>)
 8000918:	685a      	ldr	r2, [r3, #4]
 800091a:	69bb      	ldr	r3, [r7, #24]
 800091c:	43db      	mvns	r3, r3
 800091e:	491e      	ldr	r1, [pc, #120]	; (8000998 <HAL_GPIO_Init+0x2d0>)
 8000920:	4013      	ands	r3, r2
 8000922:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000924:	683b      	ldr	r3, [r7, #0]
 8000926:	685b      	ldr	r3, [r3, #4]
 8000928:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800092c:	2b00      	cmp	r3, #0
 800092e:	d006      	beq.n	800093e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000930:	4b19      	ldr	r3, [pc, #100]	; (8000998 <HAL_GPIO_Init+0x2d0>)
 8000932:	689a      	ldr	r2, [r3, #8]
 8000934:	4918      	ldr	r1, [pc, #96]	; (8000998 <HAL_GPIO_Init+0x2d0>)
 8000936:	69bb      	ldr	r3, [r7, #24]
 8000938:	4313      	orrs	r3, r2
 800093a:	608b      	str	r3, [r1, #8]
 800093c:	e006      	b.n	800094c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800093e:	4b16      	ldr	r3, [pc, #88]	; (8000998 <HAL_GPIO_Init+0x2d0>)
 8000940:	689a      	ldr	r2, [r3, #8]
 8000942:	69bb      	ldr	r3, [r7, #24]
 8000944:	43db      	mvns	r3, r3
 8000946:	4914      	ldr	r1, [pc, #80]	; (8000998 <HAL_GPIO_Init+0x2d0>)
 8000948:	4013      	ands	r3, r2
 800094a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800094c:	683b      	ldr	r3, [r7, #0]
 800094e:	685b      	ldr	r3, [r3, #4]
 8000950:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000954:	2b00      	cmp	r3, #0
 8000956:	d021      	beq.n	800099c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000958:	4b0f      	ldr	r3, [pc, #60]	; (8000998 <HAL_GPIO_Init+0x2d0>)
 800095a:	68da      	ldr	r2, [r3, #12]
 800095c:	490e      	ldr	r1, [pc, #56]	; (8000998 <HAL_GPIO_Init+0x2d0>)
 800095e:	69bb      	ldr	r3, [r7, #24]
 8000960:	4313      	orrs	r3, r2
 8000962:	60cb      	str	r3, [r1, #12]
 8000964:	e021      	b.n	80009aa <HAL_GPIO_Init+0x2e2>
 8000966:	bf00      	nop
 8000968:	10320000 	.word	0x10320000
 800096c:	10310000 	.word	0x10310000
 8000970:	10220000 	.word	0x10220000
 8000974:	10210000 	.word	0x10210000
 8000978:	10120000 	.word	0x10120000
 800097c:	10110000 	.word	0x10110000
 8000980:	40021000 	.word	0x40021000
 8000984:	40010000 	.word	0x40010000
 8000988:	40010800 	.word	0x40010800
 800098c:	40010c00 	.word	0x40010c00
 8000990:	40011000 	.word	0x40011000
 8000994:	40011400 	.word	0x40011400
 8000998:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800099c:	4b0b      	ldr	r3, [pc, #44]	; (80009cc <HAL_GPIO_Init+0x304>)
 800099e:	68da      	ldr	r2, [r3, #12]
 80009a0:	69bb      	ldr	r3, [r7, #24]
 80009a2:	43db      	mvns	r3, r3
 80009a4:	4909      	ldr	r1, [pc, #36]	; (80009cc <HAL_GPIO_Init+0x304>)
 80009a6:	4013      	ands	r3, r2
 80009a8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80009aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009ac:	3301      	adds	r3, #1
 80009ae:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80009b0:	683b      	ldr	r3, [r7, #0]
 80009b2:	681a      	ldr	r2, [r3, #0]
 80009b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009b6:	fa22 f303 	lsr.w	r3, r2, r3
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	f47f ae8e 	bne.w	80006dc <HAL_GPIO_Init+0x14>
  }
}
 80009c0:	bf00      	nop
 80009c2:	bf00      	nop
 80009c4:	372c      	adds	r7, #44	; 0x2c
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bc80      	pop	{r7}
 80009ca:	4770      	bx	lr
 80009cc:	40010400 	.word	0x40010400

080009d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80009d0:	b480      	push	{r7}
 80009d2:	b083      	sub	sp, #12
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
 80009d8:	460b      	mov	r3, r1
 80009da:	807b      	strh	r3, [r7, #2]
 80009dc:	4613      	mov	r3, r2
 80009de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80009e0:	787b      	ldrb	r3, [r7, #1]
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d003      	beq.n	80009ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80009e6:	887a      	ldrh	r2, [r7, #2]
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80009ec:	e003      	b.n	80009f6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80009ee:	887b      	ldrh	r3, [r7, #2]
 80009f0:	041a      	lsls	r2, r3, #16
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	611a      	str	r2, [r3, #16]
}
 80009f6:	bf00      	nop
 80009f8:	370c      	adds	r7, #12
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bc80      	pop	{r7}
 80009fe:	4770      	bx	lr

08000a00 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000a00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a02:	b08b      	sub	sp, #44	; 0x2c
 8000a04:	af06      	add	r7, sp, #24
 8000a06:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d101      	bne.n	8000a12 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000a0e:	2301      	movs	r3, #1
 8000a10:	e0fd      	b.n	8000c0e <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8000a18:	b2db      	uxtb	r3, r3
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d106      	bne.n	8000a2c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	2200      	movs	r2, #0
 8000a22:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000a26:	6878      	ldr	r0, [r7, #4]
 8000a28:	f007 f9e0 	bl	8007dec <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	2203      	movs	r2, #3
 8000a30:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	4618      	mov	r0, r3
 8000a3a:	f002 f863 	bl	8002b04 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	603b      	str	r3, [r7, #0]
 8000a44:	687e      	ldr	r6, [r7, #4]
 8000a46:	466d      	mov	r5, sp
 8000a48:	f106 0410 	add.w	r4, r6, #16
 8000a4c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000a4e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000a50:	6823      	ldr	r3, [r4, #0]
 8000a52:	602b      	str	r3, [r5, #0]
 8000a54:	1d33      	adds	r3, r6, #4
 8000a56:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000a58:	6838      	ldr	r0, [r7, #0]
 8000a5a:	f002 f82d 	bl	8002ab8 <USB_CoreInit>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d005      	beq.n	8000a70 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	2202      	movs	r2, #2
 8000a68:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8000a6c:	2301      	movs	r3, #1
 8000a6e:	e0ce      	b.n	8000c0e <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	2100      	movs	r1, #0
 8000a76:	4618      	mov	r0, r3
 8000a78:	f002 f85e 	bl	8002b38 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	73fb      	strb	r3, [r7, #15]
 8000a80:	e04c      	b.n	8000b1c <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000a82:	7bfb      	ldrb	r3, [r7, #15]
 8000a84:	6879      	ldr	r1, [r7, #4]
 8000a86:	1c5a      	adds	r2, r3, #1
 8000a88:	4613      	mov	r3, r2
 8000a8a:	009b      	lsls	r3, r3, #2
 8000a8c:	4413      	add	r3, r2
 8000a8e:	00db      	lsls	r3, r3, #3
 8000a90:	440b      	add	r3, r1
 8000a92:	3301      	adds	r3, #1
 8000a94:	2201      	movs	r2, #1
 8000a96:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000a98:	7bfb      	ldrb	r3, [r7, #15]
 8000a9a:	6879      	ldr	r1, [r7, #4]
 8000a9c:	1c5a      	adds	r2, r3, #1
 8000a9e:	4613      	mov	r3, r2
 8000aa0:	009b      	lsls	r3, r3, #2
 8000aa2:	4413      	add	r3, r2
 8000aa4:	00db      	lsls	r3, r3, #3
 8000aa6:	440b      	add	r3, r1
 8000aa8:	7bfa      	ldrb	r2, [r7, #15]
 8000aaa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000aac:	7bfa      	ldrb	r2, [r7, #15]
 8000aae:	7bfb      	ldrb	r3, [r7, #15]
 8000ab0:	b298      	uxth	r0, r3
 8000ab2:	6879      	ldr	r1, [r7, #4]
 8000ab4:	4613      	mov	r3, r2
 8000ab6:	009b      	lsls	r3, r3, #2
 8000ab8:	4413      	add	r3, r2
 8000aba:	00db      	lsls	r3, r3, #3
 8000abc:	440b      	add	r3, r1
 8000abe:	3336      	adds	r3, #54	; 0x36
 8000ac0:	4602      	mov	r2, r0
 8000ac2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000ac4:	7bfb      	ldrb	r3, [r7, #15]
 8000ac6:	6879      	ldr	r1, [r7, #4]
 8000ac8:	1c5a      	adds	r2, r3, #1
 8000aca:	4613      	mov	r3, r2
 8000acc:	009b      	lsls	r3, r3, #2
 8000ace:	4413      	add	r3, r2
 8000ad0:	00db      	lsls	r3, r3, #3
 8000ad2:	440b      	add	r3, r1
 8000ad4:	3303      	adds	r3, #3
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000ada:	7bfa      	ldrb	r2, [r7, #15]
 8000adc:	6879      	ldr	r1, [r7, #4]
 8000ade:	4613      	mov	r3, r2
 8000ae0:	009b      	lsls	r3, r3, #2
 8000ae2:	4413      	add	r3, r2
 8000ae4:	00db      	lsls	r3, r3, #3
 8000ae6:	440b      	add	r3, r1
 8000ae8:	3338      	adds	r3, #56	; 0x38
 8000aea:	2200      	movs	r2, #0
 8000aec:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000aee:	7bfa      	ldrb	r2, [r7, #15]
 8000af0:	6879      	ldr	r1, [r7, #4]
 8000af2:	4613      	mov	r3, r2
 8000af4:	009b      	lsls	r3, r3, #2
 8000af6:	4413      	add	r3, r2
 8000af8:	00db      	lsls	r3, r3, #3
 8000afa:	440b      	add	r3, r1
 8000afc:	333c      	adds	r3, #60	; 0x3c
 8000afe:	2200      	movs	r2, #0
 8000b00:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000b02:	7bfa      	ldrb	r2, [r7, #15]
 8000b04:	6879      	ldr	r1, [r7, #4]
 8000b06:	4613      	mov	r3, r2
 8000b08:	009b      	lsls	r3, r3, #2
 8000b0a:	4413      	add	r3, r2
 8000b0c:	00db      	lsls	r3, r3, #3
 8000b0e:	440b      	add	r3, r1
 8000b10:	3340      	adds	r3, #64	; 0x40
 8000b12:	2200      	movs	r2, #0
 8000b14:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000b16:	7bfb      	ldrb	r3, [r7, #15]
 8000b18:	3301      	adds	r3, #1
 8000b1a:	73fb      	strb	r3, [r7, #15]
 8000b1c:	7bfa      	ldrb	r2, [r7, #15]
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	685b      	ldr	r3, [r3, #4]
 8000b22:	429a      	cmp	r2, r3
 8000b24:	d3ad      	bcc.n	8000a82 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000b26:	2300      	movs	r3, #0
 8000b28:	73fb      	strb	r3, [r7, #15]
 8000b2a:	e044      	b.n	8000bb6 <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000b2c:	7bfa      	ldrb	r2, [r7, #15]
 8000b2e:	6879      	ldr	r1, [r7, #4]
 8000b30:	4613      	mov	r3, r2
 8000b32:	009b      	lsls	r3, r3, #2
 8000b34:	4413      	add	r3, r2
 8000b36:	00db      	lsls	r3, r3, #3
 8000b38:	440b      	add	r3, r1
 8000b3a:	f203 1369 	addw	r3, r3, #361	; 0x169
 8000b3e:	2200      	movs	r2, #0
 8000b40:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8000b42:	7bfa      	ldrb	r2, [r7, #15]
 8000b44:	6879      	ldr	r1, [r7, #4]
 8000b46:	4613      	mov	r3, r2
 8000b48:	009b      	lsls	r3, r3, #2
 8000b4a:	4413      	add	r3, r2
 8000b4c:	00db      	lsls	r3, r3, #3
 8000b4e:	440b      	add	r3, r1
 8000b50:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8000b54:	7bfa      	ldrb	r2, [r7, #15]
 8000b56:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000b58:	7bfa      	ldrb	r2, [r7, #15]
 8000b5a:	6879      	ldr	r1, [r7, #4]
 8000b5c:	4613      	mov	r3, r2
 8000b5e:	009b      	lsls	r3, r3, #2
 8000b60:	4413      	add	r3, r2
 8000b62:	00db      	lsls	r3, r3, #3
 8000b64:	440b      	add	r3, r1
 8000b66:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000b6e:	7bfa      	ldrb	r2, [r7, #15]
 8000b70:	6879      	ldr	r1, [r7, #4]
 8000b72:	4613      	mov	r3, r2
 8000b74:	009b      	lsls	r3, r3, #2
 8000b76:	4413      	add	r3, r2
 8000b78:	00db      	lsls	r3, r3, #3
 8000b7a:	440b      	add	r3, r1
 8000b7c:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8000b80:	2200      	movs	r2, #0
 8000b82:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000b84:	7bfa      	ldrb	r2, [r7, #15]
 8000b86:	6879      	ldr	r1, [r7, #4]
 8000b88:	4613      	mov	r3, r2
 8000b8a:	009b      	lsls	r3, r3, #2
 8000b8c:	4413      	add	r3, r2
 8000b8e:	00db      	lsls	r3, r3, #3
 8000b90:	440b      	add	r3, r1
 8000b92:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8000b96:	2200      	movs	r2, #0
 8000b98:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000b9a:	7bfa      	ldrb	r2, [r7, #15]
 8000b9c:	6879      	ldr	r1, [r7, #4]
 8000b9e:	4613      	mov	r3, r2
 8000ba0:	009b      	lsls	r3, r3, #2
 8000ba2:	4413      	add	r3, r2
 8000ba4:	00db      	lsls	r3, r3, #3
 8000ba6:	440b      	add	r3, r1
 8000ba8:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8000bac:	2200      	movs	r2, #0
 8000bae:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000bb0:	7bfb      	ldrb	r3, [r7, #15]
 8000bb2:	3301      	adds	r3, #1
 8000bb4:	73fb      	strb	r3, [r7, #15]
 8000bb6:	7bfa      	ldrb	r2, [r7, #15]
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	685b      	ldr	r3, [r3, #4]
 8000bbc:	429a      	cmp	r2, r3
 8000bbe:	d3b5      	bcc.n	8000b2c <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	603b      	str	r3, [r7, #0]
 8000bc6:	687e      	ldr	r6, [r7, #4]
 8000bc8:	466d      	mov	r5, sp
 8000bca:	f106 0410 	add.w	r4, r6, #16
 8000bce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000bd0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000bd2:	6823      	ldr	r3, [r4, #0]
 8000bd4:	602b      	str	r3, [r5, #0]
 8000bd6:	1d33      	adds	r3, r6, #4
 8000bd8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000bda:	6838      	ldr	r0, [r7, #0]
 8000bdc:	f001 ffb8 	bl	8002b50 <USB_DevInit>
 8000be0:	4603      	mov	r3, r0
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d005      	beq.n	8000bf2 <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	2202      	movs	r2, #2
 8000bea:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8000bee:	2301      	movs	r3, #1
 8000bf0:	e00d      	b.n	8000c0e <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	2201      	movs	r2, #1
 8000bfe:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	4618      	mov	r0, r3
 8000c08:	f003 ff68 	bl	8004adc <USB_DevDisconnect>

  return HAL_OK;
 8000c0c:	2300      	movs	r3, #0
}
 8000c0e:	4618      	mov	r0, r3
 8000c10:	3714      	adds	r7, #20
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000c16 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8000c16:	b580      	push	{r7, lr}
 8000c18:	b082      	sub	sp, #8
 8000c1a:	af00      	add	r7, sp, #0
 8000c1c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8000c24:	2b01      	cmp	r3, #1
 8000c26:	d101      	bne.n	8000c2c <HAL_PCD_Start+0x16>
 8000c28:	2302      	movs	r3, #2
 8000c2a:	e016      	b.n	8000c5a <HAL_PCD_Start+0x44>
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	2201      	movs	r2, #1
 8000c30:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	4618      	mov	r0, r3
 8000c3a:	f001 ff4d 	bl	8002ad8 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8000c3e:	2101      	movs	r1, #1
 8000c40:	6878      	ldr	r0, [r7, #4]
 8000c42:	f007 fb5c 	bl	80082fe <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	f003 ff3c 	bl	8004ac8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	2200      	movs	r2, #0
 8000c54:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8000c58:	2300      	movs	r3, #0
}
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	3708      	adds	r7, #8
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}

08000c62 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8000c62:	b580      	push	{r7, lr}
 8000c64:	b088      	sub	sp, #32
 8000c66:	af00      	add	r7, sp, #0
 8000c68:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	4618      	mov	r0, r3
 8000c70:	f003 ff3e 	bl	8004af0 <USB_ReadInterrupts>
 8000c74:	4603      	mov	r3, r0
 8000c76:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000c7a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000c7e:	d102      	bne.n	8000c86 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8000c80:	6878      	ldr	r0, [r7, #4]
 8000c82:	f000 fb8e 	bl	80013a2 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	f003 ff30 	bl	8004af0 <USB_ReadInterrupts>
 8000c90:	4603      	mov	r3, r0
 8000c92:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000c96:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000c9a:	d112      	bne.n	8000cc2 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000ca4:	b29a      	uxth	r2, r3
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000cae:	b292      	uxth	r2, r2
 8000cb0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8000cb4:	6878      	ldr	r0, [r7, #4]
 8000cb6:	f007 f914 	bl	8007ee2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8000cba:	2100      	movs	r1, #0
 8000cbc:	6878      	ldr	r0, [r7, #4]
 8000cbe:	f000 f925 	bl	8000f0c <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	f003 ff12 	bl	8004af0 <USB_ReadInterrupts>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cd2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000cd6:	d10b      	bne.n	8000cf0 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000ce0:	b29a      	uxth	r2, r3
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8000cea:	b292      	uxth	r2, r2
 8000cec:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	f003 fefb 	bl	8004af0 <USB_ReadInterrupts>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000d00:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000d04:	d10b      	bne.n	8000d1e <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000d0e:	b29a      	uxth	r2, r3
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8000d18:	b292      	uxth	r2, r2
 8000d1a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	4618      	mov	r0, r3
 8000d24:	f003 fee4 	bl	8004af0 <USB_ReadInterrupts>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000d2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000d32:	d126      	bne.n	8000d82 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000d3c:	b29a      	uxth	r2, r3
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	f022 0204 	bic.w	r2, r2, #4
 8000d46:	b292      	uxth	r2, r2
 8000d48:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000d54:	b29a      	uxth	r2, r3
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	f022 0208 	bic.w	r2, r2, #8
 8000d5e:	b292      	uxth	r2, r2
 8000d60:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8000d64:	6878      	ldr	r0, [r7, #4]
 8000d66:	f007 f8f5 	bl	8007f54 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000d72:	b29a      	uxth	r2, r3
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8000d7c:	b292      	uxth	r2, r2
 8000d7e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	4618      	mov	r0, r3
 8000d88:	f003 feb2 	bl	8004af0 <USB_ReadInterrupts>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000d92:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000d96:	f040 8084 	bne.w	8000ea2 <HAL_PCD_IRQHandler+0x240>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	77fb      	strb	r3, [r7, #31]
 8000d9e:	e011      	b.n	8000dc4 <HAL_PCD_IRQHandler+0x162>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	461a      	mov	r2, r3
 8000da6:	7ffb      	ldrb	r3, [r7, #31]
 8000da8:	009b      	lsls	r3, r3, #2
 8000daa:	441a      	add	r2, r3
 8000dac:	7ffb      	ldrb	r3, [r7, #31]
 8000dae:	8812      	ldrh	r2, [r2, #0]
 8000db0:	b292      	uxth	r2, r2
 8000db2:	005b      	lsls	r3, r3, #1
 8000db4:	f107 0120 	add.w	r1, r7, #32
 8000db8:	440b      	add	r3, r1
 8000dba:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 8000dbe:	7ffb      	ldrb	r3, [r7, #31]
 8000dc0:	3301      	adds	r3, #1
 8000dc2:	77fb      	strb	r3, [r7, #31]
 8000dc4:	7ffb      	ldrb	r3, [r7, #31]
 8000dc6:	2b07      	cmp	r3, #7
 8000dc8:	d9ea      	bls.n	8000da0 <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000dd2:	b29a      	uxth	r2, r3
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	f042 0201 	orr.w	r2, r2, #1
 8000ddc:	b292      	uxth	r2, r2
 8000dde:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000dea:	b29a      	uxth	r2, r3
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	f022 0201 	bic.w	r2, r2, #1
 8000df4:	b292      	uxth	r2, r2
 8000df6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8000dfa:	bf00      	nop
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000e04:	b29b      	uxth	r3, r3
 8000e06:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d0f6      	beq.n	8000dfc <HAL_PCD_IRQHandler+0x19a>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000e16:	b29a      	uxth	r2, r3
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000e20:	b292      	uxth	r2, r2
 8000e22:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8000e26:	2300      	movs	r3, #0
 8000e28:	77fb      	strb	r3, [r7, #31]
 8000e2a:	e010      	b.n	8000e4e <HAL_PCD_IRQHandler+0x1ec>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8000e2c:	7ffb      	ldrb	r3, [r7, #31]
 8000e2e:	687a      	ldr	r2, [r7, #4]
 8000e30:	6812      	ldr	r2, [r2, #0]
 8000e32:	4611      	mov	r1, r2
 8000e34:	7ffa      	ldrb	r2, [r7, #31]
 8000e36:	0092      	lsls	r2, r2, #2
 8000e38:	440a      	add	r2, r1
 8000e3a:	005b      	lsls	r3, r3, #1
 8000e3c:	f107 0120 	add.w	r1, r7, #32
 8000e40:	440b      	add	r3, r1
 8000e42:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8000e46:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8000e48:	7ffb      	ldrb	r3, [r7, #31]
 8000e4a:	3301      	adds	r3, #1
 8000e4c:	77fb      	strb	r3, [r7, #31]
 8000e4e:	7ffb      	ldrb	r3, [r7, #31]
 8000e50:	2b07      	cmp	r3, #7
 8000e52:	d9eb      	bls.n	8000e2c <HAL_PCD_IRQHandler+0x1ca>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000e5c:	b29a      	uxth	r2, r3
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	f042 0208 	orr.w	r2, r2, #8
 8000e66:	b292      	uxth	r2, r2
 8000e68:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000e74:	b29a      	uxth	r2, r3
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000e7e:	b292      	uxth	r2, r2
 8000e80:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000e8c:	b29a      	uxth	r2, r3
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	f042 0204 	orr.w	r2, r2, #4
 8000e96:	b292      	uxth	r2, r2
 8000e98:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8000e9c:	6878      	ldr	r0, [r7, #4]
 8000e9e:	f007 f83f 	bl	8007f20 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	f003 fe22 	bl	8004af0 <USB_ReadInterrupts>
 8000eac:	4603      	mov	r3, r0
 8000eae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000eb2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000eb6:	d10e      	bne.n	8000ed6 <HAL_PCD_IRQHandler+0x274>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000ec0:	b29a      	uxth	r2, r3
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000eca:	b292      	uxth	r2, r2
 8000ecc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8000ed0:	6878      	ldr	r0, [r7, #4]
 8000ed2:	f006 fff8 	bl	8007ec6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	4618      	mov	r0, r3
 8000edc:	f003 fe08 	bl	8004af0 <USB_ReadInterrupts>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ee6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000eea:	d10b      	bne.n	8000f04 <HAL_PCD_IRQHandler+0x2a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000ef4:	b29a      	uxth	r2, r3
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000efe:	b292      	uxth	r2, r2
 8000f00:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8000f04:	bf00      	nop
 8000f06:	3720      	adds	r7, #32
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bd80      	pop	{r7, pc}

08000f0c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b082      	sub	sp, #8
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
 8000f14:	460b      	mov	r3, r1
 8000f16:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8000f1e:	2b01      	cmp	r3, #1
 8000f20:	d101      	bne.n	8000f26 <HAL_PCD_SetAddress+0x1a>
 8000f22:	2302      	movs	r3, #2
 8000f24:	e013      	b.n	8000f4e <HAL_PCD_SetAddress+0x42>
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	2201      	movs	r2, #1
 8000f2a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	78fa      	ldrb	r2, [r7, #3]
 8000f32:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	78fa      	ldrb	r2, [r7, #3]
 8000f3c:	4611      	mov	r1, r2
 8000f3e:	4618      	mov	r0, r3
 8000f40:	f003 fdaf 	bl	8004aa2 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	2200      	movs	r2, #0
 8000f48:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8000f4c:	2300      	movs	r3, #0
}
 8000f4e:	4618      	mov	r0, r3
 8000f50:	3708      	adds	r7, #8
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}

08000f56 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8000f56:	b580      	push	{r7, lr}
 8000f58:	b084      	sub	sp, #16
 8000f5a:	af00      	add	r7, sp, #0
 8000f5c:	6078      	str	r0, [r7, #4]
 8000f5e:	4608      	mov	r0, r1
 8000f60:	4611      	mov	r1, r2
 8000f62:	461a      	mov	r2, r3
 8000f64:	4603      	mov	r3, r0
 8000f66:	70fb      	strb	r3, [r7, #3]
 8000f68:	460b      	mov	r3, r1
 8000f6a:	803b      	strh	r3, [r7, #0]
 8000f6c:	4613      	mov	r3, r2
 8000f6e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8000f70:	2300      	movs	r3, #0
 8000f72:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8000f74:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	da0e      	bge.n	8000f9a <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000f7c:	78fb      	ldrb	r3, [r7, #3]
 8000f7e:	f003 0307 	and.w	r3, r3, #7
 8000f82:	1c5a      	adds	r2, r3, #1
 8000f84:	4613      	mov	r3, r2
 8000f86:	009b      	lsls	r3, r3, #2
 8000f88:	4413      	add	r3, r2
 8000f8a:	00db      	lsls	r3, r3, #3
 8000f8c:	687a      	ldr	r2, [r7, #4]
 8000f8e:	4413      	add	r3, r2
 8000f90:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	2201      	movs	r2, #1
 8000f96:	705a      	strb	r2, [r3, #1]
 8000f98:	e00e      	b.n	8000fb8 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8000f9a:	78fb      	ldrb	r3, [r7, #3]
 8000f9c:	f003 0207 	and.w	r2, r3, #7
 8000fa0:	4613      	mov	r3, r2
 8000fa2:	009b      	lsls	r3, r3, #2
 8000fa4:	4413      	add	r3, r2
 8000fa6:	00db      	lsls	r3, r3, #3
 8000fa8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8000fac:	687a      	ldr	r2, [r7, #4]
 8000fae:	4413      	add	r3, r2
 8000fb0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8000fb8:	78fb      	ldrb	r3, [r7, #3]
 8000fba:	f003 0307 	and.w	r3, r3, #7
 8000fbe:	b2da      	uxtb	r2, r3
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8000fc4:	883a      	ldrh	r2, [r7, #0]
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	78ba      	ldrb	r2, [r7, #2]
 8000fce:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	785b      	ldrb	r3, [r3, #1]
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d004      	beq.n	8000fe2 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	781b      	ldrb	r3, [r3, #0]
 8000fdc:	b29a      	uxth	r2, r3
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8000fe2:	78bb      	ldrb	r3, [r7, #2]
 8000fe4:	2b02      	cmp	r3, #2
 8000fe6:	d102      	bne.n	8000fee <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	2200      	movs	r2, #0
 8000fec:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8000ff4:	2b01      	cmp	r3, #1
 8000ff6:	d101      	bne.n	8000ffc <HAL_PCD_EP_Open+0xa6>
 8000ff8:	2302      	movs	r3, #2
 8000ffa:	e00e      	b.n	800101a <HAL_PCD_EP_Open+0xc4>
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	2201      	movs	r2, #1
 8001000:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	68f9      	ldr	r1, [r7, #12]
 800100a:	4618      	mov	r0, r3
 800100c:	f001 fdd6 	bl	8002bbc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	2200      	movs	r2, #0
 8001014:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8001018:	7afb      	ldrb	r3, [r7, #11]
}
 800101a:	4618      	mov	r0, r3
 800101c:	3710      	adds	r7, #16
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}

08001022 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001022:	b580      	push	{r7, lr}
 8001024:	b084      	sub	sp, #16
 8001026:	af00      	add	r7, sp, #0
 8001028:	6078      	str	r0, [r7, #4]
 800102a:	460b      	mov	r3, r1
 800102c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800102e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001032:	2b00      	cmp	r3, #0
 8001034:	da0e      	bge.n	8001054 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001036:	78fb      	ldrb	r3, [r7, #3]
 8001038:	f003 0307 	and.w	r3, r3, #7
 800103c:	1c5a      	adds	r2, r3, #1
 800103e:	4613      	mov	r3, r2
 8001040:	009b      	lsls	r3, r3, #2
 8001042:	4413      	add	r3, r2
 8001044:	00db      	lsls	r3, r3, #3
 8001046:	687a      	ldr	r2, [r7, #4]
 8001048:	4413      	add	r3, r2
 800104a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	2201      	movs	r2, #1
 8001050:	705a      	strb	r2, [r3, #1]
 8001052:	e00e      	b.n	8001072 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001054:	78fb      	ldrb	r3, [r7, #3]
 8001056:	f003 0207 	and.w	r2, r3, #7
 800105a:	4613      	mov	r3, r2
 800105c:	009b      	lsls	r3, r3, #2
 800105e:	4413      	add	r3, r2
 8001060:	00db      	lsls	r3, r3, #3
 8001062:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001066:	687a      	ldr	r2, [r7, #4]
 8001068:	4413      	add	r3, r2
 800106a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	2200      	movs	r2, #0
 8001070:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001072:	78fb      	ldrb	r3, [r7, #3]
 8001074:	f003 0307 	and.w	r3, r3, #7
 8001078:	b2da      	uxtb	r2, r3
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001084:	2b01      	cmp	r3, #1
 8001086:	d101      	bne.n	800108c <HAL_PCD_EP_Close+0x6a>
 8001088:	2302      	movs	r3, #2
 800108a:	e00e      	b.n	80010aa <HAL_PCD_EP_Close+0x88>
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	2201      	movs	r2, #1
 8001090:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	68f9      	ldr	r1, [r7, #12]
 800109a:	4618      	mov	r0, r3
 800109c:	f002 f8f8 	bl	8003290 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	2200      	movs	r2, #0
 80010a4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 80010a8:	2300      	movs	r3, #0
}
 80010aa:	4618      	mov	r0, r3
 80010ac:	3710      	adds	r7, #16
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}

080010b2 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80010b2:	b580      	push	{r7, lr}
 80010b4:	b086      	sub	sp, #24
 80010b6:	af00      	add	r7, sp, #0
 80010b8:	60f8      	str	r0, [r7, #12]
 80010ba:	607a      	str	r2, [r7, #4]
 80010bc:	603b      	str	r3, [r7, #0]
 80010be:	460b      	mov	r3, r1
 80010c0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80010c2:	7afb      	ldrb	r3, [r7, #11]
 80010c4:	f003 0207 	and.w	r2, r3, #7
 80010c8:	4613      	mov	r3, r2
 80010ca:	009b      	lsls	r3, r3, #2
 80010cc:	4413      	add	r3, r2
 80010ce:	00db      	lsls	r3, r3, #3
 80010d0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80010d4:	68fa      	ldr	r2, [r7, #12]
 80010d6:	4413      	add	r3, r2
 80010d8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80010da:	697b      	ldr	r3, [r7, #20]
 80010dc:	687a      	ldr	r2, [r7, #4]
 80010de:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80010e0:	697b      	ldr	r3, [r7, #20]
 80010e2:	683a      	ldr	r2, [r7, #0]
 80010e4:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80010e6:	697b      	ldr	r3, [r7, #20]
 80010e8:	2200      	movs	r2, #0
 80010ea:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80010ec:	697b      	ldr	r3, [r7, #20]
 80010ee:	2200      	movs	r2, #0
 80010f0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80010f2:	7afb      	ldrb	r3, [r7, #11]
 80010f4:	f003 0307 	and.w	r3, r3, #7
 80010f8:	b2da      	uxtb	r2, r3
 80010fa:	697b      	ldr	r3, [r7, #20]
 80010fc:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80010fe:	7afb      	ldrb	r3, [r7, #11]
 8001100:	f003 0307 	and.w	r3, r3, #7
 8001104:	2b00      	cmp	r3, #0
 8001106:	d106      	bne.n	8001116 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	6979      	ldr	r1, [r7, #20]
 800110e:	4618      	mov	r0, r3
 8001110:	f002 faaa 	bl	8003668 <USB_EPStartXfer>
 8001114:	e005      	b.n	8001122 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	6979      	ldr	r1, [r7, #20]
 800111c:	4618      	mov	r0, r3
 800111e:	f002 faa3 	bl	8003668 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001122:	2300      	movs	r3, #0
}
 8001124:	4618      	mov	r0, r3
 8001126:	3718      	adds	r7, #24
 8001128:	46bd      	mov	sp, r7
 800112a:	bd80      	pop	{r7, pc}

0800112c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800112c:	b480      	push	{r7}
 800112e:	b083      	sub	sp, #12
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
 8001134:	460b      	mov	r3, r1
 8001136:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001138:	78fb      	ldrb	r3, [r7, #3]
 800113a:	f003 0207 	and.w	r2, r3, #7
 800113e:	6879      	ldr	r1, [r7, #4]
 8001140:	4613      	mov	r3, r2
 8001142:	009b      	lsls	r3, r3, #2
 8001144:	4413      	add	r3, r2
 8001146:	00db      	lsls	r3, r3, #3
 8001148:	440b      	add	r3, r1
 800114a:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 800114e:	681b      	ldr	r3, [r3, #0]
}
 8001150:	4618      	mov	r0, r3
 8001152:	370c      	adds	r7, #12
 8001154:	46bd      	mov	sp, r7
 8001156:	bc80      	pop	{r7}
 8001158:	4770      	bx	lr

0800115a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800115a:	b580      	push	{r7, lr}
 800115c:	b086      	sub	sp, #24
 800115e:	af00      	add	r7, sp, #0
 8001160:	60f8      	str	r0, [r7, #12]
 8001162:	607a      	str	r2, [r7, #4]
 8001164:	603b      	str	r3, [r7, #0]
 8001166:	460b      	mov	r3, r1
 8001168:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800116a:	7afb      	ldrb	r3, [r7, #11]
 800116c:	f003 0307 	and.w	r3, r3, #7
 8001170:	1c5a      	adds	r2, r3, #1
 8001172:	4613      	mov	r3, r2
 8001174:	009b      	lsls	r3, r3, #2
 8001176:	4413      	add	r3, r2
 8001178:	00db      	lsls	r3, r3, #3
 800117a:	68fa      	ldr	r2, [r7, #12]
 800117c:	4413      	add	r3, r2
 800117e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001180:	697b      	ldr	r3, [r7, #20]
 8001182:	687a      	ldr	r2, [r7, #4]
 8001184:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001186:	697b      	ldr	r3, [r7, #20]
 8001188:	683a      	ldr	r2, [r7, #0]
 800118a:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 800118c:	697b      	ldr	r3, [r7, #20]
 800118e:	2201      	movs	r2, #1
 8001190:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8001194:	697b      	ldr	r3, [r7, #20]
 8001196:	683a      	ldr	r2, [r7, #0]
 8001198:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 800119a:	697b      	ldr	r3, [r7, #20]
 800119c:	2200      	movs	r2, #0
 800119e:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80011a0:	697b      	ldr	r3, [r7, #20]
 80011a2:	2201      	movs	r2, #1
 80011a4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80011a6:	7afb      	ldrb	r3, [r7, #11]
 80011a8:	f003 0307 	and.w	r3, r3, #7
 80011ac:	b2da      	uxtb	r2, r3
 80011ae:	697b      	ldr	r3, [r7, #20]
 80011b0:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80011b2:	7afb      	ldrb	r3, [r7, #11]
 80011b4:	f003 0307 	and.w	r3, r3, #7
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d106      	bne.n	80011ca <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	6979      	ldr	r1, [r7, #20]
 80011c2:	4618      	mov	r0, r3
 80011c4:	f002 fa50 	bl	8003668 <USB_EPStartXfer>
 80011c8:	e005      	b.n	80011d6 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	6979      	ldr	r1, [r7, #20]
 80011d0:	4618      	mov	r0, r3
 80011d2:	f002 fa49 	bl	8003668 <USB_EPStartXfer>
  }

  return HAL_OK;
 80011d6:	2300      	movs	r3, #0
}
 80011d8:	4618      	mov	r0, r3
 80011da:	3718      	adds	r7, #24
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd80      	pop	{r7, pc}

080011e0 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b084      	sub	sp, #16
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
 80011e8:	460b      	mov	r3, r1
 80011ea:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80011ec:	78fb      	ldrb	r3, [r7, #3]
 80011ee:	f003 0207 	and.w	r2, r3, #7
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	685b      	ldr	r3, [r3, #4]
 80011f6:	429a      	cmp	r2, r3
 80011f8:	d901      	bls.n	80011fe <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80011fa:	2301      	movs	r3, #1
 80011fc:	e04c      	b.n	8001298 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80011fe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001202:	2b00      	cmp	r3, #0
 8001204:	da0e      	bge.n	8001224 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001206:	78fb      	ldrb	r3, [r7, #3]
 8001208:	f003 0307 	and.w	r3, r3, #7
 800120c:	1c5a      	adds	r2, r3, #1
 800120e:	4613      	mov	r3, r2
 8001210:	009b      	lsls	r3, r3, #2
 8001212:	4413      	add	r3, r2
 8001214:	00db      	lsls	r3, r3, #3
 8001216:	687a      	ldr	r2, [r7, #4]
 8001218:	4413      	add	r3, r2
 800121a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	2201      	movs	r2, #1
 8001220:	705a      	strb	r2, [r3, #1]
 8001222:	e00c      	b.n	800123e <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001224:	78fa      	ldrb	r2, [r7, #3]
 8001226:	4613      	mov	r3, r2
 8001228:	009b      	lsls	r3, r3, #2
 800122a:	4413      	add	r3, r2
 800122c:	00db      	lsls	r3, r3, #3
 800122e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001232:	687a      	ldr	r2, [r7, #4]
 8001234:	4413      	add	r3, r2
 8001236:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	2200      	movs	r2, #0
 800123c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	2201      	movs	r2, #1
 8001242:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001244:	78fb      	ldrb	r3, [r7, #3]
 8001246:	f003 0307 	and.w	r3, r3, #7
 800124a:	b2da      	uxtb	r2, r3
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001256:	2b01      	cmp	r3, #1
 8001258:	d101      	bne.n	800125e <HAL_PCD_EP_SetStall+0x7e>
 800125a:	2302      	movs	r3, #2
 800125c:	e01c      	b.n	8001298 <HAL_PCD_EP_SetStall+0xb8>
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	2201      	movs	r2, #1
 8001262:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	68f9      	ldr	r1, [r7, #12]
 800126c:	4618      	mov	r0, r3
 800126e:	f003 fb1b 	bl	80048a8 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001272:	78fb      	ldrb	r3, [r7, #3]
 8001274:	f003 0307 	and.w	r3, r3, #7
 8001278:	2b00      	cmp	r3, #0
 800127a:	d108      	bne.n	800128e <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681a      	ldr	r2, [r3, #0]
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8001286:	4619      	mov	r1, r3
 8001288:	4610      	mov	r0, r2
 800128a:	f003 fc40 	bl	8004b0e <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	2200      	movs	r2, #0
 8001292:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001296:	2300      	movs	r3, #0
}
 8001298:	4618      	mov	r0, r3
 800129a:	3710      	adds	r7, #16
 800129c:	46bd      	mov	sp, r7
 800129e:	bd80      	pop	{r7, pc}

080012a0 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b084      	sub	sp, #16
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
 80012a8:	460b      	mov	r3, r1
 80012aa:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80012ac:	78fb      	ldrb	r3, [r7, #3]
 80012ae:	f003 020f 	and.w	r2, r3, #15
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	685b      	ldr	r3, [r3, #4]
 80012b6:	429a      	cmp	r2, r3
 80012b8:	d901      	bls.n	80012be <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80012ba:	2301      	movs	r3, #1
 80012bc:	e040      	b.n	8001340 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80012be:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	da0e      	bge.n	80012e4 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80012c6:	78fb      	ldrb	r3, [r7, #3]
 80012c8:	f003 0307 	and.w	r3, r3, #7
 80012cc:	1c5a      	adds	r2, r3, #1
 80012ce:	4613      	mov	r3, r2
 80012d0:	009b      	lsls	r3, r3, #2
 80012d2:	4413      	add	r3, r2
 80012d4:	00db      	lsls	r3, r3, #3
 80012d6:	687a      	ldr	r2, [r7, #4]
 80012d8:	4413      	add	r3, r2
 80012da:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	2201      	movs	r2, #1
 80012e0:	705a      	strb	r2, [r3, #1]
 80012e2:	e00e      	b.n	8001302 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80012e4:	78fb      	ldrb	r3, [r7, #3]
 80012e6:	f003 0207 	and.w	r2, r3, #7
 80012ea:	4613      	mov	r3, r2
 80012ec:	009b      	lsls	r3, r3, #2
 80012ee:	4413      	add	r3, r2
 80012f0:	00db      	lsls	r3, r3, #3
 80012f2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80012f6:	687a      	ldr	r2, [r7, #4]
 80012f8:	4413      	add	r3, r2
 80012fa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	2200      	movs	r2, #0
 8001300:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	2200      	movs	r2, #0
 8001306:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001308:	78fb      	ldrb	r3, [r7, #3]
 800130a:	f003 0307 	and.w	r3, r3, #7
 800130e:	b2da      	uxtb	r2, r3
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800131a:	2b01      	cmp	r3, #1
 800131c:	d101      	bne.n	8001322 <HAL_PCD_EP_ClrStall+0x82>
 800131e:	2302      	movs	r3, #2
 8001320:	e00e      	b.n	8001340 <HAL_PCD_EP_ClrStall+0xa0>
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	2201      	movs	r2, #1
 8001326:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	68f9      	ldr	r1, [r7, #12]
 8001330:	4618      	mov	r0, r3
 8001332:	f003 fb09 	bl	8004948 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	2200      	movs	r2, #0
 800133a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800133e:	2300      	movs	r3, #0
}
 8001340:	4618      	mov	r0, r3
 8001342:	3710      	adds	r7, #16
 8001344:	46bd      	mov	sp, r7
 8001346:	bd80      	pop	{r7, pc}

08001348 <HAL_PCD_EP_Flush>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b082      	sub	sp, #8
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
 8001350:	460b      	mov	r3, r1
 8001352:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800135a:	2b01      	cmp	r3, #1
 800135c:	d101      	bne.n	8001362 <HAL_PCD_EP_Flush+0x1a>
 800135e:	2302      	movs	r3, #2
 8001360:	e01b      	b.n	800139a <HAL_PCD_EP_Flush+0x52>
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	2201      	movs	r2, #1
 8001366:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  if ((ep_addr & 0x80U) == 0x80U)
 800136a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800136e:	2b00      	cmp	r3, #0
 8001370:	da09      	bge.n	8001386 <HAL_PCD_EP_Flush+0x3e>
  {
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681a      	ldr	r2, [r3, #0]
 8001376:	78fb      	ldrb	r3, [r7, #3]
 8001378:	f003 0307 	and.w	r3, r3, #7
 800137c:	4619      	mov	r1, r3
 800137e:	4610      	mov	r0, r2
 8001380:	f001 fc06 	bl	8002b90 <USB_FlushTxFifo>
 8001384:	e004      	b.n	8001390 <HAL_PCD_EP_Flush+0x48>
  }
  else
  {
    (void)USB_FlushRxFifo(hpcd->Instance);
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	4618      	mov	r0, r3
 800138c:	f001 fc0b 	bl	8002ba6 <USB_FlushRxFifo>
  }

  __HAL_UNLOCK(hpcd);
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	2200      	movs	r2, #0
 8001394:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001398:	2300      	movs	r3, #0
}
 800139a:	4618      	mov	r0, r3
 800139c:	3708      	adds	r7, #8
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}

080013a2 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80013a2:	b580      	push	{r7, lr}
 80013a4:	b08e      	sub	sp, #56	; 0x38
 80013a6:	af00      	add	r7, sp, #0
 80013a8:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80013aa:	e2df      	b.n	800196c <PCD_EP_ISR_Handler+0x5ca>
  {
    wIstr = hpcd->Instance->ISTR;
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80013b4:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80013b6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80013b8:	b2db      	uxtb	r3, r3
 80013ba:	f003 030f 	and.w	r3, r3, #15
 80013be:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 80013c2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	f040 8158 	bne.w	800167c <PCD_EP_ISR_Handler+0x2da>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80013cc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80013ce:	f003 0310 	and.w	r3, r3, #16
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d152      	bne.n	800147c <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	881b      	ldrh	r3, [r3, #0]
 80013dc:	b29b      	uxth	r3, r3
 80013de:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80013e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80013e6:	81fb      	strh	r3, [r7, #14]
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681a      	ldr	r2, [r3, #0]
 80013ec:	89fb      	ldrh	r3, [r7, #14]
 80013ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80013f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80013f6:	b29b      	uxth	r3, r3
 80013f8:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	3328      	adds	r3, #40	; 0x28
 80013fe:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001408:	b29b      	uxth	r3, r3
 800140a:	461a      	mov	r2, r3
 800140c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800140e:	781b      	ldrb	r3, [r3, #0]
 8001410:	00db      	lsls	r3, r3, #3
 8001412:	4413      	add	r3, r2
 8001414:	3302      	adds	r3, #2
 8001416:	005b      	lsls	r3, r3, #1
 8001418:	687a      	ldr	r2, [r7, #4]
 800141a:	6812      	ldr	r2, [r2, #0]
 800141c:	4413      	add	r3, r2
 800141e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001422:	881b      	ldrh	r3, [r3, #0]
 8001424:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800142a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800142c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800142e:	695a      	ldr	r2, [r3, #20]
 8001430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001432:	69db      	ldr	r3, [r3, #28]
 8001434:	441a      	add	r2, r3
 8001436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001438:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800143a:	2100      	movs	r1, #0
 800143c:	6878      	ldr	r0, [r7, #4]
 800143e:	f006 fd28 	bl	8007e92 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001448:	b2db      	uxtb	r3, r3
 800144a:	2b00      	cmp	r3, #0
 800144c:	f000 828e 	beq.w	800196c <PCD_EP_ISR_Handler+0x5ca>
 8001450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001452:	699b      	ldr	r3, [r3, #24]
 8001454:	2b00      	cmp	r3, #0
 8001456:	f040 8289 	bne.w	800196c <PCD_EP_ISR_Handler+0x5ca>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001460:	b2db      	uxtb	r3, r3
 8001462:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001466:	b2da      	uxtb	r2, r3
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	b292      	uxth	r2, r2
 800146e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	2200      	movs	r2, #0
 8001476:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800147a:	e277      	b.n	800196c <PCD_EP_ISR_Handler+0x5ca>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001482:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	881b      	ldrh	r3, [r3, #0]
 800148a:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800148c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800148e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001492:	2b00      	cmp	r3, #0
 8001494:	d034      	beq.n	8001500 <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800149e:	b29b      	uxth	r3, r3
 80014a0:	461a      	mov	r2, r3
 80014a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014a4:	781b      	ldrb	r3, [r3, #0]
 80014a6:	00db      	lsls	r3, r3, #3
 80014a8:	4413      	add	r3, r2
 80014aa:	3306      	adds	r3, #6
 80014ac:	005b      	lsls	r3, r3, #1
 80014ae:	687a      	ldr	r2, [r7, #4]
 80014b0:	6812      	ldr	r2, [r2, #0]
 80014b2:	4413      	add	r3, r2
 80014b4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80014b8:	881b      	ldrh	r3, [r3, #0]
 80014ba:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80014be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014c0:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	6818      	ldr	r0, [r3, #0]
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 80014cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014ce:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80014d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014d2:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80014d4:	b29b      	uxth	r3, r3
 80014d6:	f003 fb6a 	bl	8004bae <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	881b      	ldrh	r3, [r3, #0]
 80014e0:	b29a      	uxth	r2, r3
 80014e2:	f640 738f 	movw	r3, #3983	; 0xf8f
 80014e6:	4013      	ands	r3, r2
 80014e8:	823b      	strh	r3, [r7, #16]
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	8a3a      	ldrh	r2, [r7, #16]
 80014f0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80014f4:	b292      	uxth	r2, r2
 80014f6:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80014f8:	6878      	ldr	r0, [r7, #4]
 80014fa:	f006 fc9d 	bl	8007e38 <HAL_PCD_SetupStageCallback>
 80014fe:	e235      	b.n	800196c <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001500:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001504:	2b00      	cmp	r3, #0
 8001506:	f280 8231 	bge.w	800196c <PCD_EP_ISR_Handler+0x5ca>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	881b      	ldrh	r3, [r3, #0]
 8001510:	b29a      	uxth	r2, r3
 8001512:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001516:	4013      	ands	r3, r2
 8001518:	83bb      	strh	r3, [r7, #28]
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	8bba      	ldrh	r2, [r7, #28]
 8001520:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001524:	b292      	uxth	r2, r2
 8001526:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001530:	b29b      	uxth	r3, r3
 8001532:	461a      	mov	r2, r3
 8001534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001536:	781b      	ldrb	r3, [r3, #0]
 8001538:	00db      	lsls	r3, r3, #3
 800153a:	4413      	add	r3, r2
 800153c:	3306      	adds	r3, #6
 800153e:	005b      	lsls	r3, r3, #1
 8001540:	687a      	ldr	r2, [r7, #4]
 8001542:	6812      	ldr	r2, [r2, #0]
 8001544:	4413      	add	r3, r2
 8001546:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800154a:	881b      	ldrh	r3, [r3, #0]
 800154c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001552:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001556:	69db      	ldr	r3, [r3, #28]
 8001558:	2b00      	cmp	r3, #0
 800155a:	d019      	beq.n	8001590 <PCD_EP_ISR_Handler+0x1ee>
 800155c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800155e:	695b      	ldr	r3, [r3, #20]
 8001560:	2b00      	cmp	r3, #0
 8001562:	d015      	beq.n	8001590 <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	6818      	ldr	r0, [r3, #0]
 8001568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800156a:	6959      	ldr	r1, [r3, #20]
 800156c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800156e:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8001570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001572:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001574:	b29b      	uxth	r3, r3
 8001576:	f003 fb1a 	bl	8004bae <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800157a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800157c:	695a      	ldr	r2, [r3, #20]
 800157e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001580:	69db      	ldr	r3, [r3, #28]
 8001582:	441a      	add	r2, r3
 8001584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001586:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001588:	2100      	movs	r1, #0
 800158a:	6878      	ldr	r0, [r7, #4]
 800158c:	f006 fc66 	bl	8007e5c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	61bb      	str	r3, [r7, #24]
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800159e:	b29b      	uxth	r3, r3
 80015a0:	461a      	mov	r2, r3
 80015a2:	69bb      	ldr	r3, [r7, #24]
 80015a4:	4413      	add	r3, r2
 80015a6:	61bb      	str	r3, [r7, #24]
 80015a8:	69bb      	ldr	r3, [r7, #24]
 80015aa:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80015ae:	617b      	str	r3, [r7, #20]
 80015b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015b2:	691b      	ldr	r3, [r3, #16]
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d112      	bne.n	80015de <PCD_EP_ISR_Handler+0x23c>
 80015b8:	697b      	ldr	r3, [r7, #20]
 80015ba:	881b      	ldrh	r3, [r3, #0]
 80015bc:	b29b      	uxth	r3, r3
 80015be:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80015c2:	b29a      	uxth	r2, r3
 80015c4:	697b      	ldr	r3, [r7, #20]
 80015c6:	801a      	strh	r2, [r3, #0]
 80015c8:	697b      	ldr	r3, [r7, #20]
 80015ca:	881b      	ldrh	r3, [r3, #0]
 80015cc:	b29b      	uxth	r3, r3
 80015ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80015d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80015d6:	b29a      	uxth	r2, r3
 80015d8:	697b      	ldr	r3, [r7, #20]
 80015da:	801a      	strh	r2, [r3, #0]
 80015dc:	e02f      	b.n	800163e <PCD_EP_ISR_Handler+0x29c>
 80015de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015e0:	691b      	ldr	r3, [r3, #16]
 80015e2:	2b3e      	cmp	r3, #62	; 0x3e
 80015e4:	d813      	bhi.n	800160e <PCD_EP_ISR_Handler+0x26c>
 80015e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015e8:	691b      	ldr	r3, [r3, #16]
 80015ea:	085b      	lsrs	r3, r3, #1
 80015ec:	633b      	str	r3, [r7, #48]	; 0x30
 80015ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015f0:	691b      	ldr	r3, [r3, #16]
 80015f2:	f003 0301 	and.w	r3, r3, #1
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d002      	beq.n	8001600 <PCD_EP_ISR_Handler+0x25e>
 80015fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015fc:	3301      	adds	r3, #1
 80015fe:	633b      	str	r3, [r7, #48]	; 0x30
 8001600:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001602:	b29b      	uxth	r3, r3
 8001604:	029b      	lsls	r3, r3, #10
 8001606:	b29a      	uxth	r2, r3
 8001608:	697b      	ldr	r3, [r7, #20]
 800160a:	801a      	strh	r2, [r3, #0]
 800160c:	e017      	b.n	800163e <PCD_EP_ISR_Handler+0x29c>
 800160e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001610:	691b      	ldr	r3, [r3, #16]
 8001612:	095b      	lsrs	r3, r3, #5
 8001614:	633b      	str	r3, [r7, #48]	; 0x30
 8001616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001618:	691b      	ldr	r3, [r3, #16]
 800161a:	f003 031f 	and.w	r3, r3, #31
 800161e:	2b00      	cmp	r3, #0
 8001620:	d102      	bne.n	8001628 <PCD_EP_ISR_Handler+0x286>
 8001622:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001624:	3b01      	subs	r3, #1
 8001626:	633b      	str	r3, [r7, #48]	; 0x30
 8001628:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800162a:	b29b      	uxth	r3, r3
 800162c:	029b      	lsls	r3, r3, #10
 800162e:	b29b      	uxth	r3, r3
 8001630:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001634:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001638:	b29a      	uxth	r2, r3
 800163a:	697b      	ldr	r3, [r7, #20]
 800163c:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	881b      	ldrh	r3, [r3, #0]
 8001644:	b29b      	uxth	r3, r3
 8001646:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800164a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800164e:	827b      	strh	r3, [r7, #18]
 8001650:	8a7b      	ldrh	r3, [r7, #18]
 8001652:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8001656:	827b      	strh	r3, [r7, #18]
 8001658:	8a7b      	ldrh	r3, [r7, #18]
 800165a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800165e:	827b      	strh	r3, [r7, #18]
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681a      	ldr	r2, [r3, #0]
 8001664:	8a7b      	ldrh	r3, [r7, #18]
 8001666:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800166a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800166e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001672:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001676:	b29b      	uxth	r3, r3
 8001678:	8013      	strh	r3, [r2, #0]
 800167a:	e177      	b.n	800196c <PCD_EP_ISR_Handler+0x5ca>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	461a      	mov	r2, r3
 8001682:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001686:	009b      	lsls	r3, r3, #2
 8001688:	4413      	add	r3, r2
 800168a:	881b      	ldrh	r3, [r3, #0]
 800168c:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800168e:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001692:	2b00      	cmp	r3, #0
 8001694:	f280 80ea 	bge.w	800186c <PCD_EP_ISR_Handler+0x4ca>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	461a      	mov	r2, r3
 800169e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80016a2:	009b      	lsls	r3, r3, #2
 80016a4:	4413      	add	r3, r2
 80016a6:	881b      	ldrh	r3, [r3, #0]
 80016a8:	b29a      	uxth	r2, r3
 80016aa:	f640 738f 	movw	r3, #3983	; 0xf8f
 80016ae:	4013      	ands	r3, r2
 80016b0:	853b      	strh	r3, [r7, #40]	; 0x28
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	461a      	mov	r2, r3
 80016b8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80016bc:	009b      	lsls	r3, r3, #2
 80016be:	4413      	add	r3, r2
 80016c0:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80016c2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80016c6:	b292      	uxth	r2, r2
 80016c8:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80016ca:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80016ce:	4613      	mov	r3, r2
 80016d0:	009b      	lsls	r3, r3, #2
 80016d2:	4413      	add	r3, r2
 80016d4:	00db      	lsls	r3, r3, #3
 80016d6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80016da:	687a      	ldr	r2, [r7, #4]
 80016dc:	4413      	add	r3, r2
 80016de:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80016e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016e2:	7b1b      	ldrb	r3, [r3, #12]
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d122      	bne.n	800172e <PCD_EP_ISR_Handler+0x38c>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80016f0:	b29b      	uxth	r3, r3
 80016f2:	461a      	mov	r2, r3
 80016f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016f6:	781b      	ldrb	r3, [r3, #0]
 80016f8:	00db      	lsls	r3, r3, #3
 80016fa:	4413      	add	r3, r2
 80016fc:	3306      	adds	r3, #6
 80016fe:	005b      	lsls	r3, r3, #1
 8001700:	687a      	ldr	r2, [r7, #4]
 8001702:	6812      	ldr	r2, [r2, #0]
 8001704:	4413      	add	r3, r2
 8001706:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800170a:	881b      	ldrh	r3, [r3, #0]
 800170c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001710:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8001712:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001714:	2b00      	cmp	r3, #0
 8001716:	f000 8087 	beq.w	8001828 <PCD_EP_ISR_Handler+0x486>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	6818      	ldr	r0, [r3, #0]
 800171e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001720:	6959      	ldr	r1, [r3, #20]
 8001722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001724:	88da      	ldrh	r2, [r3, #6]
 8001726:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001728:	f003 fa41 	bl	8004bae <USB_ReadPMA>
 800172c:	e07c      	b.n	8001828 <PCD_EP_ISR_Handler+0x486>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800172e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001730:	78db      	ldrb	r3, [r3, #3]
 8001732:	2b02      	cmp	r3, #2
 8001734:	d108      	bne.n	8001748 <PCD_EP_ISR_Handler+0x3a6>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8001736:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001738:	461a      	mov	r2, r3
 800173a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800173c:	6878      	ldr	r0, [r7, #4]
 800173e:	f000 f923 	bl	8001988 <HAL_PCD_EP_DB_Receive>
 8001742:	4603      	mov	r3, r0
 8001744:	86fb      	strh	r3, [r7, #54]	; 0x36
 8001746:	e06f      	b.n	8001828 <PCD_EP_ISR_Handler+0x486>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	461a      	mov	r2, r3
 800174e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001750:	781b      	ldrb	r3, [r3, #0]
 8001752:	009b      	lsls	r3, r3, #2
 8001754:	4413      	add	r3, r2
 8001756:	881b      	ldrh	r3, [r3, #0]
 8001758:	b29b      	uxth	r3, r3
 800175a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800175e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001762:	847b      	strh	r3, [r7, #34]	; 0x22
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	461a      	mov	r2, r3
 800176a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800176c:	781b      	ldrb	r3, [r3, #0]
 800176e:	009b      	lsls	r3, r3, #2
 8001770:	441a      	add	r2, r3
 8001772:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001774:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001778:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800177c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001780:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001784:	b29b      	uxth	r3, r3
 8001786:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	461a      	mov	r2, r3
 800178e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001790:	781b      	ldrb	r3, [r3, #0]
 8001792:	009b      	lsls	r3, r3, #2
 8001794:	4413      	add	r3, r2
 8001796:	881b      	ldrh	r3, [r3, #0]
 8001798:	b29b      	uxth	r3, r3
 800179a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d021      	beq.n	80017e6 <PCD_EP_ISR_Handler+0x444>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80017aa:	b29b      	uxth	r3, r3
 80017ac:	461a      	mov	r2, r3
 80017ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017b0:	781b      	ldrb	r3, [r3, #0]
 80017b2:	00db      	lsls	r3, r3, #3
 80017b4:	4413      	add	r3, r2
 80017b6:	3302      	adds	r3, #2
 80017b8:	005b      	lsls	r3, r3, #1
 80017ba:	687a      	ldr	r2, [r7, #4]
 80017bc:	6812      	ldr	r2, [r2, #0]
 80017be:	4413      	add	r3, r2
 80017c0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80017c4:	881b      	ldrh	r3, [r3, #0]
 80017c6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80017ca:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 80017cc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d02a      	beq.n	8001828 <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	6818      	ldr	r0, [r3, #0]
 80017d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017d8:	6959      	ldr	r1, [r3, #20]
 80017da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017dc:	891a      	ldrh	r2, [r3, #8]
 80017de:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80017e0:	f003 f9e5 	bl	8004bae <USB_ReadPMA>
 80017e4:	e020      	b.n	8001828 <PCD_EP_ISR_Handler+0x486>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80017ee:	b29b      	uxth	r3, r3
 80017f0:	461a      	mov	r2, r3
 80017f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017f4:	781b      	ldrb	r3, [r3, #0]
 80017f6:	00db      	lsls	r3, r3, #3
 80017f8:	4413      	add	r3, r2
 80017fa:	3306      	adds	r3, #6
 80017fc:	005b      	lsls	r3, r3, #1
 80017fe:	687a      	ldr	r2, [r7, #4]
 8001800:	6812      	ldr	r2, [r2, #0]
 8001802:	4413      	add	r3, r2
 8001804:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001808:	881b      	ldrh	r3, [r3, #0]
 800180a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800180e:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8001810:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001812:	2b00      	cmp	r3, #0
 8001814:	d008      	beq.n	8001828 <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	6818      	ldr	r0, [r3, #0]
 800181a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800181c:	6959      	ldr	r1, [r3, #20]
 800181e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001820:	895a      	ldrh	r2, [r3, #10]
 8001822:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001824:	f003 f9c3 	bl	8004bae <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8001828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800182a:	69da      	ldr	r2, [r3, #28]
 800182c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800182e:	441a      	add	r2, r3
 8001830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001832:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8001834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001836:	695a      	ldr	r2, [r3, #20]
 8001838:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800183a:	441a      	add	r2, r3
 800183c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800183e:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8001840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001842:	699b      	ldr	r3, [r3, #24]
 8001844:	2b00      	cmp	r3, #0
 8001846:	d004      	beq.n	8001852 <PCD_EP_ISR_Handler+0x4b0>
 8001848:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800184a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800184c:	691b      	ldr	r3, [r3, #16]
 800184e:	429a      	cmp	r2, r3
 8001850:	d206      	bcs.n	8001860 <PCD_EP_ISR_Handler+0x4be>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8001852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001854:	781b      	ldrb	r3, [r3, #0]
 8001856:	4619      	mov	r1, r3
 8001858:	6878      	ldr	r0, [r7, #4]
 800185a:	f006 faff 	bl	8007e5c <HAL_PCD_DataOutStageCallback>
 800185e:	e005      	b.n	800186c <PCD_EP_ISR_Handler+0x4ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001866:	4618      	mov	r0, r3
 8001868:	f001 fefe 	bl	8003668 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800186c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800186e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001872:	2b00      	cmp	r3, #0
 8001874:	d07a      	beq.n	800196c <PCD_EP_ISR_Handler+0x5ca>
      {
        ep = &hpcd->IN_ep[epindex];
 8001876:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800187a:	1c5a      	adds	r2, r3, #1
 800187c:	4613      	mov	r3, r2
 800187e:	009b      	lsls	r3, r3, #2
 8001880:	4413      	add	r3, r2
 8001882:	00db      	lsls	r3, r3, #3
 8001884:	687a      	ldr	r2, [r7, #4]
 8001886:	4413      	add	r3, r2
 8001888:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	461a      	mov	r2, r3
 8001890:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001894:	009b      	lsls	r3, r3, #2
 8001896:	4413      	add	r3, r2
 8001898:	881b      	ldrh	r3, [r3, #0]
 800189a:	b29b      	uxth	r3, r3
 800189c:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80018a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80018a4:	843b      	strh	r3, [r7, #32]
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	461a      	mov	r2, r3
 80018ac:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80018b0:	009b      	lsls	r3, r3, #2
 80018b2:	441a      	add	r2, r3
 80018b4:	8c3b      	ldrh	r3, [r7, #32]
 80018b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80018ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80018be:	b29b      	uxth	r3, r3
 80018c0:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk transaction or Bulk Single Buffer Transaction */
        if ((ep->type != EP_TYPE_BULK) ||
 80018c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018c4:	78db      	ldrb	r3, [r3, #3]
 80018c6:	2b02      	cmp	r3, #2
 80018c8:	d108      	bne.n	80018dc <PCD_EP_ISR_Handler+0x53a>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 80018ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018cc:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type != EP_TYPE_BULK) ||
 80018ce:	2b02      	cmp	r3, #2
 80018d0:	d146      	bne.n	8001960 <PCD_EP_ISR_Handler+0x5be>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 80018d2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80018d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d141      	bne.n	8001960 <PCD_EP_ISR_Handler+0x5be>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80018e4:	b29b      	uxth	r3, r3
 80018e6:	461a      	mov	r2, r3
 80018e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ea:	781b      	ldrb	r3, [r3, #0]
 80018ec:	00db      	lsls	r3, r3, #3
 80018ee:	4413      	add	r3, r2
 80018f0:	3302      	adds	r3, #2
 80018f2:	005b      	lsls	r3, r3, #1
 80018f4:	687a      	ldr	r2, [r7, #4]
 80018f6:	6812      	ldr	r2, [r2, #0]
 80018f8:	4413      	add	r3, r2
 80018fa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80018fe:	881b      	ldrh	r3, [r3, #0]
 8001900:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001904:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8001906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001908:	699a      	ldr	r2, [r3, #24]
 800190a:	8bfb      	ldrh	r3, [r7, #30]
 800190c:	429a      	cmp	r2, r3
 800190e:	d906      	bls.n	800191e <PCD_EP_ISR_Handler+0x57c>
          {
            ep->xfer_len -= TxByteNbre;
 8001910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001912:	699a      	ldr	r2, [r3, #24]
 8001914:	8bfb      	ldrh	r3, [r7, #30]
 8001916:	1ad2      	subs	r2, r2, r3
 8001918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800191a:	619a      	str	r2, [r3, #24]
 800191c:	e002      	b.n	8001924 <PCD_EP_ISR_Handler+0x582>
          }
          else
          {
            ep->xfer_len = 0U;
 800191e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001920:	2200      	movs	r2, #0
 8001922:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8001924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001926:	699b      	ldr	r3, [r3, #24]
 8001928:	2b00      	cmp	r3, #0
 800192a:	d106      	bne.n	800193a <PCD_EP_ISR_Handler+0x598>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800192c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800192e:	781b      	ldrb	r3, [r3, #0]
 8001930:	4619      	mov	r1, r3
 8001932:	6878      	ldr	r0, [r7, #4]
 8001934:	f006 faad 	bl	8007e92 <HAL_PCD_DataInStageCallback>
 8001938:	e018      	b.n	800196c <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 800193a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800193c:	695a      	ldr	r2, [r3, #20]
 800193e:	8bfb      	ldrh	r3, [r7, #30]
 8001940:	441a      	add	r2, r3
 8001942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001944:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8001946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001948:	69da      	ldr	r2, [r3, #28]
 800194a:	8bfb      	ldrh	r3, [r7, #30]
 800194c:	441a      	add	r2, r3
 800194e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001950:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001958:	4618      	mov	r0, r3
 800195a:	f001 fe85 	bl	8003668 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 800195e:	e005      	b.n	800196c <PCD_EP_ISR_Handler+0x5ca>
          }
        }
        /* bulk in double buffer enable in case of transferLen> Ep_Mps */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8001960:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001962:	461a      	mov	r2, r3
 8001964:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001966:	6878      	ldr	r0, [r7, #4]
 8001968:	f000 f91b 	bl	8001ba2 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001974:	b29b      	uxth	r3, r3
 8001976:	b21b      	sxth	r3, r3
 8001978:	2b00      	cmp	r3, #0
 800197a:	f6ff ad17 	blt.w	80013ac <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 800197e:	2300      	movs	r3, #0
}
 8001980:	4618      	mov	r0, r3
 8001982:	3738      	adds	r7, #56	; 0x38
 8001984:	46bd      	mov	sp, r7
 8001986:	bd80      	pop	{r7, pc}

08001988 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b088      	sub	sp, #32
 800198c:	af00      	add	r7, sp, #0
 800198e:	60f8      	str	r0, [r7, #12]
 8001990:	60b9      	str	r1, [r7, #8]
 8001992:	4613      	mov	r3, r2
 8001994:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001996:	88fb      	ldrh	r3, [r7, #6]
 8001998:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800199c:	2b00      	cmp	r3, #0
 800199e:	d07e      	beq.n	8001a9e <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80019a8:	b29b      	uxth	r3, r3
 80019aa:	461a      	mov	r2, r3
 80019ac:	68bb      	ldr	r3, [r7, #8]
 80019ae:	781b      	ldrb	r3, [r3, #0]
 80019b0:	00db      	lsls	r3, r3, #3
 80019b2:	4413      	add	r3, r2
 80019b4:	3302      	adds	r3, #2
 80019b6:	005b      	lsls	r3, r3, #1
 80019b8:	68fa      	ldr	r2, [r7, #12]
 80019ba:	6812      	ldr	r2, [r2, #0]
 80019bc:	4413      	add	r3, r2
 80019be:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80019c2:	881b      	ldrh	r3, [r3, #0]
 80019c4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80019c8:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80019ca:	68bb      	ldr	r3, [r7, #8]
 80019cc:	699a      	ldr	r2, [r3, #24]
 80019ce:	8b7b      	ldrh	r3, [r7, #26]
 80019d0:	429a      	cmp	r2, r3
 80019d2:	d306      	bcc.n	80019e2 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 80019d4:	68bb      	ldr	r3, [r7, #8]
 80019d6:	699a      	ldr	r2, [r3, #24]
 80019d8:	8b7b      	ldrh	r3, [r7, #26]
 80019da:	1ad2      	subs	r2, r2, r3
 80019dc:	68bb      	ldr	r3, [r7, #8]
 80019de:	619a      	str	r2, [r3, #24]
 80019e0:	e002      	b.n	80019e8 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 80019e2:	68bb      	ldr	r3, [r7, #8]
 80019e4:	2200      	movs	r2, #0
 80019e6:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80019e8:	68bb      	ldr	r3, [r7, #8]
 80019ea:	699b      	ldr	r3, [r3, #24]
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d123      	bne.n	8001a38 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	461a      	mov	r2, r3
 80019f6:	68bb      	ldr	r3, [r7, #8]
 80019f8:	781b      	ldrb	r3, [r3, #0]
 80019fa:	009b      	lsls	r3, r3, #2
 80019fc:	4413      	add	r3, r2
 80019fe:	881b      	ldrh	r3, [r3, #0]
 8001a00:	b29b      	uxth	r3, r3
 8001a02:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001a06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001a0a:	833b      	strh	r3, [r7, #24]
 8001a0c:	8b3b      	ldrh	r3, [r7, #24]
 8001a0e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001a12:	833b      	strh	r3, [r7, #24]
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	461a      	mov	r2, r3
 8001a1a:	68bb      	ldr	r3, [r7, #8]
 8001a1c:	781b      	ldrb	r3, [r3, #0]
 8001a1e:	009b      	lsls	r3, r3, #2
 8001a20:	441a      	add	r2, r3
 8001a22:	8b3b      	ldrh	r3, [r7, #24]
 8001a24:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001a28:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001a2c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001a30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a34:	b29b      	uxth	r3, r3
 8001a36:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001a38:	88fb      	ldrh	r3, [r7, #6]
 8001a3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d01f      	beq.n	8001a82 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	461a      	mov	r2, r3
 8001a48:	68bb      	ldr	r3, [r7, #8]
 8001a4a:	781b      	ldrb	r3, [r3, #0]
 8001a4c:	009b      	lsls	r3, r3, #2
 8001a4e:	4413      	add	r3, r2
 8001a50:	881b      	ldrh	r3, [r3, #0]
 8001a52:	b29b      	uxth	r3, r3
 8001a54:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001a58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001a5c:	82fb      	strh	r3, [r7, #22]
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	461a      	mov	r2, r3
 8001a64:	68bb      	ldr	r3, [r7, #8]
 8001a66:	781b      	ldrb	r3, [r3, #0]
 8001a68:	009b      	lsls	r3, r3, #2
 8001a6a:	441a      	add	r2, r3
 8001a6c:	8afb      	ldrh	r3, [r7, #22]
 8001a6e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001a72:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001a76:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001a7a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001a7e:	b29b      	uxth	r3, r3
 8001a80:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8001a82:	8b7b      	ldrh	r3, [r7, #26]
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	f000 8087 	beq.w	8001b98 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	6818      	ldr	r0, [r3, #0]
 8001a8e:	68bb      	ldr	r3, [r7, #8]
 8001a90:	6959      	ldr	r1, [r3, #20]
 8001a92:	68bb      	ldr	r3, [r7, #8]
 8001a94:	891a      	ldrh	r2, [r3, #8]
 8001a96:	8b7b      	ldrh	r3, [r7, #26]
 8001a98:	f003 f889 	bl	8004bae <USB_ReadPMA>
 8001a9c:	e07c      	b.n	8001b98 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001aa6:	b29b      	uxth	r3, r3
 8001aa8:	461a      	mov	r2, r3
 8001aaa:	68bb      	ldr	r3, [r7, #8]
 8001aac:	781b      	ldrb	r3, [r3, #0]
 8001aae:	00db      	lsls	r3, r3, #3
 8001ab0:	4413      	add	r3, r2
 8001ab2:	3306      	adds	r3, #6
 8001ab4:	005b      	lsls	r3, r3, #1
 8001ab6:	68fa      	ldr	r2, [r7, #12]
 8001ab8:	6812      	ldr	r2, [r2, #0]
 8001aba:	4413      	add	r3, r2
 8001abc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001ac0:	881b      	ldrh	r3, [r3, #0]
 8001ac2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001ac6:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8001ac8:	68bb      	ldr	r3, [r7, #8]
 8001aca:	699a      	ldr	r2, [r3, #24]
 8001acc:	8b7b      	ldrh	r3, [r7, #26]
 8001ace:	429a      	cmp	r2, r3
 8001ad0:	d306      	bcc.n	8001ae0 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8001ad2:	68bb      	ldr	r3, [r7, #8]
 8001ad4:	699a      	ldr	r2, [r3, #24]
 8001ad6:	8b7b      	ldrh	r3, [r7, #26]
 8001ad8:	1ad2      	subs	r2, r2, r3
 8001ada:	68bb      	ldr	r3, [r7, #8]
 8001adc:	619a      	str	r2, [r3, #24]
 8001ade:	e002      	b.n	8001ae6 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8001ae0:	68bb      	ldr	r3, [r7, #8]
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001ae6:	68bb      	ldr	r3, [r7, #8]
 8001ae8:	699b      	ldr	r3, [r3, #24]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d123      	bne.n	8001b36 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	461a      	mov	r2, r3
 8001af4:	68bb      	ldr	r3, [r7, #8]
 8001af6:	781b      	ldrb	r3, [r3, #0]
 8001af8:	009b      	lsls	r3, r3, #2
 8001afa:	4413      	add	r3, r2
 8001afc:	881b      	ldrh	r3, [r3, #0]
 8001afe:	b29b      	uxth	r3, r3
 8001b00:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001b04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001b08:	83fb      	strh	r3, [r7, #30]
 8001b0a:	8bfb      	ldrh	r3, [r7, #30]
 8001b0c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001b10:	83fb      	strh	r3, [r7, #30]
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	461a      	mov	r2, r3
 8001b18:	68bb      	ldr	r3, [r7, #8]
 8001b1a:	781b      	ldrb	r3, [r3, #0]
 8001b1c:	009b      	lsls	r3, r3, #2
 8001b1e:	441a      	add	r2, r3
 8001b20:	8bfb      	ldrh	r3, [r7, #30]
 8001b22:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001b26:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001b2a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b32:	b29b      	uxth	r3, r3
 8001b34:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8001b36:	88fb      	ldrh	r3, [r7, #6]
 8001b38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d11f      	bne.n	8001b80 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	461a      	mov	r2, r3
 8001b46:	68bb      	ldr	r3, [r7, #8]
 8001b48:	781b      	ldrb	r3, [r3, #0]
 8001b4a:	009b      	lsls	r3, r3, #2
 8001b4c:	4413      	add	r3, r2
 8001b4e:	881b      	ldrh	r3, [r3, #0]
 8001b50:	b29b      	uxth	r3, r3
 8001b52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001b56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001b5a:	83bb      	strh	r3, [r7, #28]
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	461a      	mov	r2, r3
 8001b62:	68bb      	ldr	r3, [r7, #8]
 8001b64:	781b      	ldrb	r3, [r3, #0]
 8001b66:	009b      	lsls	r3, r3, #2
 8001b68:	441a      	add	r2, r3
 8001b6a:	8bbb      	ldrh	r3, [r7, #28]
 8001b6c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001b70:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001b74:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b78:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001b7c:	b29b      	uxth	r3, r3
 8001b7e:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8001b80:	8b7b      	ldrh	r3, [r7, #26]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d008      	beq.n	8001b98 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	6818      	ldr	r0, [r3, #0]
 8001b8a:	68bb      	ldr	r3, [r7, #8]
 8001b8c:	6959      	ldr	r1, [r3, #20]
 8001b8e:	68bb      	ldr	r3, [r7, #8]
 8001b90:	895a      	ldrh	r2, [r3, #10]
 8001b92:	8b7b      	ldrh	r3, [r7, #26]
 8001b94:	f003 f80b 	bl	8004bae <USB_ReadPMA>
    }
  }

  return count;
 8001b98:	8b7b      	ldrh	r3, [r7, #26]
}
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	3720      	adds	r7, #32
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd80      	pop	{r7, pc}

08001ba2 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8001ba2:	b580      	push	{r7, lr}
 8001ba4:	b094      	sub	sp, #80	; 0x50
 8001ba6:	af00      	add	r7, sp, #0
 8001ba8:	60f8      	str	r0, [r7, #12]
 8001baa:	60b9      	str	r1, [r7, #8]
 8001bac:	4613      	mov	r3, r2
 8001bae:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001bb0:	88fb      	ldrh	r3, [r7, #6]
 8001bb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	f000 8138 	beq.w	8001e2c <HAL_PCD_EP_DB_Transmit+0x28a>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001bc4:	b29b      	uxth	r3, r3
 8001bc6:	461a      	mov	r2, r3
 8001bc8:	68bb      	ldr	r3, [r7, #8]
 8001bca:	781b      	ldrb	r3, [r3, #0]
 8001bcc:	00db      	lsls	r3, r3, #3
 8001bce:	4413      	add	r3, r2
 8001bd0:	3302      	adds	r3, #2
 8001bd2:	005b      	lsls	r3, r3, #1
 8001bd4:	68fa      	ldr	r2, [r7, #12]
 8001bd6:	6812      	ldr	r2, [r2, #0]
 8001bd8:	4413      	add	r3, r2
 8001bda:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001bde:	881b      	ldrh	r3, [r3, #0]
 8001be0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001be4:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

    if (ep->xfer_len > TxByteNbre)
 8001be8:	68bb      	ldr	r3, [r7, #8]
 8001bea:	699a      	ldr	r2, [r3, #24]
 8001bec:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8001bf0:	429a      	cmp	r2, r3
 8001bf2:	d907      	bls.n	8001c04 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 8001bf4:	68bb      	ldr	r3, [r7, #8]
 8001bf6:	699a      	ldr	r2, [r3, #24]
 8001bf8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8001bfc:	1ad2      	subs	r2, r2, r3
 8001bfe:	68bb      	ldr	r3, [r7, #8]
 8001c00:	619a      	str	r2, [r3, #24]
 8001c02:	e002      	b.n	8001c0a <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8001c04:	68bb      	ldr	r3, [r7, #8]
 8001c06:	2200      	movs	r2, #0
 8001c08:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8001c0a:	68bb      	ldr	r3, [r7, #8]
 8001c0c:	699b      	ldr	r3, [r3, #24]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d12c      	bne.n	8001c6c <HAL_PCD_EP_DB_Transmit+0xca>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001c12:	68bb      	ldr	r3, [r7, #8]
 8001c14:	781b      	ldrb	r3, [r3, #0]
 8001c16:	4619      	mov	r1, r3
 8001c18:	68f8      	ldr	r0, [r7, #12]
 8001c1a:	f006 f93a 	bl	8007e92 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001c1e:	88fb      	ldrh	r3, [r7, #6]
 8001c20:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	f000 823a 	beq.w	800209e <HAL_PCD_EP_DB_Transmit+0x4fc>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	461a      	mov	r2, r3
 8001c30:	68bb      	ldr	r3, [r7, #8]
 8001c32:	781b      	ldrb	r3, [r3, #0]
 8001c34:	009b      	lsls	r3, r3, #2
 8001c36:	4413      	add	r3, r2
 8001c38:	881b      	ldrh	r3, [r3, #0]
 8001c3a:	b29b      	uxth	r3, r3
 8001c3c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001c40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001c44:	82fb      	strh	r3, [r7, #22]
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	461a      	mov	r2, r3
 8001c4c:	68bb      	ldr	r3, [r7, #8]
 8001c4e:	781b      	ldrb	r3, [r3, #0]
 8001c50:	009b      	lsls	r3, r3, #2
 8001c52:	441a      	add	r2, r3
 8001c54:	8afb      	ldrh	r3, [r7, #22]
 8001c56:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001c5a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001c5e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001c62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c66:	b29b      	uxth	r3, r3
 8001c68:	8013      	strh	r3, [r2, #0]
 8001c6a:	e218      	b.n	800209e <HAL_PCD_EP_DB_Transmit+0x4fc>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001c6c:	88fb      	ldrh	r3, [r7, #6]
 8001c6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d01f      	beq.n	8001cb6 <HAL_PCD_EP_DB_Transmit+0x114>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	461a      	mov	r2, r3
 8001c7c:	68bb      	ldr	r3, [r7, #8]
 8001c7e:	781b      	ldrb	r3, [r3, #0]
 8001c80:	009b      	lsls	r3, r3, #2
 8001c82:	4413      	add	r3, r2
 8001c84:	881b      	ldrh	r3, [r3, #0]
 8001c86:	b29b      	uxth	r3, r3
 8001c88:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001c8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001c90:	857b      	strh	r3, [r7, #42]	; 0x2a
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	461a      	mov	r2, r3
 8001c98:	68bb      	ldr	r3, [r7, #8]
 8001c9a:	781b      	ldrb	r3, [r3, #0]
 8001c9c:	009b      	lsls	r3, r3, #2
 8001c9e:	441a      	add	r2, r3
 8001ca0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001ca2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001ca6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001caa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001cae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001cb2:	b29b      	uxth	r3, r3
 8001cb4:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8001cb6:	68bb      	ldr	r3, [r7, #8]
 8001cb8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001cbc:	2b01      	cmp	r3, #1
 8001cbe:	f040 81ee 	bne.w	800209e <HAL_PCD_EP_DB_Transmit+0x4fc>
      {
        ep->xfer_buff += TxByteNbre;
 8001cc2:	68bb      	ldr	r3, [r7, #8]
 8001cc4:	695a      	ldr	r2, [r3, #20]
 8001cc6:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8001cca:	441a      	add	r2, r3
 8001ccc:	68bb      	ldr	r3, [r7, #8]
 8001cce:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8001cd0:	68bb      	ldr	r3, [r7, #8]
 8001cd2:	69da      	ldr	r2, [r3, #28]
 8001cd4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8001cd8:	441a      	add	r2, r3
 8001cda:	68bb      	ldr	r3, [r7, #8]
 8001cdc:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8001cde:	68bb      	ldr	r3, [r7, #8]
 8001ce0:	6a1a      	ldr	r2, [r3, #32]
 8001ce2:	68bb      	ldr	r3, [r7, #8]
 8001ce4:	691b      	ldr	r3, [r3, #16]
 8001ce6:	429a      	cmp	r2, r3
 8001ce8:	d309      	bcc.n	8001cfe <HAL_PCD_EP_DB_Transmit+0x15c>
        {
          len = ep->maxpacket;
 8001cea:	68bb      	ldr	r3, [r7, #8]
 8001cec:	691b      	ldr	r3, [r3, #16]
 8001cee:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db -= len;
 8001cf0:	68bb      	ldr	r3, [r7, #8]
 8001cf2:	6a1a      	ldr	r2, [r3, #32]
 8001cf4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001cf6:	1ad2      	subs	r2, r2, r3
 8001cf8:	68bb      	ldr	r3, [r7, #8]
 8001cfa:	621a      	str	r2, [r3, #32]
 8001cfc:	e015      	b.n	8001d2a <HAL_PCD_EP_DB_Transmit+0x188>
        }
        else if (ep->xfer_len_db == 0U)
 8001cfe:	68bb      	ldr	r3, [r7, #8]
 8001d00:	6a1b      	ldr	r3, [r3, #32]
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d107      	bne.n	8001d16 <HAL_PCD_EP_DB_Transmit+0x174>
        {
          len = TxByteNbre;
 8001d06:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8001d0a:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_fill_db = 0U;
 8001d0c:	68bb      	ldr	r3, [r7, #8]
 8001d0e:	2200      	movs	r2, #0
 8001d10:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001d14:	e009      	b.n	8001d2a <HAL_PCD_EP_DB_Transmit+0x188>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8001d16:	68bb      	ldr	r3, [r7, #8]
 8001d18:	2200      	movs	r2, #0
 8001d1a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8001d1e:	68bb      	ldr	r3, [r7, #8]
 8001d20:	6a1b      	ldr	r3, [r3, #32]
 8001d22:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db = 0U;
 8001d24:	68bb      	ldr	r3, [r7, #8]
 8001d26:	2200      	movs	r2, #0
 8001d28:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8001d2a:	68bb      	ldr	r3, [r7, #8]
 8001d2c:	785b      	ldrb	r3, [r3, #1]
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d155      	bne.n	8001dde <HAL_PCD_EP_DB_Transmit+0x23c>
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	61fb      	str	r3, [r7, #28]
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001d40:	b29b      	uxth	r3, r3
 8001d42:	461a      	mov	r2, r3
 8001d44:	69fb      	ldr	r3, [r7, #28]
 8001d46:	4413      	add	r3, r2
 8001d48:	61fb      	str	r3, [r7, #28]
 8001d4a:	68bb      	ldr	r3, [r7, #8]
 8001d4c:	781b      	ldrb	r3, [r3, #0]
 8001d4e:	011a      	lsls	r2, r3, #4
 8001d50:	69fb      	ldr	r3, [r7, #28]
 8001d52:	4413      	add	r3, r2
 8001d54:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8001d58:	61bb      	str	r3, [r7, #24]
 8001d5a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d112      	bne.n	8001d86 <HAL_PCD_EP_DB_Transmit+0x1e4>
 8001d60:	69bb      	ldr	r3, [r7, #24]
 8001d62:	881b      	ldrh	r3, [r3, #0]
 8001d64:	b29b      	uxth	r3, r3
 8001d66:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001d6a:	b29a      	uxth	r2, r3
 8001d6c:	69bb      	ldr	r3, [r7, #24]
 8001d6e:	801a      	strh	r2, [r3, #0]
 8001d70:	69bb      	ldr	r3, [r7, #24]
 8001d72:	881b      	ldrh	r3, [r3, #0]
 8001d74:	b29b      	uxth	r3, r3
 8001d76:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001d7a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001d7e:	b29a      	uxth	r2, r3
 8001d80:	69bb      	ldr	r3, [r7, #24]
 8001d82:	801a      	strh	r2, [r3, #0]
 8001d84:	e047      	b.n	8001e16 <HAL_PCD_EP_DB_Transmit+0x274>
 8001d86:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001d88:	2b3e      	cmp	r3, #62	; 0x3e
 8001d8a:	d811      	bhi.n	8001db0 <HAL_PCD_EP_DB_Transmit+0x20e>
 8001d8c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001d8e:	085b      	lsrs	r3, r3, #1
 8001d90:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d92:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001d94:	f003 0301 	and.w	r3, r3, #1
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d002      	beq.n	8001da2 <HAL_PCD_EP_DB_Transmit+0x200>
 8001d9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d9e:	3301      	adds	r3, #1
 8001da0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001da2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001da4:	b29b      	uxth	r3, r3
 8001da6:	029b      	lsls	r3, r3, #10
 8001da8:	b29a      	uxth	r2, r3
 8001daa:	69bb      	ldr	r3, [r7, #24]
 8001dac:	801a      	strh	r2, [r3, #0]
 8001dae:	e032      	b.n	8001e16 <HAL_PCD_EP_DB_Transmit+0x274>
 8001db0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001db2:	095b      	lsrs	r3, r3, #5
 8001db4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001db6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001db8:	f003 031f 	and.w	r3, r3, #31
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d102      	bne.n	8001dc6 <HAL_PCD_EP_DB_Transmit+0x224>
 8001dc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001dc2:	3b01      	subs	r3, #1
 8001dc4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001dc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001dc8:	b29b      	uxth	r3, r3
 8001dca:	029b      	lsls	r3, r3, #10
 8001dcc:	b29b      	uxth	r3, r3
 8001dce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001dd2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001dd6:	b29a      	uxth	r2, r3
 8001dd8:	69bb      	ldr	r3, [r7, #24]
 8001dda:	801a      	strh	r2, [r3, #0]
 8001ddc:	e01b      	b.n	8001e16 <HAL_PCD_EP_DB_Transmit+0x274>
 8001dde:	68bb      	ldr	r3, [r7, #8]
 8001de0:	785b      	ldrb	r3, [r3, #1]
 8001de2:	2b01      	cmp	r3, #1
 8001de4:	d117      	bne.n	8001e16 <HAL_PCD_EP_DB_Transmit+0x274>
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	627b      	str	r3, [r7, #36]	; 0x24
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001df4:	b29b      	uxth	r3, r3
 8001df6:	461a      	mov	r2, r3
 8001df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dfa:	4413      	add	r3, r2
 8001dfc:	627b      	str	r3, [r7, #36]	; 0x24
 8001dfe:	68bb      	ldr	r3, [r7, #8]
 8001e00:	781b      	ldrb	r3, [r3, #0]
 8001e02:	011a      	lsls	r2, r3, #4
 8001e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e06:	4413      	add	r3, r2
 8001e08:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8001e0c:	623b      	str	r3, [r7, #32]
 8001e0e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001e10:	b29a      	uxth	r2, r3
 8001e12:	6a3b      	ldr	r3, [r7, #32]
 8001e14:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	6818      	ldr	r0, [r3, #0]
 8001e1a:	68bb      	ldr	r3, [r7, #8]
 8001e1c:	6959      	ldr	r1, [r3, #20]
 8001e1e:	68bb      	ldr	r3, [r7, #8]
 8001e20:	891a      	ldrh	r2, [r3, #8]
 8001e22:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001e24:	b29b      	uxth	r3, r3
 8001e26:	f002 fe7d 	bl	8004b24 <USB_WritePMA>
 8001e2a:	e138      	b.n	800209e <HAL_PCD_EP_DB_Transmit+0x4fc>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001e34:	b29b      	uxth	r3, r3
 8001e36:	461a      	mov	r2, r3
 8001e38:	68bb      	ldr	r3, [r7, #8]
 8001e3a:	781b      	ldrb	r3, [r3, #0]
 8001e3c:	00db      	lsls	r3, r3, #3
 8001e3e:	4413      	add	r3, r2
 8001e40:	3306      	adds	r3, #6
 8001e42:	005b      	lsls	r3, r3, #1
 8001e44:	68fa      	ldr	r2, [r7, #12]
 8001e46:	6812      	ldr	r2, [r2, #0]
 8001e48:	4413      	add	r3, r2
 8001e4a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001e4e:	881b      	ldrh	r3, [r3, #0]
 8001e50:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001e54:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

    if (ep->xfer_len >= TxByteNbre)
 8001e58:	68bb      	ldr	r3, [r7, #8]
 8001e5a:	699a      	ldr	r2, [r3, #24]
 8001e5c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8001e60:	429a      	cmp	r2, r3
 8001e62:	d307      	bcc.n	8001e74 <HAL_PCD_EP_DB_Transmit+0x2d2>
    {
      ep->xfer_len -= TxByteNbre;
 8001e64:	68bb      	ldr	r3, [r7, #8]
 8001e66:	699a      	ldr	r2, [r3, #24]
 8001e68:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8001e6c:	1ad2      	subs	r2, r2, r3
 8001e6e:	68bb      	ldr	r3, [r7, #8]
 8001e70:	619a      	str	r2, [r3, #24]
 8001e72:	e002      	b.n	8001e7a <HAL_PCD_EP_DB_Transmit+0x2d8>
    }
    else
    {
      ep->xfer_len = 0U;
 8001e74:	68bb      	ldr	r3, [r7, #8]
 8001e76:	2200      	movs	r2, #0
 8001e78:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8001e7a:	68bb      	ldr	r3, [r7, #8]
 8001e7c:	699b      	ldr	r3, [r3, #24]
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d12e      	bne.n	8001ee0 <HAL_PCD_EP_DB_Transmit+0x33e>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001e82:	68bb      	ldr	r3, [r7, #8]
 8001e84:	781b      	ldrb	r3, [r3, #0]
 8001e86:	4619      	mov	r1, r3
 8001e88:	68f8      	ldr	r0, [r7, #12]
 8001e8a:	f006 f802 	bl	8007e92 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /*need to Free USB Buff*/
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8001e8e:	88fb      	ldrh	r3, [r7, #6]
 8001e90:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	f040 8102 	bne.w	800209e <HAL_PCD_EP_DB_Transmit+0x4fc>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	461a      	mov	r2, r3
 8001ea0:	68bb      	ldr	r3, [r7, #8]
 8001ea2:	781b      	ldrb	r3, [r3, #0]
 8001ea4:	009b      	lsls	r3, r3, #2
 8001ea6:	4413      	add	r3, r2
 8001ea8:	881b      	ldrh	r3, [r3, #0]
 8001eaa:	b29b      	uxth	r3, r3
 8001eac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001eb0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001eb4:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	461a      	mov	r2, r3
 8001ebe:	68bb      	ldr	r3, [r7, #8]
 8001ec0:	781b      	ldrb	r3, [r3, #0]
 8001ec2:	009b      	lsls	r3, r3, #2
 8001ec4:	441a      	add	r2, r3
 8001ec6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001eca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001ece:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001ed2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001ed6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001eda:	b29b      	uxth	r3, r3
 8001edc:	8013      	strh	r3, [r2, #0]
 8001ede:	e0de      	b.n	800209e <HAL_PCD_EP_DB_Transmit+0x4fc>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8001ee0:	88fb      	ldrh	r3, [r7, #6]
 8001ee2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d11f      	bne.n	8001f2a <HAL_PCD_EP_DB_Transmit+0x388>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	461a      	mov	r2, r3
 8001ef0:	68bb      	ldr	r3, [r7, #8]
 8001ef2:	781b      	ldrb	r3, [r3, #0]
 8001ef4:	009b      	lsls	r3, r3, #2
 8001ef6:	4413      	add	r3, r2
 8001ef8:	881b      	ldrh	r3, [r3, #0]
 8001efa:	b29b      	uxth	r3, r3
 8001efc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001f00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f04:	867b      	strh	r3, [r7, #50]	; 0x32
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	461a      	mov	r2, r3
 8001f0c:	68bb      	ldr	r3, [r7, #8]
 8001f0e:	781b      	ldrb	r3, [r3, #0]
 8001f10:	009b      	lsls	r3, r3, #2
 8001f12:	441a      	add	r2, r3
 8001f14:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8001f16:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001f1a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001f1e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001f22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f26:	b29b      	uxth	r3, r3
 8001f28:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8001f2a:	68bb      	ldr	r3, [r7, #8]
 8001f2c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001f30:	2b01      	cmp	r3, #1
 8001f32:	f040 80b4 	bne.w	800209e <HAL_PCD_EP_DB_Transmit+0x4fc>
      {
        ep->xfer_buff += TxByteNbre;
 8001f36:	68bb      	ldr	r3, [r7, #8]
 8001f38:	695a      	ldr	r2, [r3, #20]
 8001f3a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8001f3e:	441a      	add	r2, r3
 8001f40:	68bb      	ldr	r3, [r7, #8]
 8001f42:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8001f44:	68bb      	ldr	r3, [r7, #8]
 8001f46:	69da      	ldr	r2, [r3, #28]
 8001f48:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8001f4c:	441a      	add	r2, r3
 8001f4e:	68bb      	ldr	r3, [r7, #8]
 8001f50:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8001f52:	68bb      	ldr	r3, [r7, #8]
 8001f54:	6a1a      	ldr	r2, [r3, #32]
 8001f56:	68bb      	ldr	r3, [r7, #8]
 8001f58:	691b      	ldr	r3, [r3, #16]
 8001f5a:	429a      	cmp	r2, r3
 8001f5c:	d309      	bcc.n	8001f72 <HAL_PCD_EP_DB_Transmit+0x3d0>
        {
          len = ep->maxpacket;
 8001f5e:	68bb      	ldr	r3, [r7, #8]
 8001f60:	691b      	ldr	r3, [r3, #16]
 8001f62:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db -= len;
 8001f64:	68bb      	ldr	r3, [r7, #8]
 8001f66:	6a1a      	ldr	r2, [r3, #32]
 8001f68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001f6a:	1ad2      	subs	r2, r2, r3
 8001f6c:	68bb      	ldr	r3, [r7, #8]
 8001f6e:	621a      	str	r2, [r3, #32]
 8001f70:	e015      	b.n	8001f9e <HAL_PCD_EP_DB_Transmit+0x3fc>
        }
        else if (ep->xfer_len_db == 0U)
 8001f72:	68bb      	ldr	r3, [r7, #8]
 8001f74:	6a1b      	ldr	r3, [r3, #32]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d107      	bne.n	8001f8a <HAL_PCD_EP_DB_Transmit+0x3e8>
        {
          len = TxByteNbre;
 8001f7a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8001f7e:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_fill_db = 0U;
 8001f80:	68bb      	ldr	r3, [r7, #8]
 8001f82:	2200      	movs	r2, #0
 8001f84:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001f88:	e009      	b.n	8001f9e <HAL_PCD_EP_DB_Transmit+0x3fc>
        }
        else
        {
          len = ep->xfer_len_db;
 8001f8a:	68bb      	ldr	r3, [r7, #8]
 8001f8c:	6a1b      	ldr	r3, [r3, #32]
 8001f8e:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db = 0U;
 8001f90:	68bb      	ldr	r3, [r7, #8]
 8001f92:	2200      	movs	r2, #0
 8001f94:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8001f96:	68bb      	ldr	r3, [r7, #8]
 8001f98:	2200      	movs	r2, #0
 8001f9a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	643b      	str	r3, [r7, #64]	; 0x40
 8001fa4:	68bb      	ldr	r3, [r7, #8]
 8001fa6:	785b      	ldrb	r3, [r3, #1]
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d155      	bne.n	8002058 <HAL_PCD_EP_DB_Transmit+0x4b6>
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	63bb      	str	r3, [r7, #56]	; 0x38
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001fba:	b29b      	uxth	r3, r3
 8001fbc:	461a      	mov	r2, r3
 8001fbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001fc0:	4413      	add	r3, r2
 8001fc2:	63bb      	str	r3, [r7, #56]	; 0x38
 8001fc4:	68bb      	ldr	r3, [r7, #8]
 8001fc6:	781b      	ldrb	r3, [r3, #0]
 8001fc8:	011a      	lsls	r2, r3, #4
 8001fca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001fcc:	4413      	add	r3, r2
 8001fce:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001fd2:	637b      	str	r3, [r7, #52]	; 0x34
 8001fd4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d112      	bne.n	8002000 <HAL_PCD_EP_DB_Transmit+0x45e>
 8001fda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001fdc:	881b      	ldrh	r3, [r3, #0]
 8001fde:	b29b      	uxth	r3, r3
 8001fe0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001fe4:	b29a      	uxth	r2, r3
 8001fe6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001fe8:	801a      	strh	r2, [r3, #0]
 8001fea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001fec:	881b      	ldrh	r3, [r3, #0]
 8001fee:	b29b      	uxth	r3, r3
 8001ff0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001ff4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001ff8:	b29a      	uxth	r2, r3
 8001ffa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ffc:	801a      	strh	r2, [r3, #0]
 8001ffe:	e044      	b.n	800208a <HAL_PCD_EP_DB_Transmit+0x4e8>
 8002000:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002002:	2b3e      	cmp	r3, #62	; 0x3e
 8002004:	d811      	bhi.n	800202a <HAL_PCD_EP_DB_Transmit+0x488>
 8002006:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002008:	085b      	lsrs	r3, r3, #1
 800200a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800200c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800200e:	f003 0301 	and.w	r3, r3, #1
 8002012:	2b00      	cmp	r3, #0
 8002014:	d002      	beq.n	800201c <HAL_PCD_EP_DB_Transmit+0x47a>
 8002016:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002018:	3301      	adds	r3, #1
 800201a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800201c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800201e:	b29b      	uxth	r3, r3
 8002020:	029b      	lsls	r3, r3, #10
 8002022:	b29a      	uxth	r2, r3
 8002024:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002026:	801a      	strh	r2, [r3, #0]
 8002028:	e02f      	b.n	800208a <HAL_PCD_EP_DB_Transmit+0x4e8>
 800202a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800202c:	095b      	lsrs	r3, r3, #5
 800202e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002030:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002032:	f003 031f 	and.w	r3, r3, #31
 8002036:	2b00      	cmp	r3, #0
 8002038:	d102      	bne.n	8002040 <HAL_PCD_EP_DB_Transmit+0x49e>
 800203a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800203c:	3b01      	subs	r3, #1
 800203e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002040:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002042:	b29b      	uxth	r3, r3
 8002044:	029b      	lsls	r3, r3, #10
 8002046:	b29b      	uxth	r3, r3
 8002048:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800204c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002050:	b29a      	uxth	r2, r3
 8002052:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002054:	801a      	strh	r2, [r3, #0]
 8002056:	e018      	b.n	800208a <HAL_PCD_EP_DB_Transmit+0x4e8>
 8002058:	68bb      	ldr	r3, [r7, #8]
 800205a:	785b      	ldrb	r3, [r3, #1]
 800205c:	2b01      	cmp	r3, #1
 800205e:	d114      	bne.n	800208a <HAL_PCD_EP_DB_Transmit+0x4e8>
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002068:	b29b      	uxth	r3, r3
 800206a:	461a      	mov	r2, r3
 800206c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800206e:	4413      	add	r3, r2
 8002070:	643b      	str	r3, [r7, #64]	; 0x40
 8002072:	68bb      	ldr	r3, [r7, #8]
 8002074:	781b      	ldrb	r3, [r3, #0]
 8002076:	011a      	lsls	r2, r3, #4
 8002078:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800207a:	4413      	add	r3, r2
 800207c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002080:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002082:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002084:	b29a      	uxth	r2, r3
 8002086:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002088:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	6818      	ldr	r0, [r3, #0]
 800208e:	68bb      	ldr	r3, [r7, #8]
 8002090:	6959      	ldr	r1, [r3, #20]
 8002092:	68bb      	ldr	r3, [r7, #8]
 8002094:	895a      	ldrh	r2, [r3, #10]
 8002096:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002098:	b29b      	uxth	r3, r3
 800209a:	f002 fd43 	bl	8004b24 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	461a      	mov	r2, r3
 80020a4:	68bb      	ldr	r3, [r7, #8]
 80020a6:	781b      	ldrb	r3, [r3, #0]
 80020a8:	009b      	lsls	r3, r3, #2
 80020aa:	4413      	add	r3, r2
 80020ac:	881b      	ldrh	r3, [r3, #0]
 80020ae:	b29b      	uxth	r3, r3
 80020b0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80020b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80020b8:	82bb      	strh	r3, [r7, #20]
 80020ba:	8abb      	ldrh	r3, [r7, #20]
 80020bc:	f083 0310 	eor.w	r3, r3, #16
 80020c0:	82bb      	strh	r3, [r7, #20]
 80020c2:	8abb      	ldrh	r3, [r7, #20]
 80020c4:	f083 0320 	eor.w	r3, r3, #32
 80020c8:	82bb      	strh	r3, [r7, #20]
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	461a      	mov	r2, r3
 80020d0:	68bb      	ldr	r3, [r7, #8]
 80020d2:	781b      	ldrb	r3, [r3, #0]
 80020d4:	009b      	lsls	r3, r3, #2
 80020d6:	441a      	add	r2, r3
 80020d8:	8abb      	ldrh	r3, [r7, #20]
 80020da:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80020de:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80020e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80020e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80020ea:	b29b      	uxth	r3, r3
 80020ec:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80020ee:	2300      	movs	r3, #0
}
 80020f0:	4618      	mov	r0, r3
 80020f2:	3750      	adds	r7, #80	; 0x50
 80020f4:	46bd      	mov	sp, r7
 80020f6:	bd80      	pop	{r7, pc}

080020f8 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80020f8:	b480      	push	{r7}
 80020fa:	b087      	sub	sp, #28
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	60f8      	str	r0, [r7, #12]
 8002100:	607b      	str	r3, [r7, #4]
 8002102:	460b      	mov	r3, r1
 8002104:	817b      	strh	r3, [r7, #10]
 8002106:	4613      	mov	r3, r2
 8002108:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800210a:	897b      	ldrh	r3, [r7, #10]
 800210c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002110:	b29b      	uxth	r3, r3
 8002112:	2b00      	cmp	r3, #0
 8002114:	d00b      	beq.n	800212e <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002116:	897b      	ldrh	r3, [r7, #10]
 8002118:	f003 0307 	and.w	r3, r3, #7
 800211c:	1c5a      	adds	r2, r3, #1
 800211e:	4613      	mov	r3, r2
 8002120:	009b      	lsls	r3, r3, #2
 8002122:	4413      	add	r3, r2
 8002124:	00db      	lsls	r3, r3, #3
 8002126:	68fa      	ldr	r2, [r7, #12]
 8002128:	4413      	add	r3, r2
 800212a:	617b      	str	r3, [r7, #20]
 800212c:	e009      	b.n	8002142 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800212e:	897a      	ldrh	r2, [r7, #10]
 8002130:	4613      	mov	r3, r2
 8002132:	009b      	lsls	r3, r3, #2
 8002134:	4413      	add	r3, r2
 8002136:	00db      	lsls	r3, r3, #3
 8002138:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800213c:	68fa      	ldr	r2, [r7, #12]
 800213e:	4413      	add	r3, r2
 8002140:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002142:	893b      	ldrh	r3, [r7, #8]
 8002144:	2b00      	cmp	r3, #0
 8002146:	d107      	bne.n	8002158 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002148:	697b      	ldr	r3, [r7, #20]
 800214a:	2200      	movs	r2, #0
 800214c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	b29a      	uxth	r2, r3
 8002152:	697b      	ldr	r3, [r7, #20]
 8002154:	80da      	strh	r2, [r3, #6]
 8002156:	e00b      	b.n	8002170 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002158:	697b      	ldr	r3, [r7, #20]
 800215a:	2201      	movs	r2, #1
 800215c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	b29a      	uxth	r2, r3
 8002162:	697b      	ldr	r3, [r7, #20]
 8002164:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	0c1b      	lsrs	r3, r3, #16
 800216a:	b29a      	uxth	r2, r3
 800216c:	697b      	ldr	r3, [r7, #20]
 800216e:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8002170:	2300      	movs	r3, #0
}
 8002172:	4618      	mov	r0, r3
 8002174:	371c      	adds	r7, #28
 8002176:	46bd      	mov	sp, r7
 8002178:	bc80      	pop	{r7}
 800217a:	4770      	bx	lr

0800217c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b086      	sub	sp, #24
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2b00      	cmp	r3, #0
 8002188:	d101      	bne.n	800218e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800218a:	2301      	movs	r3, #1
 800218c:	e26c      	b.n	8002668 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f003 0301 	and.w	r3, r3, #1
 8002196:	2b00      	cmp	r3, #0
 8002198:	f000 8087 	beq.w	80022aa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800219c:	4b92      	ldr	r3, [pc, #584]	; (80023e8 <HAL_RCC_OscConfig+0x26c>)
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	f003 030c 	and.w	r3, r3, #12
 80021a4:	2b04      	cmp	r3, #4
 80021a6:	d00c      	beq.n	80021c2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80021a8:	4b8f      	ldr	r3, [pc, #572]	; (80023e8 <HAL_RCC_OscConfig+0x26c>)
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	f003 030c 	and.w	r3, r3, #12
 80021b0:	2b08      	cmp	r3, #8
 80021b2:	d112      	bne.n	80021da <HAL_RCC_OscConfig+0x5e>
 80021b4:	4b8c      	ldr	r3, [pc, #560]	; (80023e8 <HAL_RCC_OscConfig+0x26c>)
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021c0:	d10b      	bne.n	80021da <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021c2:	4b89      	ldr	r3, [pc, #548]	; (80023e8 <HAL_RCC_OscConfig+0x26c>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d06c      	beq.n	80022a8 <HAL_RCC_OscConfig+0x12c>
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	685b      	ldr	r3, [r3, #4]
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d168      	bne.n	80022a8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80021d6:	2301      	movs	r3, #1
 80021d8:	e246      	b.n	8002668 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021e2:	d106      	bne.n	80021f2 <HAL_RCC_OscConfig+0x76>
 80021e4:	4b80      	ldr	r3, [pc, #512]	; (80023e8 <HAL_RCC_OscConfig+0x26c>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	4a7f      	ldr	r2, [pc, #508]	; (80023e8 <HAL_RCC_OscConfig+0x26c>)
 80021ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021ee:	6013      	str	r3, [r2, #0]
 80021f0:	e02e      	b.n	8002250 <HAL_RCC_OscConfig+0xd4>
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d10c      	bne.n	8002214 <HAL_RCC_OscConfig+0x98>
 80021fa:	4b7b      	ldr	r3, [pc, #492]	; (80023e8 <HAL_RCC_OscConfig+0x26c>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	4a7a      	ldr	r2, [pc, #488]	; (80023e8 <HAL_RCC_OscConfig+0x26c>)
 8002200:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002204:	6013      	str	r3, [r2, #0]
 8002206:	4b78      	ldr	r3, [pc, #480]	; (80023e8 <HAL_RCC_OscConfig+0x26c>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	4a77      	ldr	r2, [pc, #476]	; (80023e8 <HAL_RCC_OscConfig+0x26c>)
 800220c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002210:	6013      	str	r3, [r2, #0]
 8002212:	e01d      	b.n	8002250 <HAL_RCC_OscConfig+0xd4>
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800221c:	d10c      	bne.n	8002238 <HAL_RCC_OscConfig+0xbc>
 800221e:	4b72      	ldr	r3, [pc, #456]	; (80023e8 <HAL_RCC_OscConfig+0x26c>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	4a71      	ldr	r2, [pc, #452]	; (80023e8 <HAL_RCC_OscConfig+0x26c>)
 8002224:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002228:	6013      	str	r3, [r2, #0]
 800222a:	4b6f      	ldr	r3, [pc, #444]	; (80023e8 <HAL_RCC_OscConfig+0x26c>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	4a6e      	ldr	r2, [pc, #440]	; (80023e8 <HAL_RCC_OscConfig+0x26c>)
 8002230:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002234:	6013      	str	r3, [r2, #0]
 8002236:	e00b      	b.n	8002250 <HAL_RCC_OscConfig+0xd4>
 8002238:	4b6b      	ldr	r3, [pc, #428]	; (80023e8 <HAL_RCC_OscConfig+0x26c>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4a6a      	ldr	r2, [pc, #424]	; (80023e8 <HAL_RCC_OscConfig+0x26c>)
 800223e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002242:	6013      	str	r3, [r2, #0]
 8002244:	4b68      	ldr	r3, [pc, #416]	; (80023e8 <HAL_RCC_OscConfig+0x26c>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4a67      	ldr	r2, [pc, #412]	; (80023e8 <HAL_RCC_OscConfig+0x26c>)
 800224a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800224e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	2b00      	cmp	r3, #0
 8002256:	d013      	beq.n	8002280 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002258:	f7fe f91e 	bl	8000498 <HAL_GetTick>
 800225c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800225e:	e008      	b.n	8002272 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002260:	f7fe f91a 	bl	8000498 <HAL_GetTick>
 8002264:	4602      	mov	r2, r0
 8002266:	693b      	ldr	r3, [r7, #16]
 8002268:	1ad3      	subs	r3, r2, r3
 800226a:	2b64      	cmp	r3, #100	; 0x64
 800226c:	d901      	bls.n	8002272 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800226e:	2303      	movs	r3, #3
 8002270:	e1fa      	b.n	8002668 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002272:	4b5d      	ldr	r3, [pc, #372]	; (80023e8 <HAL_RCC_OscConfig+0x26c>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800227a:	2b00      	cmp	r3, #0
 800227c:	d0f0      	beq.n	8002260 <HAL_RCC_OscConfig+0xe4>
 800227e:	e014      	b.n	80022aa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002280:	f7fe f90a 	bl	8000498 <HAL_GetTick>
 8002284:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002286:	e008      	b.n	800229a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002288:	f7fe f906 	bl	8000498 <HAL_GetTick>
 800228c:	4602      	mov	r2, r0
 800228e:	693b      	ldr	r3, [r7, #16]
 8002290:	1ad3      	subs	r3, r2, r3
 8002292:	2b64      	cmp	r3, #100	; 0x64
 8002294:	d901      	bls.n	800229a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002296:	2303      	movs	r3, #3
 8002298:	e1e6      	b.n	8002668 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800229a:	4b53      	ldr	r3, [pc, #332]	; (80023e8 <HAL_RCC_OscConfig+0x26c>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d1f0      	bne.n	8002288 <HAL_RCC_OscConfig+0x10c>
 80022a6:	e000      	b.n	80022aa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f003 0302 	and.w	r3, r3, #2
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d063      	beq.n	800237e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80022b6:	4b4c      	ldr	r3, [pc, #304]	; (80023e8 <HAL_RCC_OscConfig+0x26c>)
 80022b8:	685b      	ldr	r3, [r3, #4]
 80022ba:	f003 030c 	and.w	r3, r3, #12
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d00b      	beq.n	80022da <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80022c2:	4b49      	ldr	r3, [pc, #292]	; (80023e8 <HAL_RCC_OscConfig+0x26c>)
 80022c4:	685b      	ldr	r3, [r3, #4]
 80022c6:	f003 030c 	and.w	r3, r3, #12
 80022ca:	2b08      	cmp	r3, #8
 80022cc:	d11c      	bne.n	8002308 <HAL_RCC_OscConfig+0x18c>
 80022ce:	4b46      	ldr	r3, [pc, #280]	; (80023e8 <HAL_RCC_OscConfig+0x26c>)
 80022d0:	685b      	ldr	r3, [r3, #4]
 80022d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d116      	bne.n	8002308 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022da:	4b43      	ldr	r3, [pc, #268]	; (80023e8 <HAL_RCC_OscConfig+0x26c>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f003 0302 	and.w	r3, r3, #2
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d005      	beq.n	80022f2 <HAL_RCC_OscConfig+0x176>
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	691b      	ldr	r3, [r3, #16]
 80022ea:	2b01      	cmp	r3, #1
 80022ec:	d001      	beq.n	80022f2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80022ee:	2301      	movs	r3, #1
 80022f0:	e1ba      	b.n	8002668 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022f2:	4b3d      	ldr	r3, [pc, #244]	; (80023e8 <HAL_RCC_OscConfig+0x26c>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	695b      	ldr	r3, [r3, #20]
 80022fe:	00db      	lsls	r3, r3, #3
 8002300:	4939      	ldr	r1, [pc, #228]	; (80023e8 <HAL_RCC_OscConfig+0x26c>)
 8002302:	4313      	orrs	r3, r2
 8002304:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002306:	e03a      	b.n	800237e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	691b      	ldr	r3, [r3, #16]
 800230c:	2b00      	cmp	r3, #0
 800230e:	d020      	beq.n	8002352 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002310:	4b36      	ldr	r3, [pc, #216]	; (80023ec <HAL_RCC_OscConfig+0x270>)
 8002312:	2201      	movs	r2, #1
 8002314:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002316:	f7fe f8bf 	bl	8000498 <HAL_GetTick>
 800231a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800231c:	e008      	b.n	8002330 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800231e:	f7fe f8bb 	bl	8000498 <HAL_GetTick>
 8002322:	4602      	mov	r2, r0
 8002324:	693b      	ldr	r3, [r7, #16]
 8002326:	1ad3      	subs	r3, r2, r3
 8002328:	2b02      	cmp	r3, #2
 800232a:	d901      	bls.n	8002330 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800232c:	2303      	movs	r3, #3
 800232e:	e19b      	b.n	8002668 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002330:	4b2d      	ldr	r3, [pc, #180]	; (80023e8 <HAL_RCC_OscConfig+0x26c>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f003 0302 	and.w	r3, r3, #2
 8002338:	2b00      	cmp	r3, #0
 800233a:	d0f0      	beq.n	800231e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800233c:	4b2a      	ldr	r3, [pc, #168]	; (80023e8 <HAL_RCC_OscConfig+0x26c>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	695b      	ldr	r3, [r3, #20]
 8002348:	00db      	lsls	r3, r3, #3
 800234a:	4927      	ldr	r1, [pc, #156]	; (80023e8 <HAL_RCC_OscConfig+0x26c>)
 800234c:	4313      	orrs	r3, r2
 800234e:	600b      	str	r3, [r1, #0]
 8002350:	e015      	b.n	800237e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002352:	4b26      	ldr	r3, [pc, #152]	; (80023ec <HAL_RCC_OscConfig+0x270>)
 8002354:	2200      	movs	r2, #0
 8002356:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002358:	f7fe f89e 	bl	8000498 <HAL_GetTick>
 800235c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800235e:	e008      	b.n	8002372 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002360:	f7fe f89a 	bl	8000498 <HAL_GetTick>
 8002364:	4602      	mov	r2, r0
 8002366:	693b      	ldr	r3, [r7, #16]
 8002368:	1ad3      	subs	r3, r2, r3
 800236a:	2b02      	cmp	r3, #2
 800236c:	d901      	bls.n	8002372 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800236e:	2303      	movs	r3, #3
 8002370:	e17a      	b.n	8002668 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002372:	4b1d      	ldr	r3, [pc, #116]	; (80023e8 <HAL_RCC_OscConfig+0x26c>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f003 0302 	and.w	r3, r3, #2
 800237a:	2b00      	cmp	r3, #0
 800237c:	d1f0      	bne.n	8002360 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f003 0308 	and.w	r3, r3, #8
 8002386:	2b00      	cmp	r3, #0
 8002388:	d03a      	beq.n	8002400 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	699b      	ldr	r3, [r3, #24]
 800238e:	2b00      	cmp	r3, #0
 8002390:	d019      	beq.n	80023c6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002392:	4b17      	ldr	r3, [pc, #92]	; (80023f0 <HAL_RCC_OscConfig+0x274>)
 8002394:	2201      	movs	r2, #1
 8002396:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002398:	f7fe f87e 	bl	8000498 <HAL_GetTick>
 800239c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800239e:	e008      	b.n	80023b2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023a0:	f7fe f87a 	bl	8000498 <HAL_GetTick>
 80023a4:	4602      	mov	r2, r0
 80023a6:	693b      	ldr	r3, [r7, #16]
 80023a8:	1ad3      	subs	r3, r2, r3
 80023aa:	2b02      	cmp	r3, #2
 80023ac:	d901      	bls.n	80023b2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80023ae:	2303      	movs	r3, #3
 80023b0:	e15a      	b.n	8002668 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023b2:	4b0d      	ldr	r3, [pc, #52]	; (80023e8 <HAL_RCC_OscConfig+0x26c>)
 80023b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023b6:	f003 0302 	and.w	r3, r3, #2
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d0f0      	beq.n	80023a0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80023be:	2001      	movs	r0, #1
 80023c0:	f000 faa6 	bl	8002910 <RCC_Delay>
 80023c4:	e01c      	b.n	8002400 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80023c6:	4b0a      	ldr	r3, [pc, #40]	; (80023f0 <HAL_RCC_OscConfig+0x274>)
 80023c8:	2200      	movs	r2, #0
 80023ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023cc:	f7fe f864 	bl	8000498 <HAL_GetTick>
 80023d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023d2:	e00f      	b.n	80023f4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023d4:	f7fe f860 	bl	8000498 <HAL_GetTick>
 80023d8:	4602      	mov	r2, r0
 80023da:	693b      	ldr	r3, [r7, #16]
 80023dc:	1ad3      	subs	r3, r2, r3
 80023de:	2b02      	cmp	r3, #2
 80023e0:	d908      	bls.n	80023f4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80023e2:	2303      	movs	r3, #3
 80023e4:	e140      	b.n	8002668 <HAL_RCC_OscConfig+0x4ec>
 80023e6:	bf00      	nop
 80023e8:	40021000 	.word	0x40021000
 80023ec:	42420000 	.word	0x42420000
 80023f0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023f4:	4b9e      	ldr	r3, [pc, #632]	; (8002670 <HAL_RCC_OscConfig+0x4f4>)
 80023f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023f8:	f003 0302 	and.w	r3, r3, #2
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d1e9      	bne.n	80023d4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f003 0304 	and.w	r3, r3, #4
 8002408:	2b00      	cmp	r3, #0
 800240a:	f000 80a6 	beq.w	800255a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800240e:	2300      	movs	r3, #0
 8002410:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002412:	4b97      	ldr	r3, [pc, #604]	; (8002670 <HAL_RCC_OscConfig+0x4f4>)
 8002414:	69db      	ldr	r3, [r3, #28]
 8002416:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800241a:	2b00      	cmp	r3, #0
 800241c:	d10d      	bne.n	800243a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800241e:	4b94      	ldr	r3, [pc, #592]	; (8002670 <HAL_RCC_OscConfig+0x4f4>)
 8002420:	69db      	ldr	r3, [r3, #28]
 8002422:	4a93      	ldr	r2, [pc, #588]	; (8002670 <HAL_RCC_OscConfig+0x4f4>)
 8002424:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002428:	61d3      	str	r3, [r2, #28]
 800242a:	4b91      	ldr	r3, [pc, #580]	; (8002670 <HAL_RCC_OscConfig+0x4f4>)
 800242c:	69db      	ldr	r3, [r3, #28]
 800242e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002432:	60bb      	str	r3, [r7, #8]
 8002434:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002436:	2301      	movs	r3, #1
 8002438:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800243a:	4b8e      	ldr	r3, [pc, #568]	; (8002674 <HAL_RCC_OscConfig+0x4f8>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002442:	2b00      	cmp	r3, #0
 8002444:	d118      	bne.n	8002478 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002446:	4b8b      	ldr	r3, [pc, #556]	; (8002674 <HAL_RCC_OscConfig+0x4f8>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	4a8a      	ldr	r2, [pc, #552]	; (8002674 <HAL_RCC_OscConfig+0x4f8>)
 800244c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002450:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002452:	f7fe f821 	bl	8000498 <HAL_GetTick>
 8002456:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002458:	e008      	b.n	800246c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800245a:	f7fe f81d 	bl	8000498 <HAL_GetTick>
 800245e:	4602      	mov	r2, r0
 8002460:	693b      	ldr	r3, [r7, #16]
 8002462:	1ad3      	subs	r3, r2, r3
 8002464:	2b64      	cmp	r3, #100	; 0x64
 8002466:	d901      	bls.n	800246c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002468:	2303      	movs	r3, #3
 800246a:	e0fd      	b.n	8002668 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800246c:	4b81      	ldr	r3, [pc, #516]	; (8002674 <HAL_RCC_OscConfig+0x4f8>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002474:	2b00      	cmp	r3, #0
 8002476:	d0f0      	beq.n	800245a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	68db      	ldr	r3, [r3, #12]
 800247c:	2b01      	cmp	r3, #1
 800247e:	d106      	bne.n	800248e <HAL_RCC_OscConfig+0x312>
 8002480:	4b7b      	ldr	r3, [pc, #492]	; (8002670 <HAL_RCC_OscConfig+0x4f4>)
 8002482:	6a1b      	ldr	r3, [r3, #32]
 8002484:	4a7a      	ldr	r2, [pc, #488]	; (8002670 <HAL_RCC_OscConfig+0x4f4>)
 8002486:	f043 0301 	orr.w	r3, r3, #1
 800248a:	6213      	str	r3, [r2, #32]
 800248c:	e02d      	b.n	80024ea <HAL_RCC_OscConfig+0x36e>
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	68db      	ldr	r3, [r3, #12]
 8002492:	2b00      	cmp	r3, #0
 8002494:	d10c      	bne.n	80024b0 <HAL_RCC_OscConfig+0x334>
 8002496:	4b76      	ldr	r3, [pc, #472]	; (8002670 <HAL_RCC_OscConfig+0x4f4>)
 8002498:	6a1b      	ldr	r3, [r3, #32]
 800249a:	4a75      	ldr	r2, [pc, #468]	; (8002670 <HAL_RCC_OscConfig+0x4f4>)
 800249c:	f023 0301 	bic.w	r3, r3, #1
 80024a0:	6213      	str	r3, [r2, #32]
 80024a2:	4b73      	ldr	r3, [pc, #460]	; (8002670 <HAL_RCC_OscConfig+0x4f4>)
 80024a4:	6a1b      	ldr	r3, [r3, #32]
 80024a6:	4a72      	ldr	r2, [pc, #456]	; (8002670 <HAL_RCC_OscConfig+0x4f4>)
 80024a8:	f023 0304 	bic.w	r3, r3, #4
 80024ac:	6213      	str	r3, [r2, #32]
 80024ae:	e01c      	b.n	80024ea <HAL_RCC_OscConfig+0x36e>
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	68db      	ldr	r3, [r3, #12]
 80024b4:	2b05      	cmp	r3, #5
 80024b6:	d10c      	bne.n	80024d2 <HAL_RCC_OscConfig+0x356>
 80024b8:	4b6d      	ldr	r3, [pc, #436]	; (8002670 <HAL_RCC_OscConfig+0x4f4>)
 80024ba:	6a1b      	ldr	r3, [r3, #32]
 80024bc:	4a6c      	ldr	r2, [pc, #432]	; (8002670 <HAL_RCC_OscConfig+0x4f4>)
 80024be:	f043 0304 	orr.w	r3, r3, #4
 80024c2:	6213      	str	r3, [r2, #32]
 80024c4:	4b6a      	ldr	r3, [pc, #424]	; (8002670 <HAL_RCC_OscConfig+0x4f4>)
 80024c6:	6a1b      	ldr	r3, [r3, #32]
 80024c8:	4a69      	ldr	r2, [pc, #420]	; (8002670 <HAL_RCC_OscConfig+0x4f4>)
 80024ca:	f043 0301 	orr.w	r3, r3, #1
 80024ce:	6213      	str	r3, [r2, #32]
 80024d0:	e00b      	b.n	80024ea <HAL_RCC_OscConfig+0x36e>
 80024d2:	4b67      	ldr	r3, [pc, #412]	; (8002670 <HAL_RCC_OscConfig+0x4f4>)
 80024d4:	6a1b      	ldr	r3, [r3, #32]
 80024d6:	4a66      	ldr	r2, [pc, #408]	; (8002670 <HAL_RCC_OscConfig+0x4f4>)
 80024d8:	f023 0301 	bic.w	r3, r3, #1
 80024dc:	6213      	str	r3, [r2, #32]
 80024de:	4b64      	ldr	r3, [pc, #400]	; (8002670 <HAL_RCC_OscConfig+0x4f4>)
 80024e0:	6a1b      	ldr	r3, [r3, #32]
 80024e2:	4a63      	ldr	r2, [pc, #396]	; (8002670 <HAL_RCC_OscConfig+0x4f4>)
 80024e4:	f023 0304 	bic.w	r3, r3, #4
 80024e8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	68db      	ldr	r3, [r3, #12]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d015      	beq.n	800251e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024f2:	f7fd ffd1 	bl	8000498 <HAL_GetTick>
 80024f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024f8:	e00a      	b.n	8002510 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024fa:	f7fd ffcd 	bl	8000498 <HAL_GetTick>
 80024fe:	4602      	mov	r2, r0
 8002500:	693b      	ldr	r3, [r7, #16]
 8002502:	1ad3      	subs	r3, r2, r3
 8002504:	f241 3288 	movw	r2, #5000	; 0x1388
 8002508:	4293      	cmp	r3, r2
 800250a:	d901      	bls.n	8002510 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800250c:	2303      	movs	r3, #3
 800250e:	e0ab      	b.n	8002668 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002510:	4b57      	ldr	r3, [pc, #348]	; (8002670 <HAL_RCC_OscConfig+0x4f4>)
 8002512:	6a1b      	ldr	r3, [r3, #32]
 8002514:	f003 0302 	and.w	r3, r3, #2
 8002518:	2b00      	cmp	r3, #0
 800251a:	d0ee      	beq.n	80024fa <HAL_RCC_OscConfig+0x37e>
 800251c:	e014      	b.n	8002548 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800251e:	f7fd ffbb 	bl	8000498 <HAL_GetTick>
 8002522:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002524:	e00a      	b.n	800253c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002526:	f7fd ffb7 	bl	8000498 <HAL_GetTick>
 800252a:	4602      	mov	r2, r0
 800252c:	693b      	ldr	r3, [r7, #16]
 800252e:	1ad3      	subs	r3, r2, r3
 8002530:	f241 3288 	movw	r2, #5000	; 0x1388
 8002534:	4293      	cmp	r3, r2
 8002536:	d901      	bls.n	800253c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002538:	2303      	movs	r3, #3
 800253a:	e095      	b.n	8002668 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800253c:	4b4c      	ldr	r3, [pc, #304]	; (8002670 <HAL_RCC_OscConfig+0x4f4>)
 800253e:	6a1b      	ldr	r3, [r3, #32]
 8002540:	f003 0302 	and.w	r3, r3, #2
 8002544:	2b00      	cmp	r3, #0
 8002546:	d1ee      	bne.n	8002526 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002548:	7dfb      	ldrb	r3, [r7, #23]
 800254a:	2b01      	cmp	r3, #1
 800254c:	d105      	bne.n	800255a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800254e:	4b48      	ldr	r3, [pc, #288]	; (8002670 <HAL_RCC_OscConfig+0x4f4>)
 8002550:	69db      	ldr	r3, [r3, #28]
 8002552:	4a47      	ldr	r2, [pc, #284]	; (8002670 <HAL_RCC_OscConfig+0x4f4>)
 8002554:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002558:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	69db      	ldr	r3, [r3, #28]
 800255e:	2b00      	cmp	r3, #0
 8002560:	f000 8081 	beq.w	8002666 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002564:	4b42      	ldr	r3, [pc, #264]	; (8002670 <HAL_RCC_OscConfig+0x4f4>)
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	f003 030c 	and.w	r3, r3, #12
 800256c:	2b08      	cmp	r3, #8
 800256e:	d061      	beq.n	8002634 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	69db      	ldr	r3, [r3, #28]
 8002574:	2b02      	cmp	r3, #2
 8002576:	d146      	bne.n	8002606 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002578:	4b3f      	ldr	r3, [pc, #252]	; (8002678 <HAL_RCC_OscConfig+0x4fc>)
 800257a:	2200      	movs	r2, #0
 800257c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800257e:	f7fd ff8b 	bl	8000498 <HAL_GetTick>
 8002582:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002584:	e008      	b.n	8002598 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002586:	f7fd ff87 	bl	8000498 <HAL_GetTick>
 800258a:	4602      	mov	r2, r0
 800258c:	693b      	ldr	r3, [r7, #16]
 800258e:	1ad3      	subs	r3, r2, r3
 8002590:	2b02      	cmp	r3, #2
 8002592:	d901      	bls.n	8002598 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002594:	2303      	movs	r3, #3
 8002596:	e067      	b.n	8002668 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002598:	4b35      	ldr	r3, [pc, #212]	; (8002670 <HAL_RCC_OscConfig+0x4f4>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d1f0      	bne.n	8002586 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6a1b      	ldr	r3, [r3, #32]
 80025a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025ac:	d108      	bne.n	80025c0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80025ae:	4b30      	ldr	r3, [pc, #192]	; (8002670 <HAL_RCC_OscConfig+0x4f4>)
 80025b0:	685b      	ldr	r3, [r3, #4]
 80025b2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	689b      	ldr	r3, [r3, #8]
 80025ba:	492d      	ldr	r1, [pc, #180]	; (8002670 <HAL_RCC_OscConfig+0x4f4>)
 80025bc:	4313      	orrs	r3, r2
 80025be:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80025c0:	4b2b      	ldr	r3, [pc, #172]	; (8002670 <HAL_RCC_OscConfig+0x4f4>)
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6a19      	ldr	r1, [r3, #32]
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025d0:	430b      	orrs	r3, r1
 80025d2:	4927      	ldr	r1, [pc, #156]	; (8002670 <HAL_RCC_OscConfig+0x4f4>)
 80025d4:	4313      	orrs	r3, r2
 80025d6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80025d8:	4b27      	ldr	r3, [pc, #156]	; (8002678 <HAL_RCC_OscConfig+0x4fc>)
 80025da:	2201      	movs	r2, #1
 80025dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025de:	f7fd ff5b 	bl	8000498 <HAL_GetTick>
 80025e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80025e4:	e008      	b.n	80025f8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025e6:	f7fd ff57 	bl	8000498 <HAL_GetTick>
 80025ea:	4602      	mov	r2, r0
 80025ec:	693b      	ldr	r3, [r7, #16]
 80025ee:	1ad3      	subs	r3, r2, r3
 80025f0:	2b02      	cmp	r3, #2
 80025f2:	d901      	bls.n	80025f8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80025f4:	2303      	movs	r3, #3
 80025f6:	e037      	b.n	8002668 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80025f8:	4b1d      	ldr	r3, [pc, #116]	; (8002670 <HAL_RCC_OscConfig+0x4f4>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002600:	2b00      	cmp	r3, #0
 8002602:	d0f0      	beq.n	80025e6 <HAL_RCC_OscConfig+0x46a>
 8002604:	e02f      	b.n	8002666 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002606:	4b1c      	ldr	r3, [pc, #112]	; (8002678 <HAL_RCC_OscConfig+0x4fc>)
 8002608:	2200      	movs	r2, #0
 800260a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800260c:	f7fd ff44 	bl	8000498 <HAL_GetTick>
 8002610:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002612:	e008      	b.n	8002626 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002614:	f7fd ff40 	bl	8000498 <HAL_GetTick>
 8002618:	4602      	mov	r2, r0
 800261a:	693b      	ldr	r3, [r7, #16]
 800261c:	1ad3      	subs	r3, r2, r3
 800261e:	2b02      	cmp	r3, #2
 8002620:	d901      	bls.n	8002626 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002622:	2303      	movs	r3, #3
 8002624:	e020      	b.n	8002668 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002626:	4b12      	ldr	r3, [pc, #72]	; (8002670 <HAL_RCC_OscConfig+0x4f4>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800262e:	2b00      	cmp	r3, #0
 8002630:	d1f0      	bne.n	8002614 <HAL_RCC_OscConfig+0x498>
 8002632:	e018      	b.n	8002666 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	69db      	ldr	r3, [r3, #28]
 8002638:	2b01      	cmp	r3, #1
 800263a:	d101      	bne.n	8002640 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800263c:	2301      	movs	r3, #1
 800263e:	e013      	b.n	8002668 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002640:	4b0b      	ldr	r3, [pc, #44]	; (8002670 <HAL_RCC_OscConfig+0x4f4>)
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6a1b      	ldr	r3, [r3, #32]
 8002650:	429a      	cmp	r2, r3
 8002652:	d106      	bne.n	8002662 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800265e:	429a      	cmp	r2, r3
 8002660:	d001      	beq.n	8002666 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002662:	2301      	movs	r3, #1
 8002664:	e000      	b.n	8002668 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002666:	2300      	movs	r3, #0
}
 8002668:	4618      	mov	r0, r3
 800266a:	3718      	adds	r7, #24
 800266c:	46bd      	mov	sp, r7
 800266e:	bd80      	pop	{r7, pc}
 8002670:	40021000 	.word	0x40021000
 8002674:	40007000 	.word	0x40007000
 8002678:	42420060 	.word	0x42420060

0800267c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b084      	sub	sp, #16
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
 8002684:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	2b00      	cmp	r3, #0
 800268a:	d101      	bne.n	8002690 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800268c:	2301      	movs	r3, #1
 800268e:	e0d0      	b.n	8002832 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002690:	4b6a      	ldr	r3, [pc, #424]	; (800283c <HAL_RCC_ClockConfig+0x1c0>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f003 0307 	and.w	r3, r3, #7
 8002698:	683a      	ldr	r2, [r7, #0]
 800269a:	429a      	cmp	r2, r3
 800269c:	d910      	bls.n	80026c0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800269e:	4b67      	ldr	r3, [pc, #412]	; (800283c <HAL_RCC_ClockConfig+0x1c0>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f023 0207 	bic.w	r2, r3, #7
 80026a6:	4965      	ldr	r1, [pc, #404]	; (800283c <HAL_RCC_ClockConfig+0x1c0>)
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	4313      	orrs	r3, r2
 80026ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026ae:	4b63      	ldr	r3, [pc, #396]	; (800283c <HAL_RCC_ClockConfig+0x1c0>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f003 0307 	and.w	r3, r3, #7
 80026b6:	683a      	ldr	r2, [r7, #0]
 80026b8:	429a      	cmp	r2, r3
 80026ba:	d001      	beq.n	80026c0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80026bc:	2301      	movs	r3, #1
 80026be:	e0b8      	b.n	8002832 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f003 0302 	and.w	r3, r3, #2
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d020      	beq.n	800270e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f003 0304 	and.w	r3, r3, #4
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d005      	beq.n	80026e4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80026d8:	4b59      	ldr	r3, [pc, #356]	; (8002840 <HAL_RCC_ClockConfig+0x1c4>)
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	4a58      	ldr	r2, [pc, #352]	; (8002840 <HAL_RCC_ClockConfig+0x1c4>)
 80026de:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80026e2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f003 0308 	and.w	r3, r3, #8
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d005      	beq.n	80026fc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80026f0:	4b53      	ldr	r3, [pc, #332]	; (8002840 <HAL_RCC_ClockConfig+0x1c4>)
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	4a52      	ldr	r2, [pc, #328]	; (8002840 <HAL_RCC_ClockConfig+0x1c4>)
 80026f6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80026fa:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026fc:	4b50      	ldr	r3, [pc, #320]	; (8002840 <HAL_RCC_ClockConfig+0x1c4>)
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	689b      	ldr	r3, [r3, #8]
 8002708:	494d      	ldr	r1, [pc, #308]	; (8002840 <HAL_RCC_ClockConfig+0x1c4>)
 800270a:	4313      	orrs	r3, r2
 800270c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f003 0301 	and.w	r3, r3, #1
 8002716:	2b00      	cmp	r3, #0
 8002718:	d040      	beq.n	800279c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	685b      	ldr	r3, [r3, #4]
 800271e:	2b01      	cmp	r3, #1
 8002720:	d107      	bne.n	8002732 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002722:	4b47      	ldr	r3, [pc, #284]	; (8002840 <HAL_RCC_ClockConfig+0x1c4>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800272a:	2b00      	cmp	r3, #0
 800272c:	d115      	bne.n	800275a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800272e:	2301      	movs	r3, #1
 8002730:	e07f      	b.n	8002832 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	2b02      	cmp	r3, #2
 8002738:	d107      	bne.n	800274a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800273a:	4b41      	ldr	r3, [pc, #260]	; (8002840 <HAL_RCC_ClockConfig+0x1c4>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002742:	2b00      	cmp	r3, #0
 8002744:	d109      	bne.n	800275a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002746:	2301      	movs	r3, #1
 8002748:	e073      	b.n	8002832 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800274a:	4b3d      	ldr	r3, [pc, #244]	; (8002840 <HAL_RCC_ClockConfig+0x1c4>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f003 0302 	and.w	r3, r3, #2
 8002752:	2b00      	cmp	r3, #0
 8002754:	d101      	bne.n	800275a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002756:	2301      	movs	r3, #1
 8002758:	e06b      	b.n	8002832 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800275a:	4b39      	ldr	r3, [pc, #228]	; (8002840 <HAL_RCC_ClockConfig+0x1c4>)
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	f023 0203 	bic.w	r2, r3, #3
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	685b      	ldr	r3, [r3, #4]
 8002766:	4936      	ldr	r1, [pc, #216]	; (8002840 <HAL_RCC_ClockConfig+0x1c4>)
 8002768:	4313      	orrs	r3, r2
 800276a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800276c:	f7fd fe94 	bl	8000498 <HAL_GetTick>
 8002770:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002772:	e00a      	b.n	800278a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002774:	f7fd fe90 	bl	8000498 <HAL_GetTick>
 8002778:	4602      	mov	r2, r0
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	1ad3      	subs	r3, r2, r3
 800277e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002782:	4293      	cmp	r3, r2
 8002784:	d901      	bls.n	800278a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002786:	2303      	movs	r3, #3
 8002788:	e053      	b.n	8002832 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800278a:	4b2d      	ldr	r3, [pc, #180]	; (8002840 <HAL_RCC_ClockConfig+0x1c4>)
 800278c:	685b      	ldr	r3, [r3, #4]
 800278e:	f003 020c 	and.w	r2, r3, #12
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	685b      	ldr	r3, [r3, #4]
 8002796:	009b      	lsls	r3, r3, #2
 8002798:	429a      	cmp	r2, r3
 800279a:	d1eb      	bne.n	8002774 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800279c:	4b27      	ldr	r3, [pc, #156]	; (800283c <HAL_RCC_ClockConfig+0x1c0>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f003 0307 	and.w	r3, r3, #7
 80027a4:	683a      	ldr	r2, [r7, #0]
 80027a6:	429a      	cmp	r2, r3
 80027a8:	d210      	bcs.n	80027cc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027aa:	4b24      	ldr	r3, [pc, #144]	; (800283c <HAL_RCC_ClockConfig+0x1c0>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f023 0207 	bic.w	r2, r3, #7
 80027b2:	4922      	ldr	r1, [pc, #136]	; (800283c <HAL_RCC_ClockConfig+0x1c0>)
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	4313      	orrs	r3, r2
 80027b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027ba:	4b20      	ldr	r3, [pc, #128]	; (800283c <HAL_RCC_ClockConfig+0x1c0>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f003 0307 	and.w	r3, r3, #7
 80027c2:	683a      	ldr	r2, [r7, #0]
 80027c4:	429a      	cmp	r2, r3
 80027c6:	d001      	beq.n	80027cc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80027c8:	2301      	movs	r3, #1
 80027ca:	e032      	b.n	8002832 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f003 0304 	and.w	r3, r3, #4
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d008      	beq.n	80027ea <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80027d8:	4b19      	ldr	r3, [pc, #100]	; (8002840 <HAL_RCC_ClockConfig+0x1c4>)
 80027da:	685b      	ldr	r3, [r3, #4]
 80027dc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	68db      	ldr	r3, [r3, #12]
 80027e4:	4916      	ldr	r1, [pc, #88]	; (8002840 <HAL_RCC_ClockConfig+0x1c4>)
 80027e6:	4313      	orrs	r3, r2
 80027e8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f003 0308 	and.w	r3, r3, #8
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d009      	beq.n	800280a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80027f6:	4b12      	ldr	r3, [pc, #72]	; (8002840 <HAL_RCC_ClockConfig+0x1c4>)
 80027f8:	685b      	ldr	r3, [r3, #4]
 80027fa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	691b      	ldr	r3, [r3, #16]
 8002802:	00db      	lsls	r3, r3, #3
 8002804:	490e      	ldr	r1, [pc, #56]	; (8002840 <HAL_RCC_ClockConfig+0x1c4>)
 8002806:	4313      	orrs	r3, r2
 8002808:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800280a:	f000 f821 	bl	8002850 <HAL_RCC_GetSysClockFreq>
 800280e:	4602      	mov	r2, r0
 8002810:	4b0b      	ldr	r3, [pc, #44]	; (8002840 <HAL_RCC_ClockConfig+0x1c4>)
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	091b      	lsrs	r3, r3, #4
 8002816:	f003 030f 	and.w	r3, r3, #15
 800281a:	490a      	ldr	r1, [pc, #40]	; (8002844 <HAL_RCC_ClockConfig+0x1c8>)
 800281c:	5ccb      	ldrb	r3, [r1, r3]
 800281e:	fa22 f303 	lsr.w	r3, r2, r3
 8002822:	4a09      	ldr	r2, [pc, #36]	; (8002848 <HAL_RCC_ClockConfig+0x1cc>)
 8002824:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002826:	4b09      	ldr	r3, [pc, #36]	; (800284c <HAL_RCC_ClockConfig+0x1d0>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4618      	mov	r0, r3
 800282c:	f7fd fdf2 	bl	8000414 <HAL_InitTick>

  return HAL_OK;
 8002830:	2300      	movs	r3, #0
}
 8002832:	4618      	mov	r0, r3
 8002834:	3710      	adds	r7, #16
 8002836:	46bd      	mov	sp, r7
 8002838:	bd80      	pop	{r7, pc}
 800283a:	bf00      	nop
 800283c:	40022000 	.word	0x40022000
 8002840:	40021000 	.word	0x40021000
 8002844:	08008430 	.word	0x08008430
 8002848:	20000000 	.word	0x20000000
 800284c:	20000004 	.word	0x20000004

08002850 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002850:	b490      	push	{r4, r7}
 8002852:	b08a      	sub	sp, #40	; 0x28
 8002854:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002856:	4b2a      	ldr	r3, [pc, #168]	; (8002900 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002858:	1d3c      	adds	r4, r7, #4
 800285a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800285c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002860:	f240 2301 	movw	r3, #513	; 0x201
 8002864:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002866:	2300      	movs	r3, #0
 8002868:	61fb      	str	r3, [r7, #28]
 800286a:	2300      	movs	r3, #0
 800286c:	61bb      	str	r3, [r7, #24]
 800286e:	2300      	movs	r3, #0
 8002870:	627b      	str	r3, [r7, #36]	; 0x24
 8002872:	2300      	movs	r3, #0
 8002874:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002876:	2300      	movs	r3, #0
 8002878:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800287a:	4b22      	ldr	r3, [pc, #136]	; (8002904 <HAL_RCC_GetSysClockFreq+0xb4>)
 800287c:	685b      	ldr	r3, [r3, #4]
 800287e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002880:	69fb      	ldr	r3, [r7, #28]
 8002882:	f003 030c 	and.w	r3, r3, #12
 8002886:	2b04      	cmp	r3, #4
 8002888:	d002      	beq.n	8002890 <HAL_RCC_GetSysClockFreq+0x40>
 800288a:	2b08      	cmp	r3, #8
 800288c:	d003      	beq.n	8002896 <HAL_RCC_GetSysClockFreq+0x46>
 800288e:	e02d      	b.n	80028ec <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002890:	4b1d      	ldr	r3, [pc, #116]	; (8002908 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002892:	623b      	str	r3, [r7, #32]
      break;
 8002894:	e02d      	b.n	80028f2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002896:	69fb      	ldr	r3, [r7, #28]
 8002898:	0c9b      	lsrs	r3, r3, #18
 800289a:	f003 030f 	and.w	r3, r3, #15
 800289e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80028a2:	4413      	add	r3, r2
 80028a4:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80028a8:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80028aa:	69fb      	ldr	r3, [r7, #28]
 80028ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d013      	beq.n	80028dc <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80028b4:	4b13      	ldr	r3, [pc, #76]	; (8002904 <HAL_RCC_GetSysClockFreq+0xb4>)
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	0c5b      	lsrs	r3, r3, #17
 80028ba:	f003 0301 	and.w	r3, r3, #1
 80028be:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80028c2:	4413      	add	r3, r2
 80028c4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80028c8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80028ca:	697b      	ldr	r3, [r7, #20]
 80028cc:	4a0e      	ldr	r2, [pc, #56]	; (8002908 <HAL_RCC_GetSysClockFreq+0xb8>)
 80028ce:	fb02 f203 	mul.w	r2, r2, r3
 80028d2:	69bb      	ldr	r3, [r7, #24]
 80028d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80028d8:	627b      	str	r3, [r7, #36]	; 0x24
 80028da:	e004      	b.n	80028e6 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80028dc:	697b      	ldr	r3, [r7, #20]
 80028de:	4a0b      	ldr	r2, [pc, #44]	; (800290c <HAL_RCC_GetSysClockFreq+0xbc>)
 80028e0:	fb02 f303 	mul.w	r3, r2, r3
 80028e4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80028e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028e8:	623b      	str	r3, [r7, #32]
      break;
 80028ea:	e002      	b.n	80028f2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80028ec:	4b06      	ldr	r3, [pc, #24]	; (8002908 <HAL_RCC_GetSysClockFreq+0xb8>)
 80028ee:	623b      	str	r3, [r7, #32]
      break;
 80028f0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80028f2:	6a3b      	ldr	r3, [r7, #32]
}
 80028f4:	4618      	mov	r0, r3
 80028f6:	3728      	adds	r7, #40	; 0x28
 80028f8:	46bd      	mov	sp, r7
 80028fa:	bc90      	pop	{r4, r7}
 80028fc:	4770      	bx	lr
 80028fe:	bf00      	nop
 8002900:	080083dc 	.word	0x080083dc
 8002904:	40021000 	.word	0x40021000
 8002908:	007a1200 	.word	0x007a1200
 800290c:	003d0900 	.word	0x003d0900

08002910 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002910:	b480      	push	{r7}
 8002912:	b085      	sub	sp, #20
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002918:	4b0a      	ldr	r3, [pc, #40]	; (8002944 <RCC_Delay+0x34>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4a0a      	ldr	r2, [pc, #40]	; (8002948 <RCC_Delay+0x38>)
 800291e:	fba2 2303 	umull	r2, r3, r2, r3
 8002922:	0a5b      	lsrs	r3, r3, #9
 8002924:	687a      	ldr	r2, [r7, #4]
 8002926:	fb02 f303 	mul.w	r3, r2, r3
 800292a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800292c:	bf00      	nop
  }
  while (Delay --);
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	1e5a      	subs	r2, r3, #1
 8002932:	60fa      	str	r2, [r7, #12]
 8002934:	2b00      	cmp	r3, #0
 8002936:	d1f9      	bne.n	800292c <RCC_Delay+0x1c>
}
 8002938:	bf00      	nop
 800293a:	bf00      	nop
 800293c:	3714      	adds	r7, #20
 800293e:	46bd      	mov	sp, r7
 8002940:	bc80      	pop	{r7}
 8002942:	4770      	bx	lr
 8002944:	20000000 	.word	0x20000000
 8002948:	10624dd3 	.word	0x10624dd3

0800294c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b086      	sub	sp, #24
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002954:	2300      	movs	r3, #0
 8002956:	613b      	str	r3, [r7, #16]
 8002958:	2300      	movs	r3, #0
 800295a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f003 0301 	and.w	r3, r3, #1
 8002964:	2b00      	cmp	r3, #0
 8002966:	d07d      	beq.n	8002a64 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8002968:	2300      	movs	r3, #0
 800296a:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800296c:	4b4f      	ldr	r3, [pc, #316]	; (8002aac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800296e:	69db      	ldr	r3, [r3, #28]
 8002970:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002974:	2b00      	cmp	r3, #0
 8002976:	d10d      	bne.n	8002994 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002978:	4b4c      	ldr	r3, [pc, #304]	; (8002aac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800297a:	69db      	ldr	r3, [r3, #28]
 800297c:	4a4b      	ldr	r2, [pc, #300]	; (8002aac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800297e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002982:	61d3      	str	r3, [r2, #28]
 8002984:	4b49      	ldr	r3, [pc, #292]	; (8002aac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002986:	69db      	ldr	r3, [r3, #28]
 8002988:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800298c:	60bb      	str	r3, [r7, #8]
 800298e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002990:	2301      	movs	r3, #1
 8002992:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002994:	4b46      	ldr	r3, [pc, #280]	; (8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800299c:	2b00      	cmp	r3, #0
 800299e:	d118      	bne.n	80029d2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80029a0:	4b43      	ldr	r3, [pc, #268]	; (8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4a42      	ldr	r2, [pc, #264]	; (8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80029a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029aa:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80029ac:	f7fd fd74 	bl	8000498 <HAL_GetTick>
 80029b0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029b2:	e008      	b.n	80029c6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029b4:	f7fd fd70 	bl	8000498 <HAL_GetTick>
 80029b8:	4602      	mov	r2, r0
 80029ba:	693b      	ldr	r3, [r7, #16]
 80029bc:	1ad3      	subs	r3, r2, r3
 80029be:	2b64      	cmp	r3, #100	; 0x64
 80029c0:	d901      	bls.n	80029c6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80029c2:	2303      	movs	r3, #3
 80029c4:	e06d      	b.n	8002aa2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029c6:	4b3a      	ldr	r3, [pc, #232]	; (8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d0f0      	beq.n	80029b4 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80029d2:	4b36      	ldr	r3, [pc, #216]	; (8002aac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029d4:	6a1b      	ldr	r3, [r3, #32]
 80029d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029da:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d02e      	beq.n	8002a40 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	685b      	ldr	r3, [r3, #4]
 80029e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029ea:	68fa      	ldr	r2, [r7, #12]
 80029ec:	429a      	cmp	r2, r3
 80029ee:	d027      	beq.n	8002a40 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80029f0:	4b2e      	ldr	r3, [pc, #184]	; (8002aac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029f2:	6a1b      	ldr	r3, [r3, #32]
 80029f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80029f8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80029fa:	4b2e      	ldr	r3, [pc, #184]	; (8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80029fc:	2201      	movs	r2, #1
 80029fe:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002a00:	4b2c      	ldr	r3, [pc, #176]	; (8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002a02:	2200      	movs	r2, #0
 8002a04:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002a06:	4a29      	ldr	r2, [pc, #164]	; (8002aac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	f003 0301 	and.w	r3, r3, #1
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d014      	beq.n	8002a40 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a16:	f7fd fd3f 	bl	8000498 <HAL_GetTick>
 8002a1a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a1c:	e00a      	b.n	8002a34 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a1e:	f7fd fd3b 	bl	8000498 <HAL_GetTick>
 8002a22:	4602      	mov	r2, r0
 8002a24:	693b      	ldr	r3, [r7, #16]
 8002a26:	1ad3      	subs	r3, r2, r3
 8002a28:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	d901      	bls.n	8002a34 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002a30:	2303      	movs	r3, #3
 8002a32:	e036      	b.n	8002aa2 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a34:	4b1d      	ldr	r3, [pc, #116]	; (8002aac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a36:	6a1b      	ldr	r3, [r3, #32]
 8002a38:	f003 0302 	and.w	r3, r3, #2
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d0ee      	beq.n	8002a1e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002a40:	4b1a      	ldr	r3, [pc, #104]	; (8002aac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a42:	6a1b      	ldr	r3, [r3, #32]
 8002a44:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	4917      	ldr	r1, [pc, #92]	; (8002aac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a4e:	4313      	orrs	r3, r2
 8002a50:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002a52:	7dfb      	ldrb	r3, [r7, #23]
 8002a54:	2b01      	cmp	r3, #1
 8002a56:	d105      	bne.n	8002a64 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a58:	4b14      	ldr	r3, [pc, #80]	; (8002aac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a5a:	69db      	ldr	r3, [r3, #28]
 8002a5c:	4a13      	ldr	r2, [pc, #76]	; (8002aac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a5e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a62:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f003 0302 	and.w	r3, r3, #2
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d008      	beq.n	8002a82 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002a70:	4b0e      	ldr	r3, [pc, #56]	; (8002aac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a72:	685b      	ldr	r3, [r3, #4]
 8002a74:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	689b      	ldr	r3, [r3, #8]
 8002a7c:	490b      	ldr	r1, [pc, #44]	; (8002aac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a7e:	4313      	orrs	r3, r2
 8002a80:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f003 0310 	and.w	r3, r3, #16
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d008      	beq.n	8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002a8e:	4b07      	ldr	r3, [pc, #28]	; (8002aac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a90:	685b      	ldr	r3, [r3, #4]
 8002a92:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	68db      	ldr	r3, [r3, #12]
 8002a9a:	4904      	ldr	r1, [pc, #16]	; (8002aac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a9c:	4313      	orrs	r3, r2
 8002a9e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002aa0:	2300      	movs	r3, #0
}
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	3718      	adds	r7, #24
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	bd80      	pop	{r7, pc}
 8002aaa:	bf00      	nop
 8002aac:	40021000 	.word	0x40021000
 8002ab0:	40007000 	.word	0x40007000
 8002ab4:	42420440 	.word	0x42420440

08002ab8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8002ab8:	b084      	sub	sp, #16
 8002aba:	b480      	push	{r7}
 8002abc:	b083      	sub	sp, #12
 8002abe:	af00      	add	r7, sp, #0
 8002ac0:	6078      	str	r0, [r7, #4]
 8002ac2:	f107 0014 	add.w	r0, r7, #20
 8002ac6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8002aca:	2300      	movs	r3, #0
}
 8002acc:	4618      	mov	r0, r3
 8002ace:	370c      	adds	r7, #12
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	bc80      	pop	{r7}
 8002ad4:	b004      	add	sp, #16
 8002ad6:	4770      	bx	lr

08002ad8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	b085      	sub	sp, #20
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8002ae8:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8002aec:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	b29a      	uxth	r2, r3
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002af8:	2300      	movs	r3, #0
}
 8002afa:	4618      	mov	r0, r3
 8002afc:	3714      	adds	r7, #20
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bc80      	pop	{r7}
 8002b02:	4770      	bx	lr

08002b04 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8002b04:	b480      	push	{r7}
 8002b06:	b085      	sub	sp, #20
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8002b0c:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8002b10:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002b18:	b29a      	uxth	r2, r3
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	b29b      	uxth	r3, r3
 8002b1e:	43db      	mvns	r3, r3
 8002b20:	b29b      	uxth	r3, r3
 8002b22:	4013      	ands	r3, r2
 8002b24:	b29a      	uxth	r2, r3
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002b2c:	2300      	movs	r3, #0
}
 8002b2e:	4618      	mov	r0, r3
 8002b30:	3714      	adds	r7, #20
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bc80      	pop	{r7}
 8002b36:	4770      	bx	lr

08002b38 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8002b38:	b480      	push	{r7}
 8002b3a:	b083      	sub	sp, #12
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
 8002b40:	460b      	mov	r3, r1
 8002b42:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8002b44:	2300      	movs	r3, #0
}
 8002b46:	4618      	mov	r0, r3
 8002b48:	370c      	adds	r7, #12
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bc80      	pop	{r7}
 8002b4e:	4770      	bx	lr

08002b50 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8002b50:	b084      	sub	sp, #16
 8002b52:	b480      	push	{r7}
 8002b54:	b083      	sub	sp, #12
 8002b56:	af00      	add	r7, sp, #0
 8002b58:	6078      	str	r0, [r7, #4]
 8002b5a:	f107 0014 	add.w	r0, r7, #20
 8002b5e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	2201      	movs	r2, #1
 8002b66:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	2200      	movs	r2, #0
 8002b76:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8002b82:	2300      	movs	r3, #0
}
 8002b84:	4618      	mov	r0, r3
 8002b86:	370c      	adds	r7, #12
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	bc80      	pop	{r7}
 8002b8c:	b004      	add	sp, #16
 8002b8e:	4770      	bx	lr

08002b90 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_TypeDef *USBx, uint32_t num)
{
 8002b90:	b480      	push	{r7}
 8002b92:	b083      	sub	sp, #12
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
 8002b98:	6039      	str	r1, [r7, #0]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8002b9a:	2300      	movs	r3, #0
}
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	370c      	adds	r7, #12
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	bc80      	pop	{r7}
 8002ba4:	4770      	bx	lr

08002ba6 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_TypeDef *USBx)
{
 8002ba6:	b480      	push	{r7}
 8002ba8:	b083      	sub	sp, #12
 8002baa:	af00      	add	r7, sp, #0
 8002bac:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8002bae:	2300      	movs	r3, #0
}
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	370c      	adds	r7, #12
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	bc80      	pop	{r7}
 8002bb8:	4770      	bx	lr
	...

08002bbc <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	b09b      	sub	sp, #108	; 0x6c
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
 8002bc4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8002bcc:	687a      	ldr	r2, [r7, #4]
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	781b      	ldrb	r3, [r3, #0]
 8002bd2:	009b      	lsls	r3, r3, #2
 8002bd4:	4413      	add	r3, r2
 8002bd6:	881b      	ldrh	r3, [r3, #0]
 8002bd8:	b29b      	uxth	r3, r3
 8002bda:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8002bde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002be2:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	78db      	ldrb	r3, [r3, #3]
 8002bea:	2b03      	cmp	r3, #3
 8002bec:	d81f      	bhi.n	8002c2e <USB_ActivateEndpoint+0x72>
 8002bee:	a201      	add	r2, pc, #4	; (adr r2, 8002bf4 <USB_ActivateEndpoint+0x38>)
 8002bf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bf4:	08002c05 	.word	0x08002c05
 8002bf8:	08002c21 	.word	0x08002c21
 8002bfc:	08002c37 	.word	0x08002c37
 8002c00:	08002c13 	.word	0x08002c13
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8002c04:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8002c08:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002c0c:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8002c10:	e012      	b.n	8002c38 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8002c12:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8002c16:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8002c1a:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8002c1e:	e00b      	b.n	8002c38 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8002c20:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8002c24:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002c28:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8002c2c:	e004      	b.n	8002c38 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8002c2e:	2301      	movs	r3, #1
 8002c30:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8002c34:	e000      	b.n	8002c38 <USB_ActivateEndpoint+0x7c>
      break;
 8002c36:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8002c38:	687a      	ldr	r2, [r7, #4]
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	781b      	ldrb	r3, [r3, #0]
 8002c3e:	009b      	lsls	r3, r3, #2
 8002c40:	441a      	add	r2, r3
 8002c42:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8002c46:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002c4a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002c4e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c56:	b29b      	uxth	r3, r3
 8002c58:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8002c5a:	687a      	ldr	r2, [r7, #4]
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	781b      	ldrb	r3, [r3, #0]
 8002c60:	009b      	lsls	r3, r3, #2
 8002c62:	4413      	add	r3, r2
 8002c64:	881b      	ldrh	r3, [r3, #0]
 8002c66:	b29b      	uxth	r3, r3
 8002c68:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c70:	b29a      	uxth	r2, r3
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	781b      	ldrb	r3, [r3, #0]
 8002c76:	b29b      	uxth	r3, r3
 8002c78:	4313      	orrs	r3, r2
 8002c7a:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8002c7e:	687a      	ldr	r2, [r7, #4]
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	781b      	ldrb	r3, [r3, #0]
 8002c84:	009b      	lsls	r3, r3, #2
 8002c86:	441a      	add	r2, r3
 8002c88:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8002c8c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002c90:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002c94:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c9c:	b29b      	uxth	r3, r3
 8002c9e:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	7b1b      	ldrb	r3, [r3, #12]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	f040 8149 	bne.w	8002f3c <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	785b      	ldrb	r3, [r3, #1]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	f000 8084 	beq.w	8002dbc <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	617b      	str	r3, [r7, #20]
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002cbe:	b29b      	uxth	r3, r3
 8002cc0:	461a      	mov	r2, r3
 8002cc2:	697b      	ldr	r3, [r7, #20]
 8002cc4:	4413      	add	r3, r2
 8002cc6:	617b      	str	r3, [r7, #20]
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	781b      	ldrb	r3, [r3, #0]
 8002ccc:	011a      	lsls	r2, r3, #4
 8002cce:	697b      	ldr	r3, [r7, #20]
 8002cd0:	4413      	add	r3, r2
 8002cd2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002cd6:	613b      	str	r3, [r7, #16]
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	88db      	ldrh	r3, [r3, #6]
 8002cdc:	085b      	lsrs	r3, r3, #1
 8002cde:	b29b      	uxth	r3, r3
 8002ce0:	005b      	lsls	r3, r3, #1
 8002ce2:	b29a      	uxth	r2, r3
 8002ce4:	693b      	ldr	r3, [r7, #16]
 8002ce6:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002ce8:	687a      	ldr	r2, [r7, #4]
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	781b      	ldrb	r3, [r3, #0]
 8002cee:	009b      	lsls	r3, r3, #2
 8002cf0:	4413      	add	r3, r2
 8002cf2:	881b      	ldrh	r3, [r3, #0]
 8002cf4:	81fb      	strh	r3, [r7, #14]
 8002cf6:	89fb      	ldrh	r3, [r7, #14]
 8002cf8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d01b      	beq.n	8002d38 <USB_ActivateEndpoint+0x17c>
 8002d00:	687a      	ldr	r2, [r7, #4]
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	781b      	ldrb	r3, [r3, #0]
 8002d06:	009b      	lsls	r3, r3, #2
 8002d08:	4413      	add	r3, r2
 8002d0a:	881b      	ldrh	r3, [r3, #0]
 8002d0c:	b29b      	uxth	r3, r3
 8002d0e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002d12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d16:	81bb      	strh	r3, [r7, #12]
 8002d18:	687a      	ldr	r2, [r7, #4]
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	781b      	ldrb	r3, [r3, #0]
 8002d1e:	009b      	lsls	r3, r3, #2
 8002d20:	441a      	add	r2, r3
 8002d22:	89bb      	ldrh	r3, [r7, #12]
 8002d24:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002d28:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002d2c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d30:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002d34:	b29b      	uxth	r3, r3
 8002d36:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	78db      	ldrb	r3, [r3, #3]
 8002d3c:	2b01      	cmp	r3, #1
 8002d3e:	d020      	beq.n	8002d82 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8002d40:	687a      	ldr	r2, [r7, #4]
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	781b      	ldrb	r3, [r3, #0]
 8002d46:	009b      	lsls	r3, r3, #2
 8002d48:	4413      	add	r3, r2
 8002d4a:	881b      	ldrh	r3, [r3, #0]
 8002d4c:	b29b      	uxth	r3, r3
 8002d4e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002d52:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002d56:	813b      	strh	r3, [r7, #8]
 8002d58:	893b      	ldrh	r3, [r7, #8]
 8002d5a:	f083 0320 	eor.w	r3, r3, #32
 8002d5e:	813b      	strh	r3, [r7, #8]
 8002d60:	687a      	ldr	r2, [r7, #4]
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	781b      	ldrb	r3, [r3, #0]
 8002d66:	009b      	lsls	r3, r3, #2
 8002d68:	441a      	add	r2, r3
 8002d6a:	893b      	ldrh	r3, [r7, #8]
 8002d6c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002d70:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002d74:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d7c:	b29b      	uxth	r3, r3
 8002d7e:	8013      	strh	r3, [r2, #0]
 8002d80:	e27f      	b.n	8003282 <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002d82:	687a      	ldr	r2, [r7, #4]
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	781b      	ldrb	r3, [r3, #0]
 8002d88:	009b      	lsls	r3, r3, #2
 8002d8a:	4413      	add	r3, r2
 8002d8c:	881b      	ldrh	r3, [r3, #0]
 8002d8e:	b29b      	uxth	r3, r3
 8002d90:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002d94:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002d98:	817b      	strh	r3, [r7, #10]
 8002d9a:	687a      	ldr	r2, [r7, #4]
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	781b      	ldrb	r3, [r3, #0]
 8002da0:	009b      	lsls	r3, r3, #2
 8002da2:	441a      	add	r2, r3
 8002da4:	897b      	ldrh	r3, [r7, #10]
 8002da6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002daa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002dae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002db2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002db6:	b29b      	uxth	r3, r3
 8002db8:	8013      	strh	r3, [r2, #0]
 8002dba:	e262      	b.n	8003282 <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002dc6:	b29b      	uxth	r3, r3
 8002dc8:	461a      	mov	r2, r3
 8002dca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dcc:	4413      	add	r3, r2
 8002dce:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	781b      	ldrb	r3, [r3, #0]
 8002dd4:	011a      	lsls	r2, r3, #4
 8002dd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dd8:	4413      	add	r3, r2
 8002dda:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8002dde:	62bb      	str	r3, [r7, #40]	; 0x28
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	88db      	ldrh	r3, [r3, #6]
 8002de4:	085b      	lsrs	r3, r3, #1
 8002de6:	b29b      	uxth	r3, r3
 8002de8:	005b      	lsls	r3, r3, #1
 8002dea:	b29a      	uxth	r2, r3
 8002dec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dee:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	627b      	str	r3, [r7, #36]	; 0x24
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002dfa:	b29b      	uxth	r3, r3
 8002dfc:	461a      	mov	r2, r3
 8002dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e00:	4413      	add	r3, r2
 8002e02:	627b      	str	r3, [r7, #36]	; 0x24
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	781b      	ldrb	r3, [r3, #0]
 8002e08:	011a      	lsls	r2, r3, #4
 8002e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e0c:	4413      	add	r3, r2
 8002e0e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002e12:	623b      	str	r3, [r7, #32]
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	691b      	ldr	r3, [r3, #16]
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d112      	bne.n	8002e42 <USB_ActivateEndpoint+0x286>
 8002e1c:	6a3b      	ldr	r3, [r7, #32]
 8002e1e:	881b      	ldrh	r3, [r3, #0]
 8002e20:	b29b      	uxth	r3, r3
 8002e22:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002e26:	b29a      	uxth	r2, r3
 8002e28:	6a3b      	ldr	r3, [r7, #32]
 8002e2a:	801a      	strh	r2, [r3, #0]
 8002e2c:	6a3b      	ldr	r3, [r7, #32]
 8002e2e:	881b      	ldrh	r3, [r3, #0]
 8002e30:	b29b      	uxth	r3, r3
 8002e32:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002e36:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002e3a:	b29a      	uxth	r2, r3
 8002e3c:	6a3b      	ldr	r3, [r7, #32]
 8002e3e:	801a      	strh	r2, [r3, #0]
 8002e40:	e02f      	b.n	8002ea2 <USB_ActivateEndpoint+0x2e6>
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	691b      	ldr	r3, [r3, #16]
 8002e46:	2b3e      	cmp	r3, #62	; 0x3e
 8002e48:	d813      	bhi.n	8002e72 <USB_ActivateEndpoint+0x2b6>
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	691b      	ldr	r3, [r3, #16]
 8002e4e:	085b      	lsrs	r3, r3, #1
 8002e50:	663b      	str	r3, [r7, #96]	; 0x60
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	691b      	ldr	r3, [r3, #16]
 8002e56:	f003 0301 	and.w	r3, r3, #1
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d002      	beq.n	8002e64 <USB_ActivateEndpoint+0x2a8>
 8002e5e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002e60:	3301      	adds	r3, #1
 8002e62:	663b      	str	r3, [r7, #96]	; 0x60
 8002e64:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002e66:	b29b      	uxth	r3, r3
 8002e68:	029b      	lsls	r3, r3, #10
 8002e6a:	b29a      	uxth	r2, r3
 8002e6c:	6a3b      	ldr	r3, [r7, #32]
 8002e6e:	801a      	strh	r2, [r3, #0]
 8002e70:	e017      	b.n	8002ea2 <USB_ActivateEndpoint+0x2e6>
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	691b      	ldr	r3, [r3, #16]
 8002e76:	095b      	lsrs	r3, r3, #5
 8002e78:	663b      	str	r3, [r7, #96]	; 0x60
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	691b      	ldr	r3, [r3, #16]
 8002e7e:	f003 031f 	and.w	r3, r3, #31
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d102      	bne.n	8002e8c <USB_ActivateEndpoint+0x2d0>
 8002e86:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002e88:	3b01      	subs	r3, #1
 8002e8a:	663b      	str	r3, [r7, #96]	; 0x60
 8002e8c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002e8e:	b29b      	uxth	r3, r3
 8002e90:	029b      	lsls	r3, r3, #10
 8002e92:	b29b      	uxth	r3, r3
 8002e94:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002e98:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002e9c:	b29a      	uxth	r2, r3
 8002e9e:	6a3b      	ldr	r3, [r7, #32]
 8002ea0:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002ea2:	687a      	ldr	r2, [r7, #4]
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	781b      	ldrb	r3, [r3, #0]
 8002ea8:	009b      	lsls	r3, r3, #2
 8002eaa:	4413      	add	r3, r2
 8002eac:	881b      	ldrh	r3, [r3, #0]
 8002eae:	83fb      	strh	r3, [r7, #30]
 8002eb0:	8bfb      	ldrh	r3, [r7, #30]
 8002eb2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d01b      	beq.n	8002ef2 <USB_ActivateEndpoint+0x336>
 8002eba:	687a      	ldr	r2, [r7, #4]
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	781b      	ldrb	r3, [r3, #0]
 8002ec0:	009b      	lsls	r3, r3, #2
 8002ec2:	4413      	add	r3, r2
 8002ec4:	881b      	ldrh	r3, [r3, #0]
 8002ec6:	b29b      	uxth	r3, r3
 8002ec8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002ecc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ed0:	83bb      	strh	r3, [r7, #28]
 8002ed2:	687a      	ldr	r2, [r7, #4]
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	781b      	ldrb	r3, [r3, #0]
 8002ed8:	009b      	lsls	r3, r3, #2
 8002eda:	441a      	add	r2, r3
 8002edc:	8bbb      	ldrh	r3, [r7, #28]
 8002ede:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002ee2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002ee6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002eea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002eee:	b29b      	uxth	r3, r3
 8002ef0:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8002ef2:	687a      	ldr	r2, [r7, #4]
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	781b      	ldrb	r3, [r3, #0]
 8002ef8:	009b      	lsls	r3, r3, #2
 8002efa:	4413      	add	r3, r2
 8002efc:	881b      	ldrh	r3, [r3, #0]
 8002efe:	b29b      	uxth	r3, r3
 8002f00:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002f04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f08:	837b      	strh	r3, [r7, #26]
 8002f0a:	8b7b      	ldrh	r3, [r7, #26]
 8002f0c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8002f10:	837b      	strh	r3, [r7, #26]
 8002f12:	8b7b      	ldrh	r3, [r7, #26]
 8002f14:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002f18:	837b      	strh	r3, [r7, #26]
 8002f1a:	687a      	ldr	r2, [r7, #4]
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	781b      	ldrb	r3, [r3, #0]
 8002f20:	009b      	lsls	r3, r3, #2
 8002f22:	441a      	add	r2, r3
 8002f24:	8b7b      	ldrh	r3, [r7, #26]
 8002f26:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002f2a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002f2e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f36:	b29b      	uxth	r3, r3
 8002f38:	8013      	strh	r3, [r2, #0]
 8002f3a:	e1a2      	b.n	8003282 <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8002f3c:	687a      	ldr	r2, [r7, #4]
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	781b      	ldrb	r3, [r3, #0]
 8002f42:	009b      	lsls	r3, r3, #2
 8002f44:	4413      	add	r3, r2
 8002f46:	881b      	ldrh	r3, [r3, #0]
 8002f48:	b29b      	uxth	r3, r3
 8002f4a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f52:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8002f56:	687a      	ldr	r2, [r7, #4]
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	781b      	ldrb	r3, [r3, #0]
 8002f5c:	009b      	lsls	r3, r3, #2
 8002f5e:	441a      	add	r2, r3
 8002f60:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8002f64:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002f68:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002f6c:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8002f70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f74:	b29b      	uxth	r3, r3
 8002f76:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	65bb      	str	r3, [r7, #88]	; 0x58
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f82:	b29b      	uxth	r3, r3
 8002f84:	461a      	mov	r2, r3
 8002f86:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002f88:	4413      	add	r3, r2
 8002f8a:	65bb      	str	r3, [r7, #88]	; 0x58
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	781b      	ldrb	r3, [r3, #0]
 8002f90:	011a      	lsls	r2, r3, #4
 8002f92:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002f94:	4413      	add	r3, r2
 8002f96:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002f9a:	657b      	str	r3, [r7, #84]	; 0x54
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	891b      	ldrh	r3, [r3, #8]
 8002fa0:	085b      	lsrs	r3, r3, #1
 8002fa2:	b29b      	uxth	r3, r3
 8002fa4:	005b      	lsls	r3, r3, #1
 8002fa6:	b29a      	uxth	r2, r3
 8002fa8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002faa:	801a      	strh	r2, [r3, #0]
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	653b      	str	r3, [r7, #80]	; 0x50
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002fb6:	b29b      	uxth	r3, r3
 8002fb8:	461a      	mov	r2, r3
 8002fba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002fbc:	4413      	add	r3, r2
 8002fbe:	653b      	str	r3, [r7, #80]	; 0x50
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	781b      	ldrb	r3, [r3, #0]
 8002fc4:	011a      	lsls	r2, r3, #4
 8002fc6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002fc8:	4413      	add	r3, r2
 8002fca:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8002fce:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	895b      	ldrh	r3, [r3, #10]
 8002fd4:	085b      	lsrs	r3, r3, #1
 8002fd6:	b29b      	uxth	r3, r3
 8002fd8:	005b      	lsls	r3, r3, #1
 8002fda:	b29a      	uxth	r2, r3
 8002fdc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002fde:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	785b      	ldrb	r3, [r3, #1]
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	f040 8091 	bne.w	800310c <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002fea:	687a      	ldr	r2, [r7, #4]
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	781b      	ldrb	r3, [r3, #0]
 8002ff0:	009b      	lsls	r3, r3, #2
 8002ff2:	4413      	add	r3, r2
 8002ff4:	881b      	ldrh	r3, [r3, #0]
 8002ff6:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8002ff8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8002ffa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d01b      	beq.n	800303a <USB_ActivateEndpoint+0x47e>
 8003002:	687a      	ldr	r2, [r7, #4]
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	781b      	ldrb	r3, [r3, #0]
 8003008:	009b      	lsls	r3, r3, #2
 800300a:	4413      	add	r3, r2
 800300c:	881b      	ldrh	r3, [r3, #0]
 800300e:	b29b      	uxth	r3, r3
 8003010:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003014:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003018:	877b      	strh	r3, [r7, #58]	; 0x3a
 800301a:	687a      	ldr	r2, [r7, #4]
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	781b      	ldrb	r3, [r3, #0]
 8003020:	009b      	lsls	r3, r3, #2
 8003022:	441a      	add	r2, r3
 8003024:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8003026:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800302a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800302e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003032:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003036:	b29b      	uxth	r3, r3
 8003038:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800303a:	687a      	ldr	r2, [r7, #4]
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	781b      	ldrb	r3, [r3, #0]
 8003040:	009b      	lsls	r3, r3, #2
 8003042:	4413      	add	r3, r2
 8003044:	881b      	ldrh	r3, [r3, #0]
 8003046:	873b      	strh	r3, [r7, #56]	; 0x38
 8003048:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800304a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800304e:	2b00      	cmp	r3, #0
 8003050:	d01b      	beq.n	800308a <USB_ActivateEndpoint+0x4ce>
 8003052:	687a      	ldr	r2, [r7, #4]
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	781b      	ldrb	r3, [r3, #0]
 8003058:	009b      	lsls	r3, r3, #2
 800305a:	4413      	add	r3, r2
 800305c:	881b      	ldrh	r3, [r3, #0]
 800305e:	b29b      	uxth	r3, r3
 8003060:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003064:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003068:	86fb      	strh	r3, [r7, #54]	; 0x36
 800306a:	687a      	ldr	r2, [r7, #4]
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	781b      	ldrb	r3, [r3, #0]
 8003070:	009b      	lsls	r3, r3, #2
 8003072:	441a      	add	r2, r3
 8003074:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003076:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800307a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800307e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003082:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003086:	b29b      	uxth	r3, r3
 8003088:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800308a:	687a      	ldr	r2, [r7, #4]
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	781b      	ldrb	r3, [r3, #0]
 8003090:	009b      	lsls	r3, r3, #2
 8003092:	4413      	add	r3, r2
 8003094:	881b      	ldrh	r3, [r3, #0]
 8003096:	b29b      	uxth	r3, r3
 8003098:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800309c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030a0:	86bb      	strh	r3, [r7, #52]	; 0x34
 80030a2:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80030a4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80030a8:	86bb      	strh	r3, [r7, #52]	; 0x34
 80030aa:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80030ac:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80030b0:	86bb      	strh	r3, [r7, #52]	; 0x34
 80030b2:	687a      	ldr	r2, [r7, #4]
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	781b      	ldrb	r3, [r3, #0]
 80030b8:	009b      	lsls	r3, r3, #2
 80030ba:	441a      	add	r2, r3
 80030bc:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80030be:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80030c2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80030c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80030ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80030ce:	b29b      	uxth	r3, r3
 80030d0:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80030d2:	687a      	ldr	r2, [r7, #4]
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	781b      	ldrb	r3, [r3, #0]
 80030d8:	009b      	lsls	r3, r3, #2
 80030da:	4413      	add	r3, r2
 80030dc:	881b      	ldrh	r3, [r3, #0]
 80030de:	b29b      	uxth	r3, r3
 80030e0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80030e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80030e8:	867b      	strh	r3, [r7, #50]	; 0x32
 80030ea:	687a      	ldr	r2, [r7, #4]
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	781b      	ldrb	r3, [r3, #0]
 80030f0:	009b      	lsls	r3, r3, #2
 80030f2:	441a      	add	r2, r3
 80030f4:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80030f6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80030fa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80030fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003102:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003106:	b29b      	uxth	r3, r3
 8003108:	8013      	strh	r3, [r2, #0]
 800310a:	e0ba      	b.n	8003282 <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800310c:	687a      	ldr	r2, [r7, #4]
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	781b      	ldrb	r3, [r3, #0]
 8003112:	009b      	lsls	r3, r3, #2
 8003114:	4413      	add	r3, r2
 8003116:	881b      	ldrh	r3, [r3, #0]
 8003118:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800311c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003120:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003124:	2b00      	cmp	r3, #0
 8003126:	d01d      	beq.n	8003164 <USB_ActivateEndpoint+0x5a8>
 8003128:	687a      	ldr	r2, [r7, #4]
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	781b      	ldrb	r3, [r3, #0]
 800312e:	009b      	lsls	r3, r3, #2
 8003130:	4413      	add	r3, r2
 8003132:	881b      	ldrh	r3, [r3, #0]
 8003134:	b29b      	uxth	r3, r3
 8003136:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800313a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800313e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8003142:	687a      	ldr	r2, [r7, #4]
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	781b      	ldrb	r3, [r3, #0]
 8003148:	009b      	lsls	r3, r3, #2
 800314a:	441a      	add	r2, r3
 800314c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003150:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003154:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003158:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800315c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003160:	b29b      	uxth	r3, r3
 8003162:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003164:	687a      	ldr	r2, [r7, #4]
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	781b      	ldrb	r3, [r3, #0]
 800316a:	009b      	lsls	r3, r3, #2
 800316c:	4413      	add	r3, r2
 800316e:	881b      	ldrh	r3, [r3, #0]
 8003170:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8003174:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8003178:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800317c:	2b00      	cmp	r3, #0
 800317e:	d01d      	beq.n	80031bc <USB_ActivateEndpoint+0x600>
 8003180:	687a      	ldr	r2, [r7, #4]
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	781b      	ldrb	r3, [r3, #0]
 8003186:	009b      	lsls	r3, r3, #2
 8003188:	4413      	add	r3, r2
 800318a:	881b      	ldrh	r3, [r3, #0]
 800318c:	b29b      	uxth	r3, r3
 800318e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003192:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003196:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800319a:	687a      	ldr	r2, [r7, #4]
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	781b      	ldrb	r3, [r3, #0]
 80031a0:	009b      	lsls	r3, r3, #2
 80031a2:	441a      	add	r2, r3
 80031a4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80031a8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80031ac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80031b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80031b4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80031b8:	b29b      	uxth	r3, r3
 80031ba:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	78db      	ldrb	r3, [r3, #3]
 80031c0:	2b01      	cmp	r3, #1
 80031c2:	d024      	beq.n	800320e <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80031c4:	687a      	ldr	r2, [r7, #4]
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	781b      	ldrb	r3, [r3, #0]
 80031ca:	009b      	lsls	r3, r3, #2
 80031cc:	4413      	add	r3, r2
 80031ce:	881b      	ldrh	r3, [r3, #0]
 80031d0:	b29b      	uxth	r3, r3
 80031d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80031d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80031da:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80031de:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80031e2:	f083 0320 	eor.w	r3, r3, #32
 80031e6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80031ea:	687a      	ldr	r2, [r7, #4]
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	781b      	ldrb	r3, [r3, #0]
 80031f0:	009b      	lsls	r3, r3, #2
 80031f2:	441a      	add	r2, r3
 80031f4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80031f8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80031fc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003200:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003204:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003208:	b29b      	uxth	r3, r3
 800320a:	8013      	strh	r3, [r2, #0]
 800320c:	e01d      	b.n	800324a <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800320e:	687a      	ldr	r2, [r7, #4]
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	781b      	ldrb	r3, [r3, #0]
 8003214:	009b      	lsls	r3, r3, #2
 8003216:	4413      	add	r3, r2
 8003218:	881b      	ldrh	r3, [r3, #0]
 800321a:	b29b      	uxth	r3, r3
 800321c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003220:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003224:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8003228:	687a      	ldr	r2, [r7, #4]
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	781b      	ldrb	r3, [r3, #0]
 800322e:	009b      	lsls	r3, r3, #2
 8003230:	441a      	add	r2, r3
 8003232:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8003236:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800323a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800323e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003242:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003246:	b29b      	uxth	r3, r3
 8003248:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800324a:	687a      	ldr	r2, [r7, #4]
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	781b      	ldrb	r3, [r3, #0]
 8003250:	009b      	lsls	r3, r3, #2
 8003252:	4413      	add	r3, r2
 8003254:	881b      	ldrh	r3, [r3, #0]
 8003256:	b29b      	uxth	r3, r3
 8003258:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800325c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003260:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8003262:	687a      	ldr	r2, [r7, #4]
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	781b      	ldrb	r3, [r3, #0]
 8003268:	009b      	lsls	r3, r3, #2
 800326a:	441a      	add	r2, r3
 800326c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800326e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003272:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003276:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800327a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800327e:	b29b      	uxth	r3, r3
 8003280:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8003282:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8003286:	4618      	mov	r0, r3
 8003288:	376c      	adds	r7, #108	; 0x6c
 800328a:	46bd      	mov	sp, r7
 800328c:	bc80      	pop	{r7}
 800328e:	4770      	bx	lr

08003290 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003290:	b480      	push	{r7}
 8003292:	b08d      	sub	sp, #52	; 0x34
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
 8003298:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	7b1b      	ldrb	r3, [r3, #12]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	f040 808e 	bne.w	80033c0 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	785b      	ldrb	r3, [r3, #1]
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d044      	beq.n	8003336 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80032ac:	687a      	ldr	r2, [r7, #4]
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	781b      	ldrb	r3, [r3, #0]
 80032b2:	009b      	lsls	r3, r3, #2
 80032b4:	4413      	add	r3, r2
 80032b6:	881b      	ldrh	r3, [r3, #0]
 80032b8:	81bb      	strh	r3, [r7, #12]
 80032ba:	89bb      	ldrh	r3, [r7, #12]
 80032bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d01b      	beq.n	80032fc <USB_DeactivateEndpoint+0x6c>
 80032c4:	687a      	ldr	r2, [r7, #4]
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	781b      	ldrb	r3, [r3, #0]
 80032ca:	009b      	lsls	r3, r3, #2
 80032cc:	4413      	add	r3, r2
 80032ce:	881b      	ldrh	r3, [r3, #0]
 80032d0:	b29b      	uxth	r3, r3
 80032d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80032d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032da:	817b      	strh	r3, [r7, #10]
 80032dc:	687a      	ldr	r2, [r7, #4]
 80032de:	683b      	ldr	r3, [r7, #0]
 80032e0:	781b      	ldrb	r3, [r3, #0]
 80032e2:	009b      	lsls	r3, r3, #2
 80032e4:	441a      	add	r2, r3
 80032e6:	897b      	ldrh	r3, [r7, #10]
 80032e8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80032ec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80032f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80032f4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80032f8:	b29b      	uxth	r3, r3
 80032fa:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80032fc:	687a      	ldr	r2, [r7, #4]
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	781b      	ldrb	r3, [r3, #0]
 8003302:	009b      	lsls	r3, r3, #2
 8003304:	4413      	add	r3, r2
 8003306:	881b      	ldrh	r3, [r3, #0]
 8003308:	b29b      	uxth	r3, r3
 800330a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800330e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003312:	813b      	strh	r3, [r7, #8]
 8003314:	687a      	ldr	r2, [r7, #4]
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	781b      	ldrb	r3, [r3, #0]
 800331a:	009b      	lsls	r3, r3, #2
 800331c:	441a      	add	r2, r3
 800331e:	893b      	ldrh	r3, [r7, #8]
 8003320:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003324:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003328:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800332c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003330:	b29b      	uxth	r3, r3
 8003332:	8013      	strh	r3, [r2, #0]
 8003334:	e192      	b.n	800365c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003336:	687a      	ldr	r2, [r7, #4]
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	781b      	ldrb	r3, [r3, #0]
 800333c:	009b      	lsls	r3, r3, #2
 800333e:	4413      	add	r3, r2
 8003340:	881b      	ldrh	r3, [r3, #0]
 8003342:	827b      	strh	r3, [r7, #18]
 8003344:	8a7b      	ldrh	r3, [r7, #18]
 8003346:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800334a:	2b00      	cmp	r3, #0
 800334c:	d01b      	beq.n	8003386 <USB_DeactivateEndpoint+0xf6>
 800334e:	687a      	ldr	r2, [r7, #4]
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	781b      	ldrb	r3, [r3, #0]
 8003354:	009b      	lsls	r3, r3, #2
 8003356:	4413      	add	r3, r2
 8003358:	881b      	ldrh	r3, [r3, #0]
 800335a:	b29b      	uxth	r3, r3
 800335c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003360:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003364:	823b      	strh	r3, [r7, #16]
 8003366:	687a      	ldr	r2, [r7, #4]
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	781b      	ldrb	r3, [r3, #0]
 800336c:	009b      	lsls	r3, r3, #2
 800336e:	441a      	add	r2, r3
 8003370:	8a3b      	ldrh	r3, [r7, #16]
 8003372:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003376:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800337a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800337e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003382:	b29b      	uxth	r3, r3
 8003384:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003386:	687a      	ldr	r2, [r7, #4]
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	781b      	ldrb	r3, [r3, #0]
 800338c:	009b      	lsls	r3, r3, #2
 800338e:	4413      	add	r3, r2
 8003390:	881b      	ldrh	r3, [r3, #0]
 8003392:	b29b      	uxth	r3, r3
 8003394:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003398:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800339c:	81fb      	strh	r3, [r7, #14]
 800339e:	687a      	ldr	r2, [r7, #4]
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	781b      	ldrb	r3, [r3, #0]
 80033a4:	009b      	lsls	r3, r3, #2
 80033a6:	441a      	add	r2, r3
 80033a8:	89fb      	ldrh	r3, [r7, #14]
 80033aa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80033ae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80033b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80033b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80033ba:	b29b      	uxth	r3, r3
 80033bc:	8013      	strh	r3, [r2, #0]
 80033be:	e14d      	b.n	800365c <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	785b      	ldrb	r3, [r3, #1]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	f040 80a5 	bne.w	8003514 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80033ca:	687a      	ldr	r2, [r7, #4]
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	781b      	ldrb	r3, [r3, #0]
 80033d0:	009b      	lsls	r3, r3, #2
 80033d2:	4413      	add	r3, r2
 80033d4:	881b      	ldrh	r3, [r3, #0]
 80033d6:	843b      	strh	r3, [r7, #32]
 80033d8:	8c3b      	ldrh	r3, [r7, #32]
 80033da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d01b      	beq.n	800341a <USB_DeactivateEndpoint+0x18a>
 80033e2:	687a      	ldr	r2, [r7, #4]
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	781b      	ldrb	r3, [r3, #0]
 80033e8:	009b      	lsls	r3, r3, #2
 80033ea:	4413      	add	r3, r2
 80033ec:	881b      	ldrh	r3, [r3, #0]
 80033ee:	b29b      	uxth	r3, r3
 80033f0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80033f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033f8:	83fb      	strh	r3, [r7, #30]
 80033fa:	687a      	ldr	r2, [r7, #4]
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	781b      	ldrb	r3, [r3, #0]
 8003400:	009b      	lsls	r3, r3, #2
 8003402:	441a      	add	r2, r3
 8003404:	8bfb      	ldrh	r3, [r7, #30]
 8003406:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800340a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800340e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003412:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003416:	b29b      	uxth	r3, r3
 8003418:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800341a:	687a      	ldr	r2, [r7, #4]
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	781b      	ldrb	r3, [r3, #0]
 8003420:	009b      	lsls	r3, r3, #2
 8003422:	4413      	add	r3, r2
 8003424:	881b      	ldrh	r3, [r3, #0]
 8003426:	83bb      	strh	r3, [r7, #28]
 8003428:	8bbb      	ldrh	r3, [r7, #28]
 800342a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800342e:	2b00      	cmp	r3, #0
 8003430:	d01b      	beq.n	800346a <USB_DeactivateEndpoint+0x1da>
 8003432:	687a      	ldr	r2, [r7, #4]
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	781b      	ldrb	r3, [r3, #0]
 8003438:	009b      	lsls	r3, r3, #2
 800343a:	4413      	add	r3, r2
 800343c:	881b      	ldrh	r3, [r3, #0]
 800343e:	b29b      	uxth	r3, r3
 8003440:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003444:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003448:	837b      	strh	r3, [r7, #26]
 800344a:	687a      	ldr	r2, [r7, #4]
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	781b      	ldrb	r3, [r3, #0]
 8003450:	009b      	lsls	r3, r3, #2
 8003452:	441a      	add	r2, r3
 8003454:	8b7b      	ldrh	r3, [r7, #26]
 8003456:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800345a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800345e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003462:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003466:	b29b      	uxth	r3, r3
 8003468:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800346a:	687a      	ldr	r2, [r7, #4]
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	781b      	ldrb	r3, [r3, #0]
 8003470:	009b      	lsls	r3, r3, #2
 8003472:	4413      	add	r3, r2
 8003474:	881b      	ldrh	r3, [r3, #0]
 8003476:	b29b      	uxth	r3, r3
 8003478:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800347c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003480:	833b      	strh	r3, [r7, #24]
 8003482:	687a      	ldr	r2, [r7, #4]
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	781b      	ldrb	r3, [r3, #0]
 8003488:	009b      	lsls	r3, r3, #2
 800348a:	441a      	add	r2, r3
 800348c:	8b3b      	ldrh	r3, [r7, #24]
 800348e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003492:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003496:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800349a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800349e:	b29b      	uxth	r3, r3
 80034a0:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80034a2:	687a      	ldr	r2, [r7, #4]
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	781b      	ldrb	r3, [r3, #0]
 80034a8:	009b      	lsls	r3, r3, #2
 80034aa:	4413      	add	r3, r2
 80034ac:	881b      	ldrh	r3, [r3, #0]
 80034ae:	b29b      	uxth	r3, r3
 80034b0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80034b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034b8:	82fb      	strh	r3, [r7, #22]
 80034ba:	687a      	ldr	r2, [r7, #4]
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	781b      	ldrb	r3, [r3, #0]
 80034c0:	009b      	lsls	r3, r3, #2
 80034c2:	441a      	add	r2, r3
 80034c4:	8afb      	ldrh	r3, [r7, #22]
 80034c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80034ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80034ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80034d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80034d6:	b29b      	uxth	r3, r3
 80034d8:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80034da:	687a      	ldr	r2, [r7, #4]
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	781b      	ldrb	r3, [r3, #0]
 80034e0:	009b      	lsls	r3, r3, #2
 80034e2:	4413      	add	r3, r2
 80034e4:	881b      	ldrh	r3, [r3, #0]
 80034e6:	b29b      	uxth	r3, r3
 80034e8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80034ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80034f0:	82bb      	strh	r3, [r7, #20]
 80034f2:	687a      	ldr	r2, [r7, #4]
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	781b      	ldrb	r3, [r3, #0]
 80034f8:	009b      	lsls	r3, r3, #2
 80034fa:	441a      	add	r2, r3
 80034fc:	8abb      	ldrh	r3, [r7, #20]
 80034fe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003502:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003506:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800350a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800350e:	b29b      	uxth	r3, r3
 8003510:	8013      	strh	r3, [r2, #0]
 8003512:	e0a3      	b.n	800365c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003514:	687a      	ldr	r2, [r7, #4]
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	781b      	ldrb	r3, [r3, #0]
 800351a:	009b      	lsls	r3, r3, #2
 800351c:	4413      	add	r3, r2
 800351e:	881b      	ldrh	r3, [r3, #0]
 8003520:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8003522:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003524:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003528:	2b00      	cmp	r3, #0
 800352a:	d01b      	beq.n	8003564 <USB_DeactivateEndpoint+0x2d4>
 800352c:	687a      	ldr	r2, [r7, #4]
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	781b      	ldrb	r3, [r3, #0]
 8003532:	009b      	lsls	r3, r3, #2
 8003534:	4413      	add	r3, r2
 8003536:	881b      	ldrh	r3, [r3, #0]
 8003538:	b29b      	uxth	r3, r3
 800353a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800353e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003542:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8003544:	687a      	ldr	r2, [r7, #4]
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	781b      	ldrb	r3, [r3, #0]
 800354a:	009b      	lsls	r3, r3, #2
 800354c:	441a      	add	r2, r3
 800354e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8003550:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003554:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003558:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800355c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003560:	b29b      	uxth	r3, r3
 8003562:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003564:	687a      	ldr	r2, [r7, #4]
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	781b      	ldrb	r3, [r3, #0]
 800356a:	009b      	lsls	r3, r3, #2
 800356c:	4413      	add	r3, r2
 800356e:	881b      	ldrh	r3, [r3, #0]
 8003570:	857b      	strh	r3, [r7, #42]	; 0x2a
 8003572:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003574:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003578:	2b00      	cmp	r3, #0
 800357a:	d01b      	beq.n	80035b4 <USB_DeactivateEndpoint+0x324>
 800357c:	687a      	ldr	r2, [r7, #4]
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	781b      	ldrb	r3, [r3, #0]
 8003582:	009b      	lsls	r3, r3, #2
 8003584:	4413      	add	r3, r2
 8003586:	881b      	ldrh	r3, [r3, #0]
 8003588:	b29b      	uxth	r3, r3
 800358a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800358e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003592:	853b      	strh	r3, [r7, #40]	; 0x28
 8003594:	687a      	ldr	r2, [r7, #4]
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	781b      	ldrb	r3, [r3, #0]
 800359a:	009b      	lsls	r3, r3, #2
 800359c:	441a      	add	r2, r3
 800359e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80035a0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80035a4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80035a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80035ac:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80035b0:	b29b      	uxth	r3, r3
 80035b2:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80035b4:	687a      	ldr	r2, [r7, #4]
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	781b      	ldrb	r3, [r3, #0]
 80035ba:	009b      	lsls	r3, r3, #2
 80035bc:	4413      	add	r3, r2
 80035be:	881b      	ldrh	r3, [r3, #0]
 80035c0:	b29b      	uxth	r3, r3
 80035c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80035c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035ca:	84fb      	strh	r3, [r7, #38]	; 0x26
 80035cc:	687a      	ldr	r2, [r7, #4]
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	781b      	ldrb	r3, [r3, #0]
 80035d2:	009b      	lsls	r3, r3, #2
 80035d4:	441a      	add	r2, r3
 80035d6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80035d8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80035dc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80035e0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80035e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80035e8:	b29b      	uxth	r3, r3
 80035ea:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80035ec:	687a      	ldr	r2, [r7, #4]
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	781b      	ldrb	r3, [r3, #0]
 80035f2:	009b      	lsls	r3, r3, #2
 80035f4:	4413      	add	r3, r2
 80035f6:	881b      	ldrh	r3, [r3, #0]
 80035f8:	b29b      	uxth	r3, r3
 80035fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80035fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003602:	84bb      	strh	r3, [r7, #36]	; 0x24
 8003604:	687a      	ldr	r2, [r7, #4]
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	781b      	ldrb	r3, [r3, #0]
 800360a:	009b      	lsls	r3, r3, #2
 800360c:	441a      	add	r2, r3
 800360e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003610:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003614:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003618:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800361c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003620:	b29b      	uxth	r3, r3
 8003622:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003624:	687a      	ldr	r2, [r7, #4]
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	781b      	ldrb	r3, [r3, #0]
 800362a:	009b      	lsls	r3, r3, #2
 800362c:	4413      	add	r3, r2
 800362e:	881b      	ldrh	r3, [r3, #0]
 8003630:	b29b      	uxth	r3, r3
 8003632:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003636:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800363a:	847b      	strh	r3, [r7, #34]	; 0x22
 800363c:	687a      	ldr	r2, [r7, #4]
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	781b      	ldrb	r3, [r3, #0]
 8003642:	009b      	lsls	r3, r3, #2
 8003644:	441a      	add	r2, r3
 8003646:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003648:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800364c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003650:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003654:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003658:	b29b      	uxth	r3, r3
 800365a:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800365c:	2300      	movs	r3, #0
}
 800365e:	4618      	mov	r0, r3
 8003660:	3734      	adds	r7, #52	; 0x34
 8003662:	46bd      	mov	sp, r7
 8003664:	bc80      	pop	{r7}
 8003666:	4770      	bx	lr

08003668 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	b0c4      	sub	sp, #272	; 0x110
 800366c:	af00      	add	r7, sp, #0
 800366e:	1d3b      	adds	r3, r7, #4
 8003670:	6018      	str	r0, [r3, #0]
 8003672:	463b      	mov	r3, r7
 8003674:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003676:	463b      	mov	r3, r7
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	785b      	ldrb	r3, [r3, #1]
 800367c:	2b01      	cmp	r3, #1
 800367e:	f040 8557 	bne.w	8004130 <USB_EPStartXfer+0xac8>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8003682:	463b      	mov	r3, r7
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	699a      	ldr	r2, [r3, #24]
 8003688:	463b      	mov	r3, r7
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	691b      	ldr	r3, [r3, #16]
 800368e:	429a      	cmp	r2, r3
 8003690:	d905      	bls.n	800369e <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 8003692:	463b      	mov	r3, r7
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	691b      	ldr	r3, [r3, #16]
 8003698:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800369c:	e004      	b.n	80036a8 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 800369e:	463b      	mov	r3, r7
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	699b      	ldr	r3, [r3, #24]
 80036a4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80036a8:	463b      	mov	r3, r7
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	7b1b      	ldrb	r3, [r3, #12]
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d12c      	bne.n	800370c <USB_EPStartXfer+0xa4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80036b2:	463b      	mov	r3, r7
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	6959      	ldr	r1, [r3, #20]
 80036b8:	463b      	mov	r3, r7
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	88da      	ldrh	r2, [r3, #6]
 80036be:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80036c2:	b29b      	uxth	r3, r3
 80036c4:	1d38      	adds	r0, r7, #4
 80036c6:	6800      	ldr	r0, [r0, #0]
 80036c8:	f001 fa2c 	bl	8004b24 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80036cc:	1d3b      	adds	r3, r7, #4
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	617b      	str	r3, [r7, #20]
 80036d2:	1d3b      	adds	r3, r7, #4
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80036da:	b29b      	uxth	r3, r3
 80036dc:	461a      	mov	r2, r3
 80036de:	697b      	ldr	r3, [r7, #20]
 80036e0:	4413      	add	r3, r2
 80036e2:	617b      	str	r3, [r7, #20]
 80036e4:	463b      	mov	r3, r7
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	781b      	ldrb	r3, [r3, #0]
 80036ea:	011a      	lsls	r2, r3, #4
 80036ec:	697b      	ldr	r3, [r7, #20]
 80036ee:	4413      	add	r3, r2
 80036f0:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80036f4:	f107 0310 	add.w	r3, r7, #16
 80036f8:	601a      	str	r2, [r3, #0]
 80036fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80036fe:	b29a      	uxth	r2, r3
 8003700:	f107 0310 	add.w	r3, r7, #16
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	801a      	strh	r2, [r3, #0]
 8003708:	f000 bcdd 	b.w	80040c6 <USB_EPStartXfer+0xa5e>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800370c:	463b      	mov	r3, r7
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	78db      	ldrb	r3, [r3, #3]
 8003712:	2b02      	cmp	r3, #2
 8003714:	f040 8347 	bne.w	8003da6 <USB_EPStartXfer+0x73e>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8003718:	463b      	mov	r3, r7
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	6a1a      	ldr	r2, [r3, #32]
 800371e:	463b      	mov	r3, r7
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	691b      	ldr	r3, [r3, #16]
 8003724:	429a      	cmp	r2, r3
 8003726:	f240 82eb 	bls.w	8003d00 <USB_EPStartXfer+0x698>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 800372a:	1d3b      	adds	r3, r7, #4
 800372c:	681a      	ldr	r2, [r3, #0]
 800372e:	463b      	mov	r3, r7
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	781b      	ldrb	r3, [r3, #0]
 8003734:	009b      	lsls	r3, r3, #2
 8003736:	4413      	add	r3, r2
 8003738:	881b      	ldrh	r3, [r3, #0]
 800373a:	b29b      	uxth	r3, r3
 800373c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003740:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003744:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 8003748:	1d3b      	adds	r3, r7, #4
 800374a:	681a      	ldr	r2, [r3, #0]
 800374c:	463b      	mov	r3, r7
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	781b      	ldrb	r3, [r3, #0]
 8003752:	009b      	lsls	r3, r3, #2
 8003754:	441a      	add	r2, r3
 8003756:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 800375a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800375e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003762:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8003766:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800376a:	b29b      	uxth	r3, r3
 800376c:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800376e:	463b      	mov	r3, r7
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	6a1a      	ldr	r2, [r3, #32]
 8003774:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003778:	1ad2      	subs	r2, r2, r3
 800377a:	463b      	mov	r3, r7
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8003780:	1d3b      	adds	r3, r7, #4
 8003782:	681a      	ldr	r2, [r3, #0]
 8003784:	463b      	mov	r3, r7
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	781b      	ldrb	r3, [r3, #0]
 800378a:	009b      	lsls	r3, r3, #2
 800378c:	4413      	add	r3, r2
 800378e:	881b      	ldrh	r3, [r3, #0]
 8003790:	b29b      	uxth	r3, r3
 8003792:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003796:	2b00      	cmp	r3, #0
 8003798:	f000 8159 	beq.w	8003a4e <USB_EPStartXfer+0x3e6>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800379c:	1d3b      	adds	r3, r7, #4
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	637b      	str	r3, [r7, #52]	; 0x34
 80037a2:	463b      	mov	r3, r7
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	785b      	ldrb	r3, [r3, #1]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d164      	bne.n	8003876 <USB_EPStartXfer+0x20e>
 80037ac:	1d3b      	adds	r3, r7, #4
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80037b2:	1d3b      	adds	r3, r7, #4
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80037ba:	b29b      	uxth	r3, r3
 80037bc:	461a      	mov	r2, r3
 80037be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037c0:	4413      	add	r3, r2
 80037c2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80037c4:	463b      	mov	r3, r7
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	781b      	ldrb	r3, [r3, #0]
 80037ca:	011a      	lsls	r2, r3, #4
 80037cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037ce:	4413      	add	r3, r2
 80037d0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80037d4:	62bb      	str	r3, [r7, #40]	; 0x28
 80037d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d112      	bne.n	8003804 <USB_EPStartXfer+0x19c>
 80037de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037e0:	881b      	ldrh	r3, [r3, #0]
 80037e2:	b29b      	uxth	r3, r3
 80037e4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80037e8:	b29a      	uxth	r2, r3
 80037ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037ec:	801a      	strh	r2, [r3, #0]
 80037ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037f0:	881b      	ldrh	r3, [r3, #0]
 80037f2:	b29b      	uxth	r3, r3
 80037f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80037f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80037fc:	b29a      	uxth	r2, r3
 80037fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003800:	801a      	strh	r2, [r3, #0]
 8003802:	e054      	b.n	80038ae <USB_EPStartXfer+0x246>
 8003804:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003808:	2b3e      	cmp	r3, #62	; 0x3e
 800380a:	d817      	bhi.n	800383c <USB_EPStartXfer+0x1d4>
 800380c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003810:	085b      	lsrs	r3, r3, #1
 8003812:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003816:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800381a:	f003 0301 	and.w	r3, r3, #1
 800381e:	2b00      	cmp	r3, #0
 8003820:	d004      	beq.n	800382c <USB_EPStartXfer+0x1c4>
 8003822:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003826:	3301      	adds	r3, #1
 8003828:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800382c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003830:	b29b      	uxth	r3, r3
 8003832:	029b      	lsls	r3, r3, #10
 8003834:	b29a      	uxth	r2, r3
 8003836:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003838:	801a      	strh	r2, [r3, #0]
 800383a:	e038      	b.n	80038ae <USB_EPStartXfer+0x246>
 800383c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003840:	095b      	lsrs	r3, r3, #5
 8003842:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003846:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800384a:	f003 031f 	and.w	r3, r3, #31
 800384e:	2b00      	cmp	r3, #0
 8003850:	d104      	bne.n	800385c <USB_EPStartXfer+0x1f4>
 8003852:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003856:	3b01      	subs	r3, #1
 8003858:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800385c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003860:	b29b      	uxth	r3, r3
 8003862:	029b      	lsls	r3, r3, #10
 8003864:	b29b      	uxth	r3, r3
 8003866:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800386a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800386e:	b29a      	uxth	r2, r3
 8003870:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003872:	801a      	strh	r2, [r3, #0]
 8003874:	e01b      	b.n	80038ae <USB_EPStartXfer+0x246>
 8003876:	463b      	mov	r3, r7
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	785b      	ldrb	r3, [r3, #1]
 800387c:	2b01      	cmp	r3, #1
 800387e:	d116      	bne.n	80038ae <USB_EPStartXfer+0x246>
 8003880:	1d3b      	adds	r3, r7, #4
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003888:	b29b      	uxth	r3, r3
 800388a:	461a      	mov	r2, r3
 800388c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800388e:	4413      	add	r3, r2
 8003890:	637b      	str	r3, [r7, #52]	; 0x34
 8003892:	463b      	mov	r3, r7
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	781b      	ldrb	r3, [r3, #0]
 8003898:	011a      	lsls	r2, r3, #4
 800389a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800389c:	4413      	add	r3, r2
 800389e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80038a2:	633b      	str	r3, [r7, #48]	; 0x30
 80038a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80038a8:	b29a      	uxth	r2, r3
 80038aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038ac:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80038ae:	463b      	mov	r3, r7
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	895b      	ldrh	r3, [r3, #10]
 80038b4:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80038b8:	463b      	mov	r3, r7
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	6959      	ldr	r1, [r3, #20]
 80038be:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80038c2:	b29b      	uxth	r3, r3
 80038c4:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 80038c8:	1d38      	adds	r0, r7, #4
 80038ca:	6800      	ldr	r0, [r0, #0]
 80038cc:	f001 f92a 	bl	8004b24 <USB_WritePMA>
            ep->xfer_buff += len;
 80038d0:	463b      	mov	r3, r7
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	695a      	ldr	r2, [r3, #20]
 80038d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80038da:	441a      	add	r2, r3
 80038dc:	463b      	mov	r3, r7
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80038e2:	463b      	mov	r3, r7
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	6a1a      	ldr	r2, [r3, #32]
 80038e8:	463b      	mov	r3, r7
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	691b      	ldr	r3, [r3, #16]
 80038ee:	429a      	cmp	r2, r3
 80038f0:	d909      	bls.n	8003906 <USB_EPStartXfer+0x29e>
            {
              ep->xfer_len_db -= len;
 80038f2:	463b      	mov	r3, r7
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	6a1a      	ldr	r2, [r3, #32]
 80038f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80038fc:	1ad2      	subs	r2, r2, r3
 80038fe:	463b      	mov	r3, r7
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	621a      	str	r2, [r3, #32]
 8003904:	e008      	b.n	8003918 <USB_EPStartXfer+0x2b0>
            }
            else
            {
              len = ep->xfer_len_db;
 8003906:	463b      	mov	r3, r7
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	6a1b      	ldr	r3, [r3, #32]
 800390c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 8003910:	463b      	mov	r3, r7
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	2200      	movs	r2, #0
 8003916:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8003918:	463b      	mov	r3, r7
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	785b      	ldrb	r3, [r3, #1]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d164      	bne.n	80039ec <USB_EPStartXfer+0x384>
 8003922:	1d3b      	adds	r3, r7, #4
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	61fb      	str	r3, [r7, #28]
 8003928:	1d3b      	adds	r3, r7, #4
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003930:	b29b      	uxth	r3, r3
 8003932:	461a      	mov	r2, r3
 8003934:	69fb      	ldr	r3, [r7, #28]
 8003936:	4413      	add	r3, r2
 8003938:	61fb      	str	r3, [r7, #28]
 800393a:	463b      	mov	r3, r7
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	781b      	ldrb	r3, [r3, #0]
 8003940:	011a      	lsls	r2, r3, #4
 8003942:	69fb      	ldr	r3, [r7, #28]
 8003944:	4413      	add	r3, r2
 8003946:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800394a:	61bb      	str	r3, [r7, #24]
 800394c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003950:	2b00      	cmp	r3, #0
 8003952:	d112      	bne.n	800397a <USB_EPStartXfer+0x312>
 8003954:	69bb      	ldr	r3, [r7, #24]
 8003956:	881b      	ldrh	r3, [r3, #0]
 8003958:	b29b      	uxth	r3, r3
 800395a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800395e:	b29a      	uxth	r2, r3
 8003960:	69bb      	ldr	r3, [r7, #24]
 8003962:	801a      	strh	r2, [r3, #0]
 8003964:	69bb      	ldr	r3, [r7, #24]
 8003966:	881b      	ldrh	r3, [r3, #0]
 8003968:	b29b      	uxth	r3, r3
 800396a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800396e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003972:	b29a      	uxth	r2, r3
 8003974:	69bb      	ldr	r3, [r7, #24]
 8003976:	801a      	strh	r2, [r3, #0]
 8003978:	e057      	b.n	8003a2a <USB_EPStartXfer+0x3c2>
 800397a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800397e:	2b3e      	cmp	r3, #62	; 0x3e
 8003980:	d817      	bhi.n	80039b2 <USB_EPStartXfer+0x34a>
 8003982:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003986:	085b      	lsrs	r3, r3, #1
 8003988:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800398c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003990:	f003 0301 	and.w	r3, r3, #1
 8003994:	2b00      	cmp	r3, #0
 8003996:	d004      	beq.n	80039a2 <USB_EPStartXfer+0x33a>
 8003998:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800399c:	3301      	adds	r3, #1
 800399e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80039a2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80039a6:	b29b      	uxth	r3, r3
 80039a8:	029b      	lsls	r3, r3, #10
 80039aa:	b29a      	uxth	r2, r3
 80039ac:	69bb      	ldr	r3, [r7, #24]
 80039ae:	801a      	strh	r2, [r3, #0]
 80039b0:	e03b      	b.n	8003a2a <USB_EPStartXfer+0x3c2>
 80039b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80039b6:	095b      	lsrs	r3, r3, #5
 80039b8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80039bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80039c0:	f003 031f 	and.w	r3, r3, #31
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d104      	bne.n	80039d2 <USB_EPStartXfer+0x36a>
 80039c8:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80039cc:	3b01      	subs	r3, #1
 80039ce:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80039d2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80039d6:	b29b      	uxth	r3, r3
 80039d8:	029b      	lsls	r3, r3, #10
 80039da:	b29b      	uxth	r3, r3
 80039dc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80039e0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80039e4:	b29a      	uxth	r2, r3
 80039e6:	69bb      	ldr	r3, [r7, #24]
 80039e8:	801a      	strh	r2, [r3, #0]
 80039ea:	e01e      	b.n	8003a2a <USB_EPStartXfer+0x3c2>
 80039ec:	463b      	mov	r3, r7
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	785b      	ldrb	r3, [r3, #1]
 80039f2:	2b01      	cmp	r3, #1
 80039f4:	d119      	bne.n	8003a2a <USB_EPStartXfer+0x3c2>
 80039f6:	1d3b      	adds	r3, r7, #4
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	627b      	str	r3, [r7, #36]	; 0x24
 80039fc:	1d3b      	adds	r3, r7, #4
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003a04:	b29b      	uxth	r3, r3
 8003a06:	461a      	mov	r2, r3
 8003a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a0a:	4413      	add	r3, r2
 8003a0c:	627b      	str	r3, [r7, #36]	; 0x24
 8003a0e:	463b      	mov	r3, r7
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	781b      	ldrb	r3, [r3, #0]
 8003a14:	011a      	lsls	r2, r3, #4
 8003a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a18:	4413      	add	r3, r2
 8003a1a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003a1e:	623b      	str	r3, [r7, #32]
 8003a20:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003a24:	b29a      	uxth	r2, r3
 8003a26:	6a3b      	ldr	r3, [r7, #32]
 8003a28:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8003a2a:	463b      	mov	r3, r7
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	891b      	ldrh	r3, [r3, #8]
 8003a30:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003a34:	463b      	mov	r3, r7
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	6959      	ldr	r1, [r3, #20]
 8003a3a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003a3e:	b29b      	uxth	r3, r3
 8003a40:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8003a44:	1d38      	adds	r0, r7, #4
 8003a46:	6800      	ldr	r0, [r0, #0]
 8003a48:	f001 f86c 	bl	8004b24 <USB_WritePMA>
 8003a4c:	e33b      	b.n	80040c6 <USB_EPStartXfer+0xa5e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8003a4e:	463b      	mov	r3, r7
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	785b      	ldrb	r3, [r3, #1]
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d164      	bne.n	8003b22 <USB_EPStartXfer+0x4ba>
 8003a58:	1d3b      	adds	r3, r7, #4
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003a5e:	1d3b      	adds	r3, r7, #4
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003a66:	b29b      	uxth	r3, r3
 8003a68:	461a      	mov	r2, r3
 8003a6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a6c:	4413      	add	r3, r2
 8003a6e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003a70:	463b      	mov	r3, r7
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	781b      	ldrb	r3, [r3, #0]
 8003a76:	011a      	lsls	r2, r3, #4
 8003a78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a7a:	4413      	add	r3, r2
 8003a7c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003a80:	64bb      	str	r3, [r7, #72]	; 0x48
 8003a82:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d112      	bne.n	8003ab0 <USB_EPStartXfer+0x448>
 8003a8a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a8c:	881b      	ldrh	r3, [r3, #0]
 8003a8e:	b29b      	uxth	r3, r3
 8003a90:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003a94:	b29a      	uxth	r2, r3
 8003a96:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a98:	801a      	strh	r2, [r3, #0]
 8003a9a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a9c:	881b      	ldrh	r3, [r3, #0]
 8003a9e:	b29b      	uxth	r3, r3
 8003aa0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003aa4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003aa8:	b29a      	uxth	r2, r3
 8003aaa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003aac:	801a      	strh	r2, [r3, #0]
 8003aae:	e057      	b.n	8003b60 <USB_EPStartXfer+0x4f8>
 8003ab0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ab4:	2b3e      	cmp	r3, #62	; 0x3e
 8003ab6:	d817      	bhi.n	8003ae8 <USB_EPStartXfer+0x480>
 8003ab8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003abc:	085b      	lsrs	r3, r3, #1
 8003abe:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8003ac2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ac6:	f003 0301 	and.w	r3, r3, #1
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d004      	beq.n	8003ad8 <USB_EPStartXfer+0x470>
 8003ace:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003ad2:	3301      	adds	r3, #1
 8003ad4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8003ad8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003adc:	b29b      	uxth	r3, r3
 8003ade:	029b      	lsls	r3, r3, #10
 8003ae0:	b29a      	uxth	r2, r3
 8003ae2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ae4:	801a      	strh	r2, [r3, #0]
 8003ae6:	e03b      	b.n	8003b60 <USB_EPStartXfer+0x4f8>
 8003ae8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003aec:	095b      	lsrs	r3, r3, #5
 8003aee:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8003af2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003af6:	f003 031f 	and.w	r3, r3, #31
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d104      	bne.n	8003b08 <USB_EPStartXfer+0x4a0>
 8003afe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003b02:	3b01      	subs	r3, #1
 8003b04:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8003b08:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003b0c:	b29b      	uxth	r3, r3
 8003b0e:	029b      	lsls	r3, r3, #10
 8003b10:	b29b      	uxth	r3, r3
 8003b12:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003b16:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003b1a:	b29a      	uxth	r2, r3
 8003b1c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b1e:	801a      	strh	r2, [r3, #0]
 8003b20:	e01e      	b.n	8003b60 <USB_EPStartXfer+0x4f8>
 8003b22:	463b      	mov	r3, r7
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	785b      	ldrb	r3, [r3, #1]
 8003b28:	2b01      	cmp	r3, #1
 8003b2a:	d119      	bne.n	8003b60 <USB_EPStartXfer+0x4f8>
 8003b2c:	1d3b      	adds	r3, r7, #4
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	657b      	str	r3, [r7, #84]	; 0x54
 8003b32:	1d3b      	adds	r3, r7, #4
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003b3a:	b29b      	uxth	r3, r3
 8003b3c:	461a      	mov	r2, r3
 8003b3e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b40:	4413      	add	r3, r2
 8003b42:	657b      	str	r3, [r7, #84]	; 0x54
 8003b44:	463b      	mov	r3, r7
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	781b      	ldrb	r3, [r3, #0]
 8003b4a:	011a      	lsls	r2, r3, #4
 8003b4c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b4e:	4413      	add	r3, r2
 8003b50:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003b54:	653b      	str	r3, [r7, #80]	; 0x50
 8003b56:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003b5a:	b29a      	uxth	r2, r3
 8003b5c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b5e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8003b60:	463b      	mov	r3, r7
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	891b      	ldrh	r3, [r3, #8]
 8003b66:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003b6a:	463b      	mov	r3, r7
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	6959      	ldr	r1, [r3, #20]
 8003b70:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003b74:	b29b      	uxth	r3, r3
 8003b76:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8003b7a:	1d38      	adds	r0, r7, #4
 8003b7c:	6800      	ldr	r0, [r0, #0]
 8003b7e:	f000 ffd1 	bl	8004b24 <USB_WritePMA>
            ep->xfer_buff += len;
 8003b82:	463b      	mov	r3, r7
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	695a      	ldr	r2, [r3, #20]
 8003b88:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003b8c:	441a      	add	r2, r3
 8003b8e:	463b      	mov	r3, r7
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8003b94:	463b      	mov	r3, r7
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	6a1a      	ldr	r2, [r3, #32]
 8003b9a:	463b      	mov	r3, r7
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	691b      	ldr	r3, [r3, #16]
 8003ba0:	429a      	cmp	r2, r3
 8003ba2:	d909      	bls.n	8003bb8 <USB_EPStartXfer+0x550>
            {
              ep->xfer_len_db -= len;
 8003ba4:	463b      	mov	r3, r7
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	6a1a      	ldr	r2, [r3, #32]
 8003baa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003bae:	1ad2      	subs	r2, r2, r3
 8003bb0:	463b      	mov	r3, r7
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	621a      	str	r2, [r3, #32]
 8003bb6:	e008      	b.n	8003bca <USB_EPStartXfer+0x562>
            }
            else
            {
              len = ep->xfer_len_db;
 8003bb8:	463b      	mov	r3, r7
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	6a1b      	ldr	r3, [r3, #32]
 8003bbe:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 8003bc2:	463b      	mov	r3, r7
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003bca:	1d3b      	adds	r3, r7, #4
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	647b      	str	r3, [r7, #68]	; 0x44
 8003bd0:	463b      	mov	r3, r7
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	785b      	ldrb	r3, [r3, #1]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d164      	bne.n	8003ca4 <USB_EPStartXfer+0x63c>
 8003bda:	1d3b      	adds	r3, r7, #4
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003be0:	1d3b      	adds	r3, r7, #4
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003be8:	b29b      	uxth	r3, r3
 8003bea:	461a      	mov	r2, r3
 8003bec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003bee:	4413      	add	r3, r2
 8003bf0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003bf2:	463b      	mov	r3, r7
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	781b      	ldrb	r3, [r3, #0]
 8003bf8:	011a      	lsls	r2, r3, #4
 8003bfa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003bfc:	4413      	add	r3, r2
 8003bfe:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003c02:	63bb      	str	r3, [r7, #56]	; 0x38
 8003c04:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d112      	bne.n	8003c32 <USB_EPStartXfer+0x5ca>
 8003c0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c0e:	881b      	ldrh	r3, [r3, #0]
 8003c10:	b29b      	uxth	r3, r3
 8003c12:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003c16:	b29a      	uxth	r2, r3
 8003c18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c1a:	801a      	strh	r2, [r3, #0]
 8003c1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c1e:	881b      	ldrh	r3, [r3, #0]
 8003c20:	b29b      	uxth	r3, r3
 8003c22:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003c26:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003c2a:	b29a      	uxth	r2, r3
 8003c2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c2e:	801a      	strh	r2, [r3, #0]
 8003c30:	e054      	b.n	8003cdc <USB_EPStartXfer+0x674>
 8003c32:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003c36:	2b3e      	cmp	r3, #62	; 0x3e
 8003c38:	d817      	bhi.n	8003c6a <USB_EPStartXfer+0x602>
 8003c3a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003c3e:	085b      	lsrs	r3, r3, #1
 8003c40:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8003c44:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003c48:	f003 0301 	and.w	r3, r3, #1
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d004      	beq.n	8003c5a <USB_EPStartXfer+0x5f2>
 8003c50:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003c54:	3301      	adds	r3, #1
 8003c56:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8003c5a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003c5e:	b29b      	uxth	r3, r3
 8003c60:	029b      	lsls	r3, r3, #10
 8003c62:	b29a      	uxth	r2, r3
 8003c64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c66:	801a      	strh	r2, [r3, #0]
 8003c68:	e038      	b.n	8003cdc <USB_EPStartXfer+0x674>
 8003c6a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003c6e:	095b      	lsrs	r3, r3, #5
 8003c70:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8003c74:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003c78:	f003 031f 	and.w	r3, r3, #31
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d104      	bne.n	8003c8a <USB_EPStartXfer+0x622>
 8003c80:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003c84:	3b01      	subs	r3, #1
 8003c86:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8003c8a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003c8e:	b29b      	uxth	r3, r3
 8003c90:	029b      	lsls	r3, r3, #10
 8003c92:	b29b      	uxth	r3, r3
 8003c94:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003c98:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003c9c:	b29a      	uxth	r2, r3
 8003c9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ca0:	801a      	strh	r2, [r3, #0]
 8003ca2:	e01b      	b.n	8003cdc <USB_EPStartXfer+0x674>
 8003ca4:	463b      	mov	r3, r7
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	785b      	ldrb	r3, [r3, #1]
 8003caa:	2b01      	cmp	r3, #1
 8003cac:	d116      	bne.n	8003cdc <USB_EPStartXfer+0x674>
 8003cae:	1d3b      	adds	r3, r7, #4
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003cb6:	b29b      	uxth	r3, r3
 8003cb8:	461a      	mov	r2, r3
 8003cba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003cbc:	4413      	add	r3, r2
 8003cbe:	647b      	str	r3, [r7, #68]	; 0x44
 8003cc0:	463b      	mov	r3, r7
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	781b      	ldrb	r3, [r3, #0]
 8003cc6:	011a      	lsls	r2, r3, #4
 8003cc8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003cca:	4413      	add	r3, r2
 8003ccc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003cd0:	643b      	str	r3, [r7, #64]	; 0x40
 8003cd2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003cd6:	b29a      	uxth	r2, r3
 8003cd8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003cda:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8003cdc:	463b      	mov	r3, r7
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	895b      	ldrh	r3, [r3, #10]
 8003ce2:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003ce6:	463b      	mov	r3, r7
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	6959      	ldr	r1, [r3, #20]
 8003cec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003cf0:	b29b      	uxth	r3, r3
 8003cf2:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8003cf6:	1d38      	adds	r0, r7, #4
 8003cf8:	6800      	ldr	r0, [r0, #0]
 8003cfa:	f000 ff13 	bl	8004b24 <USB_WritePMA>
 8003cfe:	e1e2      	b.n	80040c6 <USB_EPStartXfer+0xa5e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8003d00:	463b      	mov	r3, r7
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	6a1b      	ldr	r3, [r3, #32]
 8003d06:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8003d0a:	1d3b      	adds	r3, r7, #4
 8003d0c:	681a      	ldr	r2, [r3, #0]
 8003d0e:	463b      	mov	r3, r7
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	781b      	ldrb	r3, [r3, #0]
 8003d14:	009b      	lsls	r3, r3, #2
 8003d16:	4413      	add	r3, r2
 8003d18:	881b      	ldrh	r3, [r3, #0]
 8003d1a:	b29b      	uxth	r3, r3
 8003d1c:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8003d20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d24:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8003d28:	1d3b      	adds	r3, r7, #4
 8003d2a:	681a      	ldr	r2, [r3, #0]
 8003d2c:	463b      	mov	r3, r7
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	781b      	ldrb	r3, [r3, #0]
 8003d32:	009b      	lsls	r3, r3, #2
 8003d34:	441a      	add	r2, r3
 8003d36:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8003d3a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003d3e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003d42:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d4a:	b29b      	uxth	r3, r3
 8003d4c:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8003d4e:	1d3b      	adds	r3, r7, #4
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	663b      	str	r3, [r7, #96]	; 0x60
 8003d54:	1d3b      	adds	r3, r7, #4
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003d5c:	b29b      	uxth	r3, r3
 8003d5e:	461a      	mov	r2, r3
 8003d60:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003d62:	4413      	add	r3, r2
 8003d64:	663b      	str	r3, [r7, #96]	; 0x60
 8003d66:	463b      	mov	r3, r7
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	781b      	ldrb	r3, [r3, #0]
 8003d6c:	011a      	lsls	r2, r3, #4
 8003d6e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003d70:	4413      	add	r3, r2
 8003d72:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003d76:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003d78:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d7c:	b29a      	uxth	r2, r3
 8003d7e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003d80:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8003d82:	463b      	mov	r3, r7
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	891b      	ldrh	r3, [r3, #8]
 8003d88:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003d8c:	463b      	mov	r3, r7
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	6959      	ldr	r1, [r3, #20]
 8003d92:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d96:	b29b      	uxth	r3, r3
 8003d98:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8003d9c:	1d38      	adds	r0, r7, #4
 8003d9e:	6800      	ldr	r0, [r0, #0]
 8003da0:	f000 fec0 	bl	8004b24 <USB_WritePMA>
 8003da4:	e18f      	b.n	80040c6 <USB_EPStartXfer+0xa5e>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* Write the data to the USB endpoint */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8003da6:	1d3b      	adds	r3, r7, #4
 8003da8:	681a      	ldr	r2, [r3, #0]
 8003daa:	463b      	mov	r3, r7
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	781b      	ldrb	r3, [r3, #0]
 8003db0:	009b      	lsls	r3, r3, #2
 8003db2:	4413      	add	r3, r2
 8003db4:	881b      	ldrh	r3, [r3, #0]
 8003db6:	b29b      	uxth	r3, r3
 8003db8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	f000 808f 	beq.w	8003ee0 <USB_EPStartXfer+0x878>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003dc2:	1d3b      	adds	r3, r7, #4
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	67bb      	str	r3, [r7, #120]	; 0x78
 8003dc8:	463b      	mov	r3, r7
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	785b      	ldrb	r3, [r3, #1]
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d164      	bne.n	8003e9c <USB_EPStartXfer+0x834>
 8003dd2:	1d3b      	adds	r3, r7, #4
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	673b      	str	r3, [r7, #112]	; 0x70
 8003dd8:	1d3b      	adds	r3, r7, #4
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003de0:	b29b      	uxth	r3, r3
 8003de2:	461a      	mov	r2, r3
 8003de4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003de6:	4413      	add	r3, r2
 8003de8:	673b      	str	r3, [r7, #112]	; 0x70
 8003dea:	463b      	mov	r3, r7
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	781b      	ldrb	r3, [r3, #0]
 8003df0:	011a      	lsls	r2, r3, #4
 8003df2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003df4:	4413      	add	r3, r2
 8003df6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003dfa:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003dfc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d112      	bne.n	8003e2a <USB_EPStartXfer+0x7c2>
 8003e04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e06:	881b      	ldrh	r3, [r3, #0]
 8003e08:	b29b      	uxth	r3, r3
 8003e0a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003e0e:	b29a      	uxth	r2, r3
 8003e10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e12:	801a      	strh	r2, [r3, #0]
 8003e14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e16:	881b      	ldrh	r3, [r3, #0]
 8003e18:	b29b      	uxth	r3, r3
 8003e1a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003e1e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003e22:	b29a      	uxth	r2, r3
 8003e24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e26:	801a      	strh	r2, [r3, #0]
 8003e28:	e054      	b.n	8003ed4 <USB_EPStartXfer+0x86c>
 8003e2a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003e2e:	2b3e      	cmp	r3, #62	; 0x3e
 8003e30:	d817      	bhi.n	8003e62 <USB_EPStartXfer+0x7fa>
 8003e32:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003e36:	085b      	lsrs	r3, r3, #1
 8003e38:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8003e3c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003e40:	f003 0301 	and.w	r3, r3, #1
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d004      	beq.n	8003e52 <USB_EPStartXfer+0x7ea>
 8003e48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e4c:	3301      	adds	r3, #1
 8003e4e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8003e52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e56:	b29b      	uxth	r3, r3
 8003e58:	029b      	lsls	r3, r3, #10
 8003e5a:	b29a      	uxth	r2, r3
 8003e5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e5e:	801a      	strh	r2, [r3, #0]
 8003e60:	e038      	b.n	8003ed4 <USB_EPStartXfer+0x86c>
 8003e62:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003e66:	095b      	lsrs	r3, r3, #5
 8003e68:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8003e6c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003e70:	f003 031f 	and.w	r3, r3, #31
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d104      	bne.n	8003e82 <USB_EPStartXfer+0x81a>
 8003e78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e7c:	3b01      	subs	r3, #1
 8003e7e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8003e82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e86:	b29b      	uxth	r3, r3
 8003e88:	029b      	lsls	r3, r3, #10
 8003e8a:	b29b      	uxth	r3, r3
 8003e8c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003e90:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003e94:	b29a      	uxth	r2, r3
 8003e96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e98:	801a      	strh	r2, [r3, #0]
 8003e9a:	e01b      	b.n	8003ed4 <USB_EPStartXfer+0x86c>
 8003e9c:	463b      	mov	r3, r7
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	785b      	ldrb	r3, [r3, #1]
 8003ea2:	2b01      	cmp	r3, #1
 8003ea4:	d116      	bne.n	8003ed4 <USB_EPStartXfer+0x86c>
 8003ea6:	1d3b      	adds	r3, r7, #4
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003eae:	b29b      	uxth	r3, r3
 8003eb0:	461a      	mov	r2, r3
 8003eb2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003eb4:	4413      	add	r3, r2
 8003eb6:	67bb      	str	r3, [r7, #120]	; 0x78
 8003eb8:	463b      	mov	r3, r7
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	781b      	ldrb	r3, [r3, #0]
 8003ebe:	011a      	lsls	r2, r3, #4
 8003ec0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003ec2:	4413      	add	r3, r2
 8003ec4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003ec8:	677b      	str	r3, [r7, #116]	; 0x74
 8003eca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ece:	b29a      	uxth	r2, r3
 8003ed0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003ed2:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8003ed4:	463b      	mov	r3, r7
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	895b      	ldrh	r3, [r3, #10]
 8003eda:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
 8003ede:	e097      	b.n	8004010 <USB_EPStartXfer+0x9a8>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8003ee0:	463b      	mov	r3, r7
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	785b      	ldrb	r3, [r3, #1]
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d168      	bne.n	8003fbc <USB_EPStartXfer+0x954>
 8003eea:	1d3b      	adds	r3, r7, #4
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003ef2:	1d3b      	adds	r3, r7, #4
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003efa:	b29b      	uxth	r3, r3
 8003efc:	461a      	mov	r2, r3
 8003efe:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003f02:	4413      	add	r3, r2
 8003f04:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003f08:	463b      	mov	r3, r7
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	781b      	ldrb	r3, [r3, #0]
 8003f0e:	011a      	lsls	r2, r3, #4
 8003f10:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003f14:	4413      	add	r3, r2
 8003f16:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003f1a:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003f1c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d112      	bne.n	8003f4a <USB_EPStartXfer+0x8e2>
 8003f24:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003f26:	881b      	ldrh	r3, [r3, #0]
 8003f28:	b29b      	uxth	r3, r3
 8003f2a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003f2e:	b29a      	uxth	r2, r3
 8003f30:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003f32:	801a      	strh	r2, [r3, #0]
 8003f34:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003f36:	881b      	ldrh	r3, [r3, #0]
 8003f38:	b29b      	uxth	r3, r3
 8003f3a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003f3e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003f42:	b29a      	uxth	r2, r3
 8003f44:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003f46:	801a      	strh	r2, [r3, #0]
 8003f48:	e05d      	b.n	8004006 <USB_EPStartXfer+0x99e>
 8003f4a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003f4e:	2b3e      	cmp	r3, #62	; 0x3e
 8003f50:	d817      	bhi.n	8003f82 <USB_EPStartXfer+0x91a>
 8003f52:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003f56:	085b      	lsrs	r3, r3, #1
 8003f58:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8003f5c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003f60:	f003 0301 	and.w	r3, r3, #1
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d004      	beq.n	8003f72 <USB_EPStartXfer+0x90a>
 8003f68:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8003f6c:	3301      	adds	r3, #1
 8003f6e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8003f72:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8003f76:	b29b      	uxth	r3, r3
 8003f78:	029b      	lsls	r3, r3, #10
 8003f7a:	b29a      	uxth	r2, r3
 8003f7c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003f7e:	801a      	strh	r2, [r3, #0]
 8003f80:	e041      	b.n	8004006 <USB_EPStartXfer+0x99e>
 8003f82:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003f86:	095b      	lsrs	r3, r3, #5
 8003f88:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8003f8c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003f90:	f003 031f 	and.w	r3, r3, #31
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d104      	bne.n	8003fa2 <USB_EPStartXfer+0x93a>
 8003f98:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8003f9c:	3b01      	subs	r3, #1
 8003f9e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8003fa2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8003fa6:	b29b      	uxth	r3, r3
 8003fa8:	029b      	lsls	r3, r3, #10
 8003faa:	b29b      	uxth	r3, r3
 8003fac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003fb0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003fb4:	b29a      	uxth	r2, r3
 8003fb6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003fb8:	801a      	strh	r2, [r3, #0]
 8003fba:	e024      	b.n	8004006 <USB_EPStartXfer+0x99e>
 8003fbc:	463b      	mov	r3, r7
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	785b      	ldrb	r3, [r3, #1]
 8003fc2:	2b01      	cmp	r3, #1
 8003fc4:	d11f      	bne.n	8004006 <USB_EPStartXfer+0x99e>
 8003fc6:	1d3b      	adds	r3, r7, #4
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003fce:	1d3b      	adds	r3, r7, #4
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003fd6:	b29b      	uxth	r3, r3
 8003fd8:	461a      	mov	r2, r3
 8003fda:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003fde:	4413      	add	r3, r2
 8003fe0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003fe4:	463b      	mov	r3, r7
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	781b      	ldrb	r3, [r3, #0]
 8003fea:	011a      	lsls	r2, r3, #4
 8003fec:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003ff0:	4413      	add	r3, r2
 8003ff2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003ff6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003ffa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ffe:	b29a      	uxth	r2, r3
 8004000:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004004:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8004006:	463b      	mov	r3, r7
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	891b      	ldrh	r3, [r3, #8]
 800400c:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
        }

        USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004010:	463b      	mov	r3, r7
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	6959      	ldr	r1, [r3, #20]
 8004016:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800401a:	b29b      	uxth	r3, r3
 800401c:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8004020:	1d38      	adds	r0, r7, #4
 8004022:	6800      	ldr	r0, [r0, #0]
 8004024:	f000 fd7e 	bl	8004b24 <USB_WritePMA>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8004028:	463b      	mov	r3, r7
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	785b      	ldrb	r3, [r3, #1]
 800402e:	2b00      	cmp	r3, #0
 8004030:	d122      	bne.n	8004078 <USB_EPStartXfer+0xa10>
 8004032:	1d3b      	adds	r3, r7, #4
 8004034:	681a      	ldr	r2, [r3, #0]
 8004036:	463b      	mov	r3, r7
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	781b      	ldrb	r3, [r3, #0]
 800403c:	009b      	lsls	r3, r3, #2
 800403e:	4413      	add	r3, r2
 8004040:	881b      	ldrh	r3, [r3, #0]
 8004042:	b29b      	uxth	r3, r3
 8004044:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004048:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800404c:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 8004050:	1d3b      	adds	r3, r7, #4
 8004052:	681a      	ldr	r2, [r3, #0]
 8004054:	463b      	mov	r3, r7
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	781b      	ldrb	r3, [r3, #0]
 800405a:	009b      	lsls	r3, r3, #2
 800405c:	441a      	add	r2, r3
 800405e:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8004062:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004066:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800406a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800406e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004072:	b29b      	uxth	r3, r3
 8004074:	8013      	strh	r3, [r2, #0]
 8004076:	e026      	b.n	80040c6 <USB_EPStartXfer+0xa5e>
 8004078:	463b      	mov	r3, r7
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	785b      	ldrb	r3, [r3, #1]
 800407e:	2b01      	cmp	r3, #1
 8004080:	d121      	bne.n	80040c6 <USB_EPStartXfer+0xa5e>
 8004082:	1d3b      	adds	r3, r7, #4
 8004084:	681a      	ldr	r2, [r3, #0]
 8004086:	463b      	mov	r3, r7
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	781b      	ldrb	r3, [r3, #0]
 800408c:	009b      	lsls	r3, r3, #2
 800408e:	4413      	add	r3, r2
 8004090:	881b      	ldrh	r3, [r3, #0]
 8004092:	b29b      	uxth	r3, r3
 8004094:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004098:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800409c:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 80040a0:	1d3b      	adds	r3, r7, #4
 80040a2:	681a      	ldr	r2, [r3, #0]
 80040a4:	463b      	mov	r3, r7
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	781b      	ldrb	r3, [r3, #0]
 80040aa:	009b      	lsls	r3, r3, #2
 80040ac:	441a      	add	r2, r3
 80040ae:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 80040b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80040b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80040ba:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80040be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80040c2:	b29b      	uxth	r3, r3
 80040c4:	8013      	strh	r3, [r2, #0]
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80040c6:	1d3b      	adds	r3, r7, #4
 80040c8:	681a      	ldr	r2, [r3, #0]
 80040ca:	463b      	mov	r3, r7
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	781b      	ldrb	r3, [r3, #0]
 80040d0:	009b      	lsls	r3, r3, #2
 80040d2:	4413      	add	r3, r2
 80040d4:	881b      	ldrh	r3, [r3, #0]
 80040d6:	b29b      	uxth	r3, r3
 80040d8:	f107 020e 	add.w	r2, r7, #14
 80040dc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80040e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80040e4:	8013      	strh	r3, [r2, #0]
 80040e6:	f107 030e 	add.w	r3, r7, #14
 80040ea:	f107 020e 	add.w	r2, r7, #14
 80040ee:	8812      	ldrh	r2, [r2, #0]
 80040f0:	f082 0210 	eor.w	r2, r2, #16
 80040f4:	801a      	strh	r2, [r3, #0]
 80040f6:	f107 030e 	add.w	r3, r7, #14
 80040fa:	f107 020e 	add.w	r2, r7, #14
 80040fe:	8812      	ldrh	r2, [r2, #0]
 8004100:	f082 0220 	eor.w	r2, r2, #32
 8004104:	801a      	strh	r2, [r3, #0]
 8004106:	1d3b      	adds	r3, r7, #4
 8004108:	681a      	ldr	r2, [r3, #0]
 800410a:	463b      	mov	r3, r7
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	781b      	ldrb	r3, [r3, #0]
 8004110:	009b      	lsls	r3, r3, #2
 8004112:	441a      	add	r2, r3
 8004114:	f107 030e 	add.w	r3, r7, #14
 8004118:	881b      	ldrh	r3, [r3, #0]
 800411a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800411e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004122:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004126:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800412a:	b29b      	uxth	r3, r3
 800412c:	8013      	strh	r3, [r2, #0]
 800412e:	e3b5      	b.n	800489c <USB_EPStartXfer+0x1234>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8004130:	463b      	mov	r3, r7
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	7b1b      	ldrb	r3, [r3, #12]
 8004136:	2b00      	cmp	r3, #0
 8004138:	f040 8090 	bne.w	800425c <USB_EPStartXfer+0xbf4>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800413c:	463b      	mov	r3, r7
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	699a      	ldr	r2, [r3, #24]
 8004142:	463b      	mov	r3, r7
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	691b      	ldr	r3, [r3, #16]
 8004148:	429a      	cmp	r2, r3
 800414a:	d90e      	bls.n	800416a <USB_EPStartXfer+0xb02>
      {
        len = ep->maxpacket;
 800414c:	463b      	mov	r3, r7
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	691b      	ldr	r3, [r3, #16]
 8004152:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len -= len;
 8004156:	463b      	mov	r3, r7
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	699a      	ldr	r2, [r3, #24]
 800415c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004160:	1ad2      	subs	r2, r2, r3
 8004162:	463b      	mov	r3, r7
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	619a      	str	r2, [r3, #24]
 8004168:	e008      	b.n	800417c <USB_EPStartXfer+0xb14>
      }
      else
      {
        len = ep->xfer_len;
 800416a:	463b      	mov	r3, r7
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	699b      	ldr	r3, [r3, #24]
 8004170:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len = 0U;
 8004174:	463b      	mov	r3, r7
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	2200      	movs	r2, #0
 800417a:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800417c:	1d3b      	adds	r3, r7, #4
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004184:	1d3b      	adds	r3, r7, #4
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800418c:	b29b      	uxth	r3, r3
 800418e:	461a      	mov	r2, r3
 8004190:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004194:	4413      	add	r3, r2
 8004196:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800419a:	463b      	mov	r3, r7
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	781b      	ldrb	r3, [r3, #0]
 80041a0:	011a      	lsls	r2, r3, #4
 80041a2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80041a6:	4413      	add	r3, r2
 80041a8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80041ac:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80041b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d116      	bne.n	80041e6 <USB_EPStartXfer+0xb7e>
 80041b8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80041bc:	881b      	ldrh	r3, [r3, #0]
 80041be:	b29b      	uxth	r3, r3
 80041c0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80041c4:	b29a      	uxth	r2, r3
 80041c6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80041ca:	801a      	strh	r2, [r3, #0]
 80041cc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80041d0:	881b      	ldrh	r3, [r3, #0]
 80041d2:	b29b      	uxth	r3, r3
 80041d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80041d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80041dc:	b29a      	uxth	r2, r3
 80041de:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80041e2:	801a      	strh	r2, [r3, #0]
 80041e4:	e32c      	b.n	8004840 <USB_EPStartXfer+0x11d8>
 80041e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80041ea:	2b3e      	cmp	r3, #62	; 0x3e
 80041ec:	d818      	bhi.n	8004220 <USB_EPStartXfer+0xbb8>
 80041ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80041f2:	085b      	lsrs	r3, r3, #1
 80041f4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80041f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80041fc:	f003 0301 	and.w	r3, r3, #1
 8004200:	2b00      	cmp	r3, #0
 8004202:	d004      	beq.n	800420e <USB_EPStartXfer+0xba6>
 8004204:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8004208:	3301      	adds	r3, #1
 800420a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800420e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8004212:	b29b      	uxth	r3, r3
 8004214:	029b      	lsls	r3, r3, #10
 8004216:	b29a      	uxth	r2, r3
 8004218:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800421c:	801a      	strh	r2, [r3, #0]
 800421e:	e30f      	b.n	8004840 <USB_EPStartXfer+0x11d8>
 8004220:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004224:	095b      	lsrs	r3, r3, #5
 8004226:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800422a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800422e:	f003 031f 	and.w	r3, r3, #31
 8004232:	2b00      	cmp	r3, #0
 8004234:	d104      	bne.n	8004240 <USB_EPStartXfer+0xbd8>
 8004236:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800423a:	3b01      	subs	r3, #1
 800423c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8004240:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8004244:	b29b      	uxth	r3, r3
 8004246:	029b      	lsls	r3, r3, #10
 8004248:	b29b      	uxth	r3, r3
 800424a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800424e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004252:	b29a      	uxth	r2, r3
 8004254:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004258:	801a      	strh	r2, [r3, #0]
 800425a:	e2f1      	b.n	8004840 <USB_EPStartXfer+0x11d8>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800425c:	463b      	mov	r3, r7
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	78db      	ldrb	r3, [r3, #3]
 8004262:	2b02      	cmp	r3, #2
 8004264:	f040 818f 	bne.w	8004586 <USB_EPStartXfer+0xf1e>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8004268:	463b      	mov	r3, r7
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	785b      	ldrb	r3, [r3, #1]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d175      	bne.n	800435e <USB_EPStartXfer+0xcf6>
 8004272:	1d3b      	adds	r3, r7, #4
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800427a:	1d3b      	adds	r3, r7, #4
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004282:	b29b      	uxth	r3, r3
 8004284:	461a      	mov	r2, r3
 8004286:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800428a:	4413      	add	r3, r2
 800428c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004290:	463b      	mov	r3, r7
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	781b      	ldrb	r3, [r3, #0]
 8004296:	011a      	lsls	r2, r3, #4
 8004298:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800429c:	4413      	add	r3, r2
 800429e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80042a2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80042a6:	463b      	mov	r3, r7
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	691b      	ldr	r3, [r3, #16]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d116      	bne.n	80042de <USB_EPStartXfer+0xc76>
 80042b0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80042b4:	881b      	ldrh	r3, [r3, #0]
 80042b6:	b29b      	uxth	r3, r3
 80042b8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80042bc:	b29a      	uxth	r2, r3
 80042be:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80042c2:	801a      	strh	r2, [r3, #0]
 80042c4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80042c8:	881b      	ldrh	r3, [r3, #0]
 80042ca:	b29b      	uxth	r3, r3
 80042cc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80042d0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80042d4:	b29a      	uxth	r2, r3
 80042d6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80042da:	801a      	strh	r2, [r3, #0]
 80042dc:	e065      	b.n	80043aa <USB_EPStartXfer+0xd42>
 80042de:	463b      	mov	r3, r7
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	691b      	ldr	r3, [r3, #16]
 80042e4:	2b3e      	cmp	r3, #62	; 0x3e
 80042e6:	d81a      	bhi.n	800431e <USB_EPStartXfer+0xcb6>
 80042e8:	463b      	mov	r3, r7
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	691b      	ldr	r3, [r3, #16]
 80042ee:	085b      	lsrs	r3, r3, #1
 80042f0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80042f4:	463b      	mov	r3, r7
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	691b      	ldr	r3, [r3, #16]
 80042fa:	f003 0301 	and.w	r3, r3, #1
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d004      	beq.n	800430c <USB_EPStartXfer+0xca4>
 8004302:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004306:	3301      	adds	r3, #1
 8004308:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800430c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004310:	b29b      	uxth	r3, r3
 8004312:	029b      	lsls	r3, r3, #10
 8004314:	b29a      	uxth	r2, r3
 8004316:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800431a:	801a      	strh	r2, [r3, #0]
 800431c:	e045      	b.n	80043aa <USB_EPStartXfer+0xd42>
 800431e:	463b      	mov	r3, r7
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	691b      	ldr	r3, [r3, #16]
 8004324:	095b      	lsrs	r3, r3, #5
 8004326:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800432a:	463b      	mov	r3, r7
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	691b      	ldr	r3, [r3, #16]
 8004330:	f003 031f 	and.w	r3, r3, #31
 8004334:	2b00      	cmp	r3, #0
 8004336:	d104      	bne.n	8004342 <USB_EPStartXfer+0xcda>
 8004338:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800433c:	3b01      	subs	r3, #1
 800433e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004342:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004346:	b29b      	uxth	r3, r3
 8004348:	029b      	lsls	r3, r3, #10
 800434a:	b29b      	uxth	r3, r3
 800434c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004350:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004354:	b29a      	uxth	r2, r3
 8004356:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800435a:	801a      	strh	r2, [r3, #0]
 800435c:	e025      	b.n	80043aa <USB_EPStartXfer+0xd42>
 800435e:	463b      	mov	r3, r7
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	785b      	ldrb	r3, [r3, #1]
 8004364:	2b01      	cmp	r3, #1
 8004366:	d120      	bne.n	80043aa <USB_EPStartXfer+0xd42>
 8004368:	1d3b      	adds	r3, r7, #4
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004370:	1d3b      	adds	r3, r7, #4
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004378:	b29b      	uxth	r3, r3
 800437a:	461a      	mov	r2, r3
 800437c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004380:	4413      	add	r3, r2
 8004382:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004386:	463b      	mov	r3, r7
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	781b      	ldrb	r3, [r3, #0]
 800438c:	011a      	lsls	r2, r3, #4
 800438e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004392:	4413      	add	r3, r2
 8004394:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004398:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800439c:	463b      	mov	r3, r7
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	691b      	ldr	r3, [r3, #16]
 80043a2:	b29a      	uxth	r2, r3
 80043a4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80043a8:	801a      	strh	r2, [r3, #0]
 80043aa:	1d3b      	adds	r3, r7, #4
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80043b2:	463b      	mov	r3, r7
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	785b      	ldrb	r3, [r3, #1]
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d175      	bne.n	80044a8 <USB_EPStartXfer+0xe40>
 80043bc:	1d3b      	adds	r3, r7, #4
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80043c4:	1d3b      	adds	r3, r7, #4
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80043cc:	b29b      	uxth	r3, r3
 80043ce:	461a      	mov	r2, r3
 80043d0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80043d4:	4413      	add	r3, r2
 80043d6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80043da:	463b      	mov	r3, r7
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	781b      	ldrb	r3, [r3, #0]
 80043e0:	011a      	lsls	r2, r3, #4
 80043e2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80043e6:	4413      	add	r3, r2
 80043e8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80043ec:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80043f0:	463b      	mov	r3, r7
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	691b      	ldr	r3, [r3, #16]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d116      	bne.n	8004428 <USB_EPStartXfer+0xdc0>
 80043fa:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80043fe:	881b      	ldrh	r3, [r3, #0]
 8004400:	b29b      	uxth	r3, r3
 8004402:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004406:	b29a      	uxth	r2, r3
 8004408:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800440c:	801a      	strh	r2, [r3, #0]
 800440e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004412:	881b      	ldrh	r3, [r3, #0]
 8004414:	b29b      	uxth	r3, r3
 8004416:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800441a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800441e:	b29a      	uxth	r2, r3
 8004420:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004424:	801a      	strh	r2, [r3, #0]
 8004426:	e061      	b.n	80044ec <USB_EPStartXfer+0xe84>
 8004428:	463b      	mov	r3, r7
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	691b      	ldr	r3, [r3, #16]
 800442e:	2b3e      	cmp	r3, #62	; 0x3e
 8004430:	d81a      	bhi.n	8004468 <USB_EPStartXfer+0xe00>
 8004432:	463b      	mov	r3, r7
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	691b      	ldr	r3, [r3, #16]
 8004438:	085b      	lsrs	r3, r3, #1
 800443a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800443e:	463b      	mov	r3, r7
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	691b      	ldr	r3, [r3, #16]
 8004444:	f003 0301 	and.w	r3, r3, #1
 8004448:	2b00      	cmp	r3, #0
 800444a:	d004      	beq.n	8004456 <USB_EPStartXfer+0xdee>
 800444c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004450:	3301      	adds	r3, #1
 8004452:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004456:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800445a:	b29b      	uxth	r3, r3
 800445c:	029b      	lsls	r3, r3, #10
 800445e:	b29a      	uxth	r2, r3
 8004460:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004464:	801a      	strh	r2, [r3, #0]
 8004466:	e041      	b.n	80044ec <USB_EPStartXfer+0xe84>
 8004468:	463b      	mov	r3, r7
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	691b      	ldr	r3, [r3, #16]
 800446e:	095b      	lsrs	r3, r3, #5
 8004470:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004474:	463b      	mov	r3, r7
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	691b      	ldr	r3, [r3, #16]
 800447a:	f003 031f 	and.w	r3, r3, #31
 800447e:	2b00      	cmp	r3, #0
 8004480:	d104      	bne.n	800448c <USB_EPStartXfer+0xe24>
 8004482:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004486:	3b01      	subs	r3, #1
 8004488:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800448c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004490:	b29b      	uxth	r3, r3
 8004492:	029b      	lsls	r3, r3, #10
 8004494:	b29b      	uxth	r3, r3
 8004496:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800449a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800449e:	b29a      	uxth	r2, r3
 80044a0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80044a4:	801a      	strh	r2, [r3, #0]
 80044a6:	e021      	b.n	80044ec <USB_EPStartXfer+0xe84>
 80044a8:	463b      	mov	r3, r7
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	785b      	ldrb	r3, [r3, #1]
 80044ae:	2b01      	cmp	r3, #1
 80044b0:	d11c      	bne.n	80044ec <USB_EPStartXfer+0xe84>
 80044b2:	1d3b      	adds	r3, r7, #4
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80044ba:	b29b      	uxth	r3, r3
 80044bc:	461a      	mov	r2, r3
 80044be:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80044c2:	4413      	add	r3, r2
 80044c4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80044c8:	463b      	mov	r3, r7
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	781b      	ldrb	r3, [r3, #0]
 80044ce:	011a      	lsls	r2, r3, #4
 80044d0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80044d4:	4413      	add	r3, r2
 80044d6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80044da:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80044de:	463b      	mov	r3, r7
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	691b      	ldr	r3, [r3, #16]
 80044e4:	b29a      	uxth	r2, r3
 80044e6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80044ea:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80044ec:	463b      	mov	r3, r7
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	69db      	ldr	r3, [r3, #28]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	f000 81a4 	beq.w	8004840 <USB_EPStartXfer+0x11d8>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80044f8:	1d3b      	adds	r3, r7, #4
 80044fa:	681a      	ldr	r2, [r3, #0]
 80044fc:	463b      	mov	r3, r7
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	781b      	ldrb	r3, [r3, #0]
 8004502:	009b      	lsls	r3, r3, #2
 8004504:	4413      	add	r3, r2
 8004506:	881b      	ldrh	r3, [r3, #0]
 8004508:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800450c:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8004510:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004514:	2b00      	cmp	r3, #0
 8004516:	d005      	beq.n	8004524 <USB_EPStartXfer+0xebc>
 8004518:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800451c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004520:	2b00      	cmp	r3, #0
 8004522:	d10d      	bne.n	8004540 <USB_EPStartXfer+0xed8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8004524:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8004528:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800452c:	2b00      	cmp	r3, #0
 800452e:	f040 8187 	bne.w	8004840 <USB_EPStartXfer+0x11d8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8004532:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8004536:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800453a:	2b00      	cmp	r3, #0
 800453c:	f040 8180 	bne.w	8004840 <USB_EPStartXfer+0x11d8>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8004540:	1d3b      	adds	r3, r7, #4
 8004542:	681a      	ldr	r2, [r3, #0]
 8004544:	463b      	mov	r3, r7
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	781b      	ldrb	r3, [r3, #0]
 800454a:	009b      	lsls	r3, r3, #2
 800454c:	4413      	add	r3, r2
 800454e:	881b      	ldrh	r3, [r3, #0]
 8004550:	b29b      	uxth	r3, r3
 8004552:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004556:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800455a:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
 800455e:	1d3b      	adds	r3, r7, #4
 8004560:	681a      	ldr	r2, [r3, #0]
 8004562:	463b      	mov	r3, r7
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	781b      	ldrb	r3, [r3, #0]
 8004568:	009b      	lsls	r3, r3, #2
 800456a:	441a      	add	r2, r3
 800456c:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8004570:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004574:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004578:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800457c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004580:	b29b      	uxth	r3, r3
 8004582:	8013      	strh	r3, [r2, #0]
 8004584:	e15c      	b.n	8004840 <USB_EPStartXfer+0x11d8>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8004586:	463b      	mov	r3, r7
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	78db      	ldrb	r3, [r3, #3]
 800458c:	2b01      	cmp	r3, #1
 800458e:	f040 8155 	bne.w	800483c <USB_EPStartXfer+0x11d4>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8004592:	463b      	mov	r3, r7
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	699a      	ldr	r2, [r3, #24]
 8004598:	463b      	mov	r3, r7
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	691b      	ldr	r3, [r3, #16]
 800459e:	429a      	cmp	r2, r3
 80045a0:	d90e      	bls.n	80045c0 <USB_EPStartXfer+0xf58>
        {
          len = ep->maxpacket;
 80045a2:	463b      	mov	r3, r7
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	691b      	ldr	r3, [r3, #16]
 80045a8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len -= len;
 80045ac:	463b      	mov	r3, r7
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	699a      	ldr	r2, [r3, #24]
 80045b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80045b6:	1ad2      	subs	r2, r2, r3
 80045b8:	463b      	mov	r3, r7
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	619a      	str	r2, [r3, #24]
 80045be:	e008      	b.n	80045d2 <USB_EPStartXfer+0xf6a>
        }
        else
        {
          len = ep->xfer_len;
 80045c0:	463b      	mov	r3, r7
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	699b      	ldr	r3, [r3, #24]
 80045c6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len = 0U;
 80045ca:	463b      	mov	r3, r7
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	2200      	movs	r2, #0
 80045d0:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80045d2:	463b      	mov	r3, r7
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	785b      	ldrb	r3, [r3, #1]
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d16f      	bne.n	80046bc <USB_EPStartXfer+0x1054>
 80045dc:	1d3b      	adds	r3, r7, #4
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80045e4:	1d3b      	adds	r3, r7, #4
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80045ec:	b29b      	uxth	r3, r3
 80045ee:	461a      	mov	r2, r3
 80045f0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80045f4:	4413      	add	r3, r2
 80045f6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80045fa:	463b      	mov	r3, r7
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	781b      	ldrb	r3, [r3, #0]
 8004600:	011a      	lsls	r2, r3, #4
 8004602:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004606:	4413      	add	r3, r2
 8004608:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800460c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004610:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004614:	2b00      	cmp	r3, #0
 8004616:	d116      	bne.n	8004646 <USB_EPStartXfer+0xfde>
 8004618:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800461c:	881b      	ldrh	r3, [r3, #0]
 800461e:	b29b      	uxth	r3, r3
 8004620:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004624:	b29a      	uxth	r2, r3
 8004626:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800462a:	801a      	strh	r2, [r3, #0]
 800462c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004630:	881b      	ldrh	r3, [r3, #0]
 8004632:	b29b      	uxth	r3, r3
 8004634:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004638:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800463c:	b29a      	uxth	r2, r3
 800463e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004642:	801a      	strh	r2, [r3, #0]
 8004644:	e05f      	b.n	8004706 <USB_EPStartXfer+0x109e>
 8004646:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800464a:	2b3e      	cmp	r3, #62	; 0x3e
 800464c:	d818      	bhi.n	8004680 <USB_EPStartXfer+0x1018>
 800464e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004652:	085b      	lsrs	r3, r3, #1
 8004654:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004658:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800465c:	f003 0301 	and.w	r3, r3, #1
 8004660:	2b00      	cmp	r3, #0
 8004662:	d004      	beq.n	800466e <USB_EPStartXfer+0x1006>
 8004664:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004668:	3301      	adds	r3, #1
 800466a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800466e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004672:	b29b      	uxth	r3, r3
 8004674:	029b      	lsls	r3, r3, #10
 8004676:	b29a      	uxth	r2, r3
 8004678:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800467c:	801a      	strh	r2, [r3, #0]
 800467e:	e042      	b.n	8004706 <USB_EPStartXfer+0x109e>
 8004680:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004684:	095b      	lsrs	r3, r3, #5
 8004686:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800468a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800468e:	f003 031f 	and.w	r3, r3, #31
 8004692:	2b00      	cmp	r3, #0
 8004694:	d104      	bne.n	80046a0 <USB_EPStartXfer+0x1038>
 8004696:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800469a:	3b01      	subs	r3, #1
 800469c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80046a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80046a4:	b29b      	uxth	r3, r3
 80046a6:	029b      	lsls	r3, r3, #10
 80046a8:	b29b      	uxth	r3, r3
 80046aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80046ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80046b2:	b29a      	uxth	r2, r3
 80046b4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80046b8:	801a      	strh	r2, [r3, #0]
 80046ba:	e024      	b.n	8004706 <USB_EPStartXfer+0x109e>
 80046bc:	463b      	mov	r3, r7
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	785b      	ldrb	r3, [r3, #1]
 80046c2:	2b01      	cmp	r3, #1
 80046c4:	d11f      	bne.n	8004706 <USB_EPStartXfer+0x109e>
 80046c6:	1d3b      	adds	r3, r7, #4
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80046ce:	1d3b      	adds	r3, r7, #4
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80046d6:	b29b      	uxth	r3, r3
 80046d8:	461a      	mov	r2, r3
 80046da:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80046de:	4413      	add	r3, r2
 80046e0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80046e4:	463b      	mov	r3, r7
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	781b      	ldrb	r3, [r3, #0]
 80046ea:	011a      	lsls	r2, r3, #4
 80046ec:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80046f0:	4413      	add	r3, r2
 80046f2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80046f6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80046fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80046fe:	b29a      	uxth	r2, r3
 8004700:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004704:	801a      	strh	r2, [r3, #0]
 8004706:	1d3b      	adds	r3, r7, #4
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800470e:	463b      	mov	r3, r7
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	785b      	ldrb	r3, [r3, #1]
 8004714:	2b00      	cmp	r3, #0
 8004716:	d16f      	bne.n	80047f8 <USB_EPStartXfer+0x1190>
 8004718:	1d3b      	adds	r3, r7, #4
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004720:	1d3b      	adds	r3, r7, #4
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004728:	b29b      	uxth	r3, r3
 800472a:	461a      	mov	r2, r3
 800472c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004730:	4413      	add	r3, r2
 8004732:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004736:	463b      	mov	r3, r7
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	781b      	ldrb	r3, [r3, #0]
 800473c:	011a      	lsls	r2, r3, #4
 800473e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004742:	4413      	add	r3, r2
 8004744:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004748:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800474c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004750:	2b00      	cmp	r3, #0
 8004752:	d116      	bne.n	8004782 <USB_EPStartXfer+0x111a>
 8004754:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004758:	881b      	ldrh	r3, [r3, #0]
 800475a:	b29b      	uxth	r3, r3
 800475c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004760:	b29a      	uxth	r2, r3
 8004762:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004766:	801a      	strh	r2, [r3, #0]
 8004768:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800476c:	881b      	ldrh	r3, [r3, #0]
 800476e:	b29b      	uxth	r3, r3
 8004770:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004774:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004778:	b29a      	uxth	r2, r3
 800477a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800477e:	801a      	strh	r2, [r3, #0]
 8004780:	e05e      	b.n	8004840 <USB_EPStartXfer+0x11d8>
 8004782:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004786:	2b3e      	cmp	r3, #62	; 0x3e
 8004788:	d818      	bhi.n	80047bc <USB_EPStartXfer+0x1154>
 800478a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800478e:	085b      	lsrs	r3, r3, #1
 8004790:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8004794:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004798:	f003 0301 	and.w	r3, r3, #1
 800479c:	2b00      	cmp	r3, #0
 800479e:	d004      	beq.n	80047aa <USB_EPStartXfer+0x1142>
 80047a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80047a4:	3301      	adds	r3, #1
 80047a6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80047aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80047ae:	b29b      	uxth	r3, r3
 80047b0:	029b      	lsls	r3, r3, #10
 80047b2:	b29a      	uxth	r2, r3
 80047b4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80047b8:	801a      	strh	r2, [r3, #0]
 80047ba:	e041      	b.n	8004840 <USB_EPStartXfer+0x11d8>
 80047bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80047c0:	095b      	lsrs	r3, r3, #5
 80047c2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80047c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80047ca:	f003 031f 	and.w	r3, r3, #31
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d104      	bne.n	80047dc <USB_EPStartXfer+0x1174>
 80047d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80047d6:	3b01      	subs	r3, #1
 80047d8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80047dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80047e0:	b29b      	uxth	r3, r3
 80047e2:	029b      	lsls	r3, r3, #10
 80047e4:	b29b      	uxth	r3, r3
 80047e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80047ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80047ee:	b29a      	uxth	r2, r3
 80047f0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80047f4:	801a      	strh	r2, [r3, #0]
 80047f6:	e023      	b.n	8004840 <USB_EPStartXfer+0x11d8>
 80047f8:	463b      	mov	r3, r7
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	785b      	ldrb	r3, [r3, #1]
 80047fe:	2b01      	cmp	r3, #1
 8004800:	d11e      	bne.n	8004840 <USB_EPStartXfer+0x11d8>
 8004802:	1d3b      	adds	r3, r7, #4
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800480a:	b29b      	uxth	r3, r3
 800480c:	461a      	mov	r2, r3
 800480e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004812:	4413      	add	r3, r2
 8004814:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004818:	463b      	mov	r3, r7
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	781b      	ldrb	r3, [r3, #0]
 800481e:	011a      	lsls	r2, r3, #4
 8004820:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004824:	4413      	add	r3, r2
 8004826:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800482a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800482e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004832:	b29a      	uxth	r2, r3
 8004834:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004838:	801a      	strh	r2, [r3, #0]
 800483a:	e001      	b.n	8004840 <USB_EPStartXfer+0x11d8>
      }
      else
      {
        return HAL_ERROR;
 800483c:	2301      	movs	r3, #1
 800483e:	e02e      	b.n	800489e <USB_EPStartXfer+0x1236>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004840:	1d3b      	adds	r3, r7, #4
 8004842:	681a      	ldr	r2, [r3, #0]
 8004844:	463b      	mov	r3, r7
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	781b      	ldrb	r3, [r3, #0]
 800484a:	009b      	lsls	r3, r3, #2
 800484c:	4413      	add	r3, r2
 800484e:	881b      	ldrh	r3, [r3, #0]
 8004850:	b29b      	uxth	r3, r3
 8004852:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004856:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800485a:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 800485e:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8004862:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004866:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 800486a:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800486e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004872:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8004876:	1d3b      	adds	r3, r7, #4
 8004878:	681a      	ldr	r2, [r3, #0]
 800487a:	463b      	mov	r3, r7
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	781b      	ldrb	r3, [r3, #0]
 8004880:	009b      	lsls	r3, r3, #2
 8004882:	441a      	add	r2, r3
 8004884:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8004888:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800488c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004890:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004894:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004898:	b29b      	uxth	r3, r3
 800489a:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800489c:	2300      	movs	r3, #0
}
 800489e:	4618      	mov	r0, r3
 80048a0:	f507 7788 	add.w	r7, r7, #272	; 0x110
 80048a4:	46bd      	mov	sp, r7
 80048a6:	bd80      	pop	{r7, pc}

080048a8 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80048a8:	b480      	push	{r7}
 80048aa:	b085      	sub	sp, #20
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
 80048b0:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	785b      	ldrb	r3, [r3, #1]
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d020      	beq.n	80048fc <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80048ba:	687a      	ldr	r2, [r7, #4]
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	781b      	ldrb	r3, [r3, #0]
 80048c0:	009b      	lsls	r3, r3, #2
 80048c2:	4413      	add	r3, r2
 80048c4:	881b      	ldrh	r3, [r3, #0]
 80048c6:	b29b      	uxth	r3, r3
 80048c8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80048cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80048d0:	81bb      	strh	r3, [r7, #12]
 80048d2:	89bb      	ldrh	r3, [r7, #12]
 80048d4:	f083 0310 	eor.w	r3, r3, #16
 80048d8:	81bb      	strh	r3, [r7, #12]
 80048da:	687a      	ldr	r2, [r7, #4]
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	781b      	ldrb	r3, [r3, #0]
 80048e0:	009b      	lsls	r3, r3, #2
 80048e2:	441a      	add	r2, r3
 80048e4:	89bb      	ldrh	r3, [r7, #12]
 80048e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80048ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80048ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80048f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048f6:	b29b      	uxth	r3, r3
 80048f8:	8013      	strh	r3, [r2, #0]
 80048fa:	e01f      	b.n	800493c <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80048fc:	687a      	ldr	r2, [r7, #4]
 80048fe:	683b      	ldr	r3, [r7, #0]
 8004900:	781b      	ldrb	r3, [r3, #0]
 8004902:	009b      	lsls	r3, r3, #2
 8004904:	4413      	add	r3, r2
 8004906:	881b      	ldrh	r3, [r3, #0]
 8004908:	b29b      	uxth	r3, r3
 800490a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800490e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004912:	81fb      	strh	r3, [r7, #14]
 8004914:	89fb      	ldrh	r3, [r7, #14]
 8004916:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800491a:	81fb      	strh	r3, [r7, #14]
 800491c:	687a      	ldr	r2, [r7, #4]
 800491e:	683b      	ldr	r3, [r7, #0]
 8004920:	781b      	ldrb	r3, [r3, #0]
 8004922:	009b      	lsls	r3, r3, #2
 8004924:	441a      	add	r2, r3
 8004926:	89fb      	ldrh	r3, [r7, #14]
 8004928:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800492c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004930:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004934:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004938:	b29b      	uxth	r3, r3
 800493a:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800493c:	2300      	movs	r3, #0
}
 800493e:	4618      	mov	r0, r3
 8004940:	3714      	adds	r7, #20
 8004942:	46bd      	mov	sp, r7
 8004944:	bc80      	pop	{r7}
 8004946:	4770      	bx	lr

08004948 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004948:	b480      	push	{r7}
 800494a:	b087      	sub	sp, #28
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
 8004950:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8004952:	683b      	ldr	r3, [r7, #0]
 8004954:	7b1b      	ldrb	r3, [r3, #12]
 8004956:	2b00      	cmp	r3, #0
 8004958:	f040 809d 	bne.w	8004a96 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800495c:	683b      	ldr	r3, [r7, #0]
 800495e:	785b      	ldrb	r3, [r3, #1]
 8004960:	2b00      	cmp	r3, #0
 8004962:	d04c      	beq.n	80049fe <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004964:	687a      	ldr	r2, [r7, #4]
 8004966:	683b      	ldr	r3, [r7, #0]
 8004968:	781b      	ldrb	r3, [r3, #0]
 800496a:	009b      	lsls	r3, r3, #2
 800496c:	4413      	add	r3, r2
 800496e:	881b      	ldrh	r3, [r3, #0]
 8004970:	823b      	strh	r3, [r7, #16]
 8004972:	8a3b      	ldrh	r3, [r7, #16]
 8004974:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004978:	2b00      	cmp	r3, #0
 800497a:	d01b      	beq.n	80049b4 <USB_EPClearStall+0x6c>
 800497c:	687a      	ldr	r2, [r7, #4]
 800497e:	683b      	ldr	r3, [r7, #0]
 8004980:	781b      	ldrb	r3, [r3, #0]
 8004982:	009b      	lsls	r3, r3, #2
 8004984:	4413      	add	r3, r2
 8004986:	881b      	ldrh	r3, [r3, #0]
 8004988:	b29b      	uxth	r3, r3
 800498a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800498e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004992:	81fb      	strh	r3, [r7, #14]
 8004994:	687a      	ldr	r2, [r7, #4]
 8004996:	683b      	ldr	r3, [r7, #0]
 8004998:	781b      	ldrb	r3, [r3, #0]
 800499a:	009b      	lsls	r3, r3, #2
 800499c:	441a      	add	r2, r3
 800499e:	89fb      	ldrh	r3, [r7, #14]
 80049a0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80049a4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80049a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80049ac:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80049b0:	b29b      	uxth	r3, r3
 80049b2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80049b4:	683b      	ldr	r3, [r7, #0]
 80049b6:	78db      	ldrb	r3, [r3, #3]
 80049b8:	2b01      	cmp	r3, #1
 80049ba:	d06c      	beq.n	8004a96 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80049bc:	687a      	ldr	r2, [r7, #4]
 80049be:	683b      	ldr	r3, [r7, #0]
 80049c0:	781b      	ldrb	r3, [r3, #0]
 80049c2:	009b      	lsls	r3, r3, #2
 80049c4:	4413      	add	r3, r2
 80049c6:	881b      	ldrh	r3, [r3, #0]
 80049c8:	b29b      	uxth	r3, r3
 80049ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80049ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80049d2:	81bb      	strh	r3, [r7, #12]
 80049d4:	89bb      	ldrh	r3, [r7, #12]
 80049d6:	f083 0320 	eor.w	r3, r3, #32
 80049da:	81bb      	strh	r3, [r7, #12]
 80049dc:	687a      	ldr	r2, [r7, #4]
 80049de:	683b      	ldr	r3, [r7, #0]
 80049e0:	781b      	ldrb	r3, [r3, #0]
 80049e2:	009b      	lsls	r3, r3, #2
 80049e4:	441a      	add	r2, r3
 80049e6:	89bb      	ldrh	r3, [r7, #12]
 80049e8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80049ec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80049f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80049f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049f8:	b29b      	uxth	r3, r3
 80049fa:	8013      	strh	r3, [r2, #0]
 80049fc:	e04b      	b.n	8004a96 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80049fe:	687a      	ldr	r2, [r7, #4]
 8004a00:	683b      	ldr	r3, [r7, #0]
 8004a02:	781b      	ldrb	r3, [r3, #0]
 8004a04:	009b      	lsls	r3, r3, #2
 8004a06:	4413      	add	r3, r2
 8004a08:	881b      	ldrh	r3, [r3, #0]
 8004a0a:	82fb      	strh	r3, [r7, #22]
 8004a0c:	8afb      	ldrh	r3, [r7, #22]
 8004a0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d01b      	beq.n	8004a4e <USB_EPClearStall+0x106>
 8004a16:	687a      	ldr	r2, [r7, #4]
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	781b      	ldrb	r3, [r3, #0]
 8004a1c:	009b      	lsls	r3, r3, #2
 8004a1e:	4413      	add	r3, r2
 8004a20:	881b      	ldrh	r3, [r3, #0]
 8004a22:	b29b      	uxth	r3, r3
 8004a24:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a2c:	82bb      	strh	r3, [r7, #20]
 8004a2e:	687a      	ldr	r2, [r7, #4]
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	781b      	ldrb	r3, [r3, #0]
 8004a34:	009b      	lsls	r3, r3, #2
 8004a36:	441a      	add	r2, r3
 8004a38:	8abb      	ldrh	r3, [r7, #20]
 8004a3a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a3e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a42:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004a46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a4a:	b29b      	uxth	r3, r3
 8004a4c:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004a4e:	687a      	ldr	r2, [r7, #4]
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	781b      	ldrb	r3, [r3, #0]
 8004a54:	009b      	lsls	r3, r3, #2
 8004a56:	4413      	add	r3, r2
 8004a58:	881b      	ldrh	r3, [r3, #0]
 8004a5a:	b29b      	uxth	r3, r3
 8004a5c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004a60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a64:	827b      	strh	r3, [r7, #18]
 8004a66:	8a7b      	ldrh	r3, [r7, #18]
 8004a68:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004a6c:	827b      	strh	r3, [r7, #18]
 8004a6e:	8a7b      	ldrh	r3, [r7, #18]
 8004a70:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004a74:	827b      	strh	r3, [r7, #18]
 8004a76:	687a      	ldr	r2, [r7, #4]
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	781b      	ldrb	r3, [r3, #0]
 8004a7c:	009b      	lsls	r3, r3, #2
 8004a7e:	441a      	add	r2, r3
 8004a80:	8a7b      	ldrh	r3, [r7, #18]
 8004a82:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a86:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a92:	b29b      	uxth	r3, r3
 8004a94:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8004a96:	2300      	movs	r3, #0
}
 8004a98:	4618      	mov	r0, r3
 8004a9a:	371c      	adds	r7, #28
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	bc80      	pop	{r7}
 8004aa0:	4770      	bx	lr

08004aa2 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8004aa2:	b480      	push	{r7}
 8004aa4:	b083      	sub	sp, #12
 8004aa6:	af00      	add	r7, sp, #0
 8004aa8:	6078      	str	r0, [r7, #4]
 8004aaa:	460b      	mov	r3, r1
 8004aac:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8004aae:	78fb      	ldrb	r3, [r7, #3]
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d103      	bne.n	8004abc <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2280      	movs	r2, #128	; 0x80
 8004ab8:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8004abc:	2300      	movs	r3, #0
}
 8004abe:	4618      	mov	r0, r3
 8004ac0:	370c      	adds	r7, #12
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	bc80      	pop	{r7}
 8004ac6:	4770      	bx	lr

08004ac8 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8004ac8:	b480      	push	{r7}
 8004aca:	b083      	sub	sp, #12
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8004ad0:	2300      	movs	r3, #0
}
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	370c      	adds	r7, #12
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	bc80      	pop	{r7}
 8004ada:	4770      	bx	lr

08004adc <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8004adc:	b480      	push	{r7}
 8004ade:	b083      	sub	sp, #12
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8004ae4:	2300      	movs	r3, #0
}
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	370c      	adds	r7, #12
 8004aea:	46bd      	mov	sp, r7
 8004aec:	bc80      	pop	{r7}
 8004aee:	4770      	bx	lr

08004af0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8004af0:	b480      	push	{r7}
 8004af2:	b085      	sub	sp, #20
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004afe:	b29b      	uxth	r3, r3
 8004b00:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8004b02:	68fb      	ldr	r3, [r7, #12]
}
 8004b04:	4618      	mov	r0, r3
 8004b06:	3714      	adds	r7, #20
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	bc80      	pop	{r7}
 8004b0c:	4770      	bx	lr

08004b0e <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8004b0e:	b480      	push	{r7}
 8004b10:	b083      	sub	sp, #12
 8004b12:	af00      	add	r7, sp, #0
 8004b14:	6078      	str	r0, [r7, #4]
 8004b16:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8004b18:	2300      	movs	r3, #0
}
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	370c      	adds	r7, #12
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	bc80      	pop	{r7}
 8004b22:	4770      	bx	lr

08004b24 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8004b24:	b480      	push	{r7}
 8004b26:	b08d      	sub	sp, #52	; 0x34
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	60f8      	str	r0, [r7, #12]
 8004b2c:	60b9      	str	r1, [r7, #8]
 8004b2e:	4611      	mov	r1, r2
 8004b30:	461a      	mov	r2, r3
 8004b32:	460b      	mov	r3, r1
 8004b34:	80fb      	strh	r3, [r7, #6]
 8004b36:	4613      	mov	r3, r2
 8004b38:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8004b3a:	88bb      	ldrh	r3, [r7, #4]
 8004b3c:	3301      	adds	r3, #1
 8004b3e:	085b      	lsrs	r3, r3, #1
 8004b40:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8004b46:	68bb      	ldr	r3, [r7, #8]
 8004b48:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8004b4a:	88fb      	ldrh	r3, [r7, #6]
 8004b4c:	005a      	lsls	r2, r3, #1
 8004b4e:	69fb      	ldr	r3, [r7, #28]
 8004b50:	4413      	add	r3, r2
 8004b52:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004b56:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8004b58:	6a3b      	ldr	r3, [r7, #32]
 8004b5a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004b5c:	e01e      	b.n	8004b9c <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8004b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b60:	781b      	ldrb	r3, [r3, #0]
 8004b62:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8004b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b66:	3301      	adds	r3, #1
 8004b68:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8004b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b6c:	781b      	ldrb	r3, [r3, #0]
 8004b6e:	b29b      	uxth	r3, r3
 8004b70:	021b      	lsls	r3, r3, #8
 8004b72:	b29b      	uxth	r3, r3
 8004b74:	461a      	mov	r2, r3
 8004b76:	69bb      	ldr	r3, [r7, #24]
 8004b78:	4313      	orrs	r3, r2
 8004b7a:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8004b7c:	697b      	ldr	r3, [r7, #20]
 8004b7e:	b29a      	uxth	r2, r3
 8004b80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b82:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8004b84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b86:	3302      	adds	r3, #2
 8004b88:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8004b8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b8c:	3302      	adds	r3, #2
 8004b8e:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8004b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b92:	3301      	adds	r3, #1
 8004b94:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8004b96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b98:	3b01      	subs	r3, #1
 8004b9a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004b9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d1dd      	bne.n	8004b5e <USB_WritePMA+0x3a>
  }
}
 8004ba2:	bf00      	nop
 8004ba4:	bf00      	nop
 8004ba6:	3734      	adds	r7, #52	; 0x34
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	bc80      	pop	{r7}
 8004bac:	4770      	bx	lr

08004bae <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8004bae:	b480      	push	{r7}
 8004bb0:	b08b      	sub	sp, #44	; 0x2c
 8004bb2:	af00      	add	r7, sp, #0
 8004bb4:	60f8      	str	r0, [r7, #12]
 8004bb6:	60b9      	str	r1, [r7, #8]
 8004bb8:	4611      	mov	r1, r2
 8004bba:	461a      	mov	r2, r3
 8004bbc:	460b      	mov	r3, r1
 8004bbe:	80fb      	strh	r3, [r7, #6]
 8004bc0:	4613      	mov	r3, r2
 8004bc2:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8004bc4:	88bb      	ldrh	r3, [r7, #4]
 8004bc6:	085b      	lsrs	r3, r3, #1
 8004bc8:	b29b      	uxth	r3, r3
 8004bca:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8004bd0:	68bb      	ldr	r3, [r7, #8]
 8004bd2:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8004bd4:	88fb      	ldrh	r3, [r7, #6]
 8004bd6:	005a      	lsls	r2, r3, #1
 8004bd8:	697b      	ldr	r3, [r7, #20]
 8004bda:	4413      	add	r3, r2
 8004bdc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004be0:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8004be2:	69bb      	ldr	r3, [r7, #24]
 8004be4:	627b      	str	r3, [r7, #36]	; 0x24
 8004be6:	e01b      	b.n	8004c20 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8004be8:	6a3b      	ldr	r3, [r7, #32]
 8004bea:	881b      	ldrh	r3, [r3, #0]
 8004bec:	b29b      	uxth	r3, r3
 8004bee:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8004bf0:	6a3b      	ldr	r3, [r7, #32]
 8004bf2:	3302      	adds	r3, #2
 8004bf4:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8004bf6:	693b      	ldr	r3, [r7, #16]
 8004bf8:	b2da      	uxtb	r2, r3
 8004bfa:	69fb      	ldr	r3, [r7, #28]
 8004bfc:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8004bfe:	69fb      	ldr	r3, [r7, #28]
 8004c00:	3301      	adds	r3, #1
 8004c02:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8004c04:	693b      	ldr	r3, [r7, #16]
 8004c06:	0a1b      	lsrs	r3, r3, #8
 8004c08:	b2da      	uxtb	r2, r3
 8004c0a:	69fb      	ldr	r3, [r7, #28]
 8004c0c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8004c0e:	69fb      	ldr	r3, [r7, #28]
 8004c10:	3301      	adds	r3, #1
 8004c12:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8004c14:	6a3b      	ldr	r3, [r7, #32]
 8004c16:	3302      	adds	r3, #2
 8004c18:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8004c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c1c:	3b01      	subs	r3, #1
 8004c1e:	627b      	str	r3, [r7, #36]	; 0x24
 8004c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d1e0      	bne.n	8004be8 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8004c26:	88bb      	ldrh	r3, [r7, #4]
 8004c28:	f003 0301 	and.w	r3, r3, #1
 8004c2c:	b29b      	uxth	r3, r3
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d007      	beq.n	8004c42 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8004c32:	6a3b      	ldr	r3, [r7, #32]
 8004c34:	881b      	ldrh	r3, [r3, #0]
 8004c36:	b29b      	uxth	r3, r3
 8004c38:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8004c3a:	693b      	ldr	r3, [r7, #16]
 8004c3c:	b2da      	uxtb	r2, r3
 8004c3e:	69fb      	ldr	r3, [r7, #28]
 8004c40:	701a      	strb	r2, [r3, #0]
  }
}
 8004c42:	bf00      	nop
 8004c44:	372c      	adds	r7, #44	; 0x2c
 8004c46:	46bd      	mov	sp, r7
 8004c48:	bc80      	pop	{r7}
 8004c4a:	4770      	bx	lr

08004c4c <USBD_MSC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004c4c:	b580      	push	{r7, lr}
 8004c4e:	b082      	sub	sp, #8
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	6078      	str	r0, [r7, #4]
 8004c54:	460b      	mov	r3, r1
 8004c56:	70fb      	strb	r3, [r7, #3]
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	7c1b      	ldrb	r3, [r3, #16]
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d115      	bne.n	8004c8c <USBD_MSC_Init+0x40>
  {
    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 8004c60:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004c64:	2202      	movs	r2, #2
 8004c66:	2101      	movs	r1, #1
 8004c68:	6878      	ldr	r0, [r7, #4]
 8004c6a:	f003 f9ec 	bl	8008046 <USBD_LL_OpenEP>
    pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	2201      	movs	r2, #1
 8004c72:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

    /* Open EP IN */
    USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 8004c76:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004c7a:	2202      	movs	r2, #2
 8004c7c:	2181      	movs	r1, #129	; 0x81
 8004c7e:	6878      	ldr	r0, [r7, #4]
 8004c80:	f003 f9e1 	bl	8008046 <USBD_LL_OpenEP>
    pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2201      	movs	r2, #1
 8004c88:	62da      	str	r2, [r3, #44]	; 0x2c
 8004c8a:	e012      	b.n	8004cb2 <USBD_MSC_Init+0x66>
  }
  else
  {
    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 8004c8c:	2340      	movs	r3, #64	; 0x40
 8004c8e:	2202      	movs	r2, #2
 8004c90:	2101      	movs	r1, #1
 8004c92:	6878      	ldr	r0, [r7, #4]
 8004c94:	f003 f9d7 	bl	8008046 <USBD_LL_OpenEP>
    pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2201      	movs	r2, #1
 8004c9c:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

    /* Open EP IN */
    USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 8004ca0:	2340      	movs	r3, #64	; 0x40
 8004ca2:	2202      	movs	r2, #2
 8004ca4:	2181      	movs	r1, #129	; 0x81
 8004ca6:	6878      	ldr	r0, [r7, #4]
 8004ca8:	f003 f9cd 	bl	8008046 <USBD_LL_OpenEP>
    pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2201      	movs	r2, #1
 8004cb0:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  pdev->pClassData = USBD_malloc(sizeof(USBD_MSC_BOT_HandleTypeDef));
 8004cb2:	f44f 701b 	mov.w	r0, #620	; 0x26c
 8004cb6:	f003 fb0d 	bl	80082d4 <USBD_static_malloc>
 8004cba:	4602      	mov	r2, r0
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d101      	bne.n	8004cd0 <USBD_MSC_Init+0x84>
  {
    return USBD_FAIL;
 8004ccc:	2302      	movs	r3, #2
 8004cce:	e003      	b.n	8004cd8 <USBD_MSC_Init+0x8c>
  }

  /* Init the BOT  layer */
  MSC_BOT_Init(pdev);
 8004cd0:	6878      	ldr	r0, [r7, #4]
 8004cd2:	f000 f9d9 	bl	8005088 <MSC_BOT_Init>

  return USBD_OK;
 8004cd6:	2300      	movs	r3, #0
}
 8004cd8:	4618      	mov	r0, r3
 8004cda:	3708      	adds	r7, #8
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	bd80      	pop	{r7, pc}

08004ce0 <USBD_MSC_DeInit>:
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_DeInit(USBD_HandleTypeDef *pdev,
                         uint8_t cfgidx)
{
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	b082      	sub	sp, #8
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]
 8004ce8:	460b      	mov	r3, r1
 8004cea:	70fb      	strb	r3, [r7, #3]
  /* Close MSC EPs */
  USBD_LL_CloseEP(pdev, MSC_EPOUT_ADDR);
 8004cec:	2101      	movs	r1, #1
 8004cee:	6878      	ldr	r0, [r7, #4]
 8004cf0:	f003 f9cf 	bl	8008092 <USBD_LL_CloseEP>
  pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 0U;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, MSC_EPIN_ADDR);
 8004cfc:	2181      	movs	r1, #129	; 0x81
 8004cfe:	6878      	ldr	r0, [r7, #4]
 8004d00:	f003 f9c7 	bl	8008092 <USBD_LL_CloseEP>
  pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 0U;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2200      	movs	r2, #0
 8004d08:	62da      	str	r2, [r3, #44]	; 0x2c

  /* De-Init the BOT layer */
  MSC_BOT_DeInit(pdev);
 8004d0a:	6878      	ldr	r0, [r7, #4]
 8004d0c:	f000 fa06 	bl	800511c <MSC_BOT_DeInit>

  /* Free MSC Class Resources */
  if (pdev->pClassData != NULL)
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d009      	beq.n	8004d2e <USBD_MSC_DeInit+0x4e>
  {
    USBD_free(pdev->pClassData);
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004d20:	4618      	mov	r0, r3
 8004d22:	f003 fae3 	bl	80082ec <USBD_static_free>
    pdev->pClassData  = NULL;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	2200      	movs	r2, #0
 8004d2a:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return USBD_OK;
 8004d2e:	2300      	movs	r3, #0
}
 8004d30:	4618      	mov	r0, r3
 8004d32:	3708      	adds	r7, #8
 8004d34:	46bd      	mov	sp, r7
 8004d36:	bd80      	pop	{r7, pc}

08004d38 <USBD_MSC_Setup>:
* @param  pdev: device instance
* @param  req: USB request
* @retval status
*/
uint8_t USBD_MSC_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	b086      	sub	sp, #24
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	6078      	str	r0, [r7, #4]
 8004d40:	6039      	str	r1, [r7, #0]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *) pdev->pClassData;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004d48:	613b      	str	r3, [r7, #16]
  uint8_t ret = USBD_OK;
 8004d4a:	2300      	movs	r3, #0
 8004d4c:	75fb      	strb	r3, [r7, #23]
  uint16_t status_info = 0U;
 8004d4e:	2300      	movs	r3, #0
 8004d50:	81fb      	strh	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004d52:	683b      	ldr	r3, [r7, #0]
 8004d54:	781b      	ldrb	r3, [r3, #0]
 8004d56:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d04d      	beq.n	8004dfa <USBD_MSC_Setup+0xc2>
 8004d5e:	2b20      	cmp	r3, #32
 8004d60:	f040 8113 	bne.w	8004f8a <USBD_MSC_Setup+0x252>
  {
    /* Class request */
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 8004d64:	683b      	ldr	r3, [r7, #0]
 8004d66:	785b      	ldrb	r3, [r3, #1]
 8004d68:	2bfe      	cmp	r3, #254	; 0xfe
 8004d6a:	d002      	beq.n	8004d72 <USBD_MSC_Setup+0x3a>
 8004d6c:	2bff      	cmp	r3, #255	; 0xff
 8004d6e:	d024      	beq.n	8004dba <USBD_MSC_Setup+0x82>
 8004d70:	e03b      	b.n	8004dea <USBD_MSC_Setup+0xb2>
      {
        case BOT_GET_MAX_LUN:
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	885b      	ldrh	r3, [r3, #2]
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d118      	bne.n	8004dac <USBD_MSC_Setup+0x74>
 8004d7a:	683b      	ldr	r3, [r7, #0]
 8004d7c:	88db      	ldrh	r3, [r3, #6]
 8004d7e:	2b01      	cmp	r3, #1
 8004d80:	d114      	bne.n	8004dac <USBD_MSC_Setup+0x74>
              ((req->bmRequest & 0x80U) == 0x80U))
 8004d82:	683b      	ldr	r3, [r7, #0]
 8004d84:	781b      	ldrb	r3, [r3, #0]
 8004d86:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	da0f      	bge.n	8004dac <USBD_MSC_Setup+0x74>
          {
            hmsc->max_lun = (uint32_t)((USBD_StorageTypeDef *)pdev->pUserData)->GetMaxLun();
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004d92:	699b      	ldr	r3, [r3, #24]
 8004d94:	4798      	blx	r3
 8004d96:	4603      	mov	r3, r0
 8004d98:	461a      	mov	r2, r3
 8004d9a:	693b      	ldr	r3, [r7, #16]
 8004d9c:	601a      	str	r2, [r3, #0]
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hmsc->max_lun, 1U);
 8004d9e:	693b      	ldr	r3, [r7, #16]
 8004da0:	2201      	movs	r2, #1
 8004da2:	4619      	mov	r1, r3
 8004da4:	6878      	ldr	r0, [r7, #4]
 8004da6:	f002 f992 	bl	80070ce <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004daa:	e025      	b.n	8004df8 <USBD_MSC_Setup+0xc0>
            USBD_CtlError(pdev, req);
 8004dac:	6839      	ldr	r1, [r7, #0]
 8004dae:	6878      	ldr	r0, [r7, #4]
 8004db0:	f002 f923 	bl	8006ffa <USBD_CtlError>
            ret = USBD_FAIL;
 8004db4:	2302      	movs	r3, #2
 8004db6:	75fb      	strb	r3, [r7, #23]
          break;
 8004db8:	e01e      	b.n	8004df8 <USBD_MSC_Setup+0xc0>

        case BOT_RESET :
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 8004dba:	683b      	ldr	r3, [r7, #0]
 8004dbc:	885b      	ldrh	r3, [r3, #2]
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d10c      	bne.n	8004ddc <USBD_MSC_Setup+0xa4>
 8004dc2:	683b      	ldr	r3, [r7, #0]
 8004dc4:	88db      	ldrh	r3, [r3, #6]
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d108      	bne.n	8004ddc <USBD_MSC_Setup+0xa4>
              ((req->bmRequest & 0x80U) != 0x80U))
 8004dca:	683b      	ldr	r3, [r7, #0]
 8004dcc:	781b      	ldrb	r3, [r3, #0]
 8004dce:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	db03      	blt.n	8004ddc <USBD_MSC_Setup+0xa4>
          {
            MSC_BOT_Reset(pdev);
 8004dd4:	6878      	ldr	r0, [r7, #4]
 8004dd6:	f000 f987 	bl	80050e8 <MSC_BOT_Reset>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004dda:	e00d      	b.n	8004df8 <USBD_MSC_Setup+0xc0>
            USBD_CtlError(pdev, req);
 8004ddc:	6839      	ldr	r1, [r7, #0]
 8004dde:	6878      	ldr	r0, [r7, #4]
 8004de0:	f002 f90b 	bl	8006ffa <USBD_CtlError>
            ret = USBD_FAIL;
 8004de4:	2302      	movs	r3, #2
 8004de6:	75fb      	strb	r3, [r7, #23]
          break;
 8004de8:	e006      	b.n	8004df8 <USBD_MSC_Setup+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8004dea:	6839      	ldr	r1, [r7, #0]
 8004dec:	6878      	ldr	r0, [r7, #4]
 8004dee:	f002 f904 	bl	8006ffa <USBD_CtlError>
          ret = USBD_FAIL;
 8004df2:	2302      	movs	r3, #2
 8004df4:	75fb      	strb	r3, [r7, #23]
          break;
 8004df6:	bf00      	nop
      }
      break;
 8004df8:	e0ce      	b.n	8004f98 <USBD_MSC_Setup+0x260>
    /* Interface & Endpoint request */
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8004dfa:	683b      	ldr	r3, [r7, #0]
 8004dfc:	785b      	ldrb	r3, [r3, #1]
 8004dfe:	2b0b      	cmp	r3, #11
 8004e00:	f200 80bb 	bhi.w	8004f7a <USBD_MSC_Setup+0x242>
 8004e04:	a201      	add	r2, pc, #4	; (adr r2, 8004e0c <USBD_MSC_Setup+0xd4>)
 8004e06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e0a:	bf00      	nop
 8004e0c:	08004e3d 	.word	0x08004e3d
 8004e10:	08004eb3 	.word	0x08004eb3
 8004e14:	08004f7b 	.word	0x08004f7b
 8004e18:	08004f7b 	.word	0x08004f7b
 8004e1c:	08004f7b 	.word	0x08004f7b
 8004e20:	08004f7b 	.word	0x08004f7b
 8004e24:	08004f7b 	.word	0x08004f7b
 8004e28:	08004f7b 	.word	0x08004f7b
 8004e2c:	08004f7b 	.word	0x08004f7b
 8004e30:	08004f7b 	.word	0x08004f7b
 8004e34:	08004e65 	.word	0x08004e65
 8004e38:	08004e8d 	.word	0x08004e8d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004e42:	2b03      	cmp	r3, #3
 8004e44:	d107      	bne.n	8004e56 <USBD_MSC_Setup+0x11e>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8004e46:	f107 030e 	add.w	r3, r7, #14
 8004e4a:	2202      	movs	r2, #2
 8004e4c:	4619      	mov	r1, r3
 8004e4e:	6878      	ldr	r0, [r7, #4]
 8004e50:	f002 f93d 	bl	80070ce <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004e54:	e098      	b.n	8004f88 <USBD_MSC_Setup+0x250>
            USBD_CtlError(pdev, req);
 8004e56:	6839      	ldr	r1, [r7, #0]
 8004e58:	6878      	ldr	r0, [r7, #4]
 8004e5a:	f002 f8ce 	bl	8006ffa <USBD_CtlError>
            ret = USBD_FAIL;
 8004e5e:	2302      	movs	r3, #2
 8004e60:	75fb      	strb	r3, [r7, #23]
          break;
 8004e62:	e091      	b.n	8004f88 <USBD_MSC_Setup+0x250>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004e6a:	2b03      	cmp	r3, #3
 8004e6c:	d107      	bne.n	8004e7e <USBD_MSC_Setup+0x146>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hmsc->interface, 1U);
 8004e6e:	693b      	ldr	r3, [r7, #16]
 8004e70:	3304      	adds	r3, #4
 8004e72:	2201      	movs	r2, #1
 8004e74:	4619      	mov	r1, r3
 8004e76:	6878      	ldr	r0, [r7, #4]
 8004e78:	f002 f929 	bl	80070ce <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004e7c:	e084      	b.n	8004f88 <USBD_MSC_Setup+0x250>
            USBD_CtlError(pdev, req);
 8004e7e:	6839      	ldr	r1, [r7, #0]
 8004e80:	6878      	ldr	r0, [r7, #4]
 8004e82:	f002 f8ba 	bl	8006ffa <USBD_CtlError>
            ret = USBD_FAIL;
 8004e86:	2302      	movs	r3, #2
 8004e88:	75fb      	strb	r3, [r7, #23]
          break;
 8004e8a:	e07d      	b.n	8004f88 <USBD_MSC_Setup+0x250>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004e92:	2b03      	cmp	r3, #3
 8004e94:	d106      	bne.n	8004ea4 <USBD_MSC_Setup+0x16c>
          {
            hmsc->interface = (uint8_t)(req->wValue);
 8004e96:	683b      	ldr	r3, [r7, #0]
 8004e98:	885b      	ldrh	r3, [r3, #2]
 8004e9a:	b2db      	uxtb	r3, r3
 8004e9c:	461a      	mov	r2, r3
 8004e9e:	693b      	ldr	r3, [r7, #16]
 8004ea0:	605a      	str	r2, [r3, #4]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004ea2:	e071      	b.n	8004f88 <USBD_MSC_Setup+0x250>
            USBD_CtlError(pdev, req);
 8004ea4:	6839      	ldr	r1, [r7, #0]
 8004ea6:	6878      	ldr	r0, [r7, #4]
 8004ea8:	f002 f8a7 	bl	8006ffa <USBD_CtlError>
            ret = USBD_FAIL;
 8004eac:	2302      	movs	r3, #2
 8004eae:	75fb      	strb	r3, [r7, #23]
          break;
 8004eb0:	e06a      	b.n	8004f88 <USBD_MSC_Setup+0x250>

        case USB_REQ_CLEAR_FEATURE:

          /* Flush the FIFO and Clear the stall status */
          USBD_LL_FlushEP(pdev, (uint8_t)req->wIndex);
 8004eb2:	683b      	ldr	r3, [r7, #0]
 8004eb4:	889b      	ldrh	r3, [r3, #4]
 8004eb6:	b2db      	uxtb	r3, r3
 8004eb8:	4619      	mov	r1, r3
 8004eba:	6878      	ldr	r0, [r7, #4]
 8004ebc:	f003 f908 	bl	80080d0 <USBD_LL_FlushEP>

          /* Reactivate the EP */
          USBD_LL_CloseEP(pdev, (uint8_t)req->wIndex);
 8004ec0:	683b      	ldr	r3, [r7, #0]
 8004ec2:	889b      	ldrh	r3, [r3, #4]
 8004ec4:	b2db      	uxtb	r3, r3
 8004ec6:	4619      	mov	r1, r3
 8004ec8:	6878      	ldr	r0, [r7, #4]
 8004eca:	f003 f8e2 	bl	8008092 <USBD_LL_CloseEP>
          if ((((uint8_t)req->wIndex) & 0x80U) == 0x80U)
 8004ece:	683b      	ldr	r3, [r7, #0]
 8004ed0:	889b      	ldrh	r3, [r3, #4]
 8004ed2:	b25b      	sxtb	r3, r3
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	da23      	bge.n	8004f20 <USBD_MSC_Setup+0x1e8>
          {
            pdev->ep_in[(uint8_t)req->wIndex & 0xFU].is_used = 0U;
 8004ed8:	683b      	ldr	r3, [r7, #0]
 8004eda:	889b      	ldrh	r3, [r3, #4]
 8004edc:	b2db      	uxtb	r3, r3
 8004ede:	f003 020f 	and.w	r2, r3, #15
 8004ee2:	6879      	ldr	r1, [r7, #4]
 8004ee4:	4613      	mov	r3, r2
 8004ee6:	009b      	lsls	r3, r3, #2
 8004ee8:	4413      	add	r3, r2
 8004eea:	009b      	lsls	r3, r3, #2
 8004eec:	440b      	add	r3, r1
 8004eee:	3318      	adds	r3, #24
 8004ef0:	2200      	movs	r2, #0
 8004ef2:	601a      	str	r2, [r3, #0]
            if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	7c1b      	ldrb	r3, [r3, #16]
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d107      	bne.n	8004f0c <USBD_MSC_Setup+0x1d4>
            {
              /* Open EP IN */
              USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK,
 8004efc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004f00:	2202      	movs	r2, #2
 8004f02:	2181      	movs	r1, #129	; 0x81
 8004f04:	6878      	ldr	r0, [r7, #4]
 8004f06:	f003 f89e 	bl	8008046 <USBD_LL_OpenEP>
 8004f0a:	e005      	b.n	8004f18 <USBD_MSC_Setup+0x1e0>
                             MSC_MAX_HS_PACKET);
            }
            else
            {
              /* Open EP IN */
              USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK,
 8004f0c:	2340      	movs	r3, #64	; 0x40
 8004f0e:	2202      	movs	r2, #2
 8004f10:	2181      	movs	r1, #129	; 0x81
 8004f12:	6878      	ldr	r0, [r7, #4]
 8004f14:	f003 f897 	bl	8008046 <USBD_LL_OpenEP>
                             MSC_MAX_FS_PACKET);
            }
            pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2201      	movs	r2, #1
 8004f1c:	62da      	str	r2, [r3, #44]	; 0x2c
 8004f1e:	e024      	b.n	8004f6a <USBD_MSC_Setup+0x232>
          }
          else
          {
            pdev->ep_out[(uint8_t)req->wIndex & 0xFU].is_used = 0U;
 8004f20:	683b      	ldr	r3, [r7, #0]
 8004f22:	889b      	ldrh	r3, [r3, #4]
 8004f24:	b2db      	uxtb	r3, r3
 8004f26:	f003 020f 	and.w	r2, r3, #15
 8004f2a:	6879      	ldr	r1, [r7, #4]
 8004f2c:	4613      	mov	r3, r2
 8004f2e:	009b      	lsls	r3, r3, #2
 8004f30:	4413      	add	r3, r2
 8004f32:	009b      	lsls	r3, r3, #2
 8004f34:	440b      	add	r3, r1
 8004f36:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	601a      	str	r2, [r3, #0]
            if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	7c1b      	ldrb	r3, [r3, #16]
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d107      	bne.n	8004f56 <USBD_MSC_Setup+0x21e>
            {
              /* Open EP OUT */
              USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK,
 8004f46:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004f4a:	2202      	movs	r2, #2
 8004f4c:	2101      	movs	r1, #1
 8004f4e:	6878      	ldr	r0, [r7, #4]
 8004f50:	f003 f879 	bl	8008046 <USBD_LL_OpenEP>
 8004f54:	e005      	b.n	8004f62 <USBD_MSC_Setup+0x22a>
                             MSC_MAX_HS_PACKET);
            }
            else
            {
              /* Open EP OUT */
              USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK,
 8004f56:	2340      	movs	r3, #64	; 0x40
 8004f58:	2202      	movs	r2, #2
 8004f5a:	2101      	movs	r1, #1
 8004f5c:	6878      	ldr	r0, [r7, #4]
 8004f5e:	f003 f872 	bl	8008046 <USBD_LL_OpenEP>
                             MSC_MAX_FS_PACKET);
            }
            pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	2201      	movs	r2, #1
 8004f66:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
          }

          /* Handle BOT error */
          MSC_BOT_CplClrFeature(pdev, (uint8_t)req->wIndex);
 8004f6a:	683b      	ldr	r3, [r7, #0]
 8004f6c:	889b      	ldrh	r3, [r3, #4]
 8004f6e:	b2db      	uxtb	r3, r3
 8004f70:	4619      	mov	r1, r3
 8004f72:	6878      	ldr	r0, [r7, #4]
 8004f74:	f000 fa52 	bl	800541c <MSC_BOT_CplClrFeature>
          break;
 8004f78:	e006      	b.n	8004f88 <USBD_MSC_Setup+0x250>

        default:
          USBD_CtlError(pdev, req);
 8004f7a:	6839      	ldr	r1, [r7, #0]
 8004f7c:	6878      	ldr	r0, [r7, #4]
 8004f7e:	f002 f83c 	bl	8006ffa <USBD_CtlError>
          ret = USBD_FAIL;
 8004f82:	2302      	movs	r3, #2
 8004f84:	75fb      	strb	r3, [r7, #23]
          break;
 8004f86:	bf00      	nop
      }
      break;
 8004f88:	e006      	b.n	8004f98 <USBD_MSC_Setup+0x260>

    default:
      USBD_CtlError(pdev, req);
 8004f8a:	6839      	ldr	r1, [r7, #0]
 8004f8c:	6878      	ldr	r0, [r7, #4]
 8004f8e:	f002 f834 	bl	8006ffa <USBD_CtlError>
      ret = USBD_FAIL;
 8004f92:	2302      	movs	r3, #2
 8004f94:	75fb      	strb	r3, [r7, #23]
      break;
 8004f96:	bf00      	nop
  }

  return ret;
 8004f98:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	3718      	adds	r7, #24
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	bd80      	pop	{r7, pc}
 8004fa2:	bf00      	nop

08004fa4 <USBD_MSC_DataIn>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
uint8_t USBD_MSC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	b082      	sub	sp, #8
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
 8004fac:	460b      	mov	r3, r1
 8004fae:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataIn(pdev, epnum);
 8004fb0:	78fb      	ldrb	r3, [r7, #3]
 8004fb2:	4619      	mov	r1, r3
 8004fb4:	6878      	ldr	r0, [r7, #4]
 8004fb6:	f000 f8c1 	bl	800513c <MSC_BOT_DataIn>

  return USBD_OK;
 8004fba:	2300      	movs	r3, #0
}
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	3708      	adds	r7, #8
 8004fc0:	46bd      	mov	sp, r7
 8004fc2:	bd80      	pop	{r7, pc}

08004fc4 <USBD_MSC_DataOut>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
uint8_t USBD_MSC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004fc4:	b580      	push	{r7, lr}
 8004fc6:	b082      	sub	sp, #8
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	6078      	str	r0, [r7, #4]
 8004fcc:	460b      	mov	r3, r1
 8004fce:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataOut(pdev, epnum);
 8004fd0:	78fb      	ldrb	r3, [r7, #3]
 8004fd2:	4619      	mov	r1, r3
 8004fd4:	6878      	ldr	r0, [r7, #4]
 8004fd6:	f000 f8e3 	bl	80051a0 <MSC_BOT_DataOut>

  return USBD_OK;
 8004fda:	2300      	movs	r3, #0
}
 8004fdc:	4618      	mov	r0, r3
 8004fde:	3708      	adds	r7, #8
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	bd80      	pop	{r7, pc}

08004fe4 <USBD_MSC_GetHSCfgDesc>:
*         return configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetHSCfgDesc(uint16_t *length)
{
 8004fe4:	b480      	push	{r7}
 8004fe6:	b083      	sub	sp, #12
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_MSC_CfgHSDesc);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2220      	movs	r2, #32
 8004ff0:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_CfgHSDesc;
 8004ff2:	4b03      	ldr	r3, [pc, #12]	; (8005000 <USBD_MSC_GetHSCfgDesc+0x1c>)
}
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	370c      	adds	r7, #12
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	bc80      	pop	{r7}
 8004ffc:	4770      	bx	lr
 8004ffe:	bf00      	nop
 8005000:	20000044 	.word	0x20000044

08005004 <USBD_MSC_GetFSCfgDesc>:
*         return configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetFSCfgDesc(uint16_t *length)
{
 8005004:	b480      	push	{r7}
 8005006:	b083      	sub	sp, #12
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_MSC_CfgFSDesc);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2220      	movs	r2, #32
 8005010:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_CfgFSDesc;
 8005012:	4b03      	ldr	r3, [pc, #12]	; (8005020 <USBD_MSC_GetFSCfgDesc+0x1c>)
}
 8005014:	4618      	mov	r0, r3
 8005016:	370c      	adds	r7, #12
 8005018:	46bd      	mov	sp, r7
 800501a:	bc80      	pop	{r7}
 800501c:	4770      	bx	lr
 800501e:	bf00      	nop
 8005020:	20000064 	.word	0x20000064

08005024 <USBD_MSC_GetOtherSpeedCfgDesc>:
*         return other speed configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005024:	b480      	push	{r7}
 8005026:	b083      	sub	sp, #12
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_MSC_OtherSpeedCfgDesc);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2220      	movs	r2, #32
 8005030:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_OtherSpeedCfgDesc;
 8005032:	4b03      	ldr	r3, [pc, #12]	; (8005040 <USBD_MSC_GetOtherSpeedCfgDesc+0x1c>)
}
 8005034:	4618      	mov	r0, r3
 8005036:	370c      	adds	r7, #12
 8005038:	46bd      	mov	sp, r7
 800503a:	bc80      	pop	{r7}
 800503c:	4770      	bx	lr
 800503e:	bf00      	nop
 8005040:	20000084 	.word	0x20000084

08005044 <USBD_MSC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8005044:	b480      	push	{r7}
 8005046:	b083      	sub	sp, #12
 8005048:	af00      	add	r7, sp, #0
 800504a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_MSC_DeviceQualifierDesc);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	220a      	movs	r2, #10
 8005050:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_DeviceQualifierDesc;
 8005052:	4b03      	ldr	r3, [pc, #12]	; (8005060 <USBD_MSC_GetDeviceQualifierDescriptor+0x1c>)
}
 8005054:	4618      	mov	r0, r3
 8005056:	370c      	adds	r7, #12
 8005058:	46bd      	mov	sp, r7
 800505a:	bc80      	pop	{r7}
 800505c:	4770      	bx	lr
 800505e:	bf00      	nop
 8005060:	200000a4 	.word	0x200000a4

08005064 <USBD_MSC_RegisterStorage>:
* @param  fops: storage callback
* @retval status
*/
uint8_t USBD_MSC_RegisterStorage(USBD_HandleTypeDef *pdev,
                                 USBD_StorageTypeDef *fops)
{
 8005064:	b480      	push	{r7}
 8005066:	b083      	sub	sp, #12
 8005068:	af00      	add	r7, sp, #0
 800506a:	6078      	str	r0, [r7, #4]
 800506c:	6039      	str	r1, [r7, #0]
  if (fops != NULL)
 800506e:	683b      	ldr	r3, [r7, #0]
 8005070:	2b00      	cmp	r3, #0
 8005072:	d003      	beq.n	800507c <USBD_MSC_RegisterStorage+0x18>
  {
    pdev->pUserData = fops;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	683a      	ldr	r2, [r7, #0]
 8005078:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return USBD_OK;
 800507c:	2300      	movs	r3, #0
}
 800507e:	4618      	mov	r0, r3
 8005080:	370c      	adds	r7, #12
 8005082:	46bd      	mov	sp, r7
 8005084:	bc80      	pop	{r7}
 8005086:	4770      	bx	lr

08005088 <MSC_BOT_Init>:
*         Initialize the BOT Process
* @param  pdev: device instance
* @retval None
*/
void MSC_BOT_Init(USBD_HandleTypeDef  *pdev)
{
 8005088:	b580      	push	{r7, lr}
 800508a:	b084      	sub	sp, #16
 800508c:	af00      	add	r7, sp, #0
 800508e:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005096:	60fb      	str	r3, [r7, #12]

  hmsc->bot_state = USBD_BOT_IDLE;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	2200      	movs	r2, #0
 800509c:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	2200      	movs	r2, #0
 80050a2:	725a      	strb	r2, [r3, #9]

  hmsc->scsi_sense_tail = 0U;
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	2200      	movs	r2, #0
 80050a8:	f883 225d 	strb.w	r2, [r3, #605]	; 0x25d
  hmsc->scsi_sense_head = 0U;
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	2200      	movs	r2, #0
 80050b0:	f883 225c 	strb.w	r2, [r3, #604]	; 0x25c

  ((USBD_StorageTypeDef *)pdev->pUserData)->Init(0U);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	2000      	movs	r0, #0
 80050be:	4798      	blx	r3

  USBD_LL_FlushEP(pdev, MSC_EPOUT_ADDR);
 80050c0:	2101      	movs	r1, #1
 80050c2:	6878      	ldr	r0, [r7, #4]
 80050c4:	f003 f804 	bl	80080d0 <USBD_LL_FlushEP>
  USBD_LL_FlushEP(pdev, MSC_EPIN_ADDR);
 80050c8:	2181      	movs	r1, #129	; 0x81
 80050ca:	6878      	ldr	r0, [r7, #4]
 80050cc:	f003 f800 	bl	80080d0 <USBD_LL_FlushEP>

  /* Prapare EP to Receive First BOT Cmd */
  USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)(void *)&hmsc->cbw,
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	f503 7203 	add.w	r2, r3, #524	; 0x20c
 80050d6:	231f      	movs	r3, #31
 80050d8:	2101      	movs	r1, #1
 80050da:	6878      	ldr	r0, [r7, #4]
 80050dc:	f003 f8c3 	bl	8008266 <USBD_LL_PrepareReceive>
                         USBD_BOT_CBW_LENGTH);
}
 80050e0:	bf00      	nop
 80050e2:	3710      	adds	r7, #16
 80050e4:	46bd      	mov	sp, r7
 80050e6:	bd80      	pop	{r7, pc}

080050e8 <MSC_BOT_Reset>:
*         Reset the BOT Machine
* @param  pdev: device instance
* @retval  None
*/
void MSC_BOT_Reset(USBD_HandleTypeDef  *pdev)
{
 80050e8:	b580      	push	{r7, lr}
 80050ea:	b084      	sub	sp, #16
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80050f6:	60fb      	str	r3, [r7, #12]

  hmsc->bot_state  = USBD_BOT_IDLE;
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	2200      	movs	r2, #0
 80050fc:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_RECOVERY;
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	2201      	movs	r2, #1
 8005102:	725a      	strb	r2, [r3, #9]

  /* Prapare EP to Receive First BOT Cmd */
  USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)(void *)&hmsc->cbw,
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	f503 7203 	add.w	r2, r3, #524	; 0x20c
 800510a:	231f      	movs	r3, #31
 800510c:	2101      	movs	r1, #1
 800510e:	6878      	ldr	r0, [r7, #4]
 8005110:	f003 f8a9 	bl	8008266 <USBD_LL_PrepareReceive>
                         USBD_BOT_CBW_LENGTH);
}
 8005114:	bf00      	nop
 8005116:	3710      	adds	r7, #16
 8005118:	46bd      	mov	sp, r7
 800511a:	bd80      	pop	{r7, pc}

0800511c <MSC_BOT_DeInit>:
*         Deinitialize the BOT Machine
* @param  pdev: device instance
* @retval None
*/
void MSC_BOT_DeInit(USBD_HandleTypeDef  *pdev)
{
 800511c:	b480      	push	{r7}
 800511e:	b085      	sub	sp, #20
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800512a:	60fb      	str	r3, [r7, #12]
  hmsc->bot_state = USBD_BOT_IDLE;
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	2200      	movs	r2, #0
 8005130:	721a      	strb	r2, [r3, #8]
}
 8005132:	bf00      	nop
 8005134:	3714      	adds	r7, #20
 8005136:	46bd      	mov	sp, r7
 8005138:	bc80      	pop	{r7}
 800513a:	4770      	bx	lr

0800513c <MSC_BOT_DataIn>:
* @param  epnum: endpoint index
* @retval None
*/
void MSC_BOT_DataIn(USBD_HandleTypeDef  *pdev,
                    uint8_t epnum)
{
 800513c:	b580      	push	{r7, lr}
 800513e:	b084      	sub	sp, #16
 8005140:	af00      	add	r7, sp, #0
 8005142:	6078      	str	r0, [r7, #4]
 8005144:	460b      	mov	r3, r1
 8005146:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800514e:	60fb      	str	r3, [r7, #12]

  switch (hmsc->bot_state)
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	7a1b      	ldrb	r3, [r3, #8]
 8005154:	2b02      	cmp	r3, #2
 8005156:	d005      	beq.n	8005164 <MSC_BOT_DataIn+0x28>
 8005158:	2b02      	cmp	r3, #2
 800515a:	db1a      	blt.n	8005192 <MSC_BOT_DataIn+0x56>
 800515c:	3b03      	subs	r3, #3
 800515e:	2b01      	cmp	r3, #1
 8005160:	d817      	bhi.n	8005192 <MSC_BOT_DataIn+0x56>
 8005162:	e011      	b.n	8005188 <MSC_BOT_DataIn+0x4c>
  {
    case USBD_BOT_DATA_IN:
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	f203 231b 	addw	r3, r3, #539	; 0x21b
 8005170:	461a      	mov	r2, r3
 8005172:	6878      	ldr	r0, [r7, #4]
 8005174:	f000 f97a 	bl	800546c <SCSI_ProcessCmd>
 8005178:	4603      	mov	r3, r0
 800517a:	2b00      	cmp	r3, #0
 800517c:	da0b      	bge.n	8005196 <MSC_BOT_DataIn+0x5a>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 800517e:	2101      	movs	r1, #1
 8005180:	6878      	ldr	r0, [r7, #4]
 8005182:	f000 f8f1 	bl	8005368 <MSC_BOT_SendCSW>
      }
      break;
 8005186:	e006      	b.n	8005196 <MSC_BOT_DataIn+0x5a>

    case USBD_BOT_SEND_DATA:
    case USBD_BOT_LAST_DATA_IN:
      MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8005188:	2100      	movs	r1, #0
 800518a:	6878      	ldr	r0, [r7, #4]
 800518c:	f000 f8ec 	bl	8005368 <MSC_BOT_SendCSW>
      break;
 8005190:	e002      	b.n	8005198 <MSC_BOT_DataIn+0x5c>

    default:
      break;
 8005192:	bf00      	nop
 8005194:	e000      	b.n	8005198 <MSC_BOT_DataIn+0x5c>
      break;
 8005196:	bf00      	nop
  }
}
 8005198:	bf00      	nop
 800519a:	3710      	adds	r7, #16
 800519c:	46bd      	mov	sp, r7
 800519e:	bd80      	pop	{r7, pc}

080051a0 <MSC_BOT_DataOut>:
* @param  epnum: endpoint index
* @retval None
*/
void MSC_BOT_DataOut(USBD_HandleTypeDef  *pdev,
                     uint8_t epnum)
{
 80051a0:	b580      	push	{r7, lr}
 80051a2:	b084      	sub	sp, #16
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	6078      	str	r0, [r7, #4]
 80051a8:	460b      	mov	r3, r1
 80051aa:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80051b2:	60fb      	str	r3, [r7, #12]

  switch (hmsc->bot_state)
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	7a1b      	ldrb	r3, [r3, #8]
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d002      	beq.n	80051c2 <MSC_BOT_DataOut+0x22>
 80051bc:	2b01      	cmp	r3, #1
 80051be:	d004      	beq.n	80051ca <MSC_BOT_DataOut+0x2a>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
      }
      break;

    default:
      break;
 80051c0:	e015      	b.n	80051ee <MSC_BOT_DataOut+0x4e>
      MSC_BOT_CBW_Decode(pdev);
 80051c2:	6878      	ldr	r0, [r7, #4]
 80051c4:	f000 f818 	bl	80051f8 <MSC_BOT_CBW_Decode>
      break;
 80051c8:	e011      	b.n	80051ee <MSC_BOT_DataOut+0x4e>
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	f203 231b 	addw	r3, r3, #539	; 0x21b
 80051d6:	461a      	mov	r2, r3
 80051d8:	6878      	ldr	r0, [r7, #4]
 80051da:	f000 f947 	bl	800546c <SCSI_ProcessCmd>
 80051de:	4603      	mov	r3, r0
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	da03      	bge.n	80051ec <MSC_BOT_DataOut+0x4c>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 80051e4:	2101      	movs	r1, #1
 80051e6:	6878      	ldr	r0, [r7, #4]
 80051e8:	f000 f8be 	bl	8005368 <MSC_BOT_SendCSW>
      break;
 80051ec:	bf00      	nop
  }
}
 80051ee:	bf00      	nop
 80051f0:	3710      	adds	r7, #16
 80051f2:	46bd      	mov	sp, r7
 80051f4:	bd80      	pop	{r7, pc}
	...

080051f8 <MSC_BOT_CBW_Decode>:
*         Decode the CBW command and set the BOT state machine accordingly
* @param  pdev: device instance
* @retval None
*/
static void  MSC_BOT_CBW_Decode(USBD_HandleTypeDef  *pdev)
{
 80051f8:	b580      	push	{r7, lr}
 80051fa:	b084      	sub	sp, #16
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005206:	60fb      	str	r3, [r7, #12]

  hmsc->csw.dTag = hmsc->cbw.dTag;
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
  hmsc->csw.dDataResidue = hmsc->cbw.dDataLength;
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234

  if ((USBD_LL_GetRxDataSize(pdev, MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 8005220:	2101      	movs	r1, #1
 8005222:	6878      	ldr	r0, [r7, #4]
 8005224:	f003 f842 	bl	80082ac <USBD_LL_GetRxDataSize>
 8005228:	4603      	mov	r3, r0
 800522a:	2b1f      	cmp	r3, #31
 800522c:	d114      	bne.n	8005258 <MSC_BOT_CBW_Decode+0x60>
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
  if ((USBD_LL_GetRxDataSize(pdev, MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 8005234:	4a32      	ldr	r2, [pc, #200]	; (8005300 <MSC_BOT_CBW_Decode+0x108>)
 8005236:	4293      	cmp	r3, r2
 8005238:	d10e      	bne.n	8005258 <MSC_BOT_CBW_Decode+0x60>
      (hmsc->cbw.bLUN > 1U) ||
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	f893 3219 	ldrb.w	r3, [r3, #537]	; 0x219
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 8005240:	2b01      	cmp	r3, #1
 8005242:	d809      	bhi.n	8005258 <MSC_BOT_CBW_Decode+0x60>
      (hmsc->cbw.bCBLength < 1U) || (hmsc->cbw.bCBLength > 16U))
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	f893 321a 	ldrb.w	r3, [r3, #538]	; 0x21a
      (hmsc->cbw.bLUN > 1U) ||
 800524a:	2b00      	cmp	r3, #0
 800524c:	d004      	beq.n	8005258 <MSC_BOT_CBW_Decode+0x60>
      (hmsc->cbw.bCBLength < 1U) || (hmsc->cbw.bCBLength > 16U))
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	f893 321a 	ldrb.w	r3, [r3, #538]	; 0x21a
 8005254:	2b10      	cmp	r3, #16
 8005256:	d90e      	bls.n	8005276 <MSC_BOT_CBW_Decode+0x7e>
  {

    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 800525e:	2320      	movs	r3, #32
 8005260:	2205      	movs	r2, #5
 8005262:	6878      	ldr	r0, [r7, #4]
 8005264:	f000 fc48 	bl	8005af8 <SCSI_SenseCode>

    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	2202      	movs	r2, #2
 800526c:	725a      	strb	r2, [r3, #9]
    MSC_BOT_Abort(pdev);
 800526e:	6878      	ldr	r0, [r7, #4]
 8005270:	f000 f8a6 	bl	80053c0 <MSC_BOT_Abort>
 8005274:	e041      	b.n	80052fa <MSC_BOT_CBW_Decode+0x102>
  }
  else
  {
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	f203 231b 	addw	r3, r3, #539	; 0x21b
 8005282:	461a      	mov	r2, r3
 8005284:	6878      	ldr	r0, [r7, #4]
 8005286:	f000 f8f1 	bl	800546c <SCSI_ProcessCmd>
 800528a:	4603      	mov	r3, r0
 800528c:	2b00      	cmp	r3, #0
 800528e:	da0c      	bge.n	80052aa <MSC_BOT_CBW_Decode+0xb2>
    {
      if (hmsc->bot_state == USBD_BOT_NO_DATA)
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	7a1b      	ldrb	r3, [r3, #8]
 8005294:	2b05      	cmp	r3, #5
 8005296:	d104      	bne.n	80052a2 <MSC_BOT_CBW_Decode+0xaa>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8005298:	2101      	movs	r1, #1
 800529a:	6878      	ldr	r0, [r7, #4]
 800529c:	f000 f864 	bl	8005368 <MSC_BOT_SendCSW>
 80052a0:	e02b      	b.n	80052fa <MSC_BOT_CBW_Decode+0x102>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 80052a2:	6878      	ldr	r0, [r7, #4]
 80052a4:	f000 f88c 	bl	80053c0 <MSC_BOT_Abort>
 80052a8:	e027      	b.n	80052fa <MSC_BOT_CBW_Decode+0x102>
      }
    }
    /*Burst xfer handled internally*/
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	7a1b      	ldrb	r3, [r3, #8]
 80052ae:	2b02      	cmp	r3, #2
 80052b0:	d022      	beq.n	80052f8 <MSC_BOT_CBW_Decode+0x100>
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	7a1b      	ldrb	r3, [r3, #8]
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 80052b6:	2b01      	cmp	r3, #1
 80052b8:	d01e      	beq.n	80052f8 <MSC_BOT_CBW_Decode+0x100>
             (hmsc->bot_state != USBD_BOT_LAST_DATA_IN))
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	7a1b      	ldrb	r3, [r3, #8]
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 80052be:	2b03      	cmp	r3, #3
 80052c0:	d01a      	beq.n	80052f8 <MSC_BOT_CBW_Decode+0x100>
    {
      if (hmsc->bot_data_length > 0U)
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	895b      	ldrh	r3, [r3, #10]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d009      	beq.n	80052de <MSC_BOT_CBW_Decode+0xe6>
      {
        MSC_BOT_SendData(pdev, hmsc->bot_data, hmsc->bot_data_length);
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	f103 010c 	add.w	r1, r3, #12
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	895b      	ldrh	r3, [r3, #10]
 80052d4:	461a      	mov	r2, r3
 80052d6:	6878      	ldr	r0, [r7, #4]
 80052d8:	f000 f814 	bl	8005304 <MSC_BOT_SendData>
      if (hmsc->bot_data_length > 0U)
 80052dc:	e00d      	b.n	80052fa <MSC_BOT_CBW_Decode+0x102>
      }
      else if (hmsc->bot_data_length == 0U)
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	895b      	ldrh	r3, [r3, #10]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d104      	bne.n	80052f0 <MSC_BOT_CBW_Decode+0xf8>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 80052e6:	2100      	movs	r1, #0
 80052e8:	6878      	ldr	r0, [r7, #4]
 80052ea:	f000 f83d 	bl	8005368 <MSC_BOT_SendCSW>
      if (hmsc->bot_data_length > 0U)
 80052ee:	e004      	b.n	80052fa <MSC_BOT_CBW_Decode+0x102>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 80052f0:	6878      	ldr	r0, [r7, #4]
 80052f2:	f000 f865 	bl	80053c0 <MSC_BOT_Abort>
      if (hmsc->bot_data_length > 0U)
 80052f6:	e000      	b.n	80052fa <MSC_BOT_CBW_Decode+0x102>
      }
    }
    else
    {
      return;
 80052f8:	bf00      	nop
    }
  }
}
 80052fa:	3710      	adds	r7, #16
 80052fc:	46bd      	mov	sp, r7
 80052fe:	bd80      	pop	{r7, pc}
 8005300:	43425355 	.word	0x43425355

08005304 <MSC_BOT_SendData>:
* @param  len: Data Length
* @retval None
*/
static void  MSC_BOT_SendData(USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                              uint16_t len)
{
 8005304:	b580      	push	{r7, lr}
 8005306:	b086      	sub	sp, #24
 8005308:	af00      	add	r7, sp, #0
 800530a:	60f8      	str	r0, [r7, #12]
 800530c:	60b9      	str	r1, [r7, #8]
 800530e:	4613      	mov	r3, r2
 8005310:	80fb      	strh	r3, [r7, #6]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005318:	617b      	str	r3, [r7, #20]

  uint16_t length = (uint16_t)MIN(hmsc->cbw.dDataLength, len);
 800531a:	697b      	ldr	r3, [r7, #20]
 800531c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8005320:	88fb      	ldrh	r3, [r7, #6]
 8005322:	429a      	cmp	r2, r3
 8005324:	d204      	bcs.n	8005330 <MSC_BOT_SendData+0x2c>
 8005326:	697b      	ldr	r3, [r7, #20]
 8005328:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800532c:	b29b      	uxth	r3, r3
 800532e:	e000      	b.n	8005332 <MSC_BOT_SendData+0x2e>
 8005330:	88fb      	ldrh	r3, [r7, #6]
 8005332:	827b      	strh	r3, [r7, #18]

  hmsc->csw.dDataResidue -= len;
 8005334:	697b      	ldr	r3, [r7, #20]
 8005336:	f8d3 2234 	ldr.w	r2, [r3, #564]	; 0x234
 800533a:	88fb      	ldrh	r3, [r7, #6]
 800533c:	1ad2      	subs	r2, r2, r3
 800533e:	697b      	ldr	r3, [r7, #20]
 8005340:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
  hmsc->csw.bStatus = USBD_CSW_CMD_PASSED;
 8005344:	697b      	ldr	r3, [r7, #20]
 8005346:	2200      	movs	r2, #0
 8005348:	f883 2238 	strb.w	r2, [r3, #568]	; 0x238
  hmsc->bot_state = USBD_BOT_SEND_DATA;
 800534c:	697b      	ldr	r3, [r7, #20]
 800534e:	2204      	movs	r2, #4
 8005350:	721a      	strb	r2, [r3, #8]

  USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, pbuf, length);
 8005352:	8a7b      	ldrh	r3, [r7, #18]
 8005354:	68ba      	ldr	r2, [r7, #8]
 8005356:	2181      	movs	r1, #129	; 0x81
 8005358:	68f8      	ldr	r0, [r7, #12]
 800535a:	f002 ff61 	bl	8008220 <USBD_LL_Transmit>
}
 800535e:	bf00      	nop
 8005360:	3718      	adds	r7, #24
 8005362:	46bd      	mov	sp, r7
 8005364:	bd80      	pop	{r7, pc}
	...

08005368 <MSC_BOT_SendCSW>:
* @param  status : CSW status
* @retval None
*/
void  MSC_BOT_SendCSW(USBD_HandleTypeDef  *pdev,
                      uint8_t CSW_Status)
{
 8005368:	b580      	push	{r7, lr}
 800536a:	b084      	sub	sp, #16
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
 8005370:	460b      	mov	r3, r1
 8005372:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800537a:	60fb      	str	r3, [r7, #12]

  hmsc->csw.dSignature = USBD_BOT_CSW_SIGNATURE;
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	4a0f      	ldr	r2, [pc, #60]	; (80053bc <MSC_BOT_SendCSW+0x54>)
 8005380:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
  hmsc->csw.bStatus = CSW_Status;
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	78fa      	ldrb	r2, [r7, #3]
 8005388:	f883 2238 	strb.w	r2, [r3, #568]	; 0x238
  hmsc->bot_state = USBD_BOT_IDLE;
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	2200      	movs	r2, #0
 8005390:	721a      	strb	r2, [r3, #8]

  USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, (uint8_t *)(void *)&hmsc->csw,
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	f503 720b 	add.w	r2, r3, #556	; 0x22c
 8005398:	230d      	movs	r3, #13
 800539a:	2181      	movs	r1, #129	; 0x81
 800539c:	6878      	ldr	r0, [r7, #4]
 800539e:	f002 ff3f 	bl	8008220 <USBD_LL_Transmit>
                   USBD_BOT_CSW_LENGTH);

  /* Prepare EP to Receive next Cmd */
  USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)(void *)&hmsc->cbw,
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	f503 7203 	add.w	r2, r3, #524	; 0x20c
 80053a8:	231f      	movs	r3, #31
 80053aa:	2101      	movs	r1, #1
 80053ac:	6878      	ldr	r0, [r7, #4]
 80053ae:	f002 ff5a 	bl	8008266 <USBD_LL_PrepareReceive>
                         USBD_BOT_CBW_LENGTH);
}
 80053b2:	bf00      	nop
 80053b4:	3710      	adds	r7, #16
 80053b6:	46bd      	mov	sp, r7
 80053b8:	bd80      	pop	{r7, pc}
 80053ba:	bf00      	nop
 80053bc:	53425355 	.word	0x53425355

080053c0 <MSC_BOT_Abort>:
* @param  pdev: device instance
* @retval status
*/

static void  MSC_BOT_Abort(USBD_HandleTypeDef  *pdev)
{
 80053c0:	b580      	push	{r7, lr}
 80053c2:	b084      	sub	sp, #16
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80053ce:	60fb      	str	r3, [r7, #12]

  if ((hmsc->cbw.bmFlags == 0U) &&
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d10c      	bne.n	80053f4 <MSC_BOT_Abort+0x34>
      (hmsc->cbw.dDataLength != 0U) &&
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
  if ((hmsc->cbw.bmFlags == 0U) &&
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d007      	beq.n	80053f4 <MSC_BOT_Abort+0x34>
      (hmsc->bot_status == USBD_BOT_STATUS_NORMAL))
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	7a5b      	ldrb	r3, [r3, #9]
      (hmsc->cbw.dDataLength != 0U) &&
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d103      	bne.n	80053f4 <MSC_BOT_Abort+0x34>
  {
    USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 80053ec:	2101      	movs	r1, #1
 80053ee:	6878      	ldr	r0, [r7, #4]
 80053f0:	f002 fe8d 	bl	800810e <USBD_LL_StallEP>
  }

  USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 80053f4:	2181      	movs	r1, #129	; 0x81
 80053f6:	6878      	ldr	r0, [r7, #4]
 80053f8:	f002 fe89 	bl	800810e <USBD_LL_StallEP>

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR)
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	7a5b      	ldrb	r3, [r3, #9]
 8005400:	2b02      	cmp	r3, #2
 8005402:	d107      	bne.n	8005414 <MSC_BOT_Abort+0x54>
  {
    USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)(void *)&hmsc->cbw,
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	f503 7203 	add.w	r2, r3, #524	; 0x20c
 800540a:	231f      	movs	r3, #31
 800540c:	2101      	movs	r1, #1
 800540e:	6878      	ldr	r0, [r7, #4]
 8005410:	f002 ff29 	bl	8008266 <USBD_LL_PrepareReceive>
                           USBD_BOT_CBW_LENGTH);
  }
}
 8005414:	bf00      	nop
 8005416:	3710      	adds	r7, #16
 8005418:	46bd      	mov	sp, r7
 800541a:	bd80      	pop	{r7, pc}

0800541c <MSC_BOT_CplClrFeature>:
* @param  epnum: endpoint index
* @retval None
*/

void  MSC_BOT_CplClrFeature(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 800541c:	b580      	push	{r7, lr}
 800541e:	b084      	sub	sp, #16
 8005420:	af00      	add	r7, sp, #0
 8005422:	6078      	str	r0, [r7, #4]
 8005424:	460b      	mov	r3, r1
 8005426:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800542e:	60fb      	str	r3, [r7, #12]

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR) /* Bad CBW Signature */
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	7a5b      	ldrb	r3, [r3, #9]
 8005434:	2b02      	cmp	r3, #2
 8005436:	d107      	bne.n	8005448 <MSC_BOT_CplClrFeature+0x2c>
  {
    USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 8005438:	2181      	movs	r1, #129	; 0x81
 800543a:	6878      	ldr	r0, [r7, #4]
 800543c:	f002 fe67 	bl	800810e <USBD_LL_StallEP>
    hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	2200      	movs	r2, #0
 8005444:	725a      	strb	r2, [r3, #9]
 8005446:	e00d      	b.n	8005464 <MSC_BOT_CplClrFeature+0x48>
  }
  else if (((epnum & 0x80U) == 0x80U) && (hmsc->bot_status != USBD_BOT_STATUS_RECOVERY))
 8005448:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800544c:	2b00      	cmp	r3, #0
 800544e:	da08      	bge.n	8005462 <MSC_BOT_CplClrFeature+0x46>
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	7a5b      	ldrb	r3, [r3, #9]
 8005454:	2b01      	cmp	r3, #1
 8005456:	d004      	beq.n	8005462 <MSC_BOT_CplClrFeature+0x46>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8005458:	2101      	movs	r1, #1
 800545a:	6878      	ldr	r0, [r7, #4]
 800545c:	f7ff ff84 	bl	8005368 <MSC_BOT_SendCSW>
 8005460:	e000      	b.n	8005464 <MSC_BOT_CplClrFeature+0x48>
  }
  else
  {
    return;
 8005462:	bf00      	nop
  }
}
 8005464:	3710      	adds	r7, #16
 8005466:	46bd      	mov	sp, r7
 8005468:	bd80      	pop	{r7, pc}
	...

0800546c <SCSI_ProcessCmd>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
int8_t SCSI_ProcessCmd(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *cmd)
{
 800546c:	b580      	push	{r7, lr}
 800546e:	b084      	sub	sp, #16
 8005470:	af00      	add	r7, sp, #0
 8005472:	60f8      	str	r0, [r7, #12]
 8005474:	460b      	mov	r3, r1
 8005476:	607a      	str	r2, [r7, #4]
 8005478:	72fb      	strb	r3, [r7, #11]
  switch (cmd[0])
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	781b      	ldrb	r3, [r3, #0]
 800547e:	2b5a      	cmp	r3, #90	; 0x5a
 8005480:	f200 810e 	bhi.w	80056a0 <SCSI_ProcessCmd+0x234>
 8005484:	a201      	add	r2, pc, #4	; (adr r2, 800548c <SCSI_ProcessCmd+0x20>)
 8005486:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800548a:	bf00      	nop
 800548c:	080055f9 	.word	0x080055f9
 8005490:	080056a1 	.word	0x080056a1
 8005494:	080056a1 	.word	0x080056a1
 8005498:	08005607 	.word	0x08005607
 800549c:	080056a1 	.word	0x080056a1
 80054a0:	080056a1 	.word	0x080056a1
 80054a4:	080056a1 	.word	0x080056a1
 80054a8:	080056a1 	.word	0x080056a1
 80054ac:	080056a1 	.word	0x080056a1
 80054b0:	080056a1 	.word	0x080056a1
 80054b4:	080056a1 	.word	0x080056a1
 80054b8:	080056a1 	.word	0x080056a1
 80054bc:	080056a1 	.word	0x080056a1
 80054c0:	080056a1 	.word	0x080056a1
 80054c4:	080056a1 	.word	0x080056a1
 80054c8:	080056a1 	.word	0x080056a1
 80054cc:	080056a1 	.word	0x080056a1
 80054d0:	080056a1 	.word	0x080056a1
 80054d4:	08005615 	.word	0x08005615
 80054d8:	080056a1 	.word	0x080056a1
 80054dc:	080056a1 	.word	0x080056a1
 80054e0:	080056a1 	.word	0x080056a1
 80054e4:	080056a1 	.word	0x080056a1
 80054e8:	080056a1 	.word	0x080056a1
 80054ec:	080056a1 	.word	0x080056a1
 80054f0:	080056a1 	.word	0x080056a1
 80054f4:	0800563f 	.word	0x0800563f
 80054f8:	08005623 	.word	0x08005623
 80054fc:	080056a1 	.word	0x080056a1
 8005500:	080056a1 	.word	0x080056a1
 8005504:	08005631 	.word	0x08005631
 8005508:	080056a1 	.word	0x080056a1
 800550c:	080056a1 	.word	0x080056a1
 8005510:	080056a1 	.word	0x080056a1
 8005514:	080056a1 	.word	0x080056a1
 8005518:	0800565b 	.word	0x0800565b
 800551c:	080056a1 	.word	0x080056a1
 8005520:	08005669 	.word	0x08005669
 8005524:	080056a1 	.word	0x080056a1
 8005528:	080056a1 	.word	0x080056a1
 800552c:	08005677 	.word	0x08005677
 8005530:	080056a1 	.word	0x080056a1
 8005534:	08005685 	.word	0x08005685
 8005538:	080056a1 	.word	0x080056a1
 800553c:	080056a1 	.word	0x080056a1
 8005540:	080056a1 	.word	0x080056a1
 8005544:	080056a1 	.word	0x080056a1
 8005548:	08005693 	.word	0x08005693
 800554c:	080056a1 	.word	0x080056a1
 8005550:	080056a1 	.word	0x080056a1
 8005554:	080056a1 	.word	0x080056a1
 8005558:	080056a1 	.word	0x080056a1
 800555c:	080056a1 	.word	0x080056a1
 8005560:	080056a1 	.word	0x080056a1
 8005564:	080056a1 	.word	0x080056a1
 8005568:	080056a1 	.word	0x080056a1
 800556c:	080056a1 	.word	0x080056a1
 8005570:	080056a1 	.word	0x080056a1
 8005574:	080056a1 	.word	0x080056a1
 8005578:	080056a1 	.word	0x080056a1
 800557c:	080056a1 	.word	0x080056a1
 8005580:	080056a1 	.word	0x080056a1
 8005584:	080056a1 	.word	0x080056a1
 8005588:	080056a1 	.word	0x080056a1
 800558c:	080056a1 	.word	0x080056a1
 8005590:	080056a1 	.word	0x080056a1
 8005594:	080056a1 	.word	0x080056a1
 8005598:	080056a1 	.word	0x080056a1
 800559c:	080056a1 	.word	0x080056a1
 80055a0:	080056a1 	.word	0x080056a1
 80055a4:	080056a1 	.word	0x080056a1
 80055a8:	080056a1 	.word	0x080056a1
 80055ac:	080056a1 	.word	0x080056a1
 80055b0:	080056a1 	.word	0x080056a1
 80055b4:	080056a1 	.word	0x080056a1
 80055b8:	080056a1 	.word	0x080056a1
 80055bc:	080056a1 	.word	0x080056a1
 80055c0:	080056a1 	.word	0x080056a1
 80055c4:	080056a1 	.word	0x080056a1
 80055c8:	080056a1 	.word	0x080056a1
 80055cc:	080056a1 	.word	0x080056a1
 80055d0:	080056a1 	.word	0x080056a1
 80055d4:	080056a1 	.word	0x080056a1
 80055d8:	080056a1 	.word	0x080056a1
 80055dc:	080056a1 	.word	0x080056a1
 80055e0:	080056a1 	.word	0x080056a1
 80055e4:	080056a1 	.word	0x080056a1
 80055e8:	080056a1 	.word	0x080056a1
 80055ec:	080056a1 	.word	0x080056a1
 80055f0:	080056a1 	.word	0x080056a1
 80055f4:	0800564d 	.word	0x0800564d
  {
    case SCSI_TEST_UNIT_READY:
      SCSI_TestUnitReady(pdev, lun, cmd);
 80055f8:	7afb      	ldrb	r3, [r7, #11]
 80055fa:	687a      	ldr	r2, [r7, #4]
 80055fc:	4619      	mov	r1, r3
 80055fe:	68f8      	ldr	r0, [r7, #12]
 8005600:	f000 f85c 	bl	80056bc <SCSI_TestUnitReady>
      break;
 8005604:	e055      	b.n	80056b2 <SCSI_ProcessCmd+0x246>

    case SCSI_REQUEST_SENSE:
      SCSI_RequestSense(pdev, lun, cmd);
 8005606:	7afb      	ldrb	r3, [r7, #11]
 8005608:	687a      	ldr	r2, [r7, #4]
 800560a:	4619      	mov	r1, r3
 800560c:	68f8      	ldr	r0, [r7, #12]
 800560e:	f000 fa09 	bl	8005a24 <SCSI_RequestSense>
      break;
 8005612:	e04e      	b.n	80056b2 <SCSI_ProcessCmd+0x246>
    case SCSI_INQUIRY:
      SCSI_Inquiry(pdev, lun, cmd);
 8005614:	7afb      	ldrb	r3, [r7, #11]
 8005616:	687a      	ldr	r2, [r7, #4]
 8005618:	4619      	mov	r1, r3
 800561a:	68f8      	ldr	r0, [r7, #12]
 800561c:	f000 f888 	bl	8005730 <SCSI_Inquiry>
      break;
 8005620:	e047      	b.n	80056b2 <SCSI_ProcessCmd+0x246>

    case SCSI_START_STOP_UNIT:
      SCSI_StartStopUnit(pdev, lun, cmd);
 8005622:	7afb      	ldrb	r3, [r7, #11]
 8005624:	687a      	ldr	r2, [r7, #4]
 8005626:	4619      	mov	r1, r3
 8005628:	68f8      	ldr	r0, [r7, #12]
 800562a:	f000 fa9e 	bl	8005b6a <SCSI_StartStopUnit>
      break;
 800562e:	e040      	b.n	80056b2 <SCSI_ProcessCmd+0x246>

    case SCSI_ALLOW_MEDIUM_REMOVAL:
      SCSI_StartStopUnit(pdev, lun, cmd);
 8005630:	7afb      	ldrb	r3, [r7, #11]
 8005632:	687a      	ldr	r2, [r7, #4]
 8005634:	4619      	mov	r1, r3
 8005636:	68f8      	ldr	r0, [r7, #12]
 8005638:	f000 fa97 	bl	8005b6a <SCSI_StartStopUnit>
      break;
 800563c:	e039      	b.n	80056b2 <SCSI_ProcessCmd+0x246>

    case SCSI_MODE_SENSE6:
      SCSI_ModeSense6(pdev, lun, cmd);
 800563e:	7afb      	ldrb	r3, [r7, #11]
 8005640:	687a      	ldr	r2, [r7, #4]
 8005642:	4619      	mov	r1, r3
 8005644:	68f8      	ldr	r0, [r7, #12]
 8005646:	f000 f99d 	bl	8005984 <SCSI_ModeSense6>
      break;
 800564a:	e032      	b.n	80056b2 <SCSI_ProcessCmd+0x246>

    case SCSI_MODE_SENSE10:
      SCSI_ModeSense10(pdev, lun, cmd);
 800564c:	7afb      	ldrb	r3, [r7, #11]
 800564e:	687a      	ldr	r2, [r7, #4]
 8005650:	4619      	mov	r1, r3
 8005652:	68f8      	ldr	r0, [r7, #12]
 8005654:	f000 f9be 	bl	80059d4 <SCSI_ModeSense10>
      break;
 8005658:	e02b      	b.n	80056b2 <SCSI_ProcessCmd+0x246>

    case SCSI_READ_FORMAT_CAPACITIES:
      SCSI_ReadFormatCapacity(pdev, lun, cmd);
 800565a:	7afb      	ldrb	r3, [r7, #11]
 800565c:	687a      	ldr	r2, [r7, #4]
 800565e:	4619      	mov	r1, r3
 8005660:	68f8      	ldr	r0, [r7, #12]
 8005662:	f000 f92a 	bl	80058ba <SCSI_ReadFormatCapacity>
      break;
 8005666:	e024      	b.n	80056b2 <SCSI_ProcessCmd+0x246>

    case SCSI_READ_CAPACITY10:
      SCSI_ReadCapacity10(pdev, lun, cmd);
 8005668:	7afb      	ldrb	r3, [r7, #11]
 800566a:	687a      	ldr	r2, [r7, #4]
 800566c:	4619      	mov	r1, r3
 800566e:	68f8      	ldr	r0, [r7, #12]
 8005670:	f000 f8bc 	bl	80057ec <SCSI_ReadCapacity10>
      break;
 8005674:	e01d      	b.n	80056b2 <SCSI_ProcessCmd+0x246>

    case SCSI_READ10:
      SCSI_Read10(pdev, lun, cmd);
 8005676:	7afb      	ldrb	r3, [r7, #11]
 8005678:	687a      	ldr	r2, [r7, #4]
 800567a:	4619      	mov	r1, r3
 800567c:	68f8      	ldr	r0, [r7, #12]
 800567e:	f000 fa88 	bl	8005b92 <SCSI_Read10>
      break;
 8005682:	e016      	b.n	80056b2 <SCSI_ProcessCmd+0x246>

    case SCSI_WRITE10:
      SCSI_Write10(pdev, lun, cmd);
 8005684:	7afb      	ldrb	r3, [r7, #11]
 8005686:	687a      	ldr	r2, [r7, #4]
 8005688:	4619      	mov	r1, r3
 800568a:	68f8      	ldr	r0, [r7, #12]
 800568c:	f000 fb0d 	bl	8005caa <SCSI_Write10>
      break;
 8005690:	e00f      	b.n	80056b2 <SCSI_ProcessCmd+0x246>

    case SCSI_VERIFY10:
      SCSI_Verify10(pdev, lun, cmd);
 8005692:	7afb      	ldrb	r3, [r7, #11]
 8005694:	687a      	ldr	r2, [r7, #4]
 8005696:	4619      	mov	r1, r3
 8005698:	68f8      	ldr	r0, [r7, #12]
 800569a:	f000 fbb6 	bl	8005e0a <SCSI_Verify10>
      break;
 800569e:	e008      	b.n	80056b2 <SCSI_ProcessCmd+0x246>

    default:
      SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_CDB);
 80056a0:	7af9      	ldrb	r1, [r7, #11]
 80056a2:	2320      	movs	r3, #32
 80056a4:	2205      	movs	r2, #5
 80056a6:	68f8      	ldr	r0, [r7, #12]
 80056a8:	f000 fa26 	bl	8005af8 <SCSI_SenseCode>
      return -1;
 80056ac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80056b0:	e000      	b.n	80056b4 <SCSI_ProcessCmd+0x248>
  }

  return 0;
 80056b2:	2300      	movs	r3, #0
}
 80056b4:	4618      	mov	r0, r3
 80056b6:	3710      	adds	r7, #16
 80056b8:	46bd      	mov	sp, r7
 80056ba:	bd80      	pop	{r7, pc}

080056bc <SCSI_TestUnitReady>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_TestUnitReady(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 80056bc:	b580      	push	{r7, lr}
 80056be:	b086      	sub	sp, #24
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	60f8      	str	r0, [r7, #12]
 80056c4:	460b      	mov	r3, r1
 80056c6:	607a      	str	r2, [r7, #4]
 80056c8:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80056d0:	617b      	str	r3, [r7, #20]

  /* case 9 : Hi > D0 */
  if (hmsc->cbw.dDataLength != 0U)
 80056d2:	697b      	ldr	r3, [r7, #20]
 80056d4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d00a      	beq.n	80056f2 <SCSI_TestUnitReady+0x36>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80056dc:	697b      	ldr	r3, [r7, #20]
 80056de:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 80056e2:	2320      	movs	r3, #32
 80056e4:	2205      	movs	r2, #5
 80056e6:	68f8      	ldr	r0, [r7, #12]
 80056e8:	f000 fa06 	bl	8005af8 <SCSI_SenseCode>

    return -1;
 80056ec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80056f0:	e019      	b.n	8005726 <SCSI_TestUnitReady+0x6a>
  }

  if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80056f8:	689b      	ldr	r3, [r3, #8]
 80056fa:	7afa      	ldrb	r2, [r7, #11]
 80056fc:	4610      	mov	r0, r2
 80056fe:	4798      	blx	r3
 8005700:	4603      	mov	r3, r0
 8005702:	2b00      	cmp	r3, #0
 8005704:	d00b      	beq.n	800571e <SCSI_TestUnitReady+0x62>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8005706:	7af9      	ldrb	r1, [r7, #11]
 8005708:	233a      	movs	r3, #58	; 0x3a
 800570a:	2202      	movs	r2, #2
 800570c:	68f8      	ldr	r0, [r7, #12]
 800570e:	f000 f9f3 	bl	8005af8 <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 8005712:	697b      	ldr	r3, [r7, #20]
 8005714:	2205      	movs	r2, #5
 8005716:	721a      	strb	r2, [r3, #8]

    return -1;
 8005718:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800571c:	e003      	b.n	8005726 <SCSI_TestUnitReady+0x6a>
  }
  hmsc->bot_data_length = 0U;
 800571e:	697b      	ldr	r3, [r7, #20]
 8005720:	2200      	movs	r2, #0
 8005722:	815a      	strh	r2, [r3, #10]

  return 0;
 8005724:	2300      	movs	r3, #0
}
 8005726:	4618      	mov	r0, r3
 8005728:	3718      	adds	r7, #24
 800572a:	46bd      	mov	sp, r7
 800572c:	bd80      	pop	{r7, pc}
	...

08005730 <SCSI_Inquiry>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t  SCSI_Inquiry(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 8005730:	b480      	push	{r7}
 8005732:	b089      	sub	sp, #36	; 0x24
 8005734:	af00      	add	r7, sp, #0
 8005736:	60f8      	str	r0, [r7, #12]
 8005738:	460b      	mov	r3, r1
 800573a:	607a      	str	r2, [r7, #4]
 800573c:	72fb      	strb	r3, [r7, #11]
  uint8_t *pPage;
  uint16_t len;
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005744:	61bb      	str	r3, [r7, #24]

  if (params[1] & 0x01U)/*Evpd is set*/
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	3301      	adds	r3, #1
 800574a:	781b      	ldrb	r3, [r3, #0]
 800574c:	f003 0301 	and.w	r3, r3, #1
 8005750:	2b00      	cmp	r3, #0
 8005752:	d014      	beq.n	800577e <SCSI_Inquiry+0x4e>
  {
    len = LENGTH_INQUIRY_PAGE00;
 8005754:	2307      	movs	r3, #7
 8005756:	83fb      	strh	r3, [r7, #30]
    hmsc->bot_data_length = len;
 8005758:	69bb      	ldr	r3, [r7, #24]
 800575a:	8bfa      	ldrh	r2, [r7, #30]
 800575c:	815a      	strh	r2, [r3, #10]

    while (len)
 800575e:	e00a      	b.n	8005776 <SCSI_Inquiry+0x46>
    {
      len--;
 8005760:	8bfb      	ldrh	r3, [r7, #30]
 8005762:	3b01      	subs	r3, #1
 8005764:	83fb      	strh	r3, [r7, #30]
      hmsc->bot_data[len] = MSC_Page00_Inquiry_Data[len];
 8005766:	8bfa      	ldrh	r2, [r7, #30]
 8005768:	8bfb      	ldrh	r3, [r7, #30]
 800576a:	491f      	ldr	r1, [pc, #124]	; (80057e8 <SCSI_Inquiry+0xb8>)
 800576c:	5c89      	ldrb	r1, [r1, r2]
 800576e:	69ba      	ldr	r2, [r7, #24]
 8005770:	4413      	add	r3, r2
 8005772:	460a      	mov	r2, r1
 8005774:	731a      	strb	r2, [r3, #12]
    while (len)
 8005776:	8bfb      	ldrh	r3, [r7, #30]
 8005778:	2b00      	cmp	r3, #0
 800577a:	d1f1      	bne.n	8005760 <SCSI_Inquiry+0x30>
 800577c:	e02e      	b.n	80057dc <SCSI_Inquiry+0xac>
    }
  }
  else
  {
    pPage = (uint8_t *)(void *) & ((USBD_StorageTypeDef *)pdev->pUserData)->pInquiry[lun * STANDARD_INQUIRY_DATA_LEN];
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005784:	69d9      	ldr	r1, [r3, #28]
 8005786:	7afa      	ldrb	r2, [r7, #11]
 8005788:	4613      	mov	r3, r2
 800578a:	00db      	lsls	r3, r3, #3
 800578c:	4413      	add	r3, r2
 800578e:	009b      	lsls	r3, r3, #2
 8005790:	440b      	add	r3, r1
 8005792:	617b      	str	r3, [r7, #20]
    len = (uint16_t)pPage[4] + 5U;
 8005794:	697b      	ldr	r3, [r7, #20]
 8005796:	3304      	adds	r3, #4
 8005798:	781b      	ldrb	r3, [r3, #0]
 800579a:	b29b      	uxth	r3, r3
 800579c:	3305      	adds	r3, #5
 800579e:	83fb      	strh	r3, [r7, #30]

    if (params[4] <= len)
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	3304      	adds	r3, #4
 80057a4:	781b      	ldrb	r3, [r3, #0]
 80057a6:	b29b      	uxth	r3, r3
 80057a8:	8bfa      	ldrh	r2, [r7, #30]
 80057aa:	429a      	cmp	r2, r3
 80057ac:	d303      	bcc.n	80057b6 <SCSI_Inquiry+0x86>
    {
      len = params[4];
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	3304      	adds	r3, #4
 80057b2:	781b      	ldrb	r3, [r3, #0]
 80057b4:	83fb      	strh	r3, [r7, #30]
    }
    hmsc->bot_data_length = len;
 80057b6:	69bb      	ldr	r3, [r7, #24]
 80057b8:	8bfa      	ldrh	r2, [r7, #30]
 80057ba:	815a      	strh	r2, [r3, #10]

    while (len)
 80057bc:	e00b      	b.n	80057d6 <SCSI_Inquiry+0xa6>
    {
      len--;
 80057be:	8bfb      	ldrh	r3, [r7, #30]
 80057c0:	3b01      	subs	r3, #1
 80057c2:	83fb      	strh	r3, [r7, #30]
      hmsc->bot_data[len] = pPage[len];
 80057c4:	8bfb      	ldrh	r3, [r7, #30]
 80057c6:	697a      	ldr	r2, [r7, #20]
 80057c8:	441a      	add	r2, r3
 80057ca:	8bfb      	ldrh	r3, [r7, #30]
 80057cc:	7811      	ldrb	r1, [r2, #0]
 80057ce:	69ba      	ldr	r2, [r7, #24]
 80057d0:	4413      	add	r3, r2
 80057d2:	460a      	mov	r2, r1
 80057d4:	731a      	strb	r2, [r3, #12]
    while (len)
 80057d6:	8bfb      	ldrh	r3, [r7, #30]
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d1f0      	bne.n	80057be <SCSI_Inquiry+0x8e>
    }
  }

  return 0;
 80057dc:	2300      	movs	r3, #0
}
 80057de:	4618      	mov	r0, r3
 80057e0:	3724      	adds	r7, #36	; 0x24
 80057e2:	46bd      	mov	sp, r7
 80057e4:	bc80      	pop	{r7}
 80057e6:	4770      	bx	lr
 80057e8:	08008440 	.word	0x08008440

080057ec <SCSI_ReadCapacity10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ReadCapacity10(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 80057ec:	b580      	push	{r7, lr}
 80057ee:	b086      	sub	sp, #24
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	60f8      	str	r0, [r7, #12]
 80057f4:	460b      	mov	r3, r1
 80057f6:	607a      	str	r2, [r7, #4]
 80057f8:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005800:	617b      	str	r3, [r7, #20]

  if (((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size) != 0)
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005808:	685b      	ldr	r3, [r3, #4]
 800580a:	697a      	ldr	r2, [r7, #20]
 800580c:	f502 7118 	add.w	r1, r2, #608	; 0x260
 8005810:	697a      	ldr	r2, [r7, #20]
 8005812:	f202 225e 	addw	r2, r2, #606	; 0x25e
 8005816:	7af8      	ldrb	r0, [r7, #11]
 8005818:	4798      	blx	r3
 800581a:	4603      	mov	r3, r0
 800581c:	2b00      	cmp	r3, #0
 800581e:	d008      	beq.n	8005832 <SCSI_ReadCapacity10+0x46>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8005820:	7af9      	ldrb	r1, [r7, #11]
 8005822:	233a      	movs	r3, #58	; 0x3a
 8005824:	2202      	movs	r2, #2
 8005826:	68f8      	ldr	r0, [r7, #12]
 8005828:	f000 f966 	bl	8005af8 <SCSI_SenseCode>
    return -1;
 800582c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005830:	e03f      	b.n	80058b2 <SCSI_ReadCapacity10+0xc6>
  }
  else
  {

    hmsc->bot_data[0] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 8005832:	697b      	ldr	r3, [r7, #20]
 8005834:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
 8005838:	3b01      	subs	r3, #1
 800583a:	0e1b      	lsrs	r3, r3, #24
 800583c:	b2da      	uxtb	r2, r3
 800583e:	697b      	ldr	r3, [r7, #20]
 8005840:	731a      	strb	r2, [r3, #12]
    hmsc->bot_data[1] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 8005842:	697b      	ldr	r3, [r7, #20]
 8005844:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
 8005848:	3b01      	subs	r3, #1
 800584a:	0c1b      	lsrs	r3, r3, #16
 800584c:	b2da      	uxtb	r2, r3
 800584e:	697b      	ldr	r3, [r7, #20]
 8005850:	735a      	strb	r2, [r3, #13]
    hmsc->bot_data[2] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 8005852:	697b      	ldr	r3, [r7, #20]
 8005854:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
 8005858:	3b01      	subs	r3, #1
 800585a:	0a1b      	lsrs	r3, r3, #8
 800585c:	b2da      	uxtb	r2, r3
 800585e:	697b      	ldr	r3, [r7, #20]
 8005860:	739a      	strb	r2, [r3, #14]
    hmsc->bot_data[3] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 8005862:	697b      	ldr	r3, [r7, #20]
 8005864:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
 8005868:	b2db      	uxtb	r3, r3
 800586a:	3b01      	subs	r3, #1
 800586c:	b2da      	uxtb	r2, r3
 800586e:	697b      	ldr	r3, [r7, #20]
 8005870:	73da      	strb	r2, [r3, #15]

    hmsc->bot_data[4] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 8005872:	697b      	ldr	r3, [r7, #20]
 8005874:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 8005878:	161b      	asrs	r3, r3, #24
 800587a:	b2da      	uxtb	r2, r3
 800587c:	697b      	ldr	r3, [r7, #20]
 800587e:	741a      	strb	r2, [r3, #16]
    hmsc->bot_data[5] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 8005880:	697b      	ldr	r3, [r7, #20]
 8005882:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 8005886:	141b      	asrs	r3, r3, #16
 8005888:	b2da      	uxtb	r2, r3
 800588a:	697b      	ldr	r3, [r7, #20]
 800588c:	745a      	strb	r2, [r3, #17]
    hmsc->bot_data[6] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 800588e:	697b      	ldr	r3, [r7, #20]
 8005890:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 8005894:	0a1b      	lsrs	r3, r3, #8
 8005896:	b29b      	uxth	r3, r3
 8005898:	b2da      	uxtb	r2, r3
 800589a:	697b      	ldr	r3, [r7, #20]
 800589c:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_size);
 800589e:	697b      	ldr	r3, [r7, #20]
 80058a0:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 80058a4:	b2da      	uxtb	r2, r3
 80058a6:	697b      	ldr	r3, [r7, #20]
 80058a8:	74da      	strb	r2, [r3, #19]

    hmsc->bot_data_length = 8U;
 80058aa:	697b      	ldr	r3, [r7, #20]
 80058ac:	2208      	movs	r2, #8
 80058ae:	815a      	strh	r2, [r3, #10]
    return 0;
 80058b0:	2300      	movs	r3, #0
  }
}
 80058b2:	4618      	mov	r0, r3
 80058b4:	3718      	adds	r7, #24
 80058b6:	46bd      	mov	sp, r7
 80058b8:	bd80      	pop	{r7, pc}

080058ba <SCSI_ReadFormatCapacity>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ReadFormatCapacity(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 80058ba:	b580      	push	{r7, lr}
 80058bc:	b088      	sub	sp, #32
 80058be:	af00      	add	r7, sp, #0
 80058c0:	60f8      	str	r0, [r7, #12]
 80058c2:	460b      	mov	r3, r1
 80058c4:	607a      	str	r2, [r7, #4]
 80058c6:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80058ce:	61bb      	str	r3, [r7, #24]

  uint16_t blk_size;
  uint32_t blk_nbr;
  uint16_t i;

  for (i = 0U; i < 12U ; i++)
 80058d0:	2300      	movs	r3, #0
 80058d2:	83fb      	strh	r3, [r7, #30]
 80058d4:	e007      	b.n	80058e6 <SCSI_ReadFormatCapacity+0x2c>
  {
    hmsc->bot_data[i] = 0U;
 80058d6:	8bfb      	ldrh	r3, [r7, #30]
 80058d8:	69ba      	ldr	r2, [r7, #24]
 80058da:	4413      	add	r3, r2
 80058dc:	2200      	movs	r2, #0
 80058de:	731a      	strb	r2, [r3, #12]
  for (i = 0U; i < 12U ; i++)
 80058e0:	8bfb      	ldrh	r3, [r7, #30]
 80058e2:	3301      	adds	r3, #1
 80058e4:	83fb      	strh	r3, [r7, #30]
 80058e6:	8bfb      	ldrh	r3, [r7, #30]
 80058e8:	2b0b      	cmp	r3, #11
 80058ea:	d9f4      	bls.n	80058d6 <SCSI_ReadFormatCapacity+0x1c>
  }

  if (((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &blk_nbr, &blk_size) != 0U)
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80058f2:	685b      	ldr	r3, [r3, #4]
 80058f4:	f107 0216 	add.w	r2, r7, #22
 80058f8:	f107 0110 	add.w	r1, r7, #16
 80058fc:	7af8      	ldrb	r0, [r7, #11]
 80058fe:	4798      	blx	r3
 8005900:	4603      	mov	r3, r0
 8005902:	2b00      	cmp	r3, #0
 8005904:	d008      	beq.n	8005918 <SCSI_ReadFormatCapacity+0x5e>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8005906:	7af9      	ldrb	r1, [r7, #11]
 8005908:	233a      	movs	r3, #58	; 0x3a
 800590a:	2202      	movs	r2, #2
 800590c:	68f8      	ldr	r0, [r7, #12]
 800590e:	f000 f8f3 	bl	8005af8 <SCSI_SenseCode>
    return -1;
 8005912:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005916:	e030      	b.n	800597a <SCSI_ReadFormatCapacity+0xc0>
  }
  else
  {
    hmsc->bot_data[3] = 0x08U;
 8005918:	69bb      	ldr	r3, [r7, #24]
 800591a:	2208      	movs	r2, #8
 800591c:	73da      	strb	r2, [r3, #15]
    hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1U) >> 24);
 800591e:	693b      	ldr	r3, [r7, #16]
 8005920:	3b01      	subs	r3, #1
 8005922:	0e1b      	lsrs	r3, r3, #24
 8005924:	b2da      	uxtb	r2, r3
 8005926:	69bb      	ldr	r3, [r7, #24]
 8005928:	741a      	strb	r2, [r3, #16]
    hmsc->bot_data[5] = (uint8_t)((blk_nbr - 1U) >> 16);
 800592a:	693b      	ldr	r3, [r7, #16]
 800592c:	3b01      	subs	r3, #1
 800592e:	0c1b      	lsrs	r3, r3, #16
 8005930:	b2da      	uxtb	r2, r3
 8005932:	69bb      	ldr	r3, [r7, #24]
 8005934:	745a      	strb	r2, [r3, #17]
    hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1U) >>  8);
 8005936:	693b      	ldr	r3, [r7, #16]
 8005938:	3b01      	subs	r3, #1
 800593a:	0a1b      	lsrs	r3, r3, #8
 800593c:	b2da      	uxtb	r2, r3
 800593e:	69bb      	ldr	r3, [r7, #24]
 8005940:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[7] = (uint8_t)(blk_nbr - 1U);
 8005942:	693b      	ldr	r3, [r7, #16]
 8005944:	b2db      	uxtb	r3, r3
 8005946:	3b01      	subs	r3, #1
 8005948:	b2da      	uxtb	r2, r3
 800594a:	69bb      	ldr	r3, [r7, #24]
 800594c:	74da      	strb	r2, [r3, #19]

    hmsc->bot_data[8] = 0x02U;
 800594e:	69bb      	ldr	r3, [r7, #24]
 8005950:	2202      	movs	r2, #2
 8005952:	751a      	strb	r2, [r3, #20]
    hmsc->bot_data[9] = (uint8_t)(blk_size >>  16);
 8005954:	8afb      	ldrh	r3, [r7, #22]
 8005956:	141b      	asrs	r3, r3, #16
 8005958:	b2da      	uxtb	r2, r3
 800595a:	69bb      	ldr	r3, [r7, #24]
 800595c:	755a      	strb	r2, [r3, #21]
    hmsc->bot_data[10] = (uint8_t)(blk_size >>  8);
 800595e:	8afb      	ldrh	r3, [r7, #22]
 8005960:	0a1b      	lsrs	r3, r3, #8
 8005962:	b29b      	uxth	r3, r3
 8005964:	b2da      	uxtb	r2, r3
 8005966:	69bb      	ldr	r3, [r7, #24]
 8005968:	759a      	strb	r2, [r3, #22]
    hmsc->bot_data[11] = (uint8_t)(blk_size);
 800596a:	8afb      	ldrh	r3, [r7, #22]
 800596c:	b2da      	uxtb	r2, r3
 800596e:	69bb      	ldr	r3, [r7, #24]
 8005970:	75da      	strb	r2, [r3, #23]

    hmsc->bot_data_length = 12U;
 8005972:	69bb      	ldr	r3, [r7, #24]
 8005974:	220c      	movs	r2, #12
 8005976:	815a      	strh	r2, [r3, #10]
    return 0;
 8005978:	2300      	movs	r3, #0
  }
}
 800597a:	4618      	mov	r0, r3
 800597c:	3720      	adds	r7, #32
 800597e:	46bd      	mov	sp, r7
 8005980:	bd80      	pop	{r7, pc}
	...

08005984 <SCSI_ModeSense6>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ModeSense6(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 8005984:	b480      	push	{r7}
 8005986:	b087      	sub	sp, #28
 8005988:	af00      	add	r7, sp, #0
 800598a:	60f8      	str	r0, [r7, #12]
 800598c:	460b      	mov	r3, r1
 800598e:	607a      	str	r2, [r7, #4]
 8005990:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005998:	613b      	str	r3, [r7, #16]
  uint16_t len = 8U;
 800599a:	2308      	movs	r3, #8
 800599c:	82fb      	strh	r3, [r7, #22]
  hmsc->bot_data_length = len;
 800599e:	693b      	ldr	r3, [r7, #16]
 80059a0:	8afa      	ldrh	r2, [r7, #22]
 80059a2:	815a      	strh	r2, [r3, #10]

  while (len)
 80059a4:	e00a      	b.n	80059bc <SCSI_ModeSense6+0x38>
  {
    len--;
 80059a6:	8afb      	ldrh	r3, [r7, #22]
 80059a8:	3b01      	subs	r3, #1
 80059aa:	82fb      	strh	r3, [r7, #22]
    hmsc->bot_data[len] = MSC_Mode_Sense6_data[len];
 80059ac:	8afa      	ldrh	r2, [r7, #22]
 80059ae:	8afb      	ldrh	r3, [r7, #22]
 80059b0:	4907      	ldr	r1, [pc, #28]	; (80059d0 <SCSI_ModeSense6+0x4c>)
 80059b2:	5c89      	ldrb	r1, [r1, r2]
 80059b4:	693a      	ldr	r2, [r7, #16]
 80059b6:	4413      	add	r3, r2
 80059b8:	460a      	mov	r2, r1
 80059ba:	731a      	strb	r2, [r3, #12]
  while (len)
 80059bc:	8afb      	ldrh	r3, [r7, #22]
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d1f1      	bne.n	80059a6 <SCSI_ModeSense6+0x22>
  }
  return 0;
 80059c2:	2300      	movs	r3, #0
}
 80059c4:	4618      	mov	r0, r3
 80059c6:	371c      	adds	r7, #28
 80059c8:	46bd      	mov	sp, r7
 80059ca:	bc80      	pop	{r7}
 80059cc:	4770      	bx	lr
 80059ce:	bf00      	nop
 80059d0:	08008448 	.word	0x08008448

080059d4 <SCSI_ModeSense10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ModeSense10(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 80059d4:	b480      	push	{r7}
 80059d6:	b087      	sub	sp, #28
 80059d8:	af00      	add	r7, sp, #0
 80059da:	60f8      	str	r0, [r7, #12]
 80059dc:	460b      	mov	r3, r1
 80059de:	607a      	str	r2, [r7, #4]
 80059e0:	72fb      	strb	r3, [r7, #11]
  uint16_t len = 8U;
 80059e2:	2308      	movs	r3, #8
 80059e4:	82fb      	strh	r3, [r7, #22]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80059ec:	613b      	str	r3, [r7, #16]

  hmsc->bot_data_length = len;
 80059ee:	693b      	ldr	r3, [r7, #16]
 80059f0:	8afa      	ldrh	r2, [r7, #22]
 80059f2:	815a      	strh	r2, [r3, #10]

  while (len)
 80059f4:	e00a      	b.n	8005a0c <SCSI_ModeSense10+0x38>
  {
    len--;
 80059f6:	8afb      	ldrh	r3, [r7, #22]
 80059f8:	3b01      	subs	r3, #1
 80059fa:	82fb      	strh	r3, [r7, #22]
    hmsc->bot_data[len] = MSC_Mode_Sense10_data[len];
 80059fc:	8afa      	ldrh	r2, [r7, #22]
 80059fe:	8afb      	ldrh	r3, [r7, #22]
 8005a00:	4907      	ldr	r1, [pc, #28]	; (8005a20 <SCSI_ModeSense10+0x4c>)
 8005a02:	5c89      	ldrb	r1, [r1, r2]
 8005a04:	693a      	ldr	r2, [r7, #16]
 8005a06:	4413      	add	r3, r2
 8005a08:	460a      	mov	r2, r1
 8005a0a:	731a      	strb	r2, [r3, #12]
  while (len)
 8005a0c:	8afb      	ldrh	r3, [r7, #22]
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d1f1      	bne.n	80059f6 <SCSI_ModeSense10+0x22>
  }

  return 0;
 8005a12:	2300      	movs	r3, #0
}
 8005a14:	4618      	mov	r0, r3
 8005a16:	371c      	adds	r7, #28
 8005a18:	46bd      	mov	sp, r7
 8005a1a:	bc80      	pop	{r7}
 8005a1c:	4770      	bx	lr
 8005a1e:	bf00      	nop
 8005a20:	08008450 	.word	0x08008450

08005a24 <SCSI_RequestSense>:
* @param  params: Command parameters
* @retval status
*/

static int8_t SCSI_RequestSense(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 8005a24:	b480      	push	{r7}
 8005a26:	b087      	sub	sp, #28
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	60f8      	str	r0, [r7, #12]
 8005a2c:	460b      	mov	r3, r1
 8005a2e:	607a      	str	r2, [r7, #4]
 8005a30:	72fb      	strb	r3, [r7, #11]
  uint8_t i;
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005a38:	613b      	str	r3, [r7, #16]

  for (i = 0U ; i < REQUEST_SENSE_DATA_LEN; i++)
 8005a3a:	2300      	movs	r3, #0
 8005a3c:	75fb      	strb	r3, [r7, #23]
 8005a3e:	e007      	b.n	8005a50 <SCSI_RequestSense+0x2c>
  {
    hmsc->bot_data[i] = 0U;
 8005a40:	7dfb      	ldrb	r3, [r7, #23]
 8005a42:	693a      	ldr	r2, [r7, #16]
 8005a44:	4413      	add	r3, r2
 8005a46:	2200      	movs	r2, #0
 8005a48:	731a      	strb	r2, [r3, #12]
  for (i = 0U ; i < REQUEST_SENSE_DATA_LEN; i++)
 8005a4a:	7dfb      	ldrb	r3, [r7, #23]
 8005a4c:	3301      	adds	r3, #1
 8005a4e:	75fb      	strb	r3, [r7, #23]
 8005a50:	7dfb      	ldrb	r3, [r7, #23]
 8005a52:	2b11      	cmp	r3, #17
 8005a54:	d9f4      	bls.n	8005a40 <SCSI_RequestSense+0x1c>
  }

  hmsc->bot_data[0] = 0x70U;
 8005a56:	693b      	ldr	r3, [r7, #16]
 8005a58:	2270      	movs	r2, #112	; 0x70
 8005a5a:	731a      	strb	r2, [r3, #12]
  hmsc->bot_data[7] = REQUEST_SENSE_DATA_LEN - 6U;
 8005a5c:	693b      	ldr	r3, [r7, #16]
 8005a5e:	220c      	movs	r2, #12
 8005a60:	74da      	strb	r2, [r3, #19]

  if ((hmsc->scsi_sense_head != hmsc->scsi_sense_tail))
 8005a62:	693b      	ldr	r3, [r7, #16]
 8005a64:	f893 225c 	ldrb.w	r2, [r3, #604]	; 0x25c
 8005a68:	693b      	ldr	r3, [r7, #16]
 8005a6a:	f893 325d 	ldrb.w	r3, [r3, #605]	; 0x25d
 8005a6e:	429a      	cmp	r2, r3
 8005a70:	d02e      	beq.n	8005ad0 <SCSI_RequestSense+0xac>
  {

    hmsc->bot_data[2]     = hmsc->scsi_sense[hmsc->scsi_sense_head].Skey;
 8005a72:	693b      	ldr	r3, [r7, #16]
 8005a74:	f893 325c 	ldrb.w	r3, [r3, #604]	; 0x25c
 8005a78:	693a      	ldr	r2, [r7, #16]
 8005a7a:	3347      	adds	r3, #71	; 0x47
 8005a7c:	00db      	lsls	r3, r3, #3
 8005a7e:	4413      	add	r3, r2
 8005a80:	791a      	ldrb	r2, [r3, #4]
 8005a82:	693b      	ldr	r3, [r7, #16]
 8005a84:	739a      	strb	r2, [r3, #14]
    hmsc->bot_data[12]    = hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASCQ;
 8005a86:	693b      	ldr	r3, [r7, #16]
 8005a88:	f893 325c 	ldrb.w	r3, [r3, #604]	; 0x25c
 8005a8c:	693a      	ldr	r2, [r7, #16]
 8005a8e:	3347      	adds	r3, #71	; 0x47
 8005a90:	00db      	lsls	r3, r3, #3
 8005a92:	4413      	add	r3, r2
 8005a94:	7a5a      	ldrb	r2, [r3, #9]
 8005a96:	693b      	ldr	r3, [r7, #16]
 8005a98:	761a      	strb	r2, [r3, #24]
    hmsc->bot_data[13]    = hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASC;
 8005a9a:	693b      	ldr	r3, [r7, #16]
 8005a9c:	f893 325c 	ldrb.w	r3, [r3, #604]	; 0x25c
 8005aa0:	693a      	ldr	r2, [r7, #16]
 8005aa2:	3347      	adds	r3, #71	; 0x47
 8005aa4:	00db      	lsls	r3, r3, #3
 8005aa6:	4413      	add	r3, r2
 8005aa8:	7a1a      	ldrb	r2, [r3, #8]
 8005aaa:	693b      	ldr	r3, [r7, #16]
 8005aac:	765a      	strb	r2, [r3, #25]
    hmsc->scsi_sense_head++;
 8005aae:	693b      	ldr	r3, [r7, #16]
 8005ab0:	f893 325c 	ldrb.w	r3, [r3, #604]	; 0x25c
 8005ab4:	3301      	adds	r3, #1
 8005ab6:	b2da      	uxtb	r2, r3
 8005ab8:	693b      	ldr	r3, [r7, #16]
 8005aba:	f883 225c 	strb.w	r2, [r3, #604]	; 0x25c

    if (hmsc->scsi_sense_head == SENSE_LIST_DEEPTH)
 8005abe:	693b      	ldr	r3, [r7, #16]
 8005ac0:	f893 325c 	ldrb.w	r3, [r3, #604]	; 0x25c
 8005ac4:	2b04      	cmp	r3, #4
 8005ac6:	d103      	bne.n	8005ad0 <SCSI_RequestSense+0xac>
    {
      hmsc->scsi_sense_head = 0U;
 8005ac8:	693b      	ldr	r3, [r7, #16]
 8005aca:	2200      	movs	r2, #0
 8005acc:	f883 225c 	strb.w	r2, [r3, #604]	; 0x25c
    }
  }
  hmsc->bot_data_length = REQUEST_SENSE_DATA_LEN;
 8005ad0:	693b      	ldr	r3, [r7, #16]
 8005ad2:	2212      	movs	r2, #18
 8005ad4:	815a      	strh	r2, [r3, #10]

  if (params[4] <= REQUEST_SENSE_DATA_LEN)
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	3304      	adds	r3, #4
 8005ada:	781b      	ldrb	r3, [r3, #0]
 8005adc:	2b12      	cmp	r3, #18
 8005ade:	d805      	bhi.n	8005aec <SCSI_RequestSense+0xc8>
  {
    hmsc->bot_data_length = params[4];
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	3304      	adds	r3, #4
 8005ae4:	781b      	ldrb	r3, [r3, #0]
 8005ae6:	b29a      	uxth	r2, r3
 8005ae8:	693b      	ldr	r3, [r7, #16]
 8005aea:	815a      	strh	r2, [r3, #10]
  }
  return 0;
 8005aec:	2300      	movs	r3, #0
}
 8005aee:	4618      	mov	r0, r3
 8005af0:	371c      	adds	r7, #28
 8005af2:	46bd      	mov	sp, r7
 8005af4:	bc80      	pop	{r7}
 8005af6:	4770      	bx	lr

08005af8 <SCSI_SenseCode>:
* @param  ASC: Additional Sense Key
* @retval none

*/
void SCSI_SenseCode(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t sKey, uint8_t ASC)
{
 8005af8:	b480      	push	{r7}
 8005afa:	b085      	sub	sp, #20
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	6078      	str	r0, [r7, #4]
 8005b00:	4608      	mov	r0, r1
 8005b02:	4611      	mov	r1, r2
 8005b04:	461a      	mov	r2, r3
 8005b06:	4603      	mov	r3, r0
 8005b08:	70fb      	strb	r3, [r7, #3]
 8005b0a:	460b      	mov	r3, r1
 8005b0c:	70bb      	strb	r3, [r7, #2]
 8005b0e:	4613      	mov	r3, r2
 8005b10:	707b      	strb	r3, [r7, #1]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005b18:	60fb      	str	r3, [r7, #12]

  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey  = sKey;
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	f893 325d 	ldrb.w	r3, [r3, #605]	; 0x25d
 8005b20:	68fa      	ldr	r2, [r7, #12]
 8005b22:	3347      	adds	r3, #71	; 0x47
 8005b24:	00db      	lsls	r3, r3, #3
 8005b26:	4413      	add	r3, r2
 8005b28:	78ba      	ldrb	r2, [r7, #2]
 8005b2a:	711a      	strb	r2, [r3, #4]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.ASC = ASC << 8;
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	f893 325d 	ldrb.w	r3, [r3, #605]	; 0x25d
 8005b32:	68fa      	ldr	r2, [r7, #12]
 8005b34:	3347      	adds	r3, #71	; 0x47
 8005b36:	00db      	lsls	r3, r3, #3
 8005b38:	4413      	add	r3, r2
 8005b3a:	2200      	movs	r2, #0
 8005b3c:	721a      	strb	r2, [r3, #8]
  hmsc->scsi_sense_tail++;
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	f893 325d 	ldrb.w	r3, [r3, #605]	; 0x25d
 8005b44:	3301      	adds	r3, #1
 8005b46:	b2da      	uxtb	r2, r3
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	f883 225d 	strb.w	r2, [r3, #605]	; 0x25d
  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	f893 325d 	ldrb.w	r3, [r3, #605]	; 0x25d
 8005b54:	2b04      	cmp	r3, #4
 8005b56:	d103      	bne.n	8005b60 <SCSI_SenseCode+0x68>
  {
    hmsc->scsi_sense_tail = 0U;
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	2200      	movs	r2, #0
 8005b5c:	f883 225d 	strb.w	r2, [r3, #605]	; 0x25d
  }
}
 8005b60:	bf00      	nop
 8005b62:	3714      	adds	r7, #20
 8005b64:	46bd      	mov	sp, r7
 8005b66:	bc80      	pop	{r7}
 8005b68:	4770      	bx	lr

08005b6a <SCSI_StartStopUnit>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_StartStopUnit(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 8005b6a:	b480      	push	{r7}
 8005b6c:	b087      	sub	sp, #28
 8005b6e:	af00      	add	r7, sp, #0
 8005b70:	60f8      	str	r0, [r7, #12]
 8005b72:	460b      	mov	r3, r1
 8005b74:	607a      	str	r2, [r7, #4]
 8005b76:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *) pdev->pClassData;
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005b7e:	617b      	str	r3, [r7, #20]
  hmsc->bot_data_length = 0U;
 8005b80:	697b      	ldr	r3, [r7, #20]
 8005b82:	2200      	movs	r2, #0
 8005b84:	815a      	strh	r2, [r3, #10]
  return 0;
 8005b86:	2300      	movs	r3, #0
}
 8005b88:	4618      	mov	r0, r3
 8005b8a:	371c      	adds	r7, #28
 8005b8c:	46bd      	mov	sp, r7
 8005b8e:	bc80      	pop	{r7}
 8005b90:	4770      	bx	lr

08005b92 <SCSI_Read10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Read10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8005b92:	b580      	push	{r7, lr}
 8005b94:	b086      	sub	sp, #24
 8005b96:	af00      	add	r7, sp, #0
 8005b98:	60f8      	str	r0, [r7, #12]
 8005b9a:	460b      	mov	r3, r1
 8005b9c:	607a      	str	r2, [r7, #4]
 8005b9e:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *) pdev->pClassData;
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ba6:	617b      	str	r3, [r7, #20]

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8005ba8:	697b      	ldr	r3, [r7, #20]
 8005baa:	7a1b      	ldrb	r3, [r3, #8]
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d16e      	bne.n	8005c8e <SCSI_Read10+0xfc>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 8005bb0:	697b      	ldr	r3, [r7, #20]
 8005bb2:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 8005bb6:	b25b      	sxtb	r3, r3
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	db0a      	blt.n	8005bd2 <SCSI_Read10+0x40>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8005bbc:	697b      	ldr	r3, [r7, #20]
 8005bbe:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 8005bc2:	2320      	movs	r3, #32
 8005bc4:	2205      	movs	r2, #5
 8005bc6:	68f8      	ldr	r0, [r7, #12]
 8005bc8:	f7ff ff96 	bl	8005af8 <SCSI_SenseCode>
      return -1;
 8005bcc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005bd0:	e067      	b.n	8005ca2 <SCSI_Read10+0x110>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005bd8:	689b      	ldr	r3, [r3, #8]
 8005bda:	7afa      	ldrb	r2, [r7, #11]
 8005bdc:	4610      	mov	r0, r2
 8005bde:	4798      	blx	r3
 8005be0:	4603      	mov	r3, r0
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d008      	beq.n	8005bf8 <SCSI_Read10+0x66>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8005be6:	7af9      	ldrb	r1, [r7, #11]
 8005be8:	233a      	movs	r3, #58	; 0x3a
 8005bea:	2202      	movs	r2, #2
 8005bec:	68f8      	ldr	r0, [r7, #12]
 8005bee:	f7ff ff83 	bl	8005af8 <SCSI_SenseCode>
      return -1;
 8005bf2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005bf6:	e054      	b.n	8005ca2 <SCSI_Read10+0x110>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	3302      	adds	r3, #2
 8005bfc:	781b      	ldrb	r3, [r3, #0]
 8005bfe:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	3303      	adds	r3, #3
 8005c04:	781b      	ldrb	r3, [r3, #0]
 8005c06:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8005c08:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	3304      	adds	r3, #4
 8005c0e:	781b      	ldrb	r3, [r3, #0]
 8005c10:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8005c12:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8005c14:	687a      	ldr	r2, [r7, #4]
 8005c16:	3205      	adds	r2, #5
 8005c18:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 8005c1a:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8005c1c:	697b      	ldr	r3, [r7, #20]
 8005c1e:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264

    hmsc->scsi_blk_len = ((uint32_t)params[7] <<  8) | (uint32_t)params[8];
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	3307      	adds	r3, #7
 8005c26:	781b      	ldrb	r3, [r3, #0]
 8005c28:	021b      	lsls	r3, r3, #8
 8005c2a:	687a      	ldr	r2, [r7, #4]
 8005c2c:	3208      	adds	r2, #8
 8005c2e:	7812      	ldrb	r2, [r2, #0]
 8005c30:	431a      	orrs	r2, r3
 8005c32:	697b      	ldr	r3, [r7, #20]
 8005c34:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8005c38:	697b      	ldr	r3, [r7, #20]
 8005c3a:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
 8005c3e:	697b      	ldr	r3, [r7, #20]
 8005c40:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8005c44:	7af9      	ldrb	r1, [r7, #11]
 8005c46:	68f8      	ldr	r0, [r7, #12]
 8005c48:	f000 f912 	bl	8005e70 <SCSI_CheckAddressRange>
 8005c4c:	4603      	mov	r3, r0
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	da02      	bge.n	8005c58 <SCSI_Read10+0xc6>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8005c52:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005c56:	e024      	b.n	8005ca2 <SCSI_Read10+0x110>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 8005c58:	697b      	ldr	r3, [r7, #20]
 8005c5a:	2202      	movs	r2, #2
 8005c5c:	721a      	strb	r2, [r3, #8]

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 8005c5e:	697b      	ldr	r3, [r7, #20]
 8005c60:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8005c64:	697b      	ldr	r3, [r7, #20]
 8005c66:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8005c6a:	6979      	ldr	r1, [r7, #20]
 8005c6c:	f8b1 125e 	ldrh.w	r1, [r1, #606]	; 0x25e
 8005c70:	fb01 f303 	mul.w	r3, r1, r3
 8005c74:	429a      	cmp	r2, r3
 8005c76:	d00a      	beq.n	8005c8e <SCSI_Read10+0xfc>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8005c78:	697b      	ldr	r3, [r7, #20]
 8005c7a:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 8005c7e:	2320      	movs	r3, #32
 8005c80:	2205      	movs	r2, #5
 8005c82:	68f8      	ldr	r0, [r7, #12]
 8005c84:	f7ff ff38 	bl	8005af8 <SCSI_SenseCode>
      return -1;
 8005c88:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005c8c:	e009      	b.n	8005ca2 <SCSI_Read10+0x110>
    }
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 8005c8e:	697b      	ldr	r3, [r7, #20]
 8005c90:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005c94:	815a      	strh	r2, [r3, #10]

  return SCSI_ProcessRead(pdev, lun);
 8005c96:	7afb      	ldrb	r3, [r7, #11]
 8005c98:	4619      	mov	r1, r3
 8005c9a:	68f8      	ldr	r0, [r7, #12]
 8005c9c:	f000 f90a 	bl	8005eb4 <SCSI_ProcessRead>
 8005ca0:	4603      	mov	r3, r0
}
 8005ca2:	4618      	mov	r0, r3
 8005ca4:	3718      	adds	r7, #24
 8005ca6:	46bd      	mov	sp, r7
 8005ca8:	bd80      	pop	{r7, pc}

08005caa <SCSI_Write10>:
* @param  params: Command parameters
* @retval status
*/

static int8_t SCSI_Write10(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 8005caa:	b580      	push	{r7, lr}
 8005cac:	b086      	sub	sp, #24
 8005cae:	af00      	add	r7, sp, #0
 8005cb0:	60f8      	str	r0, [r7, #12]
 8005cb2:	460b      	mov	r3, r1
 8005cb4:	607a      	str	r2, [r7, #4]
 8005cb6:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *) pdev->pClassData;
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005cbe:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8005cc0:	697b      	ldr	r3, [r7, #20]
 8005cc2:	7a1b      	ldrb	r3, [r3, #8]
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	f040 8096 	bne.w	8005df6 <SCSI_Write10+0x14c>
  {
    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 8005cca:	697b      	ldr	r3, [r7, #20]
 8005ccc:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 8005cd0:	b25b      	sxtb	r3, r3
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	da0a      	bge.n	8005cec <SCSI_Write10+0x42>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8005cd6:	697b      	ldr	r3, [r7, #20]
 8005cd8:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 8005cdc:	2320      	movs	r3, #32
 8005cde:	2205      	movs	r2, #5
 8005ce0:	68f8      	ldr	r0, [r7, #12]
 8005ce2:	f7ff ff09 	bl	8005af8 <SCSI_SenseCode>
      return -1;
 8005ce6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005cea:	e08a      	b.n	8005e02 <SCSI_Write10+0x158>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005cf2:	689b      	ldr	r3, [r3, #8]
 8005cf4:	7afa      	ldrb	r2, [r7, #11]
 8005cf6:	4610      	mov	r0, r2
 8005cf8:	4798      	blx	r3
 8005cfa:	4603      	mov	r3, r0
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d008      	beq.n	8005d12 <SCSI_Write10+0x68>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8005d00:	7af9      	ldrb	r1, [r7, #11]
 8005d02:	233a      	movs	r3, #58	; 0x3a
 8005d04:	2202      	movs	r2, #2
 8005d06:	68f8      	ldr	r0, [r7, #12]
 8005d08:	f7ff fef6 	bl	8005af8 <SCSI_SenseCode>
      return -1;
 8005d0c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005d10:	e077      	b.n	8005e02 <SCSI_Write10+0x158>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsWriteProtected(lun) != 0)
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005d18:	68db      	ldr	r3, [r3, #12]
 8005d1a:	7afa      	ldrb	r2, [r7, #11]
 8005d1c:	4610      	mov	r0, r2
 8005d1e:	4798      	blx	r3
 8005d20:	4603      	mov	r3, r0
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d008      	beq.n	8005d38 <SCSI_Write10+0x8e>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 8005d26:	7af9      	ldrb	r1, [r7, #11]
 8005d28:	2327      	movs	r3, #39	; 0x27
 8005d2a:	2202      	movs	r2, #2
 8005d2c:	68f8      	ldr	r0, [r7, #12]
 8005d2e:	f7ff fee3 	bl	8005af8 <SCSI_SenseCode>
      return -1;
 8005d32:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005d36:	e064      	b.n	8005e02 <SCSI_Write10+0x158>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	3302      	adds	r3, #2
 8005d3c:	781b      	ldrb	r3, [r3, #0]
 8005d3e:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	3303      	adds	r3, #3
 8005d44:	781b      	ldrb	r3, [r3, #0]
 8005d46:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8005d48:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	3304      	adds	r3, #4
 8005d4e:	781b      	ldrb	r3, [r3, #0]
 8005d50:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8005d52:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8005d54:	687a      	ldr	r2, [r7, #4]
 8005d56:	3205      	adds	r2, #5
 8005d58:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 8005d5a:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8005d5c:	697b      	ldr	r3, [r7, #20]
 8005d5e:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264

    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	3307      	adds	r3, #7
 8005d66:	781b      	ldrb	r3, [r3, #0]
 8005d68:	021b      	lsls	r3, r3, #8
                         (uint32_t)params[8];
 8005d6a:	687a      	ldr	r2, [r7, #4]
 8005d6c:	3208      	adds	r2, #8
 8005d6e:	7812      	ldrb	r2, [r2, #0]
    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 8005d70:	431a      	orrs	r2, r3
 8005d72:	697b      	ldr	r3, [r7, #20]
 8005d74:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8005d78:	697b      	ldr	r3, [r7, #20]
 8005d7a:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
 8005d7e:	697b      	ldr	r3, [r7, #20]
 8005d80:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8005d84:	7af9      	ldrb	r1, [r7, #11]
 8005d86:	68f8      	ldr	r0, [r7, #12]
 8005d88:	f000 f872 	bl	8005e70 <SCSI_CheckAddressRange>
 8005d8c:	4603      	mov	r3, r0
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	da02      	bge.n	8005d98 <SCSI_Write10+0xee>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8005d92:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005d96:	e034      	b.n	8005e02 <SCSI_Write10+0x158>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8005d98:	697b      	ldr	r3, [r7, #20]
 8005d9a:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8005d9e:	697a      	ldr	r2, [r7, #20]
 8005da0:	f8b2 225e 	ldrh.w	r2, [r2, #606]	; 0x25e
 8005da4:	fb02 f303 	mul.w	r3, r2, r3
 8005da8:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 8005daa:	697b      	ldr	r3, [r7, #20]
 8005dac:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005db0:	693a      	ldr	r2, [r7, #16]
 8005db2:	429a      	cmp	r2, r3
 8005db4:	d00a      	beq.n	8005dcc <SCSI_Write10+0x122>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8005db6:	697b      	ldr	r3, [r7, #20]
 8005db8:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 8005dbc:	2320      	movs	r3, #32
 8005dbe:	2205      	movs	r2, #5
 8005dc0:	68f8      	ldr	r0, [r7, #12]
 8005dc2:	f7ff fe99 	bl	8005af8 <SCSI_SenseCode>
      return -1;
 8005dc6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005dca:	e01a      	b.n	8005e02 <SCSI_Write10+0x158>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 8005dcc:	693b      	ldr	r3, [r7, #16]
 8005dce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005dd2:	bf28      	it	cs
 8005dd4:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8005dd8:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 8005dda:	697b      	ldr	r3, [r7, #20]
 8005ddc:	2201      	movs	r2, #1
 8005dde:	721a      	strb	r2, [r3, #8]
    USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 8005de0:	697b      	ldr	r3, [r7, #20]
 8005de2:	f103 020c 	add.w	r2, r3, #12
 8005de6:	693b      	ldr	r3, [r7, #16]
 8005de8:	b29b      	uxth	r3, r3
 8005dea:	2101      	movs	r1, #1
 8005dec:	68f8      	ldr	r0, [r7, #12]
 8005dee:	f002 fa3a 	bl	8008266 <USBD_LL_PrepareReceive>
  }
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }
  return 0;
 8005df2:	2300      	movs	r3, #0
 8005df4:	e005      	b.n	8005e02 <SCSI_Write10+0x158>
    return SCSI_ProcessWrite(pdev, lun);
 8005df6:	7afb      	ldrb	r3, [r7, #11]
 8005df8:	4619      	mov	r1, r3
 8005dfa:	68f8      	ldr	r0, [r7, #12]
 8005dfc:	f000 f8ce 	bl	8005f9c <SCSI_ProcessWrite>
 8005e00:	4603      	mov	r3, r0
}
 8005e02:	4618      	mov	r0, r3
 8005e04:	3718      	adds	r7, #24
 8005e06:	46bd      	mov	sp, r7
 8005e08:	bd80      	pop	{r7, pc}

08005e0a <SCSI_Verify10>:
* @param  params: Command parameters
* @retval status
*/

static int8_t SCSI_Verify10(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 8005e0a:	b580      	push	{r7, lr}
 8005e0c:	b086      	sub	sp, #24
 8005e0e:	af00      	add	r7, sp, #0
 8005e10:	60f8      	str	r0, [r7, #12]
 8005e12:	460b      	mov	r3, r1
 8005e14:	607a      	str	r2, [r7, #4]
 8005e16:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *) pdev->pClassData;
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e1e:	617b      	str	r3, [r7, #20]

  if ((params[1] & 0x02U) == 0x02U)
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	3301      	adds	r3, #1
 8005e24:	781b      	ldrb	r3, [r3, #0]
 8005e26:	f003 0302 	and.w	r3, r3, #2
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d008      	beq.n	8005e40 <SCSI_Verify10+0x36>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 8005e2e:	7af9      	ldrb	r1, [r7, #11]
 8005e30:	2324      	movs	r3, #36	; 0x24
 8005e32:	2205      	movs	r2, #5
 8005e34:	68f8      	ldr	r0, [r7, #12]
 8005e36:	f7ff fe5f 	bl	8005af8 <SCSI_SenseCode>
    return -1; /* Error, Verify Mode Not supported*/
 8005e3a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005e3e:	e013      	b.n	8005e68 <SCSI_Verify10+0x5e>
  }

  if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8005e40:	697b      	ldr	r3, [r7, #20]
 8005e42:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
 8005e46:	697b      	ldr	r3, [r7, #20]
 8005e48:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8005e4c:	7af9      	ldrb	r1, [r7, #11]
 8005e4e:	68f8      	ldr	r0, [r7, #12]
 8005e50:	f000 f80e 	bl	8005e70 <SCSI_CheckAddressRange>
 8005e54:	4603      	mov	r3, r0
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	da02      	bge.n	8005e60 <SCSI_Verify10+0x56>
                             hmsc->scsi_blk_len) < 0)
  {
    return -1; /* error */
 8005e5a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005e5e:	e003      	b.n	8005e68 <SCSI_Verify10+0x5e>
  }
  hmsc->bot_data_length = 0U;
 8005e60:	697b      	ldr	r3, [r7, #20]
 8005e62:	2200      	movs	r2, #0
 8005e64:	815a      	strh	r2, [r3, #10]
  return 0;
 8005e66:	2300      	movs	r3, #0
}
 8005e68:	4618      	mov	r0, r3
 8005e6a:	3718      	adds	r7, #24
 8005e6c:	46bd      	mov	sp, r7
 8005e6e:	bd80      	pop	{r7, pc}

08005e70 <SCSI_CheckAddressRange>:
* @param  blk_nbr: number of block to be processed
* @retval status
*/
static int8_t SCSI_CheckAddressRange(USBD_HandleTypeDef *pdev, uint8_t lun,
                                     uint32_t blk_offset, uint32_t blk_nbr)
{
 8005e70:	b580      	push	{r7, lr}
 8005e72:	b086      	sub	sp, #24
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	60f8      	str	r0, [r7, #12]
 8005e78:	607a      	str	r2, [r7, #4]
 8005e7a:	603b      	str	r3, [r7, #0]
 8005e7c:	460b      	mov	r3, r1
 8005e7e:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *) pdev->pClassData;
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e86:	617b      	str	r3, [r7, #20]

  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr)
 8005e88:	687a      	ldr	r2, [r7, #4]
 8005e8a:	683b      	ldr	r3, [r7, #0]
 8005e8c:	441a      	add	r2, r3
 8005e8e:	697b      	ldr	r3, [r7, #20]
 8005e90:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
 8005e94:	429a      	cmp	r2, r3
 8005e96:	d908      	bls.n	8005eaa <SCSI_CheckAddressRange+0x3a>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, ADDRESS_OUT_OF_RANGE);
 8005e98:	7af9      	ldrb	r1, [r7, #11]
 8005e9a:	2321      	movs	r3, #33	; 0x21
 8005e9c:	2205      	movs	r2, #5
 8005e9e:	68f8      	ldr	r0, [r7, #12]
 8005ea0:	f7ff fe2a 	bl	8005af8 <SCSI_SenseCode>
    return -1;
 8005ea4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005ea8:	e000      	b.n	8005eac <SCSI_CheckAddressRange+0x3c>
  }
  return 0;
 8005eaa:	2300      	movs	r3, #0
}
 8005eac:	4618      	mov	r0, r3
 8005eae:	3718      	adds	r7, #24
 8005eb0:	46bd      	mov	sp, r7
 8005eb2:	bd80      	pop	{r7, pc}

08005eb4 <SCSI_ProcessRead>:
*         Handle Read Process
* @param  lun: Logical unit number
* @retval status
*/
static int8_t SCSI_ProcessRead(USBD_HandleTypeDef  *pdev, uint8_t lun)
{
 8005eb4:	b590      	push	{r4, r7, lr}
 8005eb6:	b085      	sub	sp, #20
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	6078      	str	r0, [r7, #4]
 8005ebc:	460b      	mov	r3, r1
 8005ebe:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ec6:	60fb      	str	r3, [r7, #12]
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8005ece:	68fa      	ldr	r2, [r7, #12]
 8005ed0:	f8b2 225e 	ldrh.w	r2, [r2, #606]	; 0x25e
 8005ed4:	fb02 f303 	mul.w	r3, r2, r3
 8005ed8:	60bb      	str	r3, [r7, #8]

  len = MIN(len, MSC_MEDIA_PACKET);
 8005eda:	68bb      	ldr	r3, [r7, #8]
 8005edc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005ee0:	bf28      	it	cs
 8005ee2:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8005ee6:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun,
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005eee:	691c      	ldr	r4, [r3, #16]
                                                     hmsc->bot_data,
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	f103 010c 	add.w	r1, r3, #12
  if (((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun,
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
                                                     hmsc->scsi_blk_addr,
                                                     (len / hmsc->scsi_blk_size)) < 0)
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 8005f02:	4618      	mov	r0, r3
 8005f04:	68bb      	ldr	r3, [r7, #8]
 8005f06:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun,
 8005f0a:	b29b      	uxth	r3, r3
 8005f0c:	78f8      	ldrb	r0, [r7, #3]
 8005f0e:	47a0      	blx	r4
 8005f10:	4603      	mov	r3, r0
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	da08      	bge.n	8005f28 <SCSI_ProcessRead+0x74>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, UNRECOVERED_READ_ERROR);
 8005f16:	78f9      	ldrb	r1, [r7, #3]
 8005f18:	2311      	movs	r3, #17
 8005f1a:	2204      	movs	r2, #4
 8005f1c:	6878      	ldr	r0, [r7, #4]
 8005f1e:	f7ff fdeb 	bl	8005af8 <SCSI_SenseCode>
    return -1;
 8005f22:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005f26:	e035      	b.n	8005f94 <SCSI_ProcessRead+0xe0>
  }

  USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, hmsc->bot_data, len);
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	f103 020c 	add.w	r2, r3, #12
 8005f2e:	68bb      	ldr	r3, [r7, #8]
 8005f30:	b29b      	uxth	r3, r3
 8005f32:	2181      	movs	r1, #129	; 0x81
 8005f34:	6878      	ldr	r0, [r7, #4]
 8005f36:	f002 f973 	bl	8008220 <USBD_LL_Transmit>

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 8005f46:	4619      	mov	r1, r3
 8005f48:	68bb      	ldr	r3, [r7, #8]
 8005f4a:	fbb3 f3f1 	udiv	r3, r3, r1
 8005f4e:	441a      	add	r2, r3
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	f8d3 2268 	ldr.w	r2, [r3, #616]	; 0x268
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 8005f62:	4619      	mov	r1, r3
 8005f64:	68bb      	ldr	r3, [r7, #8]
 8005f66:	fbb3 f3f1 	udiv	r3, r3, r1
 8005f6a:	1ad2      	subs	r2, r2, r3
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268

  /* case 6 : Hi = Di */
  hmsc->csw.dDataResidue -= len;
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	f8d3 2234 	ldr.w	r2, [r3, #564]	; 0x234
 8005f78:	68bb      	ldr	r3, [r7, #8]
 8005f7a:	1ad2      	subs	r2, r2, r3
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234

  if (hmsc->scsi_blk_len == 0U)
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d102      	bne.n	8005f92 <SCSI_ProcessRead+0xde>
  {
    hmsc->bot_state = USBD_BOT_LAST_DATA_IN;
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	2203      	movs	r2, #3
 8005f90:	721a      	strb	r2, [r3, #8]
  }
  return 0;
 8005f92:	2300      	movs	r3, #0
}
 8005f94:	4618      	mov	r0, r3
 8005f96:	3714      	adds	r7, #20
 8005f98:	46bd      	mov	sp, r7
 8005f9a:	bd90      	pop	{r4, r7, pc}

08005f9c <SCSI_ProcessWrite>:
* @param  lun: Logical unit number
* @retval status
*/

static int8_t SCSI_ProcessWrite(USBD_HandleTypeDef  *pdev, uint8_t lun)
{
 8005f9c:	b590      	push	{r4, r7, lr}
 8005f9e:	b085      	sub	sp, #20
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	6078      	str	r0, [r7, #4]
 8005fa4:	460b      	mov	r3, r1
 8005fa6:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *) pdev->pClassData;
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005fae:	60fb      	str	r3, [r7, #12]
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8005fb6:	68fa      	ldr	r2, [r7, #12]
 8005fb8:	f8b2 225e 	ldrh.w	r2, [r2, #606]	; 0x25e
 8005fbc:	fb02 f303 	mul.w	r3, r2, r3
 8005fc0:	60bb      	str	r3, [r7, #8]

  len = MIN(len, MSC_MEDIA_PACKET);
 8005fc2:	68bb      	ldr	r3, [r7, #8]
 8005fc4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005fc8:	bf28      	it	cs
 8005fca:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8005fce:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun, hmsc->bot_data,
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005fd6:	695c      	ldr	r4, [r3, #20]
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	f103 010c 	add.w	r1, r3, #12
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
                                                      hmsc->scsi_blk_addr,
                                                      (len / hmsc->scsi_blk_size)) < 0)
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 8005fea:	4618      	mov	r0, r3
 8005fec:	68bb      	ldr	r3, [r7, #8]
 8005fee:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun, hmsc->bot_data,
 8005ff2:	b29b      	uxth	r3, r3
 8005ff4:	78f8      	ldrb	r0, [r7, #3]
 8005ff6:	47a0      	blx	r4
 8005ff8:	4603      	mov	r3, r0
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	da08      	bge.n	8006010 <SCSI_ProcessWrite+0x74>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, WRITE_FAULT);
 8005ffe:	78f9      	ldrb	r1, [r7, #3]
 8006000:	2303      	movs	r3, #3
 8006002:	2204      	movs	r2, #4
 8006004:	6878      	ldr	r0, [r7, #4]
 8006006:	f7ff fd77 	bl	8005af8 <SCSI_SenseCode>

    return -1;
 800600a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800600e:	e045      	b.n	800609c <SCSI_ProcessWrite+0x100>
  }

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 800601c:	4619      	mov	r1, r3
 800601e:	68bb      	ldr	r3, [r7, #8]
 8006020:	fbb3 f3f1 	udiv	r3, r3, r1
 8006024:	441a      	add	r2, r3
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	f8d3 2268 	ldr.w	r2, [r3, #616]	; 0x268
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 8006038:	4619      	mov	r1, r3
 800603a:	68bb      	ldr	r3, [r7, #8]
 800603c:	fbb3 f3f1 	udiv	r3, r3, r1
 8006040:	1ad2      	subs	r2, r2, r3
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268

  /* case 12 : Ho = Do */
  hmsc->csw.dDataResidue -= len;
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	f8d3 2234 	ldr.w	r2, [r3, #564]	; 0x234
 800604e:	68bb      	ldr	r3, [r7, #8]
 8006050:	1ad2      	subs	r2, r2, r3
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234

  if (hmsc->scsi_blk_len == 0U)
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800605e:	2b00      	cmp	r3, #0
 8006060:	d104      	bne.n	800606c <SCSI_ProcessWrite+0xd0>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8006062:	2100      	movs	r1, #0
 8006064:	6878      	ldr	r0, [r7, #4]
 8006066:	f7ff f97f 	bl	8005368 <MSC_BOT_SendCSW>
 800606a:	e016      	b.n	800609a <SCSI_ProcessWrite+0xfe>
  }
  else
  {
    len = MIN((hmsc->scsi_blk_len * hmsc->scsi_blk_size), MSC_MEDIA_PACKET);
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8006072:	68fa      	ldr	r2, [r7, #12]
 8006074:	f8b2 225e 	ldrh.w	r2, [r2, #606]	; 0x25e
 8006078:	fb02 f303 	mul.w	r3, r2, r3
 800607c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006080:	bf28      	it	cs
 8006082:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8006086:	60bb      	str	r3, [r7, #8]
    /* Prepare EP to Receive next packet */
    USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	f103 020c 	add.w	r2, r3, #12
 800608e:	68bb      	ldr	r3, [r7, #8]
 8006090:	b29b      	uxth	r3, r3
 8006092:	2101      	movs	r1, #1
 8006094:	6878      	ldr	r0, [r7, #4]
 8006096:	f002 f8e6 	bl	8008266 <USBD_LL_PrepareReceive>
  }

  return 0;
 800609a:	2300      	movs	r3, #0
}
 800609c:	4618      	mov	r0, r3
 800609e:	3714      	adds	r7, #20
 80060a0:	46bd      	mov	sp, r7
 80060a2:	bd90      	pop	{r4, r7, pc}

080060a4 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80060a4:	b580      	push	{r7, lr}
 80060a6:	b084      	sub	sp, #16
 80060a8:	af00      	add	r7, sp, #0
 80060aa:	60f8      	str	r0, [r7, #12]
 80060ac:	60b9      	str	r1, [r7, #8]
 80060ae:	4613      	mov	r3, r2
 80060b0:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d101      	bne.n	80060bc <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80060b8:	2302      	movs	r3, #2
 80060ba:	e01a      	b.n	80060f2 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d003      	beq.n	80060ce <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	2200      	movs	r2, #0
 80060ca:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80060ce:	68bb      	ldr	r3, [r7, #8]
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d003      	beq.n	80060dc <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	68ba      	ldr	r2, [r7, #8]
 80060d8:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	2201      	movs	r2, #1
 80060e0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	79fa      	ldrb	r2, [r7, #7]
 80060e8:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80060ea:	68f8      	ldr	r0, [r7, #12]
 80060ec:	f001 ff40 	bl	8007f70 <USBD_LL_Init>

  return USBD_OK;
 80060f0:	2300      	movs	r3, #0
}
 80060f2:	4618      	mov	r0, r3
 80060f4:	3710      	adds	r7, #16
 80060f6:	46bd      	mov	sp, r7
 80060f8:	bd80      	pop	{r7, pc}

080060fa <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80060fa:	b480      	push	{r7}
 80060fc:	b085      	sub	sp, #20
 80060fe:	af00      	add	r7, sp, #0
 8006100:	6078      	str	r0, [r7, #4]
 8006102:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8006104:	2300      	movs	r3, #0
 8006106:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8006108:	683b      	ldr	r3, [r7, #0]
 800610a:	2b00      	cmp	r3, #0
 800610c:	d006      	beq.n	800611c <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	683a      	ldr	r2, [r7, #0]
 8006112:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8006116:	2300      	movs	r3, #0
 8006118:	73fb      	strb	r3, [r7, #15]
 800611a:	e001      	b.n	8006120 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800611c:	2302      	movs	r3, #2
 800611e:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006120:	7bfb      	ldrb	r3, [r7, #15]
}
 8006122:	4618      	mov	r0, r3
 8006124:	3714      	adds	r7, #20
 8006126:	46bd      	mov	sp, r7
 8006128:	bc80      	pop	{r7}
 800612a:	4770      	bx	lr

0800612c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800612c:	b580      	push	{r7, lr}
 800612e:	b082      	sub	sp, #8
 8006130:	af00      	add	r7, sp, #0
 8006132:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8006134:	6878      	ldr	r0, [r7, #4]
 8006136:	f001 ff6b 	bl	8008010 <USBD_LL_Start>

  return USBD_OK;
 800613a:	2300      	movs	r3, #0
}
 800613c:	4618      	mov	r0, r3
 800613e:	3708      	adds	r7, #8
 8006140:	46bd      	mov	sp, r7
 8006142:	bd80      	pop	{r7, pc}

08006144 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8006144:	b480      	push	{r7}
 8006146:	b083      	sub	sp, #12
 8006148:	af00      	add	r7, sp, #0
 800614a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800614c:	2300      	movs	r3, #0
}
 800614e:	4618      	mov	r0, r3
 8006150:	370c      	adds	r7, #12
 8006152:	46bd      	mov	sp, r7
 8006154:	bc80      	pop	{r7}
 8006156:	4770      	bx	lr

08006158 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006158:	b580      	push	{r7, lr}
 800615a:	b084      	sub	sp, #16
 800615c:	af00      	add	r7, sp, #0
 800615e:	6078      	str	r0, [r7, #4]
 8006160:	460b      	mov	r3, r1
 8006162:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8006164:	2302      	movs	r3, #2
 8006166:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800616e:	2b00      	cmp	r3, #0
 8006170:	d00c      	beq.n	800618c <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	78fa      	ldrb	r2, [r7, #3]
 800617c:	4611      	mov	r1, r2
 800617e:	6878      	ldr	r0, [r7, #4]
 8006180:	4798      	blx	r3
 8006182:	4603      	mov	r3, r0
 8006184:	2b00      	cmp	r3, #0
 8006186:	d101      	bne.n	800618c <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8006188:	2300      	movs	r3, #0
 800618a:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800618c:	7bfb      	ldrb	r3, [r7, #15]
}
 800618e:	4618      	mov	r0, r3
 8006190:	3710      	adds	r7, #16
 8006192:	46bd      	mov	sp, r7
 8006194:	bd80      	pop	{r7, pc}

08006196 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006196:	b580      	push	{r7, lr}
 8006198:	b082      	sub	sp, #8
 800619a:	af00      	add	r7, sp, #0
 800619c:	6078      	str	r0, [r7, #4]
 800619e:	460b      	mov	r3, r1
 80061a0:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80061a8:	685b      	ldr	r3, [r3, #4]
 80061aa:	78fa      	ldrb	r2, [r7, #3]
 80061ac:	4611      	mov	r1, r2
 80061ae:	6878      	ldr	r0, [r7, #4]
 80061b0:	4798      	blx	r3

  return USBD_OK;
 80061b2:	2300      	movs	r3, #0
}
 80061b4:	4618      	mov	r0, r3
 80061b6:	3708      	adds	r7, #8
 80061b8:	46bd      	mov	sp, r7
 80061ba:	bd80      	pop	{r7, pc}

080061bc <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80061bc:	b580      	push	{r7, lr}
 80061be:	b082      	sub	sp, #8
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	6078      	str	r0, [r7, #4]
 80061c4:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80061cc:	6839      	ldr	r1, [r7, #0]
 80061ce:	4618      	mov	r0, r3
 80061d0:	f000 fed7 	bl	8006f82 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	2201      	movs	r2, #1
 80061d8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80061e2:	461a      	mov	r2, r3
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80061f0:	f003 031f 	and.w	r3, r3, #31
 80061f4:	2b02      	cmp	r3, #2
 80061f6:	d016      	beq.n	8006226 <USBD_LL_SetupStage+0x6a>
 80061f8:	2b02      	cmp	r3, #2
 80061fa:	d81c      	bhi.n	8006236 <USBD_LL_SetupStage+0x7a>
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d002      	beq.n	8006206 <USBD_LL_SetupStage+0x4a>
 8006200:	2b01      	cmp	r3, #1
 8006202:	d008      	beq.n	8006216 <USBD_LL_SetupStage+0x5a>
 8006204:	e017      	b.n	8006236 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800620c:	4619      	mov	r1, r3
 800620e:	6878      	ldr	r0, [r7, #4]
 8006210:	f000 f9ca 	bl	80065a8 <USBD_StdDevReq>
      break;
 8006214:	e01a      	b.n	800624c <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800621c:	4619      	mov	r1, r3
 800621e:	6878      	ldr	r0, [r7, #4]
 8006220:	f000 fa2c 	bl	800667c <USBD_StdItfReq>
      break;
 8006224:	e012      	b.n	800624c <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800622c:	4619      	mov	r1, r3
 800622e:	6878      	ldr	r0, [r7, #4]
 8006230:	f000 fa6c 	bl	800670c <USBD_StdEPReq>
      break;
 8006234:	e00a      	b.n	800624c <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800623c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006240:	b2db      	uxtb	r3, r3
 8006242:	4619      	mov	r1, r3
 8006244:	6878      	ldr	r0, [r7, #4]
 8006246:	f001 ff62 	bl	800810e <USBD_LL_StallEP>
      break;
 800624a:	bf00      	nop
  }

  return USBD_OK;
 800624c:	2300      	movs	r3, #0
}
 800624e:	4618      	mov	r0, r3
 8006250:	3708      	adds	r7, #8
 8006252:	46bd      	mov	sp, r7
 8006254:	bd80      	pop	{r7, pc}

08006256 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006256:	b580      	push	{r7, lr}
 8006258:	b086      	sub	sp, #24
 800625a:	af00      	add	r7, sp, #0
 800625c:	60f8      	str	r0, [r7, #12]
 800625e:	460b      	mov	r3, r1
 8006260:	607a      	str	r2, [r7, #4]
 8006262:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8006264:	7afb      	ldrb	r3, [r7, #11]
 8006266:	2b00      	cmp	r3, #0
 8006268:	d14b      	bne.n	8006302 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006270:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006278:	2b03      	cmp	r3, #3
 800627a:	d134      	bne.n	80062e6 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800627c:	697b      	ldr	r3, [r7, #20]
 800627e:	68da      	ldr	r2, [r3, #12]
 8006280:	697b      	ldr	r3, [r7, #20]
 8006282:	691b      	ldr	r3, [r3, #16]
 8006284:	429a      	cmp	r2, r3
 8006286:	d919      	bls.n	80062bc <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8006288:	697b      	ldr	r3, [r7, #20]
 800628a:	68da      	ldr	r2, [r3, #12]
 800628c:	697b      	ldr	r3, [r7, #20]
 800628e:	691b      	ldr	r3, [r3, #16]
 8006290:	1ad2      	subs	r2, r2, r3
 8006292:	697b      	ldr	r3, [r7, #20]
 8006294:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006296:	697b      	ldr	r3, [r7, #20]
 8006298:	68da      	ldr	r2, [r3, #12]
 800629a:	697b      	ldr	r3, [r7, #20]
 800629c:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800629e:	429a      	cmp	r2, r3
 80062a0:	d203      	bcs.n	80062aa <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80062a2:	697b      	ldr	r3, [r7, #20]
 80062a4:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 80062a6:	b29b      	uxth	r3, r3
 80062a8:	e002      	b.n	80062b0 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80062aa:	697b      	ldr	r3, [r7, #20]
 80062ac:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80062ae:	b29b      	uxth	r3, r3
 80062b0:	461a      	mov	r2, r3
 80062b2:	6879      	ldr	r1, [r7, #4]
 80062b4:	68f8      	ldr	r0, [r7, #12]
 80062b6:	f000 ff38 	bl	800712a <USBD_CtlContinueRx>
 80062ba:	e038      	b.n	800632e <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80062c2:	691b      	ldr	r3, [r3, #16]
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d00a      	beq.n	80062de <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80062ce:	2b03      	cmp	r3, #3
 80062d0:	d105      	bne.n	80062de <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80062d8:	691b      	ldr	r3, [r3, #16]
 80062da:	68f8      	ldr	r0, [r7, #12]
 80062dc:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80062de:	68f8      	ldr	r0, [r7, #12]
 80062e0:	f000 ff35 	bl	800714e <USBD_CtlSendStatus>
 80062e4:	e023      	b.n	800632e <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80062ec:	2b05      	cmp	r3, #5
 80062ee:	d11e      	bne.n	800632e <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	2200      	movs	r2, #0
 80062f4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 80062f8:	2100      	movs	r1, #0
 80062fa:	68f8      	ldr	r0, [r7, #12]
 80062fc:	f001 ff07 	bl	800810e <USBD_LL_StallEP>
 8006300:	e015      	b.n	800632e <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006308:	699b      	ldr	r3, [r3, #24]
 800630a:	2b00      	cmp	r3, #0
 800630c:	d00d      	beq.n	800632a <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8006314:	2b03      	cmp	r3, #3
 8006316:	d108      	bne.n	800632a <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800631e:	699b      	ldr	r3, [r3, #24]
 8006320:	7afa      	ldrb	r2, [r7, #11]
 8006322:	4611      	mov	r1, r2
 8006324:	68f8      	ldr	r0, [r7, #12]
 8006326:	4798      	blx	r3
 8006328:	e001      	b.n	800632e <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800632a:	2302      	movs	r3, #2
 800632c:	e000      	b.n	8006330 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800632e:	2300      	movs	r3, #0
}
 8006330:	4618      	mov	r0, r3
 8006332:	3718      	adds	r7, #24
 8006334:	46bd      	mov	sp, r7
 8006336:	bd80      	pop	{r7, pc}

08006338 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006338:	b580      	push	{r7, lr}
 800633a:	b086      	sub	sp, #24
 800633c:	af00      	add	r7, sp, #0
 800633e:	60f8      	str	r0, [r7, #12]
 8006340:	460b      	mov	r3, r1
 8006342:	607a      	str	r2, [r7, #4]
 8006344:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8006346:	7afb      	ldrb	r3, [r7, #11]
 8006348:	2b00      	cmp	r3, #0
 800634a:	d17f      	bne.n	800644c <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	3314      	adds	r3, #20
 8006350:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006358:	2b02      	cmp	r3, #2
 800635a:	d15c      	bne.n	8006416 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800635c:	697b      	ldr	r3, [r7, #20]
 800635e:	68da      	ldr	r2, [r3, #12]
 8006360:	697b      	ldr	r3, [r7, #20]
 8006362:	691b      	ldr	r3, [r3, #16]
 8006364:	429a      	cmp	r2, r3
 8006366:	d915      	bls.n	8006394 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8006368:	697b      	ldr	r3, [r7, #20]
 800636a:	68da      	ldr	r2, [r3, #12]
 800636c:	697b      	ldr	r3, [r7, #20]
 800636e:	691b      	ldr	r3, [r3, #16]
 8006370:	1ad2      	subs	r2, r2, r3
 8006372:	697b      	ldr	r3, [r7, #20]
 8006374:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8006376:	697b      	ldr	r3, [r7, #20]
 8006378:	68db      	ldr	r3, [r3, #12]
 800637a:	b29b      	uxth	r3, r3
 800637c:	461a      	mov	r2, r3
 800637e:	6879      	ldr	r1, [r7, #4]
 8006380:	68f8      	ldr	r0, [r7, #12]
 8006382:	f000 fec0 	bl	8007106 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006386:	2300      	movs	r3, #0
 8006388:	2200      	movs	r2, #0
 800638a:	2100      	movs	r1, #0
 800638c:	68f8      	ldr	r0, [r7, #12]
 800638e:	f001 ff6a 	bl	8008266 <USBD_LL_PrepareReceive>
 8006392:	e04e      	b.n	8006432 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8006394:	697b      	ldr	r3, [r7, #20]
 8006396:	689b      	ldr	r3, [r3, #8]
 8006398:	697a      	ldr	r2, [r7, #20]
 800639a:	6912      	ldr	r2, [r2, #16]
 800639c:	fbb3 f1f2 	udiv	r1, r3, r2
 80063a0:	fb02 f201 	mul.w	r2, r2, r1
 80063a4:	1a9b      	subs	r3, r3, r2
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d11c      	bne.n	80063e4 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 80063aa:	697b      	ldr	r3, [r7, #20]
 80063ac:	689a      	ldr	r2, [r3, #8]
 80063ae:	697b      	ldr	r3, [r7, #20]
 80063b0:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80063b2:	429a      	cmp	r2, r3
 80063b4:	d316      	bcc.n	80063e4 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 80063b6:	697b      	ldr	r3, [r7, #20]
 80063b8:	689a      	ldr	r2, [r3, #8]
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80063c0:	429a      	cmp	r2, r3
 80063c2:	d20f      	bcs.n	80063e4 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80063c4:	2200      	movs	r2, #0
 80063c6:	2100      	movs	r1, #0
 80063c8:	68f8      	ldr	r0, [r7, #12]
 80063ca:	f000 fe9c 	bl	8007106 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	2200      	movs	r2, #0
 80063d2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80063d6:	2300      	movs	r3, #0
 80063d8:	2200      	movs	r2, #0
 80063da:	2100      	movs	r1, #0
 80063dc:	68f8      	ldr	r0, [r7, #12]
 80063de:	f001 ff42 	bl	8008266 <USBD_LL_PrepareReceive>
 80063e2:	e026      	b.n	8006432 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80063ea:	68db      	ldr	r3, [r3, #12]
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d00a      	beq.n	8006406 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80063f6:	2b03      	cmp	r3, #3
 80063f8:	d105      	bne.n	8006406 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006400:	68db      	ldr	r3, [r3, #12]
 8006402:	68f8      	ldr	r0, [r7, #12]
 8006404:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8006406:	2180      	movs	r1, #128	; 0x80
 8006408:	68f8      	ldr	r0, [r7, #12]
 800640a:	f001 fe80 	bl	800810e <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800640e:	68f8      	ldr	r0, [r7, #12]
 8006410:	f000 feb0 	bl	8007174 <USBD_CtlReceiveStatus>
 8006414:	e00d      	b.n	8006432 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800641c:	2b04      	cmp	r3, #4
 800641e:	d004      	beq.n	800642a <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006426:	2b00      	cmp	r3, #0
 8006428:	d103      	bne.n	8006432 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800642a:	2180      	movs	r1, #128	; 0x80
 800642c:	68f8      	ldr	r0, [r7, #12]
 800642e:	f001 fe6e 	bl	800810e <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006438:	2b01      	cmp	r3, #1
 800643a:	d11d      	bne.n	8006478 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800643c:	68f8      	ldr	r0, [r7, #12]
 800643e:	f7ff fe81 	bl	8006144 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	2200      	movs	r2, #0
 8006446:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800644a:	e015      	b.n	8006478 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006452:	695b      	ldr	r3, [r3, #20]
 8006454:	2b00      	cmp	r3, #0
 8006456:	d00d      	beq.n	8006474 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800645e:	2b03      	cmp	r3, #3
 8006460:	d108      	bne.n	8006474 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006468:	695b      	ldr	r3, [r3, #20]
 800646a:	7afa      	ldrb	r2, [r7, #11]
 800646c:	4611      	mov	r1, r2
 800646e:	68f8      	ldr	r0, [r7, #12]
 8006470:	4798      	blx	r3
 8006472:	e001      	b.n	8006478 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006474:	2302      	movs	r3, #2
 8006476:	e000      	b.n	800647a <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8006478:	2300      	movs	r3, #0
}
 800647a:	4618      	mov	r0, r3
 800647c:	3718      	adds	r7, #24
 800647e:	46bd      	mov	sp, r7
 8006480:	bd80      	pop	{r7, pc}

08006482 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006482:	b580      	push	{r7, lr}
 8006484:	b082      	sub	sp, #8
 8006486:	af00      	add	r7, sp, #0
 8006488:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800648a:	2340      	movs	r3, #64	; 0x40
 800648c:	2200      	movs	r2, #0
 800648e:	2100      	movs	r1, #0
 8006490:	6878      	ldr	r0, [r7, #4]
 8006492:	f001 fdd8 	bl	8008046 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	2201      	movs	r2, #1
 800649a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	2240      	movs	r2, #64	; 0x40
 80064a2:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80064a6:	2340      	movs	r3, #64	; 0x40
 80064a8:	2200      	movs	r2, #0
 80064aa:	2180      	movs	r1, #128	; 0x80
 80064ac:	6878      	ldr	r0, [r7, #4]
 80064ae:	f001 fdca 	bl	8008046 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	2201      	movs	r2, #1
 80064b6:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	2240      	movs	r2, #64	; 0x40
 80064bc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	2201      	movs	r2, #1
 80064c2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	2200      	movs	r2, #0
 80064ca:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	2200      	movs	r2, #0
 80064d2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	2200      	movs	r2, #0
 80064d8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d009      	beq.n	80064fa <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80064ec:	685b      	ldr	r3, [r3, #4]
 80064ee:	687a      	ldr	r2, [r7, #4]
 80064f0:	6852      	ldr	r2, [r2, #4]
 80064f2:	b2d2      	uxtb	r2, r2
 80064f4:	4611      	mov	r1, r2
 80064f6:	6878      	ldr	r0, [r7, #4]
 80064f8:	4798      	blx	r3
  }

  return USBD_OK;
 80064fa:	2300      	movs	r3, #0
}
 80064fc:	4618      	mov	r0, r3
 80064fe:	3708      	adds	r7, #8
 8006500:	46bd      	mov	sp, r7
 8006502:	bd80      	pop	{r7, pc}

08006504 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006504:	b480      	push	{r7}
 8006506:	b083      	sub	sp, #12
 8006508:	af00      	add	r7, sp, #0
 800650a:	6078      	str	r0, [r7, #4]
 800650c:	460b      	mov	r3, r1
 800650e:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	78fa      	ldrb	r2, [r7, #3]
 8006514:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006516:	2300      	movs	r3, #0
}
 8006518:	4618      	mov	r0, r3
 800651a:	370c      	adds	r7, #12
 800651c:	46bd      	mov	sp, r7
 800651e:	bc80      	pop	{r7}
 8006520:	4770      	bx	lr

08006522 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006522:	b480      	push	{r7}
 8006524:	b083      	sub	sp, #12
 8006526:	af00      	add	r7, sp, #0
 8006528:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	2204      	movs	r2, #4
 800653a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800653e:	2300      	movs	r3, #0
}
 8006540:	4618      	mov	r0, r3
 8006542:	370c      	adds	r7, #12
 8006544:	46bd      	mov	sp, r7
 8006546:	bc80      	pop	{r7}
 8006548:	4770      	bx	lr

0800654a <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800654a:	b480      	push	{r7}
 800654c:	b083      	sub	sp, #12
 800654e:	af00      	add	r7, sp, #0
 8006550:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006558:	2b04      	cmp	r3, #4
 800655a:	d105      	bne.n	8006568 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006568:	2300      	movs	r3, #0
}
 800656a:	4618      	mov	r0, r3
 800656c:	370c      	adds	r7, #12
 800656e:	46bd      	mov	sp, r7
 8006570:	bc80      	pop	{r7}
 8006572:	4770      	bx	lr

08006574 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006574:	b580      	push	{r7, lr}
 8006576:	b082      	sub	sp, #8
 8006578:	af00      	add	r7, sp, #0
 800657a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006582:	2b03      	cmp	r3, #3
 8006584:	d10b      	bne.n	800659e <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800658c:	69db      	ldr	r3, [r3, #28]
 800658e:	2b00      	cmp	r3, #0
 8006590:	d005      	beq.n	800659e <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006598:	69db      	ldr	r3, [r3, #28]
 800659a:	6878      	ldr	r0, [r7, #4]
 800659c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800659e:	2300      	movs	r3, #0
}
 80065a0:	4618      	mov	r0, r3
 80065a2:	3708      	adds	r7, #8
 80065a4:	46bd      	mov	sp, r7
 80065a6:	bd80      	pop	{r7, pc}

080065a8 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 80065a8:	b580      	push	{r7, lr}
 80065aa:	b084      	sub	sp, #16
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	6078      	str	r0, [r7, #4]
 80065b0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80065b2:	2300      	movs	r3, #0
 80065b4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80065b6:	683b      	ldr	r3, [r7, #0]
 80065b8:	781b      	ldrb	r3, [r3, #0]
 80065ba:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80065be:	2b40      	cmp	r3, #64	; 0x40
 80065c0:	d005      	beq.n	80065ce <USBD_StdDevReq+0x26>
 80065c2:	2b40      	cmp	r3, #64	; 0x40
 80065c4:	d84f      	bhi.n	8006666 <USBD_StdDevReq+0xbe>
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d009      	beq.n	80065de <USBD_StdDevReq+0x36>
 80065ca:	2b20      	cmp	r3, #32
 80065cc:	d14b      	bne.n	8006666 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80065d4:	689b      	ldr	r3, [r3, #8]
 80065d6:	6839      	ldr	r1, [r7, #0]
 80065d8:	6878      	ldr	r0, [r7, #4]
 80065da:	4798      	blx	r3
      break;
 80065dc:	e048      	b.n	8006670 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80065de:	683b      	ldr	r3, [r7, #0]
 80065e0:	785b      	ldrb	r3, [r3, #1]
 80065e2:	2b09      	cmp	r3, #9
 80065e4:	d839      	bhi.n	800665a <USBD_StdDevReq+0xb2>
 80065e6:	a201      	add	r2, pc, #4	; (adr r2, 80065ec <USBD_StdDevReq+0x44>)
 80065e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065ec:	0800663d 	.word	0x0800663d
 80065f0:	08006651 	.word	0x08006651
 80065f4:	0800665b 	.word	0x0800665b
 80065f8:	08006647 	.word	0x08006647
 80065fc:	0800665b 	.word	0x0800665b
 8006600:	0800661f 	.word	0x0800661f
 8006604:	08006615 	.word	0x08006615
 8006608:	0800665b 	.word	0x0800665b
 800660c:	08006633 	.word	0x08006633
 8006610:	08006629 	.word	0x08006629
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006614:	6839      	ldr	r1, [r7, #0]
 8006616:	6878      	ldr	r0, [r7, #4]
 8006618:	f000 f9dc 	bl	80069d4 <USBD_GetDescriptor>
          break;
 800661c:	e022      	b.n	8006664 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800661e:	6839      	ldr	r1, [r7, #0]
 8006620:	6878      	ldr	r0, [r7, #4]
 8006622:	f000 fb3f 	bl	8006ca4 <USBD_SetAddress>
          break;
 8006626:	e01d      	b.n	8006664 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8006628:	6839      	ldr	r1, [r7, #0]
 800662a:	6878      	ldr	r0, [r7, #4]
 800662c:	f000 fb7e 	bl	8006d2c <USBD_SetConfig>
          break;
 8006630:	e018      	b.n	8006664 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006632:	6839      	ldr	r1, [r7, #0]
 8006634:	6878      	ldr	r0, [r7, #4]
 8006636:	f000 fc07 	bl	8006e48 <USBD_GetConfig>
          break;
 800663a:	e013      	b.n	8006664 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800663c:	6839      	ldr	r1, [r7, #0]
 800663e:	6878      	ldr	r0, [r7, #4]
 8006640:	f000 fc37 	bl	8006eb2 <USBD_GetStatus>
          break;
 8006644:	e00e      	b.n	8006664 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006646:	6839      	ldr	r1, [r7, #0]
 8006648:	6878      	ldr	r0, [r7, #4]
 800664a:	f000 fc65 	bl	8006f18 <USBD_SetFeature>
          break;
 800664e:	e009      	b.n	8006664 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006650:	6839      	ldr	r1, [r7, #0]
 8006652:	6878      	ldr	r0, [r7, #4]
 8006654:	f000 fc74 	bl	8006f40 <USBD_ClrFeature>
          break;
 8006658:	e004      	b.n	8006664 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800665a:	6839      	ldr	r1, [r7, #0]
 800665c:	6878      	ldr	r0, [r7, #4]
 800665e:	f000 fccc 	bl	8006ffa <USBD_CtlError>
          break;
 8006662:	bf00      	nop
      }
      break;
 8006664:	e004      	b.n	8006670 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8006666:	6839      	ldr	r1, [r7, #0]
 8006668:	6878      	ldr	r0, [r7, #4]
 800666a:	f000 fcc6 	bl	8006ffa <USBD_CtlError>
      break;
 800666e:	bf00      	nop
  }

  return ret;
 8006670:	7bfb      	ldrb	r3, [r7, #15]
}
 8006672:	4618      	mov	r0, r3
 8006674:	3710      	adds	r7, #16
 8006676:	46bd      	mov	sp, r7
 8006678:	bd80      	pop	{r7, pc}
 800667a:	bf00      	nop

0800667c <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800667c:	b580      	push	{r7, lr}
 800667e:	b084      	sub	sp, #16
 8006680:	af00      	add	r7, sp, #0
 8006682:	6078      	str	r0, [r7, #4]
 8006684:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006686:	2300      	movs	r3, #0
 8006688:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800668a:	683b      	ldr	r3, [r7, #0]
 800668c:	781b      	ldrb	r3, [r3, #0]
 800668e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006692:	2b40      	cmp	r3, #64	; 0x40
 8006694:	d005      	beq.n	80066a2 <USBD_StdItfReq+0x26>
 8006696:	2b40      	cmp	r3, #64	; 0x40
 8006698:	d82e      	bhi.n	80066f8 <USBD_StdItfReq+0x7c>
 800669a:	2b00      	cmp	r3, #0
 800669c:	d001      	beq.n	80066a2 <USBD_StdItfReq+0x26>
 800669e:	2b20      	cmp	r3, #32
 80066a0:	d12a      	bne.n	80066f8 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80066a8:	3b01      	subs	r3, #1
 80066aa:	2b02      	cmp	r3, #2
 80066ac:	d81d      	bhi.n	80066ea <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80066ae:	683b      	ldr	r3, [r7, #0]
 80066b0:	889b      	ldrh	r3, [r3, #4]
 80066b2:	b2db      	uxtb	r3, r3
 80066b4:	2b01      	cmp	r3, #1
 80066b6:	d813      	bhi.n	80066e0 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80066be:	689b      	ldr	r3, [r3, #8]
 80066c0:	6839      	ldr	r1, [r7, #0]
 80066c2:	6878      	ldr	r0, [r7, #4]
 80066c4:	4798      	blx	r3
 80066c6:	4603      	mov	r3, r0
 80066c8:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80066ca:	683b      	ldr	r3, [r7, #0]
 80066cc:	88db      	ldrh	r3, [r3, #6]
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d110      	bne.n	80066f4 <USBD_StdItfReq+0x78>
 80066d2:	7bfb      	ldrb	r3, [r7, #15]
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d10d      	bne.n	80066f4 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 80066d8:	6878      	ldr	r0, [r7, #4]
 80066da:	f000 fd38 	bl	800714e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80066de:	e009      	b.n	80066f4 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 80066e0:	6839      	ldr	r1, [r7, #0]
 80066e2:	6878      	ldr	r0, [r7, #4]
 80066e4:	f000 fc89 	bl	8006ffa <USBD_CtlError>
          break;
 80066e8:	e004      	b.n	80066f4 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 80066ea:	6839      	ldr	r1, [r7, #0]
 80066ec:	6878      	ldr	r0, [r7, #4]
 80066ee:	f000 fc84 	bl	8006ffa <USBD_CtlError>
          break;
 80066f2:	e000      	b.n	80066f6 <USBD_StdItfReq+0x7a>
          break;
 80066f4:	bf00      	nop
      }
      break;
 80066f6:	e004      	b.n	8006702 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 80066f8:	6839      	ldr	r1, [r7, #0]
 80066fa:	6878      	ldr	r0, [r7, #4]
 80066fc:	f000 fc7d 	bl	8006ffa <USBD_CtlError>
      break;
 8006700:	bf00      	nop
  }

  return USBD_OK;
 8006702:	2300      	movs	r3, #0
}
 8006704:	4618      	mov	r0, r3
 8006706:	3710      	adds	r7, #16
 8006708:	46bd      	mov	sp, r7
 800670a:	bd80      	pop	{r7, pc}

0800670c <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800670c:	b580      	push	{r7, lr}
 800670e:	b084      	sub	sp, #16
 8006710:	af00      	add	r7, sp, #0
 8006712:	6078      	str	r0, [r7, #4]
 8006714:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8006716:	2300      	movs	r3, #0
 8006718:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800671a:	683b      	ldr	r3, [r7, #0]
 800671c:	889b      	ldrh	r3, [r3, #4]
 800671e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006720:	683b      	ldr	r3, [r7, #0]
 8006722:	781b      	ldrb	r3, [r3, #0]
 8006724:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006728:	2b40      	cmp	r3, #64	; 0x40
 800672a:	d007      	beq.n	800673c <USBD_StdEPReq+0x30>
 800672c:	2b40      	cmp	r3, #64	; 0x40
 800672e:	f200 8146 	bhi.w	80069be <USBD_StdEPReq+0x2b2>
 8006732:	2b00      	cmp	r3, #0
 8006734:	d00a      	beq.n	800674c <USBD_StdEPReq+0x40>
 8006736:	2b20      	cmp	r3, #32
 8006738:	f040 8141 	bne.w	80069be <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006742:	689b      	ldr	r3, [r3, #8]
 8006744:	6839      	ldr	r1, [r7, #0]
 8006746:	6878      	ldr	r0, [r7, #4]
 8006748:	4798      	blx	r3
      break;
 800674a:	e13d      	b.n	80069c8 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800674c:	683b      	ldr	r3, [r7, #0]
 800674e:	781b      	ldrb	r3, [r3, #0]
 8006750:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006754:	2b20      	cmp	r3, #32
 8006756:	d10a      	bne.n	800676e <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800675e:	689b      	ldr	r3, [r3, #8]
 8006760:	6839      	ldr	r1, [r7, #0]
 8006762:	6878      	ldr	r0, [r7, #4]
 8006764:	4798      	blx	r3
 8006766:	4603      	mov	r3, r0
 8006768:	73fb      	strb	r3, [r7, #15]

        return ret;
 800676a:	7bfb      	ldrb	r3, [r7, #15]
 800676c:	e12d      	b.n	80069ca <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 800676e:	683b      	ldr	r3, [r7, #0]
 8006770:	785b      	ldrb	r3, [r3, #1]
 8006772:	2b03      	cmp	r3, #3
 8006774:	d007      	beq.n	8006786 <USBD_StdEPReq+0x7a>
 8006776:	2b03      	cmp	r3, #3
 8006778:	f300 811b 	bgt.w	80069b2 <USBD_StdEPReq+0x2a6>
 800677c:	2b00      	cmp	r3, #0
 800677e:	d072      	beq.n	8006866 <USBD_StdEPReq+0x15a>
 8006780:	2b01      	cmp	r3, #1
 8006782:	d03a      	beq.n	80067fa <USBD_StdEPReq+0xee>
 8006784:	e115      	b.n	80069b2 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800678c:	2b02      	cmp	r3, #2
 800678e:	d002      	beq.n	8006796 <USBD_StdEPReq+0x8a>
 8006790:	2b03      	cmp	r3, #3
 8006792:	d015      	beq.n	80067c0 <USBD_StdEPReq+0xb4>
 8006794:	e02b      	b.n	80067ee <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006796:	7bbb      	ldrb	r3, [r7, #14]
 8006798:	2b00      	cmp	r3, #0
 800679a:	d00c      	beq.n	80067b6 <USBD_StdEPReq+0xaa>
 800679c:	7bbb      	ldrb	r3, [r7, #14]
 800679e:	2b80      	cmp	r3, #128	; 0x80
 80067a0:	d009      	beq.n	80067b6 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80067a2:	7bbb      	ldrb	r3, [r7, #14]
 80067a4:	4619      	mov	r1, r3
 80067a6:	6878      	ldr	r0, [r7, #4]
 80067a8:	f001 fcb1 	bl	800810e <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80067ac:	2180      	movs	r1, #128	; 0x80
 80067ae:	6878      	ldr	r0, [r7, #4]
 80067b0:	f001 fcad 	bl	800810e <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80067b4:	e020      	b.n	80067f8 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 80067b6:	6839      	ldr	r1, [r7, #0]
 80067b8:	6878      	ldr	r0, [r7, #4]
 80067ba:	f000 fc1e 	bl	8006ffa <USBD_CtlError>
              break;
 80067be:	e01b      	b.n	80067f8 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80067c0:	683b      	ldr	r3, [r7, #0]
 80067c2:	885b      	ldrh	r3, [r3, #2]
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d10e      	bne.n	80067e6 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 80067c8:	7bbb      	ldrb	r3, [r7, #14]
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d00b      	beq.n	80067e6 <USBD_StdEPReq+0xda>
 80067ce:	7bbb      	ldrb	r3, [r7, #14]
 80067d0:	2b80      	cmp	r3, #128	; 0x80
 80067d2:	d008      	beq.n	80067e6 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80067d4:	683b      	ldr	r3, [r7, #0]
 80067d6:	88db      	ldrh	r3, [r3, #6]
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d104      	bne.n	80067e6 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 80067dc:	7bbb      	ldrb	r3, [r7, #14]
 80067de:	4619      	mov	r1, r3
 80067e0:	6878      	ldr	r0, [r7, #4]
 80067e2:	f001 fc94 	bl	800810e <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 80067e6:	6878      	ldr	r0, [r7, #4]
 80067e8:	f000 fcb1 	bl	800714e <USBD_CtlSendStatus>

              break;
 80067ec:	e004      	b.n	80067f8 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 80067ee:	6839      	ldr	r1, [r7, #0]
 80067f0:	6878      	ldr	r0, [r7, #4]
 80067f2:	f000 fc02 	bl	8006ffa <USBD_CtlError>
              break;
 80067f6:	bf00      	nop
          }
          break;
 80067f8:	e0e0      	b.n	80069bc <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006800:	2b02      	cmp	r3, #2
 8006802:	d002      	beq.n	800680a <USBD_StdEPReq+0xfe>
 8006804:	2b03      	cmp	r3, #3
 8006806:	d015      	beq.n	8006834 <USBD_StdEPReq+0x128>
 8006808:	e026      	b.n	8006858 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800680a:	7bbb      	ldrb	r3, [r7, #14]
 800680c:	2b00      	cmp	r3, #0
 800680e:	d00c      	beq.n	800682a <USBD_StdEPReq+0x11e>
 8006810:	7bbb      	ldrb	r3, [r7, #14]
 8006812:	2b80      	cmp	r3, #128	; 0x80
 8006814:	d009      	beq.n	800682a <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8006816:	7bbb      	ldrb	r3, [r7, #14]
 8006818:	4619      	mov	r1, r3
 800681a:	6878      	ldr	r0, [r7, #4]
 800681c:	f001 fc77 	bl	800810e <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8006820:	2180      	movs	r1, #128	; 0x80
 8006822:	6878      	ldr	r0, [r7, #4]
 8006824:	f001 fc73 	bl	800810e <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006828:	e01c      	b.n	8006864 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800682a:	6839      	ldr	r1, [r7, #0]
 800682c:	6878      	ldr	r0, [r7, #4]
 800682e:	f000 fbe4 	bl	8006ffa <USBD_CtlError>
              break;
 8006832:	e017      	b.n	8006864 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006834:	683b      	ldr	r3, [r7, #0]
 8006836:	885b      	ldrh	r3, [r3, #2]
 8006838:	2b00      	cmp	r3, #0
 800683a:	d112      	bne.n	8006862 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800683c:	7bbb      	ldrb	r3, [r7, #14]
 800683e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006842:	2b00      	cmp	r3, #0
 8006844:	d004      	beq.n	8006850 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8006846:	7bbb      	ldrb	r3, [r7, #14]
 8006848:	4619      	mov	r1, r3
 800684a:	6878      	ldr	r0, [r7, #4]
 800684c:	f001 fc7e 	bl	800814c <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8006850:	6878      	ldr	r0, [r7, #4]
 8006852:	f000 fc7c 	bl	800714e <USBD_CtlSendStatus>
              }
              break;
 8006856:	e004      	b.n	8006862 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8006858:	6839      	ldr	r1, [r7, #0]
 800685a:	6878      	ldr	r0, [r7, #4]
 800685c:	f000 fbcd 	bl	8006ffa <USBD_CtlError>
              break;
 8006860:	e000      	b.n	8006864 <USBD_StdEPReq+0x158>
              break;
 8006862:	bf00      	nop
          }
          break;
 8006864:	e0aa      	b.n	80069bc <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800686c:	2b02      	cmp	r3, #2
 800686e:	d002      	beq.n	8006876 <USBD_StdEPReq+0x16a>
 8006870:	2b03      	cmp	r3, #3
 8006872:	d032      	beq.n	80068da <USBD_StdEPReq+0x1ce>
 8006874:	e097      	b.n	80069a6 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006876:	7bbb      	ldrb	r3, [r7, #14]
 8006878:	2b00      	cmp	r3, #0
 800687a:	d007      	beq.n	800688c <USBD_StdEPReq+0x180>
 800687c:	7bbb      	ldrb	r3, [r7, #14]
 800687e:	2b80      	cmp	r3, #128	; 0x80
 8006880:	d004      	beq.n	800688c <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8006882:	6839      	ldr	r1, [r7, #0]
 8006884:	6878      	ldr	r0, [r7, #4]
 8006886:	f000 fbb8 	bl	8006ffa <USBD_CtlError>
                break;
 800688a:	e091      	b.n	80069b0 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800688c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006890:	2b00      	cmp	r3, #0
 8006892:	da0b      	bge.n	80068ac <USBD_StdEPReq+0x1a0>
 8006894:	7bbb      	ldrb	r3, [r7, #14]
 8006896:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800689a:	4613      	mov	r3, r2
 800689c:	009b      	lsls	r3, r3, #2
 800689e:	4413      	add	r3, r2
 80068a0:	009b      	lsls	r3, r3, #2
 80068a2:	3310      	adds	r3, #16
 80068a4:	687a      	ldr	r2, [r7, #4]
 80068a6:	4413      	add	r3, r2
 80068a8:	3304      	adds	r3, #4
 80068aa:	e00b      	b.n	80068c4 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80068ac:	7bbb      	ldrb	r3, [r7, #14]
 80068ae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80068b2:	4613      	mov	r3, r2
 80068b4:	009b      	lsls	r3, r3, #2
 80068b6:	4413      	add	r3, r2
 80068b8:	009b      	lsls	r3, r3, #2
 80068ba:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80068be:	687a      	ldr	r2, [r7, #4]
 80068c0:	4413      	add	r3, r2
 80068c2:	3304      	adds	r3, #4
 80068c4:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80068c6:	68bb      	ldr	r3, [r7, #8]
 80068c8:	2200      	movs	r2, #0
 80068ca:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80068cc:	68bb      	ldr	r3, [r7, #8]
 80068ce:	2202      	movs	r2, #2
 80068d0:	4619      	mov	r1, r3
 80068d2:	6878      	ldr	r0, [r7, #4]
 80068d4:	f000 fbfb 	bl	80070ce <USBD_CtlSendData>
              break;
 80068d8:	e06a      	b.n	80069b0 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80068da:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80068de:	2b00      	cmp	r3, #0
 80068e0:	da11      	bge.n	8006906 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80068e2:	7bbb      	ldrb	r3, [r7, #14]
 80068e4:	f003 020f 	and.w	r2, r3, #15
 80068e8:	6879      	ldr	r1, [r7, #4]
 80068ea:	4613      	mov	r3, r2
 80068ec:	009b      	lsls	r3, r3, #2
 80068ee:	4413      	add	r3, r2
 80068f0:	009b      	lsls	r3, r3, #2
 80068f2:	440b      	add	r3, r1
 80068f4:	3318      	adds	r3, #24
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d117      	bne.n	800692c <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 80068fc:	6839      	ldr	r1, [r7, #0]
 80068fe:	6878      	ldr	r0, [r7, #4]
 8006900:	f000 fb7b 	bl	8006ffa <USBD_CtlError>
                  break;
 8006904:	e054      	b.n	80069b0 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006906:	7bbb      	ldrb	r3, [r7, #14]
 8006908:	f003 020f 	and.w	r2, r3, #15
 800690c:	6879      	ldr	r1, [r7, #4]
 800690e:	4613      	mov	r3, r2
 8006910:	009b      	lsls	r3, r3, #2
 8006912:	4413      	add	r3, r2
 8006914:	009b      	lsls	r3, r3, #2
 8006916:	440b      	add	r3, r1
 8006918:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	2b00      	cmp	r3, #0
 8006920:	d104      	bne.n	800692c <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8006922:	6839      	ldr	r1, [r7, #0]
 8006924:	6878      	ldr	r0, [r7, #4]
 8006926:	f000 fb68 	bl	8006ffa <USBD_CtlError>
                  break;
 800692a:	e041      	b.n	80069b0 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800692c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006930:	2b00      	cmp	r3, #0
 8006932:	da0b      	bge.n	800694c <USBD_StdEPReq+0x240>
 8006934:	7bbb      	ldrb	r3, [r7, #14]
 8006936:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800693a:	4613      	mov	r3, r2
 800693c:	009b      	lsls	r3, r3, #2
 800693e:	4413      	add	r3, r2
 8006940:	009b      	lsls	r3, r3, #2
 8006942:	3310      	adds	r3, #16
 8006944:	687a      	ldr	r2, [r7, #4]
 8006946:	4413      	add	r3, r2
 8006948:	3304      	adds	r3, #4
 800694a:	e00b      	b.n	8006964 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800694c:	7bbb      	ldrb	r3, [r7, #14]
 800694e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006952:	4613      	mov	r3, r2
 8006954:	009b      	lsls	r3, r3, #2
 8006956:	4413      	add	r3, r2
 8006958:	009b      	lsls	r3, r3, #2
 800695a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800695e:	687a      	ldr	r2, [r7, #4]
 8006960:	4413      	add	r3, r2
 8006962:	3304      	adds	r3, #4
 8006964:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006966:	7bbb      	ldrb	r3, [r7, #14]
 8006968:	2b00      	cmp	r3, #0
 800696a:	d002      	beq.n	8006972 <USBD_StdEPReq+0x266>
 800696c:	7bbb      	ldrb	r3, [r7, #14]
 800696e:	2b80      	cmp	r3, #128	; 0x80
 8006970:	d103      	bne.n	800697a <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8006972:	68bb      	ldr	r3, [r7, #8]
 8006974:	2200      	movs	r2, #0
 8006976:	601a      	str	r2, [r3, #0]
 8006978:	e00e      	b.n	8006998 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800697a:	7bbb      	ldrb	r3, [r7, #14]
 800697c:	4619      	mov	r1, r3
 800697e:	6878      	ldr	r0, [r7, #4]
 8006980:	f001 fc03 	bl	800818a <USBD_LL_IsStallEP>
 8006984:	4603      	mov	r3, r0
 8006986:	2b00      	cmp	r3, #0
 8006988:	d003      	beq.n	8006992 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800698a:	68bb      	ldr	r3, [r7, #8]
 800698c:	2201      	movs	r2, #1
 800698e:	601a      	str	r2, [r3, #0]
 8006990:	e002      	b.n	8006998 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8006992:	68bb      	ldr	r3, [r7, #8]
 8006994:	2200      	movs	r2, #0
 8006996:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8006998:	68bb      	ldr	r3, [r7, #8]
 800699a:	2202      	movs	r2, #2
 800699c:	4619      	mov	r1, r3
 800699e:	6878      	ldr	r0, [r7, #4]
 80069a0:	f000 fb95 	bl	80070ce <USBD_CtlSendData>
              break;
 80069a4:	e004      	b.n	80069b0 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 80069a6:	6839      	ldr	r1, [r7, #0]
 80069a8:	6878      	ldr	r0, [r7, #4]
 80069aa:	f000 fb26 	bl	8006ffa <USBD_CtlError>
              break;
 80069ae:	bf00      	nop
          }
          break;
 80069b0:	e004      	b.n	80069bc <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 80069b2:	6839      	ldr	r1, [r7, #0]
 80069b4:	6878      	ldr	r0, [r7, #4]
 80069b6:	f000 fb20 	bl	8006ffa <USBD_CtlError>
          break;
 80069ba:	bf00      	nop
      }
      break;
 80069bc:	e004      	b.n	80069c8 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 80069be:	6839      	ldr	r1, [r7, #0]
 80069c0:	6878      	ldr	r0, [r7, #4]
 80069c2:	f000 fb1a 	bl	8006ffa <USBD_CtlError>
      break;
 80069c6:	bf00      	nop
  }

  return ret;
 80069c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80069ca:	4618      	mov	r0, r3
 80069cc:	3710      	adds	r7, #16
 80069ce:	46bd      	mov	sp, r7
 80069d0:	bd80      	pop	{r7, pc}
	...

080069d4 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80069d4:	b580      	push	{r7, lr}
 80069d6:	b084      	sub	sp, #16
 80069d8:	af00      	add	r7, sp, #0
 80069da:	6078      	str	r0, [r7, #4]
 80069dc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80069de:	2300      	movs	r3, #0
 80069e0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80069e2:	2300      	movs	r3, #0
 80069e4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80069e6:	2300      	movs	r3, #0
 80069e8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80069ea:	683b      	ldr	r3, [r7, #0]
 80069ec:	885b      	ldrh	r3, [r3, #2]
 80069ee:	0a1b      	lsrs	r3, r3, #8
 80069f0:	b29b      	uxth	r3, r3
 80069f2:	3b01      	subs	r3, #1
 80069f4:	2b06      	cmp	r3, #6
 80069f6:	f200 8128 	bhi.w	8006c4a <USBD_GetDescriptor+0x276>
 80069fa:	a201      	add	r2, pc, #4	; (adr r2, 8006a00 <USBD_GetDescriptor+0x2c>)
 80069fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a00:	08006a1d 	.word	0x08006a1d
 8006a04:	08006a35 	.word	0x08006a35
 8006a08:	08006a75 	.word	0x08006a75
 8006a0c:	08006c4b 	.word	0x08006c4b
 8006a10:	08006c4b 	.word	0x08006c4b
 8006a14:	08006beb 	.word	0x08006beb
 8006a18:	08006c17 	.word	0x08006c17
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	687a      	ldr	r2, [r7, #4]
 8006a26:	7c12      	ldrb	r2, [r2, #16]
 8006a28:	f107 0108 	add.w	r1, r7, #8
 8006a2c:	4610      	mov	r0, r2
 8006a2e:	4798      	blx	r3
 8006a30:	60f8      	str	r0, [r7, #12]
      break;
 8006a32:	e112      	b.n	8006c5a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	7c1b      	ldrb	r3, [r3, #16]
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d10d      	bne.n	8006a58 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a44:	f107 0208 	add.w	r2, r7, #8
 8006a48:	4610      	mov	r0, r2
 8006a4a:	4798      	blx	r3
 8006a4c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	3301      	adds	r3, #1
 8006a52:	2202      	movs	r2, #2
 8006a54:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006a56:	e100      	b.n	8006c5a <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a60:	f107 0208 	add.w	r2, r7, #8
 8006a64:	4610      	mov	r0, r2
 8006a66:	4798      	blx	r3
 8006a68:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	3301      	adds	r3, #1
 8006a6e:	2202      	movs	r2, #2
 8006a70:	701a      	strb	r2, [r3, #0]
      break;
 8006a72:	e0f2      	b.n	8006c5a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006a74:	683b      	ldr	r3, [r7, #0]
 8006a76:	885b      	ldrh	r3, [r3, #2]
 8006a78:	b2db      	uxtb	r3, r3
 8006a7a:	2b05      	cmp	r3, #5
 8006a7c:	f200 80ac 	bhi.w	8006bd8 <USBD_GetDescriptor+0x204>
 8006a80:	a201      	add	r2, pc, #4	; (adr r2, 8006a88 <USBD_GetDescriptor+0xb4>)
 8006a82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a86:	bf00      	nop
 8006a88:	08006aa1 	.word	0x08006aa1
 8006a8c:	08006ad5 	.word	0x08006ad5
 8006a90:	08006b09 	.word	0x08006b09
 8006a94:	08006b3d 	.word	0x08006b3d
 8006a98:	08006b71 	.word	0x08006b71
 8006a9c:	08006ba5 	.word	0x08006ba5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006aa6:	685b      	ldr	r3, [r3, #4]
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d00b      	beq.n	8006ac4 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006ab2:	685b      	ldr	r3, [r3, #4]
 8006ab4:	687a      	ldr	r2, [r7, #4]
 8006ab6:	7c12      	ldrb	r2, [r2, #16]
 8006ab8:	f107 0108 	add.w	r1, r7, #8
 8006abc:	4610      	mov	r0, r2
 8006abe:	4798      	blx	r3
 8006ac0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006ac2:	e091      	b.n	8006be8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006ac4:	6839      	ldr	r1, [r7, #0]
 8006ac6:	6878      	ldr	r0, [r7, #4]
 8006ac8:	f000 fa97 	bl	8006ffa <USBD_CtlError>
            err++;
 8006acc:	7afb      	ldrb	r3, [r7, #11]
 8006ace:	3301      	adds	r3, #1
 8006ad0:	72fb      	strb	r3, [r7, #11]
          break;
 8006ad2:	e089      	b.n	8006be8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006ada:	689b      	ldr	r3, [r3, #8]
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d00b      	beq.n	8006af8 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006ae6:	689b      	ldr	r3, [r3, #8]
 8006ae8:	687a      	ldr	r2, [r7, #4]
 8006aea:	7c12      	ldrb	r2, [r2, #16]
 8006aec:	f107 0108 	add.w	r1, r7, #8
 8006af0:	4610      	mov	r0, r2
 8006af2:	4798      	blx	r3
 8006af4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006af6:	e077      	b.n	8006be8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006af8:	6839      	ldr	r1, [r7, #0]
 8006afa:	6878      	ldr	r0, [r7, #4]
 8006afc:	f000 fa7d 	bl	8006ffa <USBD_CtlError>
            err++;
 8006b00:	7afb      	ldrb	r3, [r7, #11]
 8006b02:	3301      	adds	r3, #1
 8006b04:	72fb      	strb	r3, [r7, #11]
          break;
 8006b06:	e06f      	b.n	8006be8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006b0e:	68db      	ldr	r3, [r3, #12]
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d00b      	beq.n	8006b2c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006b1a:	68db      	ldr	r3, [r3, #12]
 8006b1c:	687a      	ldr	r2, [r7, #4]
 8006b1e:	7c12      	ldrb	r2, [r2, #16]
 8006b20:	f107 0108 	add.w	r1, r7, #8
 8006b24:	4610      	mov	r0, r2
 8006b26:	4798      	blx	r3
 8006b28:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006b2a:	e05d      	b.n	8006be8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006b2c:	6839      	ldr	r1, [r7, #0]
 8006b2e:	6878      	ldr	r0, [r7, #4]
 8006b30:	f000 fa63 	bl	8006ffa <USBD_CtlError>
            err++;
 8006b34:	7afb      	ldrb	r3, [r7, #11]
 8006b36:	3301      	adds	r3, #1
 8006b38:	72fb      	strb	r3, [r7, #11]
          break;
 8006b3a:	e055      	b.n	8006be8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006b42:	691b      	ldr	r3, [r3, #16]
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d00b      	beq.n	8006b60 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006b4e:	691b      	ldr	r3, [r3, #16]
 8006b50:	687a      	ldr	r2, [r7, #4]
 8006b52:	7c12      	ldrb	r2, [r2, #16]
 8006b54:	f107 0108 	add.w	r1, r7, #8
 8006b58:	4610      	mov	r0, r2
 8006b5a:	4798      	blx	r3
 8006b5c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006b5e:	e043      	b.n	8006be8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006b60:	6839      	ldr	r1, [r7, #0]
 8006b62:	6878      	ldr	r0, [r7, #4]
 8006b64:	f000 fa49 	bl	8006ffa <USBD_CtlError>
            err++;
 8006b68:	7afb      	ldrb	r3, [r7, #11]
 8006b6a:	3301      	adds	r3, #1
 8006b6c:	72fb      	strb	r3, [r7, #11]
          break;
 8006b6e:	e03b      	b.n	8006be8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006b76:	695b      	ldr	r3, [r3, #20]
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d00b      	beq.n	8006b94 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006b82:	695b      	ldr	r3, [r3, #20]
 8006b84:	687a      	ldr	r2, [r7, #4]
 8006b86:	7c12      	ldrb	r2, [r2, #16]
 8006b88:	f107 0108 	add.w	r1, r7, #8
 8006b8c:	4610      	mov	r0, r2
 8006b8e:	4798      	blx	r3
 8006b90:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006b92:	e029      	b.n	8006be8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006b94:	6839      	ldr	r1, [r7, #0]
 8006b96:	6878      	ldr	r0, [r7, #4]
 8006b98:	f000 fa2f 	bl	8006ffa <USBD_CtlError>
            err++;
 8006b9c:	7afb      	ldrb	r3, [r7, #11]
 8006b9e:	3301      	adds	r3, #1
 8006ba0:	72fb      	strb	r3, [r7, #11]
          break;
 8006ba2:	e021      	b.n	8006be8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006baa:	699b      	ldr	r3, [r3, #24]
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d00b      	beq.n	8006bc8 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006bb6:	699b      	ldr	r3, [r3, #24]
 8006bb8:	687a      	ldr	r2, [r7, #4]
 8006bba:	7c12      	ldrb	r2, [r2, #16]
 8006bbc:	f107 0108 	add.w	r1, r7, #8
 8006bc0:	4610      	mov	r0, r2
 8006bc2:	4798      	blx	r3
 8006bc4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006bc6:	e00f      	b.n	8006be8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006bc8:	6839      	ldr	r1, [r7, #0]
 8006bca:	6878      	ldr	r0, [r7, #4]
 8006bcc:	f000 fa15 	bl	8006ffa <USBD_CtlError>
            err++;
 8006bd0:	7afb      	ldrb	r3, [r7, #11]
 8006bd2:	3301      	adds	r3, #1
 8006bd4:	72fb      	strb	r3, [r7, #11]
          break;
 8006bd6:	e007      	b.n	8006be8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8006bd8:	6839      	ldr	r1, [r7, #0]
 8006bda:	6878      	ldr	r0, [r7, #4]
 8006bdc:	f000 fa0d 	bl	8006ffa <USBD_CtlError>
          err++;
 8006be0:	7afb      	ldrb	r3, [r7, #11]
 8006be2:	3301      	adds	r3, #1
 8006be4:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8006be6:	e038      	b.n	8006c5a <USBD_GetDescriptor+0x286>
 8006be8:	e037      	b.n	8006c5a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	7c1b      	ldrb	r3, [r3, #16]
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d109      	bne.n	8006c06 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006bf8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006bfa:	f107 0208 	add.w	r2, r7, #8
 8006bfe:	4610      	mov	r0, r2
 8006c00:	4798      	blx	r3
 8006c02:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006c04:	e029      	b.n	8006c5a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006c06:	6839      	ldr	r1, [r7, #0]
 8006c08:	6878      	ldr	r0, [r7, #4]
 8006c0a:	f000 f9f6 	bl	8006ffa <USBD_CtlError>
        err++;
 8006c0e:	7afb      	ldrb	r3, [r7, #11]
 8006c10:	3301      	adds	r3, #1
 8006c12:	72fb      	strb	r3, [r7, #11]
      break;
 8006c14:	e021      	b.n	8006c5a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	7c1b      	ldrb	r3, [r3, #16]
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d10d      	bne.n	8006c3a <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c26:	f107 0208 	add.w	r2, r7, #8
 8006c2a:	4610      	mov	r0, r2
 8006c2c:	4798      	blx	r3
 8006c2e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	3301      	adds	r3, #1
 8006c34:	2207      	movs	r2, #7
 8006c36:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006c38:	e00f      	b.n	8006c5a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006c3a:	6839      	ldr	r1, [r7, #0]
 8006c3c:	6878      	ldr	r0, [r7, #4]
 8006c3e:	f000 f9dc 	bl	8006ffa <USBD_CtlError>
        err++;
 8006c42:	7afb      	ldrb	r3, [r7, #11]
 8006c44:	3301      	adds	r3, #1
 8006c46:	72fb      	strb	r3, [r7, #11]
      break;
 8006c48:	e007      	b.n	8006c5a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8006c4a:	6839      	ldr	r1, [r7, #0]
 8006c4c:	6878      	ldr	r0, [r7, #4]
 8006c4e:	f000 f9d4 	bl	8006ffa <USBD_CtlError>
      err++;
 8006c52:	7afb      	ldrb	r3, [r7, #11]
 8006c54:	3301      	adds	r3, #1
 8006c56:	72fb      	strb	r3, [r7, #11]
      break;
 8006c58:	bf00      	nop
  }

  if (err != 0U)
 8006c5a:	7afb      	ldrb	r3, [r7, #11]
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d11c      	bne.n	8006c9a <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8006c60:	893b      	ldrh	r3, [r7, #8]
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d011      	beq.n	8006c8a <USBD_GetDescriptor+0x2b6>
 8006c66:	683b      	ldr	r3, [r7, #0]
 8006c68:	88db      	ldrh	r3, [r3, #6]
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d00d      	beq.n	8006c8a <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8006c6e:	683b      	ldr	r3, [r7, #0]
 8006c70:	88da      	ldrh	r2, [r3, #6]
 8006c72:	893b      	ldrh	r3, [r7, #8]
 8006c74:	4293      	cmp	r3, r2
 8006c76:	bf28      	it	cs
 8006c78:	4613      	movcs	r3, r2
 8006c7a:	b29b      	uxth	r3, r3
 8006c7c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006c7e:	893b      	ldrh	r3, [r7, #8]
 8006c80:	461a      	mov	r2, r3
 8006c82:	68f9      	ldr	r1, [r7, #12]
 8006c84:	6878      	ldr	r0, [r7, #4]
 8006c86:	f000 fa22 	bl	80070ce <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8006c8a:	683b      	ldr	r3, [r7, #0]
 8006c8c:	88db      	ldrh	r3, [r3, #6]
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d104      	bne.n	8006c9c <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8006c92:	6878      	ldr	r0, [r7, #4]
 8006c94:	f000 fa5b 	bl	800714e <USBD_CtlSendStatus>
 8006c98:	e000      	b.n	8006c9c <USBD_GetDescriptor+0x2c8>
    return;
 8006c9a:	bf00      	nop
    }
  }
}
 8006c9c:	3710      	adds	r7, #16
 8006c9e:	46bd      	mov	sp, r7
 8006ca0:	bd80      	pop	{r7, pc}
 8006ca2:	bf00      	nop

08006ca4 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8006ca4:	b580      	push	{r7, lr}
 8006ca6:	b084      	sub	sp, #16
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	6078      	str	r0, [r7, #4]
 8006cac:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006cae:	683b      	ldr	r3, [r7, #0]
 8006cb0:	889b      	ldrh	r3, [r3, #4]
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d130      	bne.n	8006d18 <USBD_SetAddress+0x74>
 8006cb6:	683b      	ldr	r3, [r7, #0]
 8006cb8:	88db      	ldrh	r3, [r3, #6]
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d12c      	bne.n	8006d18 <USBD_SetAddress+0x74>
 8006cbe:	683b      	ldr	r3, [r7, #0]
 8006cc0:	885b      	ldrh	r3, [r3, #2]
 8006cc2:	2b7f      	cmp	r3, #127	; 0x7f
 8006cc4:	d828      	bhi.n	8006d18 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006cc6:	683b      	ldr	r3, [r7, #0]
 8006cc8:	885b      	ldrh	r3, [r3, #2]
 8006cca:	b2db      	uxtb	r3, r3
 8006ccc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006cd0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006cd8:	2b03      	cmp	r3, #3
 8006cda:	d104      	bne.n	8006ce6 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8006cdc:	6839      	ldr	r1, [r7, #0]
 8006cde:	6878      	ldr	r0, [r7, #4]
 8006ce0:	f000 f98b 	bl	8006ffa <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006ce4:	e01d      	b.n	8006d22 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	7bfa      	ldrb	r2, [r7, #15]
 8006cea:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006cee:	7bfb      	ldrb	r3, [r7, #15]
 8006cf0:	4619      	mov	r1, r3
 8006cf2:	6878      	ldr	r0, [r7, #4]
 8006cf4:	f001 fa75 	bl	80081e2 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8006cf8:	6878      	ldr	r0, [r7, #4]
 8006cfa:	f000 fa28 	bl	800714e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006cfe:	7bfb      	ldrb	r3, [r7, #15]
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d004      	beq.n	8006d0e <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	2202      	movs	r2, #2
 8006d08:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006d0c:	e009      	b.n	8006d22 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	2201      	movs	r2, #1
 8006d12:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006d16:	e004      	b.n	8006d22 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006d18:	6839      	ldr	r1, [r7, #0]
 8006d1a:	6878      	ldr	r0, [r7, #4]
 8006d1c:	f000 f96d 	bl	8006ffa <USBD_CtlError>
  }
}
 8006d20:	bf00      	nop
 8006d22:	bf00      	nop
 8006d24:	3710      	adds	r7, #16
 8006d26:	46bd      	mov	sp, r7
 8006d28:	bd80      	pop	{r7, pc}
	...

08006d2c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006d2c:	b580      	push	{r7, lr}
 8006d2e:	b082      	sub	sp, #8
 8006d30:	af00      	add	r7, sp, #0
 8006d32:	6078      	str	r0, [r7, #4]
 8006d34:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006d36:	683b      	ldr	r3, [r7, #0]
 8006d38:	885b      	ldrh	r3, [r3, #2]
 8006d3a:	b2da      	uxtb	r2, r3
 8006d3c:	4b41      	ldr	r3, [pc, #260]	; (8006e44 <USBD_SetConfig+0x118>)
 8006d3e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006d40:	4b40      	ldr	r3, [pc, #256]	; (8006e44 <USBD_SetConfig+0x118>)
 8006d42:	781b      	ldrb	r3, [r3, #0]
 8006d44:	2b01      	cmp	r3, #1
 8006d46:	d904      	bls.n	8006d52 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8006d48:	6839      	ldr	r1, [r7, #0]
 8006d4a:	6878      	ldr	r0, [r7, #4]
 8006d4c:	f000 f955 	bl	8006ffa <USBD_CtlError>
 8006d50:	e075      	b.n	8006e3e <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d58:	2b02      	cmp	r3, #2
 8006d5a:	d002      	beq.n	8006d62 <USBD_SetConfig+0x36>
 8006d5c:	2b03      	cmp	r3, #3
 8006d5e:	d023      	beq.n	8006da8 <USBD_SetConfig+0x7c>
 8006d60:	e062      	b.n	8006e28 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8006d62:	4b38      	ldr	r3, [pc, #224]	; (8006e44 <USBD_SetConfig+0x118>)
 8006d64:	781b      	ldrb	r3, [r3, #0]
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d01a      	beq.n	8006da0 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8006d6a:	4b36      	ldr	r3, [pc, #216]	; (8006e44 <USBD_SetConfig+0x118>)
 8006d6c:	781b      	ldrb	r3, [r3, #0]
 8006d6e:	461a      	mov	r2, r3
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	2203      	movs	r2, #3
 8006d78:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8006d7c:	4b31      	ldr	r3, [pc, #196]	; (8006e44 <USBD_SetConfig+0x118>)
 8006d7e:	781b      	ldrb	r3, [r3, #0]
 8006d80:	4619      	mov	r1, r3
 8006d82:	6878      	ldr	r0, [r7, #4]
 8006d84:	f7ff f9e8 	bl	8006158 <USBD_SetClassConfig>
 8006d88:	4603      	mov	r3, r0
 8006d8a:	2b02      	cmp	r3, #2
 8006d8c:	d104      	bne.n	8006d98 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8006d8e:	6839      	ldr	r1, [r7, #0]
 8006d90:	6878      	ldr	r0, [r7, #4]
 8006d92:	f000 f932 	bl	8006ffa <USBD_CtlError>
            return;
 8006d96:	e052      	b.n	8006e3e <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8006d98:	6878      	ldr	r0, [r7, #4]
 8006d9a:	f000 f9d8 	bl	800714e <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8006d9e:	e04e      	b.n	8006e3e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8006da0:	6878      	ldr	r0, [r7, #4]
 8006da2:	f000 f9d4 	bl	800714e <USBD_CtlSendStatus>
        break;
 8006da6:	e04a      	b.n	8006e3e <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8006da8:	4b26      	ldr	r3, [pc, #152]	; (8006e44 <USBD_SetConfig+0x118>)
 8006daa:	781b      	ldrb	r3, [r3, #0]
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d112      	bne.n	8006dd6 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	2202      	movs	r2, #2
 8006db4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8006db8:	4b22      	ldr	r3, [pc, #136]	; (8006e44 <USBD_SetConfig+0x118>)
 8006dba:	781b      	ldrb	r3, [r3, #0]
 8006dbc:	461a      	mov	r2, r3
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8006dc2:	4b20      	ldr	r3, [pc, #128]	; (8006e44 <USBD_SetConfig+0x118>)
 8006dc4:	781b      	ldrb	r3, [r3, #0]
 8006dc6:	4619      	mov	r1, r3
 8006dc8:	6878      	ldr	r0, [r7, #4]
 8006dca:	f7ff f9e4 	bl	8006196 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8006dce:	6878      	ldr	r0, [r7, #4]
 8006dd0:	f000 f9bd 	bl	800714e <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8006dd4:	e033      	b.n	8006e3e <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8006dd6:	4b1b      	ldr	r3, [pc, #108]	; (8006e44 <USBD_SetConfig+0x118>)
 8006dd8:	781b      	ldrb	r3, [r3, #0]
 8006dda:	461a      	mov	r2, r3
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	685b      	ldr	r3, [r3, #4]
 8006de0:	429a      	cmp	r2, r3
 8006de2:	d01d      	beq.n	8006e20 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	685b      	ldr	r3, [r3, #4]
 8006de8:	b2db      	uxtb	r3, r3
 8006dea:	4619      	mov	r1, r3
 8006dec:	6878      	ldr	r0, [r7, #4]
 8006dee:	f7ff f9d2 	bl	8006196 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8006df2:	4b14      	ldr	r3, [pc, #80]	; (8006e44 <USBD_SetConfig+0x118>)
 8006df4:	781b      	ldrb	r3, [r3, #0]
 8006df6:	461a      	mov	r2, r3
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8006dfc:	4b11      	ldr	r3, [pc, #68]	; (8006e44 <USBD_SetConfig+0x118>)
 8006dfe:	781b      	ldrb	r3, [r3, #0]
 8006e00:	4619      	mov	r1, r3
 8006e02:	6878      	ldr	r0, [r7, #4]
 8006e04:	f7ff f9a8 	bl	8006158 <USBD_SetClassConfig>
 8006e08:	4603      	mov	r3, r0
 8006e0a:	2b02      	cmp	r3, #2
 8006e0c:	d104      	bne.n	8006e18 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8006e0e:	6839      	ldr	r1, [r7, #0]
 8006e10:	6878      	ldr	r0, [r7, #4]
 8006e12:	f000 f8f2 	bl	8006ffa <USBD_CtlError>
            return;
 8006e16:	e012      	b.n	8006e3e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8006e18:	6878      	ldr	r0, [r7, #4]
 8006e1a:	f000 f998 	bl	800714e <USBD_CtlSendStatus>
        break;
 8006e1e:	e00e      	b.n	8006e3e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8006e20:	6878      	ldr	r0, [r7, #4]
 8006e22:	f000 f994 	bl	800714e <USBD_CtlSendStatus>
        break;
 8006e26:	e00a      	b.n	8006e3e <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8006e28:	6839      	ldr	r1, [r7, #0]
 8006e2a:	6878      	ldr	r0, [r7, #4]
 8006e2c:	f000 f8e5 	bl	8006ffa <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8006e30:	4b04      	ldr	r3, [pc, #16]	; (8006e44 <USBD_SetConfig+0x118>)
 8006e32:	781b      	ldrb	r3, [r3, #0]
 8006e34:	4619      	mov	r1, r3
 8006e36:	6878      	ldr	r0, [r7, #4]
 8006e38:	f7ff f9ad 	bl	8006196 <USBD_ClrClassConfig>
        break;
 8006e3c:	bf00      	nop
    }
  }
}
 8006e3e:	3708      	adds	r7, #8
 8006e40:	46bd      	mov	sp, r7
 8006e42:	bd80      	pop	{r7, pc}
 8006e44:	2000013c 	.word	0x2000013c

08006e48 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006e48:	b580      	push	{r7, lr}
 8006e4a:	b082      	sub	sp, #8
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	6078      	str	r0, [r7, #4]
 8006e50:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006e52:	683b      	ldr	r3, [r7, #0]
 8006e54:	88db      	ldrh	r3, [r3, #6]
 8006e56:	2b01      	cmp	r3, #1
 8006e58:	d004      	beq.n	8006e64 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006e5a:	6839      	ldr	r1, [r7, #0]
 8006e5c:	6878      	ldr	r0, [r7, #4]
 8006e5e:	f000 f8cc 	bl	8006ffa <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8006e62:	e022      	b.n	8006eaa <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e6a:	2b02      	cmp	r3, #2
 8006e6c:	dc02      	bgt.n	8006e74 <USBD_GetConfig+0x2c>
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	dc03      	bgt.n	8006e7a <USBD_GetConfig+0x32>
 8006e72:	e015      	b.n	8006ea0 <USBD_GetConfig+0x58>
 8006e74:	2b03      	cmp	r3, #3
 8006e76:	d00b      	beq.n	8006e90 <USBD_GetConfig+0x48>
 8006e78:	e012      	b.n	8006ea0 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	2200      	movs	r2, #0
 8006e7e:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	3308      	adds	r3, #8
 8006e84:	2201      	movs	r2, #1
 8006e86:	4619      	mov	r1, r3
 8006e88:	6878      	ldr	r0, [r7, #4]
 8006e8a:	f000 f920 	bl	80070ce <USBD_CtlSendData>
        break;
 8006e8e:	e00c      	b.n	8006eaa <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	3304      	adds	r3, #4
 8006e94:	2201      	movs	r2, #1
 8006e96:	4619      	mov	r1, r3
 8006e98:	6878      	ldr	r0, [r7, #4]
 8006e9a:	f000 f918 	bl	80070ce <USBD_CtlSendData>
        break;
 8006e9e:	e004      	b.n	8006eaa <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8006ea0:	6839      	ldr	r1, [r7, #0]
 8006ea2:	6878      	ldr	r0, [r7, #4]
 8006ea4:	f000 f8a9 	bl	8006ffa <USBD_CtlError>
        break;
 8006ea8:	bf00      	nop
}
 8006eaa:	bf00      	nop
 8006eac:	3708      	adds	r7, #8
 8006eae:	46bd      	mov	sp, r7
 8006eb0:	bd80      	pop	{r7, pc}

08006eb2 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006eb2:	b580      	push	{r7, lr}
 8006eb4:	b082      	sub	sp, #8
 8006eb6:	af00      	add	r7, sp, #0
 8006eb8:	6078      	str	r0, [r7, #4]
 8006eba:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ec2:	3b01      	subs	r3, #1
 8006ec4:	2b02      	cmp	r3, #2
 8006ec6:	d81e      	bhi.n	8006f06 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006ec8:	683b      	ldr	r3, [r7, #0]
 8006eca:	88db      	ldrh	r3, [r3, #6]
 8006ecc:	2b02      	cmp	r3, #2
 8006ece:	d004      	beq.n	8006eda <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8006ed0:	6839      	ldr	r1, [r7, #0]
 8006ed2:	6878      	ldr	r0, [r7, #4]
 8006ed4:	f000 f891 	bl	8006ffa <USBD_CtlError>
        break;
 8006ed8:	e01a      	b.n	8006f10 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	2201      	movs	r2, #1
 8006ede:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d005      	beq.n	8006ef6 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	68db      	ldr	r3, [r3, #12]
 8006eee:	f043 0202 	orr.w	r2, r3, #2
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	330c      	adds	r3, #12
 8006efa:	2202      	movs	r2, #2
 8006efc:	4619      	mov	r1, r3
 8006efe:	6878      	ldr	r0, [r7, #4]
 8006f00:	f000 f8e5 	bl	80070ce <USBD_CtlSendData>
      break;
 8006f04:	e004      	b.n	8006f10 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8006f06:	6839      	ldr	r1, [r7, #0]
 8006f08:	6878      	ldr	r0, [r7, #4]
 8006f0a:	f000 f876 	bl	8006ffa <USBD_CtlError>
      break;
 8006f0e:	bf00      	nop
  }
}
 8006f10:	bf00      	nop
 8006f12:	3708      	adds	r7, #8
 8006f14:	46bd      	mov	sp, r7
 8006f16:	bd80      	pop	{r7, pc}

08006f18 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8006f18:	b580      	push	{r7, lr}
 8006f1a:	b082      	sub	sp, #8
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	6078      	str	r0, [r7, #4]
 8006f20:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006f22:	683b      	ldr	r3, [r7, #0]
 8006f24:	885b      	ldrh	r3, [r3, #2]
 8006f26:	2b01      	cmp	r3, #1
 8006f28:	d106      	bne.n	8006f38 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	2201      	movs	r2, #1
 8006f2e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8006f32:	6878      	ldr	r0, [r7, #4]
 8006f34:	f000 f90b 	bl	800714e <USBD_CtlSendStatus>
  }
}
 8006f38:	bf00      	nop
 8006f3a:	3708      	adds	r7, #8
 8006f3c:	46bd      	mov	sp, r7
 8006f3e:	bd80      	pop	{r7, pc}

08006f40 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8006f40:	b580      	push	{r7, lr}
 8006f42:	b082      	sub	sp, #8
 8006f44:	af00      	add	r7, sp, #0
 8006f46:	6078      	str	r0, [r7, #4]
 8006f48:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f50:	3b01      	subs	r3, #1
 8006f52:	2b02      	cmp	r3, #2
 8006f54:	d80b      	bhi.n	8006f6e <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006f56:	683b      	ldr	r3, [r7, #0]
 8006f58:	885b      	ldrh	r3, [r3, #2]
 8006f5a:	2b01      	cmp	r3, #1
 8006f5c:	d10c      	bne.n	8006f78 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	2200      	movs	r2, #0
 8006f62:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8006f66:	6878      	ldr	r0, [r7, #4]
 8006f68:	f000 f8f1 	bl	800714e <USBD_CtlSendStatus>
      }
      break;
 8006f6c:	e004      	b.n	8006f78 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8006f6e:	6839      	ldr	r1, [r7, #0]
 8006f70:	6878      	ldr	r0, [r7, #4]
 8006f72:	f000 f842 	bl	8006ffa <USBD_CtlError>
      break;
 8006f76:	e000      	b.n	8006f7a <USBD_ClrFeature+0x3a>
      break;
 8006f78:	bf00      	nop
  }
}
 8006f7a:	bf00      	nop
 8006f7c:	3708      	adds	r7, #8
 8006f7e:	46bd      	mov	sp, r7
 8006f80:	bd80      	pop	{r7, pc}

08006f82 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006f82:	b480      	push	{r7}
 8006f84:	b083      	sub	sp, #12
 8006f86:	af00      	add	r7, sp, #0
 8006f88:	6078      	str	r0, [r7, #4]
 8006f8a:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8006f8c:	683b      	ldr	r3, [r7, #0]
 8006f8e:	781a      	ldrb	r2, [r3, #0]
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8006f94:	683b      	ldr	r3, [r7, #0]
 8006f96:	785a      	ldrb	r2, [r3, #1]
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8006f9c:	683b      	ldr	r3, [r7, #0]
 8006f9e:	3302      	adds	r3, #2
 8006fa0:	781b      	ldrb	r3, [r3, #0]
 8006fa2:	b29a      	uxth	r2, r3
 8006fa4:	683b      	ldr	r3, [r7, #0]
 8006fa6:	3303      	adds	r3, #3
 8006fa8:	781b      	ldrb	r3, [r3, #0]
 8006faa:	b29b      	uxth	r3, r3
 8006fac:	021b      	lsls	r3, r3, #8
 8006fae:	b29b      	uxth	r3, r3
 8006fb0:	4413      	add	r3, r2
 8006fb2:	b29a      	uxth	r2, r3
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8006fb8:	683b      	ldr	r3, [r7, #0]
 8006fba:	3304      	adds	r3, #4
 8006fbc:	781b      	ldrb	r3, [r3, #0]
 8006fbe:	b29a      	uxth	r2, r3
 8006fc0:	683b      	ldr	r3, [r7, #0]
 8006fc2:	3305      	adds	r3, #5
 8006fc4:	781b      	ldrb	r3, [r3, #0]
 8006fc6:	b29b      	uxth	r3, r3
 8006fc8:	021b      	lsls	r3, r3, #8
 8006fca:	b29b      	uxth	r3, r3
 8006fcc:	4413      	add	r3, r2
 8006fce:	b29a      	uxth	r2, r3
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8006fd4:	683b      	ldr	r3, [r7, #0]
 8006fd6:	3306      	adds	r3, #6
 8006fd8:	781b      	ldrb	r3, [r3, #0]
 8006fda:	b29a      	uxth	r2, r3
 8006fdc:	683b      	ldr	r3, [r7, #0]
 8006fde:	3307      	adds	r3, #7
 8006fe0:	781b      	ldrb	r3, [r3, #0]
 8006fe2:	b29b      	uxth	r3, r3
 8006fe4:	021b      	lsls	r3, r3, #8
 8006fe6:	b29b      	uxth	r3, r3
 8006fe8:	4413      	add	r3, r2
 8006fea:	b29a      	uxth	r2, r3
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	80da      	strh	r2, [r3, #6]

}
 8006ff0:	bf00      	nop
 8006ff2:	370c      	adds	r7, #12
 8006ff4:	46bd      	mov	sp, r7
 8006ff6:	bc80      	pop	{r7}
 8006ff8:	4770      	bx	lr

08006ffa <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8006ffa:	b580      	push	{r7, lr}
 8006ffc:	b082      	sub	sp, #8
 8006ffe:	af00      	add	r7, sp, #0
 8007000:	6078      	str	r0, [r7, #4]
 8007002:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8007004:	2180      	movs	r1, #128	; 0x80
 8007006:	6878      	ldr	r0, [r7, #4]
 8007008:	f001 f881 	bl	800810e <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800700c:	2100      	movs	r1, #0
 800700e:	6878      	ldr	r0, [r7, #4]
 8007010:	f001 f87d 	bl	800810e <USBD_LL_StallEP>
}
 8007014:	bf00      	nop
 8007016:	3708      	adds	r7, #8
 8007018:	46bd      	mov	sp, r7
 800701a:	bd80      	pop	{r7, pc}

0800701c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800701c:	b580      	push	{r7, lr}
 800701e:	b086      	sub	sp, #24
 8007020:	af00      	add	r7, sp, #0
 8007022:	60f8      	str	r0, [r7, #12]
 8007024:	60b9      	str	r1, [r7, #8]
 8007026:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007028:	2300      	movs	r3, #0
 800702a:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	2b00      	cmp	r3, #0
 8007030:	d032      	beq.n	8007098 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8007032:	68f8      	ldr	r0, [r7, #12]
 8007034:	f000 f834 	bl	80070a0 <USBD_GetLen>
 8007038:	4603      	mov	r3, r0
 800703a:	3301      	adds	r3, #1
 800703c:	b29b      	uxth	r3, r3
 800703e:	005b      	lsls	r3, r3, #1
 8007040:	b29a      	uxth	r2, r3
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8007046:	7dfb      	ldrb	r3, [r7, #23]
 8007048:	1c5a      	adds	r2, r3, #1
 800704a:	75fa      	strb	r2, [r7, #23]
 800704c:	461a      	mov	r2, r3
 800704e:	68bb      	ldr	r3, [r7, #8]
 8007050:	4413      	add	r3, r2
 8007052:	687a      	ldr	r2, [r7, #4]
 8007054:	7812      	ldrb	r2, [r2, #0]
 8007056:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8007058:	7dfb      	ldrb	r3, [r7, #23]
 800705a:	1c5a      	adds	r2, r3, #1
 800705c:	75fa      	strb	r2, [r7, #23]
 800705e:	461a      	mov	r2, r3
 8007060:	68bb      	ldr	r3, [r7, #8]
 8007062:	4413      	add	r3, r2
 8007064:	2203      	movs	r2, #3
 8007066:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8007068:	e012      	b.n	8007090 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	1c5a      	adds	r2, r3, #1
 800706e:	60fa      	str	r2, [r7, #12]
 8007070:	7dfa      	ldrb	r2, [r7, #23]
 8007072:	1c51      	adds	r1, r2, #1
 8007074:	75f9      	strb	r1, [r7, #23]
 8007076:	4611      	mov	r1, r2
 8007078:	68ba      	ldr	r2, [r7, #8]
 800707a:	440a      	add	r2, r1
 800707c:	781b      	ldrb	r3, [r3, #0]
 800707e:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8007080:	7dfb      	ldrb	r3, [r7, #23]
 8007082:	1c5a      	adds	r2, r3, #1
 8007084:	75fa      	strb	r2, [r7, #23]
 8007086:	461a      	mov	r2, r3
 8007088:	68bb      	ldr	r3, [r7, #8]
 800708a:	4413      	add	r3, r2
 800708c:	2200      	movs	r2, #0
 800708e:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	781b      	ldrb	r3, [r3, #0]
 8007094:	2b00      	cmp	r3, #0
 8007096:	d1e8      	bne.n	800706a <USBD_GetString+0x4e>
    }
  }
}
 8007098:	bf00      	nop
 800709a:	3718      	adds	r7, #24
 800709c:	46bd      	mov	sp, r7
 800709e:	bd80      	pop	{r7, pc}

080070a0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80070a0:	b480      	push	{r7}
 80070a2:	b085      	sub	sp, #20
 80070a4:	af00      	add	r7, sp, #0
 80070a6:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80070a8:	2300      	movs	r3, #0
 80070aa:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 80070ac:	e005      	b.n	80070ba <USBD_GetLen+0x1a>
  {
    len++;
 80070ae:	7bfb      	ldrb	r3, [r7, #15]
 80070b0:	3301      	adds	r3, #1
 80070b2:	73fb      	strb	r3, [r7, #15]
    buf++;
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	3301      	adds	r3, #1
 80070b8:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	781b      	ldrb	r3, [r3, #0]
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d1f5      	bne.n	80070ae <USBD_GetLen+0xe>
  }

  return len;
 80070c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80070c4:	4618      	mov	r0, r3
 80070c6:	3714      	adds	r7, #20
 80070c8:	46bd      	mov	sp, r7
 80070ca:	bc80      	pop	{r7}
 80070cc:	4770      	bx	lr

080070ce <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 80070ce:	b580      	push	{r7, lr}
 80070d0:	b084      	sub	sp, #16
 80070d2:	af00      	add	r7, sp, #0
 80070d4:	60f8      	str	r0, [r7, #12]
 80070d6:	60b9      	str	r1, [r7, #8]
 80070d8:	4613      	mov	r3, r2
 80070da:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	2202      	movs	r2, #2
 80070e0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80070e4:	88fa      	ldrh	r2, [r7, #6]
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 80070ea:	88fa      	ldrh	r2, [r7, #6]
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80070f0:	88fb      	ldrh	r3, [r7, #6]
 80070f2:	68ba      	ldr	r2, [r7, #8]
 80070f4:	2100      	movs	r1, #0
 80070f6:	68f8      	ldr	r0, [r7, #12]
 80070f8:	f001 f892 	bl	8008220 <USBD_LL_Transmit>

  return USBD_OK;
 80070fc:	2300      	movs	r3, #0
}
 80070fe:	4618      	mov	r0, r3
 8007100:	3710      	adds	r7, #16
 8007102:	46bd      	mov	sp, r7
 8007104:	bd80      	pop	{r7, pc}

08007106 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8007106:	b580      	push	{r7, lr}
 8007108:	b084      	sub	sp, #16
 800710a:	af00      	add	r7, sp, #0
 800710c:	60f8      	str	r0, [r7, #12]
 800710e:	60b9      	str	r1, [r7, #8]
 8007110:	4613      	mov	r3, r2
 8007112:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007114:	88fb      	ldrh	r3, [r7, #6]
 8007116:	68ba      	ldr	r2, [r7, #8]
 8007118:	2100      	movs	r1, #0
 800711a:	68f8      	ldr	r0, [r7, #12]
 800711c:	f001 f880 	bl	8008220 <USBD_LL_Transmit>

  return USBD_OK;
 8007120:	2300      	movs	r3, #0
}
 8007122:	4618      	mov	r0, r3
 8007124:	3710      	adds	r7, #16
 8007126:	46bd      	mov	sp, r7
 8007128:	bd80      	pop	{r7, pc}

0800712a <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800712a:	b580      	push	{r7, lr}
 800712c:	b084      	sub	sp, #16
 800712e:	af00      	add	r7, sp, #0
 8007130:	60f8      	str	r0, [r7, #12]
 8007132:	60b9      	str	r1, [r7, #8]
 8007134:	4613      	mov	r3, r2
 8007136:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007138:	88fb      	ldrh	r3, [r7, #6]
 800713a:	68ba      	ldr	r2, [r7, #8]
 800713c:	2100      	movs	r1, #0
 800713e:	68f8      	ldr	r0, [r7, #12]
 8007140:	f001 f891 	bl	8008266 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007144:	2300      	movs	r3, #0
}
 8007146:	4618      	mov	r0, r3
 8007148:	3710      	adds	r7, #16
 800714a:	46bd      	mov	sp, r7
 800714c:	bd80      	pop	{r7, pc}

0800714e <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800714e:	b580      	push	{r7, lr}
 8007150:	b082      	sub	sp, #8
 8007152:	af00      	add	r7, sp, #0
 8007154:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	2204      	movs	r2, #4
 800715a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800715e:	2300      	movs	r3, #0
 8007160:	2200      	movs	r2, #0
 8007162:	2100      	movs	r1, #0
 8007164:	6878      	ldr	r0, [r7, #4]
 8007166:	f001 f85b 	bl	8008220 <USBD_LL_Transmit>

  return USBD_OK;
 800716a:	2300      	movs	r3, #0
}
 800716c:	4618      	mov	r0, r3
 800716e:	3708      	adds	r7, #8
 8007170:	46bd      	mov	sp, r7
 8007172:	bd80      	pop	{r7, pc}

08007174 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007174:	b580      	push	{r7, lr}
 8007176:	b082      	sub	sp, #8
 8007178:	af00      	add	r7, sp, #0
 800717a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	2205      	movs	r2, #5
 8007180:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007184:	2300      	movs	r3, #0
 8007186:	2200      	movs	r2, #0
 8007188:	2100      	movs	r1, #0
 800718a:	6878      	ldr	r0, [r7, #4]
 800718c:	f001 f86b 	bl	8008266 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007190:	2300      	movs	r3, #0
}
 8007192:	4618      	mov	r0, r3
 8007194:	3708      	adds	r7, #8
 8007196:	46bd      	mov	sp, r7
 8007198:	bd80      	pop	{r7, pc}
	...

0800719c <init_spi>:
/*-----------------------------------------------------------------------*/

/* Initialize MMC interface */
static
void init_spi (void)
{
 800719c:	b480      	push	{r7}
 800719e:	af00      	add	r7, sp, #0
	SPIxENABLE();		/* Enable SPI function */
 80071a0:	4b21      	ldr	r3, [pc, #132]	; (8007228 <init_spi+0x8c>)
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	4a20      	ldr	r2, [pc, #128]	; (8007228 <init_spi+0x8c>)
 80071a6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80071aa:	6013      	str	r3, [r2, #0]
 80071ac:	4b1e      	ldr	r3, [pc, #120]	; (8007228 <init_spi+0x8c>)
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	4a1d      	ldr	r2, [pc, #116]	; (8007228 <init_spi+0x8c>)
 80071b2:	f043 0304 	orr.w	r3, r3, #4
 80071b6:	6013      	str	r3, [r2, #0]
 80071b8:	4b1c      	ldr	r3, [pc, #112]	; (800722c <init_spi+0x90>)
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 80071c0:	4a1a      	ldr	r2, [pc, #104]	; (800722c <init_spi+0x90>)
 80071c2:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
 80071c6:	6013      	str	r3, [r2, #0]
 80071c8:	4b18      	ldr	r3, [pc, #96]	; (800722c <init_spi+0x90>)
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80071d0:	4a16      	ldr	r2, [pc, #88]	; (800722c <init_spi+0x90>)
 80071d2:	f443 0330 	orr.w	r3, r3, #11534336	; 0xb00000
 80071d6:	6013      	str	r3, [r2, #0]
 80071d8:	4b15      	ldr	r3, [pc, #84]	; (8007230 <init_spi+0x94>)
 80071da:	2240      	movs	r2, #64	; 0x40
 80071dc:	601a      	str	r2, [r3, #0]
 80071de:	4b13      	ldr	r3, [pc, #76]	; (800722c <init_spi+0x90>)
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 80071e6:	4a11      	ldr	r2, [pc, #68]	; (800722c <init_spi+0x90>)
 80071e8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80071ec:	6013      	str	r3, [r2, #0]
 80071ee:	4b0f      	ldr	r3, [pc, #60]	; (800722c <init_spi+0x90>)
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80071f6:	4a0d      	ldr	r2, [pc, #52]	; (800722c <init_spi+0x90>)
 80071f8:	f043 4330 	orr.w	r3, r3, #2952790016	; 0xb0000000
 80071fc:	6013      	str	r3, [r2, #0]
 80071fe:	4b0d      	ldr	r3, [pc, #52]	; (8007234 <init_spi+0x98>)
 8007200:	f240 3247 	movw	r2, #839	; 0x347
 8007204:	801a      	strh	r2, [r3, #0]
	CS_HIGH();			/* Set CS# high */
 8007206:	4b0a      	ldr	r3, [pc, #40]	; (8007230 <init_spi+0x94>)
 8007208:	2210      	movs	r2, #16
 800720a:	601a      	str	r2, [r3, #0]

	for (Timer1 = 10; Timer1; ) ;	/* 10ms */
 800720c:	4b0a      	ldr	r3, [pc, #40]	; (8007238 <init_spi+0x9c>)
 800720e:	220a      	movs	r2, #10
 8007210:	601a      	str	r2, [r3, #0]
 8007212:	bf00      	nop
 8007214:	4b08      	ldr	r3, [pc, #32]	; (8007238 <init_spi+0x9c>)
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	2b00      	cmp	r3, #0
 800721a:	d1fb      	bne.n	8007214 <init_spi+0x78>
}
 800721c:	bf00      	nop
 800721e:	bf00      	nop
 8007220:	46bd      	mov	sp, r7
 8007222:	bc80      	pop	{r7}
 8007224:	4770      	bx	lr
 8007226:	bf00      	nop
 8007228:	40021018 	.word	0x40021018
 800722c:	40010800 	.word	0x40010800
 8007230:	40010810 	.word	0x40010810
 8007234:	40013000 	.word	0x40013000
 8007238:	20000140 	.word	0x20000140

0800723c <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 800723c:	b480      	push	{r7}
 800723e:	b083      	sub	sp, #12
 8007240:	af00      	add	r7, sp, #0
 8007242:	4603      	mov	r3, r0
 8007244:	71fb      	strb	r3, [r7, #7]
	SPIx_DR = dat;				/* Start an SPI transaction */
 8007246:	4b0a      	ldr	r3, [pc, #40]	; (8007270 <xchg_spi+0x34>)
 8007248:	79fa      	ldrb	r2, [r7, #7]
 800724a:	b292      	uxth	r2, r2
 800724c:	801a      	strh	r2, [r3, #0]
	while ((SPIx_SR & 0x83) != 0x03) ;	/* Wait for end of the transaction */
 800724e:	bf00      	nop
 8007250:	4b08      	ldr	r3, [pc, #32]	; (8007274 <xchg_spi+0x38>)
 8007252:	881b      	ldrh	r3, [r3, #0]
 8007254:	b29b      	uxth	r3, r3
 8007256:	f003 0383 	and.w	r3, r3, #131	; 0x83
 800725a:	2b03      	cmp	r3, #3
 800725c:	d1f8      	bne.n	8007250 <xchg_spi+0x14>
	return (BYTE)SPIx_DR;		/* Return received byte */
 800725e:	4b04      	ldr	r3, [pc, #16]	; (8007270 <xchg_spi+0x34>)
 8007260:	881b      	ldrh	r3, [r3, #0]
 8007262:	b29b      	uxth	r3, r3
 8007264:	b2db      	uxtb	r3, r3
}
 8007266:	4618      	mov	r0, r3
 8007268:	370c      	adds	r7, #12
 800726a:	46bd      	mov	sp, r7
 800726c:	bc80      	pop	{r7}
 800726e:	4770      	bx	lr
 8007270:	4001300c 	.word	0x4001300c
 8007274:	40013008 	.word	0x40013008

08007278 <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 8007278:	b480      	push	{r7}
 800727a:	b085      	sub	sp, #20
 800727c:	af00      	add	r7, sp, #0
 800727e:	6078      	str	r0, [r7, #4]
 8007280:	6039      	str	r1, [r7, #0]
	WORD d;


	SPIx_CR1 &= ~_BV(6);
 8007282:	4b32      	ldr	r3, [pc, #200]	; (800734c <rcvr_spi_multi+0xd4>)
 8007284:	881b      	ldrh	r3, [r3, #0]
 8007286:	b29b      	uxth	r3, r3
 8007288:	4a30      	ldr	r2, [pc, #192]	; (800734c <rcvr_spi_multi+0xd4>)
 800728a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800728e:	b29b      	uxth	r3, r3
 8007290:	8013      	strh	r3, [r2, #0]
	SPIx_CR1 |= (_BV(6) | _BV(11));	/* Put SPI into 16-bit mode */
 8007292:	4b2e      	ldr	r3, [pc, #184]	; (800734c <rcvr_spi_multi+0xd4>)
 8007294:	881b      	ldrh	r3, [r3, #0]
 8007296:	b29b      	uxth	r3, r3
 8007298:	4a2c      	ldr	r2, [pc, #176]	; (800734c <rcvr_spi_multi+0xd4>)
 800729a:	f443 6304 	orr.w	r3, r3, #2112	; 0x840
 800729e:	b29b      	uxth	r3, r3
 80072a0:	8013      	strh	r3, [r2, #0]

	SPIx_DR = 0xFFFF;		/* Start the first SPI transaction */
 80072a2:	4b2b      	ldr	r3, [pc, #172]	; (8007350 <rcvr_spi_multi+0xd8>)
 80072a4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80072a8:	801a      	strh	r2, [r3, #0]
	btr -= 2;
 80072aa:	683b      	ldr	r3, [r7, #0]
 80072ac:	3b02      	subs	r3, #2
 80072ae:	603b      	str	r3, [r7, #0]
	do {					/* Receive the data block into buffer */
		while ((SPIx_SR & 0x83) != 0x03) ;	/* Wait for end of the SPI transaction */
 80072b0:	bf00      	nop
 80072b2:	4b28      	ldr	r3, [pc, #160]	; (8007354 <rcvr_spi_multi+0xdc>)
 80072b4:	881b      	ldrh	r3, [r3, #0]
 80072b6:	b29b      	uxth	r3, r3
 80072b8:	f003 0383 	and.w	r3, r3, #131	; 0x83
 80072bc:	2b03      	cmp	r3, #3
 80072be:	d1f8      	bne.n	80072b2 <rcvr_spi_multi+0x3a>
		d = SPIx_DR;						/* Get received word */
 80072c0:	4b23      	ldr	r3, [pc, #140]	; (8007350 <rcvr_spi_multi+0xd8>)
 80072c2:	881b      	ldrh	r3, [r3, #0]
 80072c4:	81fb      	strh	r3, [r7, #14]
		SPIx_DR = 0xFFFF;					/* Start next transaction */
 80072c6:	4b22      	ldr	r3, [pc, #136]	; (8007350 <rcvr_spi_multi+0xd8>)
 80072c8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80072cc:	801a      	strh	r2, [r3, #0]
		buff[1] = d; buff[0] = d >> 8; 		/* Store received data */
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	3301      	adds	r3, #1
 80072d2:	89fa      	ldrh	r2, [r7, #14]
 80072d4:	b2d2      	uxtb	r2, r2
 80072d6:	701a      	strb	r2, [r3, #0]
 80072d8:	89fb      	ldrh	r3, [r7, #14]
 80072da:	0a1b      	lsrs	r3, r3, #8
 80072dc:	b29b      	uxth	r3, r3
 80072de:	b2da      	uxtb	r2, r3
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	701a      	strb	r2, [r3, #0]
		buff += 2;
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	3302      	adds	r3, #2
 80072e8:	607b      	str	r3, [r7, #4]
	} while (btr -= 2);
 80072ea:	683b      	ldr	r3, [r7, #0]
 80072ec:	3b02      	subs	r3, #2
 80072ee:	603b      	str	r3, [r7, #0]
 80072f0:	683b      	ldr	r3, [r7, #0]
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d1dc      	bne.n	80072b0 <rcvr_spi_multi+0x38>
	while ((SPIx_SR & 0x83) != 0x03) ;		/* Wait for end of the SPI transaction */
 80072f6:	bf00      	nop
 80072f8:	4b16      	ldr	r3, [pc, #88]	; (8007354 <rcvr_spi_multi+0xdc>)
 80072fa:	881b      	ldrh	r3, [r3, #0]
 80072fc:	b29b      	uxth	r3, r3
 80072fe:	f003 0383 	and.w	r3, r3, #131	; 0x83
 8007302:	2b03      	cmp	r3, #3
 8007304:	d1f8      	bne.n	80072f8 <rcvr_spi_multi+0x80>
	d = SPIx_DR;							/* Get last word received */
 8007306:	4b12      	ldr	r3, [pc, #72]	; (8007350 <rcvr_spi_multi+0xd8>)
 8007308:	881b      	ldrh	r3, [r3, #0]
 800730a:	81fb      	strh	r3, [r7, #14]
	buff[1] = d; buff[0] = d >> 8;			/* Store it */
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	3301      	adds	r3, #1
 8007310:	89fa      	ldrh	r2, [r7, #14]
 8007312:	b2d2      	uxtb	r2, r2
 8007314:	701a      	strb	r2, [r3, #0]
 8007316:	89fb      	ldrh	r3, [r7, #14]
 8007318:	0a1b      	lsrs	r3, r3, #8
 800731a:	b29b      	uxth	r3, r3
 800731c:	b2da      	uxtb	r2, r3
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	701a      	strb	r2, [r3, #0]

	SPIx_CR1 &= ~(_BV(6) | _BV(11));	/* Put SPI into 8-bit mode */
 8007322:	4b0a      	ldr	r3, [pc, #40]	; (800734c <rcvr_spi_multi+0xd4>)
 8007324:	881b      	ldrh	r3, [r3, #0]
 8007326:	b29b      	uxth	r3, r3
 8007328:	4a08      	ldr	r2, [pc, #32]	; (800734c <rcvr_spi_multi+0xd4>)
 800732a:	f423 6304 	bic.w	r3, r3, #2112	; 0x840
 800732e:	b29b      	uxth	r3, r3
 8007330:	8013      	strh	r3, [r2, #0]
	SPIx_CR1 |= _BV(6);
 8007332:	4b06      	ldr	r3, [pc, #24]	; (800734c <rcvr_spi_multi+0xd4>)
 8007334:	881b      	ldrh	r3, [r3, #0]
 8007336:	b29b      	uxth	r3, r3
 8007338:	4a04      	ldr	r2, [pc, #16]	; (800734c <rcvr_spi_multi+0xd4>)
 800733a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800733e:	b29b      	uxth	r3, r3
 8007340:	8013      	strh	r3, [r2, #0]
}
 8007342:	bf00      	nop
 8007344:	3714      	adds	r7, #20
 8007346:	46bd      	mov	sp, r7
 8007348:	bc80      	pop	{r7}
 800734a:	4770      	bx	lr
 800734c:	40013000 	.word	0x40013000
 8007350:	4001300c 	.word	0x4001300c
 8007354:	40013008 	.word	0x40013008

08007358 <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 8007358:	b480      	push	{r7}
 800735a:	b085      	sub	sp, #20
 800735c:	af00      	add	r7, sp, #0
 800735e:	6078      	str	r0, [r7, #4]
 8007360:	6039      	str	r1, [r7, #0]
	WORD d;


	SPIx_CR1 &= ~_BV(6);
 8007362:	4b32      	ldr	r3, [pc, #200]	; (800742c <xmit_spi_multi+0xd4>)
 8007364:	881b      	ldrh	r3, [r3, #0]
 8007366:	b29b      	uxth	r3, r3
 8007368:	4a30      	ldr	r2, [pc, #192]	; (800742c <xmit_spi_multi+0xd4>)
 800736a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800736e:	b29b      	uxth	r3, r3
 8007370:	8013      	strh	r3, [r2, #0]
	SPIx_CR1 |= (_BV(6) | _BV(11));		/* Put SPI into 16-bit mode */
 8007372:	4b2e      	ldr	r3, [pc, #184]	; (800742c <xmit_spi_multi+0xd4>)
 8007374:	881b      	ldrh	r3, [r3, #0]
 8007376:	b29b      	uxth	r3, r3
 8007378:	4a2c      	ldr	r2, [pc, #176]	; (800742c <xmit_spi_multi+0xd4>)
 800737a:	f443 6304 	orr.w	r3, r3, #2112	; 0x840
 800737e:	b29b      	uxth	r3, r3
 8007380:	8013      	strh	r3, [r2, #0]

	d = buff[0] << 8 | buff[1]; buff += 2;
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	781b      	ldrb	r3, [r3, #0]
 8007386:	021b      	lsls	r3, r3, #8
 8007388:	b21a      	sxth	r2, r3
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	3301      	adds	r3, #1
 800738e:	781b      	ldrb	r3, [r3, #0]
 8007390:	b21b      	sxth	r3, r3
 8007392:	4313      	orrs	r3, r2
 8007394:	b21b      	sxth	r3, r3
 8007396:	81fb      	strh	r3, [r7, #14]
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	3302      	adds	r3, #2
 800739c:	607b      	str	r3, [r7, #4]
	SPIx_DR = d;	/* Send the first word */
 800739e:	4a24      	ldr	r2, [pc, #144]	; (8007430 <xmit_spi_multi+0xd8>)
 80073a0:	89fb      	ldrh	r3, [r7, #14]
 80073a2:	8013      	strh	r3, [r2, #0]
	btx -= 2;
 80073a4:	683b      	ldr	r3, [r7, #0]
 80073a6:	3b02      	subs	r3, #2
 80073a8:	603b      	str	r3, [r7, #0]
	do {
		d = buff[0] << 8 | buff[1]; buff += 2;	/* Word to send next */
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	781b      	ldrb	r3, [r3, #0]
 80073ae:	021b      	lsls	r3, r3, #8
 80073b0:	b21a      	sxth	r2, r3
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	3301      	adds	r3, #1
 80073b6:	781b      	ldrb	r3, [r3, #0]
 80073b8:	b21b      	sxth	r3, r3
 80073ba:	4313      	orrs	r3, r2
 80073bc:	b21b      	sxth	r3, r3
 80073be:	81fb      	strh	r3, [r7, #14]
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	3302      	adds	r3, #2
 80073c4:	607b      	str	r3, [r7, #4]
		while ((SPIx_SR & 0x83) != 0x03) ;	/* Wait for end of the SPI transaction */
 80073c6:	bf00      	nop
 80073c8:	4b1a      	ldr	r3, [pc, #104]	; (8007434 <xmit_spi_multi+0xdc>)
 80073ca:	881b      	ldrh	r3, [r3, #0]
 80073cc:	b29b      	uxth	r3, r3
 80073ce:	f003 0383 	and.w	r3, r3, #131	; 0x83
 80073d2:	2b03      	cmp	r3, #3
 80073d4:	d1f8      	bne.n	80073c8 <xmit_spi_multi+0x70>
		SPIx_DR;							/* Discard received word */
 80073d6:	4b16      	ldr	r3, [pc, #88]	; (8007430 <xmit_spi_multi+0xd8>)
 80073d8:	881b      	ldrh	r3, [r3, #0]
		SPIx_DR = d;						/* Start next transaction */
 80073da:	4a15      	ldr	r2, [pc, #84]	; (8007430 <xmit_spi_multi+0xd8>)
 80073dc:	89fb      	ldrh	r3, [r7, #14]
 80073de:	8013      	strh	r3, [r2, #0]
	} while (btx -= 2);
 80073e0:	683b      	ldr	r3, [r7, #0]
 80073e2:	3b02      	subs	r3, #2
 80073e4:	603b      	str	r3, [r7, #0]
 80073e6:	683b      	ldr	r3, [r7, #0]
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d1de      	bne.n	80073aa <xmit_spi_multi+0x52>
	while ((SPIx_SR & 0x83) != 0x03) ;	/* Wait for end of the SPI transaction */
 80073ec:	bf00      	nop
 80073ee:	4b11      	ldr	r3, [pc, #68]	; (8007434 <xmit_spi_multi+0xdc>)
 80073f0:	881b      	ldrh	r3, [r3, #0]
 80073f2:	b29b      	uxth	r3, r3
 80073f4:	f003 0383 	and.w	r3, r3, #131	; 0x83
 80073f8:	2b03      	cmp	r3, #3
 80073fa:	d1f8      	bne.n	80073ee <xmit_spi_multi+0x96>
	SPIx_DR;							/* Discard received word */
 80073fc:	4b0c      	ldr	r3, [pc, #48]	; (8007430 <xmit_spi_multi+0xd8>)
 80073fe:	881b      	ldrh	r3, [r3, #0]

	SPIx_CR1 &= ~(_BV(6) | _BV(11));	/* Put SPI into 8-bit mode */
 8007400:	4b0a      	ldr	r3, [pc, #40]	; (800742c <xmit_spi_multi+0xd4>)
 8007402:	881b      	ldrh	r3, [r3, #0]
 8007404:	b29b      	uxth	r3, r3
 8007406:	4a09      	ldr	r2, [pc, #36]	; (800742c <xmit_spi_multi+0xd4>)
 8007408:	f423 6304 	bic.w	r3, r3, #2112	; 0x840
 800740c:	b29b      	uxth	r3, r3
 800740e:	8013      	strh	r3, [r2, #0]
	SPIx_CR1 |= _BV(6);
 8007410:	4b06      	ldr	r3, [pc, #24]	; (800742c <xmit_spi_multi+0xd4>)
 8007412:	881b      	ldrh	r3, [r3, #0]
 8007414:	b29b      	uxth	r3, r3
 8007416:	4a05      	ldr	r2, [pc, #20]	; (800742c <xmit_spi_multi+0xd4>)
 8007418:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800741c:	b29b      	uxth	r3, r3
 800741e:	8013      	strh	r3, [r2, #0]
}
 8007420:	bf00      	nop
 8007422:	3714      	adds	r7, #20
 8007424:	46bd      	mov	sp, r7
 8007426:	bc80      	pop	{r7}
 8007428:	4770      	bx	lr
 800742a:	bf00      	nop
 800742c:	40013000 	.word	0x40013000
 8007430:	4001300c 	.word	0x4001300c
 8007434:	40013008 	.word	0x40013008

08007438 <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 8007438:	b580      	push	{r7, lr}
 800743a:	b084      	sub	sp, #16
 800743c:	af00      	add	r7, sp, #0
 800743e:	6078      	str	r0, [r7, #4]
	BYTE d;


	Timer2 = wt;
 8007440:	4a0c      	ldr	r2, [pc, #48]	; (8007474 <wait_ready+0x3c>)
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	6013      	str	r3, [r2, #0]
	do {
		d = xchg_spi(0xFF);
 8007446:	20ff      	movs	r0, #255	; 0xff
 8007448:	f7ff fef8 	bl	800723c <xchg_spi>
 800744c:	4603      	mov	r3, r0
 800744e:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && Timer2);	/* Wait for card goes ready or timeout */
 8007450:	7bfb      	ldrb	r3, [r7, #15]
 8007452:	2bff      	cmp	r3, #255	; 0xff
 8007454:	d003      	beq.n	800745e <wait_ready+0x26>
 8007456:	4b07      	ldr	r3, [pc, #28]	; (8007474 <wait_ready+0x3c>)
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	2b00      	cmp	r3, #0
 800745c:	d1f3      	bne.n	8007446 <wait_ready+0xe>

	return (d == 0xFF) ? 1 : 0;
 800745e:	7bfb      	ldrb	r3, [r7, #15]
 8007460:	2bff      	cmp	r3, #255	; 0xff
 8007462:	bf0c      	ite	eq
 8007464:	2301      	moveq	r3, #1
 8007466:	2300      	movne	r3, #0
 8007468:	b2db      	uxtb	r3, r3
}
 800746a:	4618      	mov	r0, r3
 800746c:	3710      	adds	r7, #16
 800746e:	46bd      	mov	sp, r7
 8007470:	bd80      	pop	{r7, pc}
 8007472:	bf00      	nop
 8007474:	20000144 	.word	0x20000144

08007478 <deselect>:
/* Deselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void deselect (void)
{
 8007478:	b580      	push	{r7, lr}
 800747a:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 800747c:	4b03      	ldr	r3, [pc, #12]	; (800748c <deselect+0x14>)
 800747e:	2210      	movs	r2, #16
 8007480:	601a      	str	r2, [r3, #0]
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 8007482:	20ff      	movs	r0, #255	; 0xff
 8007484:	f7ff feda 	bl	800723c <xchg_spi>

}
 8007488:	bf00      	nop
 800748a:	bd80      	pop	{r7, pc}
 800748c:	40010810 	.word	0x40010810

08007490 <select>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int select (void)	/* 1:OK, 0:Timeout */
{
 8007490:	b580      	push	{r7, lr}
 8007492:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 8007494:	4b0a      	ldr	r3, [pc, #40]	; (80074c0 <select+0x30>)
 8007496:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800749a:	601a      	str	r2, [r3, #0]
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 800749c:	20ff      	movs	r0, #255	; 0xff
 800749e:	f7ff fecd 	bl	800723c <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 80074a2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80074a6:	f7ff ffc7 	bl	8007438 <wait_ready>
 80074aa:	4603      	mov	r3, r0
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d001      	beq.n	80074b4 <select+0x24>
 80074b0:	2301      	movs	r3, #1
 80074b2:	e002      	b.n	80074ba <select+0x2a>

	deselect();
 80074b4:	f7ff ffe0 	bl	8007478 <deselect>
	return 0;	/* Timeout */
 80074b8:	2300      	movs	r3, #0
}
 80074ba:	4618      	mov	r0, r3
 80074bc:	bd80      	pop	{r7, pc}
 80074be:	bf00      	nop
 80074c0:	40010810 	.word	0x40010810

080074c4 <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 80074c4:	b580      	push	{r7, lr}
 80074c6:	b084      	sub	sp, #16
 80074c8:	af00      	add	r7, sp, #0
 80074ca:	6078      	str	r0, [r7, #4]
 80074cc:	6039      	str	r1, [r7, #0]
	BYTE token;


	Timer1 = 200;
 80074ce:	4b11      	ldr	r3, [pc, #68]	; (8007514 <rcvr_datablock+0x50>)
 80074d0:	22c8      	movs	r2, #200	; 0xc8
 80074d2:	601a      	str	r2, [r3, #0]
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 80074d4:	20ff      	movs	r0, #255	; 0xff
 80074d6:	f7ff feb1 	bl	800723c <xchg_spi>
 80074da:	4603      	mov	r3, r0
 80074dc:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && Timer1);
 80074de:	7bfb      	ldrb	r3, [r7, #15]
 80074e0:	2bff      	cmp	r3, #255	; 0xff
 80074e2:	d103      	bne.n	80074ec <rcvr_datablock+0x28>
 80074e4:	4b0b      	ldr	r3, [pc, #44]	; (8007514 <rcvr_datablock+0x50>)
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d1f3      	bne.n	80074d4 <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 80074ec:	7bfb      	ldrb	r3, [r7, #15]
 80074ee:	2bfe      	cmp	r3, #254	; 0xfe
 80074f0:	d001      	beq.n	80074f6 <rcvr_datablock+0x32>
 80074f2:	2300      	movs	r3, #0
 80074f4:	e00a      	b.n	800750c <rcvr_datablock+0x48>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 80074f6:	6839      	ldr	r1, [r7, #0]
 80074f8:	6878      	ldr	r0, [r7, #4]
 80074fa:	f7ff febd 	bl	8007278 <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 80074fe:	20ff      	movs	r0, #255	; 0xff
 8007500:	f7ff fe9c 	bl	800723c <xchg_spi>
 8007504:	20ff      	movs	r0, #255	; 0xff
 8007506:	f7ff fe99 	bl	800723c <xchg_spi>

	return 1;						/* Function succeeded */
 800750a:	2301      	movs	r3, #1
}
 800750c:	4618      	mov	r0, r3
 800750e:	3710      	adds	r7, #16
 8007510:	46bd      	mov	sp, r7
 8007512:	bd80      	pop	{r7, pc}
 8007514:	20000140 	.word	0x20000140

08007518 <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 8007518:	b580      	push	{r7, lr}
 800751a:	b084      	sub	sp, #16
 800751c:	af00      	add	r7, sp, #0
 800751e:	6078      	str	r0, [r7, #4]
 8007520:	460b      	mov	r3, r1
 8007522:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 8007524:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007528:	f7ff ff86 	bl	8007438 <wait_ready>
 800752c:	4603      	mov	r3, r0
 800752e:	2b00      	cmp	r3, #0
 8007530:	d101      	bne.n	8007536 <xmit_datablock+0x1e>
 8007532:	2300      	movs	r3, #0
 8007534:	e01e      	b.n	8007574 <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 8007536:	78fb      	ldrb	r3, [r7, #3]
 8007538:	4618      	mov	r0, r3
 800753a:	f7ff fe7f 	bl	800723c <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 800753e:	78fb      	ldrb	r3, [r7, #3]
 8007540:	2bfd      	cmp	r3, #253	; 0xfd
 8007542:	d016      	beq.n	8007572 <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 8007544:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007548:	6878      	ldr	r0, [r7, #4]
 800754a:	f7ff ff05 	bl	8007358 <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 800754e:	20ff      	movs	r0, #255	; 0xff
 8007550:	f7ff fe74 	bl	800723c <xchg_spi>
 8007554:	20ff      	movs	r0, #255	; 0xff
 8007556:	f7ff fe71 	bl	800723c <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 800755a:	20ff      	movs	r0, #255	; 0xff
 800755c:	f7ff fe6e 	bl	800723c <xchg_spi>
 8007560:	4603      	mov	r3, r0
 8007562:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 8007564:	7bfb      	ldrb	r3, [r7, #15]
 8007566:	f003 031f 	and.w	r3, r3, #31
 800756a:	2b05      	cmp	r3, #5
 800756c:	d001      	beq.n	8007572 <xmit_datablock+0x5a>
 800756e:	2300      	movs	r3, #0
 8007570:	e000      	b.n	8007574 <xmit_datablock+0x5c>
	}
	return 1;
 8007572:	2301      	movs	r3, #1
}
 8007574:	4618      	mov	r0, r3
 8007576:	3710      	adds	r7, #16
 8007578:	46bd      	mov	sp, r7
 800757a:	bd80      	pop	{r7, pc}

0800757c <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 800757c:	b580      	push	{r7, lr}
 800757e:	b084      	sub	sp, #16
 8007580:	af00      	add	r7, sp, #0
 8007582:	4603      	mov	r3, r0
 8007584:	6039      	str	r1, [r7, #0]
 8007586:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 8007588:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800758c:	2b00      	cmp	r3, #0
 800758e:	da0e      	bge.n	80075ae <send_cmd+0x32>
		cmd &= 0x7F;
 8007590:	79fb      	ldrb	r3, [r7, #7]
 8007592:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007596:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 8007598:	2100      	movs	r1, #0
 800759a:	2037      	movs	r0, #55	; 0x37
 800759c:	f7ff ffee 	bl	800757c <send_cmd>
 80075a0:	4603      	mov	r3, r0
 80075a2:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 80075a4:	7bbb      	ldrb	r3, [r7, #14]
 80075a6:	2b01      	cmp	r3, #1
 80075a8:	d901      	bls.n	80075ae <send_cmd+0x32>
 80075aa:	7bbb      	ldrb	r3, [r7, #14]
 80075ac:	e051      	b.n	8007652 <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 80075ae:	79fb      	ldrb	r3, [r7, #7]
 80075b0:	2b0c      	cmp	r3, #12
 80075b2:	d008      	beq.n	80075c6 <send_cmd+0x4a>
		deselect();
 80075b4:	f7ff ff60 	bl	8007478 <deselect>
		if (!select()) return 0xFF;
 80075b8:	f7ff ff6a 	bl	8007490 <select>
 80075bc:	4603      	mov	r3, r0
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d101      	bne.n	80075c6 <send_cmd+0x4a>
 80075c2:	23ff      	movs	r3, #255	; 0xff
 80075c4:	e045      	b.n	8007652 <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 80075c6:	79fb      	ldrb	r3, [r7, #7]
 80075c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80075cc:	b2db      	uxtb	r3, r3
 80075ce:	4618      	mov	r0, r3
 80075d0:	f7ff fe34 	bl	800723c <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 80075d4:	683b      	ldr	r3, [r7, #0]
 80075d6:	0e1b      	lsrs	r3, r3, #24
 80075d8:	b2db      	uxtb	r3, r3
 80075da:	4618      	mov	r0, r3
 80075dc:	f7ff fe2e 	bl	800723c <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 80075e0:	683b      	ldr	r3, [r7, #0]
 80075e2:	0c1b      	lsrs	r3, r3, #16
 80075e4:	b2db      	uxtb	r3, r3
 80075e6:	4618      	mov	r0, r3
 80075e8:	f7ff fe28 	bl	800723c <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 80075ec:	683b      	ldr	r3, [r7, #0]
 80075ee:	0a1b      	lsrs	r3, r3, #8
 80075f0:	b2db      	uxtb	r3, r3
 80075f2:	4618      	mov	r0, r3
 80075f4:	f7ff fe22 	bl	800723c <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 80075f8:	683b      	ldr	r3, [r7, #0]
 80075fa:	b2db      	uxtb	r3, r3
 80075fc:	4618      	mov	r0, r3
 80075fe:	f7ff fe1d 	bl	800723c <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 8007602:	2301      	movs	r3, #1
 8007604:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 8007606:	79fb      	ldrb	r3, [r7, #7]
 8007608:	2b00      	cmp	r3, #0
 800760a:	d101      	bne.n	8007610 <send_cmd+0x94>
 800760c:	2395      	movs	r3, #149	; 0x95
 800760e:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 8007610:	79fb      	ldrb	r3, [r7, #7]
 8007612:	2b08      	cmp	r3, #8
 8007614:	d101      	bne.n	800761a <send_cmd+0x9e>
 8007616:	2387      	movs	r3, #135	; 0x87
 8007618:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 800761a:	7bfb      	ldrb	r3, [r7, #15]
 800761c:	4618      	mov	r0, r3
 800761e:	f7ff fe0d 	bl	800723c <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 8007622:	79fb      	ldrb	r3, [r7, #7]
 8007624:	2b0c      	cmp	r3, #12
 8007626:	d102      	bne.n	800762e <send_cmd+0xb2>
 8007628:	20ff      	movs	r0, #255	; 0xff
 800762a:	f7ff fe07 	bl	800723c <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 800762e:	230a      	movs	r3, #10
 8007630:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 8007632:	20ff      	movs	r0, #255	; 0xff
 8007634:	f7ff fe02 	bl	800723c <xchg_spi>
 8007638:	4603      	mov	r3, r0
 800763a:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 800763c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007640:	2b00      	cmp	r3, #0
 8007642:	da05      	bge.n	8007650 <send_cmd+0xd4>
 8007644:	7bfb      	ldrb	r3, [r7, #15]
 8007646:	3b01      	subs	r3, #1
 8007648:	73fb      	strb	r3, [r7, #15]
 800764a:	7bfb      	ldrb	r3, [r7, #15]
 800764c:	2b00      	cmp	r3, #0
 800764e:	d1f0      	bne.n	8007632 <send_cmd+0xb6>

	return res;							/* Return received response */
 8007650:	7bbb      	ldrb	r3, [r7, #14]
}
 8007652:	4618      	mov	r0, r3
 8007654:	3710      	adds	r7, #16
 8007656:	46bd      	mov	sp, r7
 8007658:	bd80      	pop	{r7, pc}
	...

0800765c <disk_initialize>:
/*-----------------------------------------------------------------------*/

DSTATUS disk_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 800765c:	b590      	push	{r4, r7, lr}
 800765e:	b085      	sub	sp, #20
 8007660:	af00      	add	r7, sp, #0
 8007662:	4603      	mov	r3, r0
 8007664:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];


	if (drv) return STA_NOINIT;			/* Supports only drive 0 */
 8007666:	79fb      	ldrb	r3, [r7, #7]
 8007668:	2b00      	cmp	r3, #0
 800766a:	d001      	beq.n	8007670 <disk_initialize+0x14>
 800766c:	2301      	movs	r3, #1
 800766e:	e0d5      	b.n	800781c <disk_initialize+0x1c0>
	init_spi();							/* Initialize SPI */
 8007670:	f7ff fd94 	bl	800719c <init_spi>

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 8007674:	4b6b      	ldr	r3, [pc, #428]	; (8007824 <disk_initialize+0x1c8>)
 8007676:	781b      	ldrb	r3, [r3, #0]
 8007678:	b2db      	uxtb	r3, r3
 800767a:	f003 0302 	and.w	r3, r3, #2
 800767e:	2b00      	cmp	r3, #0
 8007680:	d003      	beq.n	800768a <disk_initialize+0x2e>
 8007682:	4b68      	ldr	r3, [pc, #416]	; (8007824 <disk_initialize+0x1c8>)
 8007684:	781b      	ldrb	r3, [r3, #0]
 8007686:	b2db      	uxtb	r3, r3
 8007688:	e0c8      	b.n	800781c <disk_initialize+0x1c0>

	FCLK_SLOW();
 800768a:	4b67      	ldr	r3, [pc, #412]	; (8007828 <disk_initialize+0x1cc>)
 800768c:	881b      	ldrh	r3, [r3, #0]
 800768e:	b29b      	uxth	r3, r3
 8007690:	b21b      	sxth	r3, r3
 8007692:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 8007696:	b21b      	sxth	r3, r3
 8007698:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 800769c:	b21a      	sxth	r2, r3
 800769e:	4b62      	ldr	r3, [pc, #392]	; (8007828 <disk_initialize+0x1cc>)
 80076a0:	b292      	uxth	r2, r2
 80076a2:	801a      	strh	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 80076a4:	230a      	movs	r3, #10
 80076a6:	73fb      	strb	r3, [r7, #15]
 80076a8:	e005      	b.n	80076b6 <disk_initialize+0x5a>
 80076aa:	20ff      	movs	r0, #255	; 0xff
 80076ac:	f7ff fdc6 	bl	800723c <xchg_spi>
 80076b0:	7bfb      	ldrb	r3, [r7, #15]
 80076b2:	3b01      	subs	r3, #1
 80076b4:	73fb      	strb	r3, [r7, #15]
 80076b6:	7bfb      	ldrb	r3, [r7, #15]
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d1f6      	bne.n	80076aa <disk_initialize+0x4e>

	ty = 0;
 80076bc:	2300      	movs	r3, #0
 80076be:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 80076c0:	2100      	movs	r1, #0
 80076c2:	2000      	movs	r0, #0
 80076c4:	f7ff ff5a 	bl	800757c <send_cmd>
 80076c8:	4603      	mov	r3, r0
 80076ca:	2b01      	cmp	r3, #1
 80076cc:	f040 8087 	bne.w	80077de <disk_initialize+0x182>
		Timer1 = 1000;						/* Initialization timeout = 1 sec */
 80076d0:	4b56      	ldr	r3, [pc, #344]	; (800782c <disk_initialize+0x1d0>)
 80076d2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80076d6:	601a      	str	r2, [r3, #0]
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 80076d8:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80076dc:	2008      	movs	r0, #8
 80076de:	f7ff ff4d 	bl	800757c <send_cmd>
 80076e2:	4603      	mov	r3, r0
 80076e4:	2b01      	cmp	r3, #1
 80076e6:	d14f      	bne.n	8007788 <disk_initialize+0x12c>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 80076e8:	2300      	movs	r3, #0
 80076ea:	73fb      	strb	r3, [r7, #15]
 80076ec:	e00d      	b.n	800770a <disk_initialize+0xae>
 80076ee:	7bfc      	ldrb	r4, [r7, #15]
 80076f0:	20ff      	movs	r0, #255	; 0xff
 80076f2:	f7ff fda3 	bl	800723c <xchg_spi>
 80076f6:	4603      	mov	r3, r0
 80076f8:	461a      	mov	r2, r3
 80076fa:	f107 0310 	add.w	r3, r7, #16
 80076fe:	4423      	add	r3, r4
 8007700:	f803 2c08 	strb.w	r2, [r3, #-8]
 8007704:	7bfb      	ldrb	r3, [r7, #15]
 8007706:	3301      	adds	r3, #1
 8007708:	73fb      	strb	r3, [r7, #15]
 800770a:	7bfb      	ldrb	r3, [r7, #15]
 800770c:	2b03      	cmp	r3, #3
 800770e:	d9ee      	bls.n	80076ee <disk_initialize+0x92>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 8007710:	7abb      	ldrb	r3, [r7, #10]
 8007712:	2b01      	cmp	r3, #1
 8007714:	d163      	bne.n	80077de <disk_initialize+0x182>
 8007716:	7afb      	ldrb	r3, [r7, #11]
 8007718:	2baa      	cmp	r3, #170	; 0xaa
 800771a:	d160      	bne.n	80077de <disk_initialize+0x182>
				while (Timer1 && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 800771c:	bf00      	nop
 800771e:	4b43      	ldr	r3, [pc, #268]	; (800782c <disk_initialize+0x1d0>)
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	2b00      	cmp	r3, #0
 8007724:	d007      	beq.n	8007736 <disk_initialize+0xda>
 8007726:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800772a:	20a9      	movs	r0, #169	; 0xa9
 800772c:	f7ff ff26 	bl	800757c <send_cmd>
 8007730:	4603      	mov	r3, r0
 8007732:	2b00      	cmp	r3, #0
 8007734:	d1f3      	bne.n	800771e <disk_initialize+0xc2>
				if (Timer1 && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 8007736:	4b3d      	ldr	r3, [pc, #244]	; (800782c <disk_initialize+0x1d0>)
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	2b00      	cmp	r3, #0
 800773c:	d04f      	beq.n	80077de <disk_initialize+0x182>
 800773e:	2100      	movs	r1, #0
 8007740:	203a      	movs	r0, #58	; 0x3a
 8007742:	f7ff ff1b 	bl	800757c <send_cmd>
 8007746:	4603      	mov	r3, r0
 8007748:	2b00      	cmp	r3, #0
 800774a:	d148      	bne.n	80077de <disk_initialize+0x182>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 800774c:	2300      	movs	r3, #0
 800774e:	73fb      	strb	r3, [r7, #15]
 8007750:	e00d      	b.n	800776e <disk_initialize+0x112>
 8007752:	7bfc      	ldrb	r4, [r7, #15]
 8007754:	20ff      	movs	r0, #255	; 0xff
 8007756:	f7ff fd71 	bl	800723c <xchg_spi>
 800775a:	4603      	mov	r3, r0
 800775c:	461a      	mov	r2, r3
 800775e:	f107 0310 	add.w	r3, r7, #16
 8007762:	4423      	add	r3, r4
 8007764:	f803 2c08 	strb.w	r2, [r3, #-8]
 8007768:	7bfb      	ldrb	r3, [r7, #15]
 800776a:	3301      	adds	r3, #1
 800776c:	73fb      	strb	r3, [r7, #15]
 800776e:	7bfb      	ldrb	r3, [r7, #15]
 8007770:	2b03      	cmp	r3, #3
 8007772:	d9ee      	bls.n	8007752 <disk_initialize+0xf6>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 8007774:	7a3b      	ldrb	r3, [r7, #8]
 8007776:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800777a:	2b00      	cmp	r3, #0
 800777c:	d001      	beq.n	8007782 <disk_initialize+0x126>
 800777e:	230c      	movs	r3, #12
 8007780:	e000      	b.n	8007784 <disk_initialize+0x128>
 8007782:	2304      	movs	r3, #4
 8007784:	737b      	strb	r3, [r7, #13]
 8007786:	e02a      	b.n	80077de <disk_initialize+0x182>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 8007788:	2100      	movs	r1, #0
 800778a:	20a9      	movs	r0, #169	; 0xa9
 800778c:	f7ff fef6 	bl	800757c <send_cmd>
 8007790:	4603      	mov	r3, r0
 8007792:	2b01      	cmp	r3, #1
 8007794:	d804      	bhi.n	80077a0 <disk_initialize+0x144>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 8007796:	2302      	movs	r3, #2
 8007798:	737b      	strb	r3, [r7, #13]
 800779a:	23a9      	movs	r3, #169	; 0xa9
 800779c:	73bb      	strb	r3, [r7, #14]
 800779e:	e003      	b.n	80077a8 <disk_initialize+0x14c>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 80077a0:	2301      	movs	r3, #1
 80077a2:	737b      	strb	r3, [r7, #13]
 80077a4:	2301      	movs	r3, #1
 80077a6:	73bb      	strb	r3, [r7, #14]
			}
			while (Timer1 && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 80077a8:	bf00      	nop
 80077aa:	4b20      	ldr	r3, [pc, #128]	; (800782c <disk_initialize+0x1d0>)
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d007      	beq.n	80077c2 <disk_initialize+0x166>
 80077b2:	7bbb      	ldrb	r3, [r7, #14]
 80077b4:	2100      	movs	r1, #0
 80077b6:	4618      	mov	r0, r3
 80077b8:	f7ff fee0 	bl	800757c <send_cmd>
 80077bc:	4603      	mov	r3, r0
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d1f3      	bne.n	80077aa <disk_initialize+0x14e>
			if (!Timer1 || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 80077c2:	4b1a      	ldr	r3, [pc, #104]	; (800782c <disk_initialize+0x1d0>)
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d007      	beq.n	80077da <disk_initialize+0x17e>
 80077ca:	f44f 7100 	mov.w	r1, #512	; 0x200
 80077ce:	2010      	movs	r0, #16
 80077d0:	f7ff fed4 	bl	800757c <send_cmd>
 80077d4:	4603      	mov	r3, r0
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d001      	beq.n	80077de <disk_initialize+0x182>
				ty = 0;
 80077da:	2300      	movs	r3, #0
 80077dc:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 80077de:	4a14      	ldr	r2, [pc, #80]	; (8007830 <disk_initialize+0x1d4>)
 80077e0:	7b7b      	ldrb	r3, [r7, #13]
 80077e2:	7013      	strb	r3, [r2, #0]
	deselect();
 80077e4:	f7ff fe48 	bl	8007478 <deselect>

	if (ty) {			/* OK */
 80077e8:	7b7b      	ldrb	r3, [r7, #13]
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d010      	beq.n	8007810 <disk_initialize+0x1b4>
		FCLK_FAST();			/* Set fast clock */
 80077ee:	4b0e      	ldr	r3, [pc, #56]	; (8007828 <disk_initialize+0x1cc>)
 80077f0:	881b      	ldrh	r3, [r3, #0]
 80077f2:	b29b      	uxth	r3, r3
 80077f4:	4a0c      	ldr	r2, [pc, #48]	; (8007828 <disk_initialize+0x1cc>)
 80077f6:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 80077fa:	b29b      	uxth	r3, r3
 80077fc:	8013      	strh	r3, [r2, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 80077fe:	4b09      	ldr	r3, [pc, #36]	; (8007824 <disk_initialize+0x1c8>)
 8007800:	781b      	ldrb	r3, [r3, #0]
 8007802:	b2db      	uxtb	r3, r3
 8007804:	f023 0301 	bic.w	r3, r3, #1
 8007808:	b2da      	uxtb	r2, r3
 800780a:	4b06      	ldr	r3, [pc, #24]	; (8007824 <disk_initialize+0x1c8>)
 800780c:	701a      	strb	r2, [r3, #0]
 800780e:	e002      	b.n	8007816 <disk_initialize+0x1ba>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 8007810:	4b04      	ldr	r3, [pc, #16]	; (8007824 <disk_initialize+0x1c8>)
 8007812:	2201      	movs	r2, #1
 8007814:	701a      	strb	r2, [r3, #0]
	}
	return Stat;
 8007816:	4b03      	ldr	r3, [pc, #12]	; (8007824 <disk_initialize+0x1c8>)
 8007818:	781b      	ldrb	r3, [r3, #0]
 800781a:	b2db      	uxtb	r3, r3
}
 800781c:	4618      	mov	r0, r3
 800781e:	3714      	adds	r7, #20
 8007820:	46bd      	mov	sp, r7
 8007822:	bd90      	pop	{r4, r7, pc}
 8007824:	200000ae 	.word	0x200000ae
 8007828:	40013000 	.word	0x40013000
 800782c:	20000140 	.word	0x20000140
 8007830:	20000148 	.word	0x20000148

08007834 <disk_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	LBA_t sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 8007834:	b580      	push	{r7, lr}
 8007836:	b086      	sub	sp, #24
 8007838:	af00      	add	r7, sp, #0
 800783a:	60b9      	str	r1, [r7, #8]
 800783c:	607a      	str	r2, [r7, #4]
 800783e:	603b      	str	r3, [r7, #0]
 8007840:	4603      	mov	r3, r0
 8007842:	73fb      	strb	r3, [r7, #15]
	DWORD sect = (DWORD)sector;
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	617b      	str	r3, [r7, #20]


	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8007848:	7bfb      	ldrb	r3, [r7, #15]
 800784a:	2b00      	cmp	r3, #0
 800784c:	d102      	bne.n	8007854 <disk_read+0x20>
 800784e:	683b      	ldr	r3, [r7, #0]
 8007850:	2b00      	cmp	r3, #0
 8007852:	d101      	bne.n	8007858 <disk_read+0x24>
 8007854:	2304      	movs	r3, #4
 8007856:	e04d      	b.n	80078f4 <disk_read+0xc0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8007858:	4b28      	ldr	r3, [pc, #160]	; (80078fc <disk_read+0xc8>)
 800785a:	781b      	ldrb	r3, [r3, #0]
 800785c:	b2db      	uxtb	r3, r3
 800785e:	f003 0301 	and.w	r3, r3, #1
 8007862:	2b00      	cmp	r3, #0
 8007864:	d001      	beq.n	800786a <disk_read+0x36>
 8007866:	2303      	movs	r3, #3
 8007868:	e044      	b.n	80078f4 <disk_read+0xc0>

	if (!(CardType & CT_BLOCK)) sect *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 800786a:	4b25      	ldr	r3, [pc, #148]	; (8007900 <disk_read+0xcc>)
 800786c:	781b      	ldrb	r3, [r3, #0]
 800786e:	f003 0308 	and.w	r3, r3, #8
 8007872:	2b00      	cmp	r3, #0
 8007874:	d102      	bne.n	800787c <disk_read+0x48>
 8007876:	697b      	ldr	r3, [r7, #20]
 8007878:	025b      	lsls	r3, r3, #9
 800787a:	617b      	str	r3, [r7, #20]

	if (count == 1) {	/* Single sector read */
 800787c:	683b      	ldr	r3, [r7, #0]
 800787e:	2b01      	cmp	r3, #1
 8007880:	d111      	bne.n	80078a6 <disk_read+0x72>
		if ((send_cmd(CMD17, sect) == 0)	/* READ_SINGLE_BLOCK */
 8007882:	6979      	ldr	r1, [r7, #20]
 8007884:	2011      	movs	r0, #17
 8007886:	f7ff fe79 	bl	800757c <send_cmd>
 800788a:	4603      	mov	r3, r0
 800788c:	2b00      	cmp	r3, #0
 800788e:	d129      	bne.n	80078e4 <disk_read+0xb0>
			&& rcvr_datablock(buff, 512)) {
 8007890:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007894:	68b8      	ldr	r0, [r7, #8]
 8007896:	f7ff fe15 	bl	80074c4 <rcvr_datablock>
 800789a:	4603      	mov	r3, r0
 800789c:	2b00      	cmp	r3, #0
 800789e:	d021      	beq.n	80078e4 <disk_read+0xb0>
			count = 0;
 80078a0:	2300      	movs	r3, #0
 80078a2:	603b      	str	r3, [r7, #0]
 80078a4:	e01e      	b.n	80078e4 <disk_read+0xb0>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sect) == 0) {	/* READ_MULTIPLE_BLOCK */
 80078a6:	6979      	ldr	r1, [r7, #20]
 80078a8:	2012      	movs	r0, #18
 80078aa:	f7ff fe67 	bl	800757c <send_cmd>
 80078ae:	4603      	mov	r3, r0
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d117      	bne.n	80078e4 <disk_read+0xb0>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 80078b4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80078b8:	68b8      	ldr	r0, [r7, #8]
 80078ba:	f7ff fe03 	bl	80074c4 <rcvr_datablock>
 80078be:	4603      	mov	r3, r0
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d00a      	beq.n	80078da <disk_read+0xa6>
				buff += 512;
 80078c4:	68bb      	ldr	r3, [r7, #8]
 80078c6:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80078ca:	60bb      	str	r3, [r7, #8]
			} while (--count);
 80078cc:	683b      	ldr	r3, [r7, #0]
 80078ce:	3b01      	subs	r3, #1
 80078d0:	603b      	str	r3, [r7, #0]
 80078d2:	683b      	ldr	r3, [r7, #0]
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d1ed      	bne.n	80078b4 <disk_read+0x80>
 80078d8:	e000      	b.n	80078dc <disk_read+0xa8>
				if (!rcvr_datablock(buff, 512)) break;
 80078da:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 80078dc:	2100      	movs	r1, #0
 80078de:	200c      	movs	r0, #12
 80078e0:	f7ff fe4c 	bl	800757c <send_cmd>
		}
	}
	deselect();
 80078e4:	f7ff fdc8 	bl	8007478 <deselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 80078e8:	683b      	ldr	r3, [r7, #0]
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	bf14      	ite	ne
 80078ee:	2301      	movne	r3, #1
 80078f0:	2300      	moveq	r3, #0
 80078f2:	b2db      	uxtb	r3, r3
}
 80078f4:	4618      	mov	r0, r3
 80078f6:	3718      	adds	r7, #24
 80078f8:	46bd      	mov	sp, r7
 80078fa:	bd80      	pop	{r7, pc}
 80078fc:	200000ae 	.word	0x200000ae
 8007900:	20000148 	.word	0x20000148

08007904 <disk_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	LBA_t sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 8007904:	b580      	push	{r7, lr}
 8007906:	b086      	sub	sp, #24
 8007908:	af00      	add	r7, sp, #0
 800790a:	60b9      	str	r1, [r7, #8]
 800790c:	607a      	str	r2, [r7, #4]
 800790e:	603b      	str	r3, [r7, #0]
 8007910:	4603      	mov	r3, r0
 8007912:	73fb      	strb	r3, [r7, #15]
	DWORD sect = (DWORD)sector;
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	617b      	str	r3, [r7, #20]


	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8007918:	7bfb      	ldrb	r3, [r7, #15]
 800791a:	2b00      	cmp	r3, #0
 800791c:	d102      	bne.n	8007924 <disk_write+0x20>
 800791e:	683b      	ldr	r3, [r7, #0]
 8007920:	2b00      	cmp	r3, #0
 8007922:	d101      	bne.n	8007928 <disk_write+0x24>
 8007924:	2304      	movs	r3, #4
 8007926:	e063      	b.n	80079f0 <disk_write+0xec>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 8007928:	4b33      	ldr	r3, [pc, #204]	; (80079f8 <disk_write+0xf4>)
 800792a:	781b      	ldrb	r3, [r3, #0]
 800792c:	b2db      	uxtb	r3, r3
 800792e:	f003 0301 	and.w	r3, r3, #1
 8007932:	2b00      	cmp	r3, #0
 8007934:	d001      	beq.n	800793a <disk_write+0x36>
 8007936:	2303      	movs	r3, #3
 8007938:	e05a      	b.n	80079f0 <disk_write+0xec>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 800793a:	4b2f      	ldr	r3, [pc, #188]	; (80079f8 <disk_write+0xf4>)
 800793c:	781b      	ldrb	r3, [r3, #0]
 800793e:	b2db      	uxtb	r3, r3
 8007940:	f003 0304 	and.w	r3, r3, #4
 8007944:	2b00      	cmp	r3, #0
 8007946:	d001      	beq.n	800794c <disk_write+0x48>
 8007948:	2302      	movs	r3, #2
 800794a:	e051      	b.n	80079f0 <disk_write+0xec>

	if (!(CardType & CT_BLOCK)) sect *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 800794c:	4b2b      	ldr	r3, [pc, #172]	; (80079fc <disk_write+0xf8>)
 800794e:	781b      	ldrb	r3, [r3, #0]
 8007950:	f003 0308 	and.w	r3, r3, #8
 8007954:	2b00      	cmp	r3, #0
 8007956:	d102      	bne.n	800795e <disk_write+0x5a>
 8007958:	697b      	ldr	r3, [r7, #20]
 800795a:	025b      	lsls	r3, r3, #9
 800795c:	617b      	str	r3, [r7, #20]

	if (count == 1) {	/* Single sector write */
 800795e:	683b      	ldr	r3, [r7, #0]
 8007960:	2b01      	cmp	r3, #1
 8007962:	d110      	bne.n	8007986 <disk_write+0x82>
		if ((send_cmd(CMD24, sect) == 0)	/* WRITE_BLOCK */
 8007964:	6979      	ldr	r1, [r7, #20]
 8007966:	2018      	movs	r0, #24
 8007968:	f7ff fe08 	bl	800757c <send_cmd>
 800796c:	4603      	mov	r3, r0
 800796e:	2b00      	cmp	r3, #0
 8007970:	d136      	bne.n	80079e0 <disk_write+0xdc>
			&& xmit_datablock(buff, 0xFE)) {
 8007972:	21fe      	movs	r1, #254	; 0xfe
 8007974:	68b8      	ldr	r0, [r7, #8]
 8007976:	f7ff fdcf 	bl	8007518 <xmit_datablock>
 800797a:	4603      	mov	r3, r0
 800797c:	2b00      	cmp	r3, #0
 800797e:	d02f      	beq.n	80079e0 <disk_write+0xdc>
			count = 0;
 8007980:	2300      	movs	r3, #0
 8007982:	603b      	str	r3, [r7, #0]
 8007984:	e02c      	b.n	80079e0 <disk_write+0xdc>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 8007986:	4b1d      	ldr	r3, [pc, #116]	; (80079fc <disk_write+0xf8>)
 8007988:	781b      	ldrb	r3, [r3, #0]
 800798a:	f003 0306 	and.w	r3, r3, #6
 800798e:	2b00      	cmp	r3, #0
 8007990:	d003      	beq.n	800799a <disk_write+0x96>
 8007992:	6839      	ldr	r1, [r7, #0]
 8007994:	2097      	movs	r0, #151	; 0x97
 8007996:	f7ff fdf1 	bl	800757c <send_cmd>
		if (send_cmd(CMD25, sect) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 800799a:	6979      	ldr	r1, [r7, #20]
 800799c:	2019      	movs	r0, #25
 800799e:	f7ff fded 	bl	800757c <send_cmd>
 80079a2:	4603      	mov	r3, r0
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d11b      	bne.n	80079e0 <disk_write+0xdc>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 80079a8:	21fc      	movs	r1, #252	; 0xfc
 80079aa:	68b8      	ldr	r0, [r7, #8]
 80079ac:	f7ff fdb4 	bl	8007518 <xmit_datablock>
 80079b0:	4603      	mov	r3, r0
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d00a      	beq.n	80079cc <disk_write+0xc8>
				buff += 512;
 80079b6:	68bb      	ldr	r3, [r7, #8]
 80079b8:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80079bc:	60bb      	str	r3, [r7, #8]
			} while (--count);
 80079be:	683b      	ldr	r3, [r7, #0]
 80079c0:	3b01      	subs	r3, #1
 80079c2:	603b      	str	r3, [r7, #0]
 80079c4:	683b      	ldr	r3, [r7, #0]
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d1ee      	bne.n	80079a8 <disk_write+0xa4>
 80079ca:	e000      	b.n	80079ce <disk_write+0xca>
				if (!xmit_datablock(buff, 0xFC)) break;
 80079cc:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 80079ce:	21fd      	movs	r1, #253	; 0xfd
 80079d0:	2000      	movs	r0, #0
 80079d2:	f7ff fda1 	bl	8007518 <xmit_datablock>
 80079d6:	4603      	mov	r3, r0
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d101      	bne.n	80079e0 <disk_write+0xdc>
 80079dc:	2301      	movs	r3, #1
 80079de:	603b      	str	r3, [r7, #0]
		}
	}
	deselect();
 80079e0:	f7ff fd4a 	bl	8007478 <deselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 80079e4:	683b      	ldr	r3, [r7, #0]
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	bf14      	ite	ne
 80079ea:	2301      	movne	r3, #1
 80079ec:	2300      	moveq	r3, #0
 80079ee:	b2db      	uxtb	r3, r3
}
 80079f0:	4618      	mov	r0, r3
 80079f2:	3718      	adds	r7, #24
 80079f4:	46bd      	mov	sp, r7
 80079f6:	bd80      	pop	{r7, pc}
 80079f8:	200000ae 	.word	0x200000ae
 80079fc:	20000148 	.word	0x20000148

08007a00 <disk_timerproc>:
/* This function must be called from timer interrupt routine in period
/  of 1 ms to generate card control timing.
*/

void disk_timerproc (void)
{
 8007a00:	b480      	push	{r7}
 8007a02:	b083      	sub	sp, #12
 8007a04:	af00      	add	r7, sp, #0
	WORD n;
	BYTE s;


	n = Timer1;						/* 1kHz decrement timer stopped at 0 */
 8007a06:	4b1b      	ldr	r3, [pc, #108]	; (8007a74 <disk_timerproc+0x74>)
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	80bb      	strh	r3, [r7, #4]
	if (n) Timer1 = --n;
 8007a0c:	88bb      	ldrh	r3, [r7, #4]
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d005      	beq.n	8007a1e <disk_timerproc+0x1e>
 8007a12:	88bb      	ldrh	r3, [r7, #4]
 8007a14:	3b01      	subs	r3, #1
 8007a16:	80bb      	strh	r3, [r7, #4]
 8007a18:	88bb      	ldrh	r3, [r7, #4]
 8007a1a:	4a16      	ldr	r2, [pc, #88]	; (8007a74 <disk_timerproc+0x74>)
 8007a1c:	6013      	str	r3, [r2, #0]
	n = Timer2;
 8007a1e:	4b16      	ldr	r3, [pc, #88]	; (8007a78 <disk_timerproc+0x78>)
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	80bb      	strh	r3, [r7, #4]
	if (n) Timer2 = --n;
 8007a24:	88bb      	ldrh	r3, [r7, #4]
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d005      	beq.n	8007a36 <disk_timerproc+0x36>
 8007a2a:	88bb      	ldrh	r3, [r7, #4]
 8007a2c:	3b01      	subs	r3, #1
 8007a2e:	80bb      	strh	r3, [r7, #4]
 8007a30:	88bb      	ldrh	r3, [r7, #4]
 8007a32:	4a11      	ldr	r2, [pc, #68]	; (8007a78 <disk_timerproc+0x78>)
 8007a34:	6013      	str	r3, [r2, #0]

	s = Stat;
 8007a36:	4b11      	ldr	r3, [pc, #68]	; (8007a7c <disk_timerproc+0x7c>)
 8007a38:	781b      	ldrb	r3, [r3, #0]
 8007a3a:	71fb      	strb	r3, [r7, #7]
	if (MMC_WP) {	/* Write protected */
		s |= STA_PROTECT;
	} else {		/* Write enabled */
		s &= ~STA_PROTECT;
 8007a3c:	79fb      	ldrb	r3, [r7, #7]
 8007a3e:	f023 0304 	bic.w	r3, r3, #4
 8007a42:	71fb      	strb	r3, [r7, #7]
	}
	if (MMC_CD) {	/* Card is in socket */
 8007a44:	4b0e      	ldr	r3, [pc, #56]	; (8007a80 <disk_timerproc+0x80>)
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	f003 0310 	and.w	r3, r3, #16
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d104      	bne.n	8007a5a <disk_timerproc+0x5a>
		s &= ~STA_NODISK;
 8007a50:	79fb      	ldrb	r3, [r7, #7]
 8007a52:	f023 0302 	bic.w	r3, r3, #2
 8007a56:	71fb      	strb	r3, [r7, #7]
 8007a58:	e003      	b.n	8007a62 <disk_timerproc+0x62>
	} else {		/* Socket empty */
		s |= (STA_NODISK | STA_NOINIT);
 8007a5a:	79fb      	ldrb	r3, [r7, #7]
 8007a5c:	f043 0303 	orr.w	r3, r3, #3
 8007a60:	71fb      	strb	r3, [r7, #7]
	}
	Stat = s;
 8007a62:	4a06      	ldr	r2, [pc, #24]	; (8007a7c <disk_timerproc+0x7c>)
 8007a64:	79fb      	ldrb	r3, [r7, #7]
 8007a66:	7013      	strb	r3, [r2, #0]
}
 8007a68:	bf00      	nop
 8007a6a:	370c      	adds	r7, #12
 8007a6c:	46bd      	mov	sp, r7
 8007a6e:	bc80      	pop	{r7}
 8007a70:	4770      	bx	lr
 8007a72:	bf00      	nop
 8007a74:	20000140 	.word	0x20000140
 8007a78:	20000144 	.word	0x20000144
 8007a7c:	200000ae 	.word	0x200000ae
 8007a80:	40011008 	.word	0x40011008

08007a84 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007a84:	b580      	push	{r7, lr}
 8007a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007a88:	2200      	movs	r2, #0
 8007a8a:	4912      	ldr	r1, [pc, #72]	; (8007ad4 <MX_USB_DEVICE_Init+0x50>)
 8007a8c:	4812      	ldr	r0, [pc, #72]	; (8007ad8 <MX_USB_DEVICE_Init+0x54>)
 8007a8e:	f7fe fb09 	bl	80060a4 <USBD_Init>
 8007a92:	4603      	mov	r3, r0
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d001      	beq.n	8007a9c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007a98:	f7f8 fc0c 	bl	80002b4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_MSC) != USBD_OK)
 8007a9c:	490f      	ldr	r1, [pc, #60]	; (8007adc <MX_USB_DEVICE_Init+0x58>)
 8007a9e:	480e      	ldr	r0, [pc, #56]	; (8007ad8 <MX_USB_DEVICE_Init+0x54>)
 8007aa0:	f7fe fb2b 	bl	80060fa <USBD_RegisterClass>
 8007aa4:	4603      	mov	r3, r0
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d001      	beq.n	8007aae <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007aaa:	f7f8 fc03 	bl	80002b4 <Error_Handler>
  }
  if (USBD_MSC_RegisterStorage(&hUsbDeviceFS, &USBD_Storage_Interface_fops_FS) != USBD_OK)
 8007aae:	490c      	ldr	r1, [pc, #48]	; (8007ae0 <MX_USB_DEVICE_Init+0x5c>)
 8007ab0:	4809      	ldr	r0, [pc, #36]	; (8007ad8 <MX_USB_DEVICE_Init+0x54>)
 8007ab2:	f7fd fad7 	bl	8005064 <USBD_MSC_RegisterStorage>
 8007ab6:	4603      	mov	r3, r0
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d001      	beq.n	8007ac0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007abc:	f7f8 fbfa 	bl	80002b4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007ac0:	4805      	ldr	r0, [pc, #20]	; (8007ad8 <MX_USB_DEVICE_Init+0x54>)
 8007ac2:	f7fe fb33 	bl	800612c <USBD_Start>
 8007ac6:	4603      	mov	r3, r0
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d001      	beq.n	8007ad0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007acc:	f7f8 fbf2 	bl	80002b4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007ad0:	bf00      	nop
 8007ad2:	bd80      	pop	{r7, pc}
 8007ad4:	200000b0 	.word	0x200000b0
 8007ad8:	200003c0 	.word	0x200003c0
 8007adc:	2000000c 	.word	0x2000000c
 8007ae0:	20000100 	.word	0x20000100

08007ae4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007ae4:	b480      	push	{r7}
 8007ae6:	b083      	sub	sp, #12
 8007ae8:	af00      	add	r7, sp, #0
 8007aea:	4603      	mov	r3, r0
 8007aec:	6039      	str	r1, [r7, #0]
 8007aee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007af0:	683b      	ldr	r3, [r7, #0]
 8007af2:	2212      	movs	r2, #18
 8007af4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007af6:	4b03      	ldr	r3, [pc, #12]	; (8007b04 <USBD_FS_DeviceDescriptor+0x20>)
}
 8007af8:	4618      	mov	r0, r3
 8007afa:	370c      	adds	r7, #12
 8007afc:	46bd      	mov	sp, r7
 8007afe:	bc80      	pop	{r7}
 8007b00:	4770      	bx	lr
 8007b02:	bf00      	nop
 8007b04:	200000cc 	.word	0x200000cc

08007b08 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007b08:	b480      	push	{r7}
 8007b0a:	b083      	sub	sp, #12
 8007b0c:	af00      	add	r7, sp, #0
 8007b0e:	4603      	mov	r3, r0
 8007b10:	6039      	str	r1, [r7, #0]
 8007b12:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007b14:	683b      	ldr	r3, [r7, #0]
 8007b16:	2204      	movs	r2, #4
 8007b18:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007b1a:	4b03      	ldr	r3, [pc, #12]	; (8007b28 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007b1c:	4618      	mov	r0, r3
 8007b1e:	370c      	adds	r7, #12
 8007b20:	46bd      	mov	sp, r7
 8007b22:	bc80      	pop	{r7}
 8007b24:	4770      	bx	lr
 8007b26:	bf00      	nop
 8007b28:	200000e0 	.word	0x200000e0

08007b2c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007b2c:	b580      	push	{r7, lr}
 8007b2e:	b082      	sub	sp, #8
 8007b30:	af00      	add	r7, sp, #0
 8007b32:	4603      	mov	r3, r0
 8007b34:	6039      	str	r1, [r7, #0]
 8007b36:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007b38:	79fb      	ldrb	r3, [r7, #7]
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d105      	bne.n	8007b4a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007b3e:	683a      	ldr	r2, [r7, #0]
 8007b40:	4907      	ldr	r1, [pc, #28]	; (8007b60 <USBD_FS_ProductStrDescriptor+0x34>)
 8007b42:	4808      	ldr	r0, [pc, #32]	; (8007b64 <USBD_FS_ProductStrDescriptor+0x38>)
 8007b44:	f7ff fa6a 	bl	800701c <USBD_GetString>
 8007b48:	e004      	b.n	8007b54 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007b4a:	683a      	ldr	r2, [r7, #0]
 8007b4c:	4904      	ldr	r1, [pc, #16]	; (8007b60 <USBD_FS_ProductStrDescriptor+0x34>)
 8007b4e:	4805      	ldr	r0, [pc, #20]	; (8007b64 <USBD_FS_ProductStrDescriptor+0x38>)
 8007b50:	f7ff fa64 	bl	800701c <USBD_GetString>
  }
  return USBD_StrDesc;
 8007b54:	4b02      	ldr	r3, [pc, #8]	; (8007b60 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007b56:	4618      	mov	r0, r3
 8007b58:	3708      	adds	r7, #8
 8007b5a:	46bd      	mov	sp, r7
 8007b5c:	bd80      	pop	{r7, pc}
 8007b5e:	bf00      	nop
 8007b60:	20000684 	.word	0x20000684
 8007b64:	080083ec 	.word	0x080083ec

08007b68 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007b68:	b580      	push	{r7, lr}
 8007b6a:	b082      	sub	sp, #8
 8007b6c:	af00      	add	r7, sp, #0
 8007b6e:	4603      	mov	r3, r0
 8007b70:	6039      	str	r1, [r7, #0]
 8007b72:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007b74:	683a      	ldr	r2, [r7, #0]
 8007b76:	4904      	ldr	r1, [pc, #16]	; (8007b88 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007b78:	4804      	ldr	r0, [pc, #16]	; (8007b8c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007b7a:	f7ff fa4f 	bl	800701c <USBD_GetString>
  return USBD_StrDesc;
 8007b7e:	4b02      	ldr	r3, [pc, #8]	; (8007b88 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007b80:	4618      	mov	r0, r3
 8007b82:	3708      	adds	r7, #8
 8007b84:	46bd      	mov	sp, r7
 8007b86:	bd80      	pop	{r7, pc}
 8007b88:	20000684 	.word	0x20000684
 8007b8c:	08008400 	.word	0x08008400

08007b90 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007b90:	b580      	push	{r7, lr}
 8007b92:	b082      	sub	sp, #8
 8007b94:	af00      	add	r7, sp, #0
 8007b96:	4603      	mov	r3, r0
 8007b98:	6039      	str	r1, [r7, #0]
 8007b9a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007b9c:	683b      	ldr	r3, [r7, #0]
 8007b9e:	221a      	movs	r2, #26
 8007ba0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007ba2:	f000 f843 	bl	8007c2c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007ba6:	4b02      	ldr	r3, [pc, #8]	; (8007bb0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007ba8:	4618      	mov	r0, r3
 8007baa:	3708      	adds	r7, #8
 8007bac:	46bd      	mov	sp, r7
 8007bae:	bd80      	pop	{r7, pc}
 8007bb0:	200000e4 	.word	0x200000e4

08007bb4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007bb4:	b580      	push	{r7, lr}
 8007bb6:	b082      	sub	sp, #8
 8007bb8:	af00      	add	r7, sp, #0
 8007bba:	4603      	mov	r3, r0
 8007bbc:	6039      	str	r1, [r7, #0]
 8007bbe:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007bc0:	79fb      	ldrb	r3, [r7, #7]
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d105      	bne.n	8007bd2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007bc6:	683a      	ldr	r2, [r7, #0]
 8007bc8:	4907      	ldr	r1, [pc, #28]	; (8007be8 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007bca:	4808      	ldr	r0, [pc, #32]	; (8007bec <USBD_FS_ConfigStrDescriptor+0x38>)
 8007bcc:	f7ff fa26 	bl	800701c <USBD_GetString>
 8007bd0:	e004      	b.n	8007bdc <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007bd2:	683a      	ldr	r2, [r7, #0]
 8007bd4:	4904      	ldr	r1, [pc, #16]	; (8007be8 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007bd6:	4805      	ldr	r0, [pc, #20]	; (8007bec <USBD_FS_ConfigStrDescriptor+0x38>)
 8007bd8:	f7ff fa20 	bl	800701c <USBD_GetString>
  }
  return USBD_StrDesc;
 8007bdc:	4b02      	ldr	r3, [pc, #8]	; (8007be8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007bde:	4618      	mov	r0, r3
 8007be0:	3708      	adds	r7, #8
 8007be2:	46bd      	mov	sp, r7
 8007be4:	bd80      	pop	{r7, pc}
 8007be6:	bf00      	nop
 8007be8:	20000684 	.word	0x20000684
 8007bec:	08008414 	.word	0x08008414

08007bf0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007bf0:	b580      	push	{r7, lr}
 8007bf2:	b082      	sub	sp, #8
 8007bf4:	af00      	add	r7, sp, #0
 8007bf6:	4603      	mov	r3, r0
 8007bf8:	6039      	str	r1, [r7, #0]
 8007bfa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007bfc:	79fb      	ldrb	r3, [r7, #7]
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d105      	bne.n	8007c0e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007c02:	683a      	ldr	r2, [r7, #0]
 8007c04:	4907      	ldr	r1, [pc, #28]	; (8007c24 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007c06:	4808      	ldr	r0, [pc, #32]	; (8007c28 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007c08:	f7ff fa08 	bl	800701c <USBD_GetString>
 8007c0c:	e004      	b.n	8007c18 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007c0e:	683a      	ldr	r2, [r7, #0]
 8007c10:	4904      	ldr	r1, [pc, #16]	; (8007c24 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007c12:	4805      	ldr	r0, [pc, #20]	; (8007c28 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007c14:	f7ff fa02 	bl	800701c <USBD_GetString>
  }
  return USBD_StrDesc;
 8007c18:	4b02      	ldr	r3, [pc, #8]	; (8007c24 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007c1a:	4618      	mov	r0, r3
 8007c1c:	3708      	adds	r7, #8
 8007c1e:	46bd      	mov	sp, r7
 8007c20:	bd80      	pop	{r7, pc}
 8007c22:	bf00      	nop
 8007c24:	20000684 	.word	0x20000684
 8007c28:	08008420 	.word	0x08008420

08007c2c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007c2c:	b580      	push	{r7, lr}
 8007c2e:	b084      	sub	sp, #16
 8007c30:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007c32:	4b0f      	ldr	r3, [pc, #60]	; (8007c70 <Get_SerialNum+0x44>)
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007c38:	4b0e      	ldr	r3, [pc, #56]	; (8007c74 <Get_SerialNum+0x48>)
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007c3e:	4b0e      	ldr	r3, [pc, #56]	; (8007c78 <Get_SerialNum+0x4c>)
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007c44:	68fa      	ldr	r2, [r7, #12]
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	4413      	add	r3, r2
 8007c4a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d009      	beq.n	8007c66 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007c52:	2208      	movs	r2, #8
 8007c54:	4909      	ldr	r1, [pc, #36]	; (8007c7c <Get_SerialNum+0x50>)
 8007c56:	68f8      	ldr	r0, [r7, #12]
 8007c58:	f000 f814 	bl	8007c84 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007c5c:	2204      	movs	r2, #4
 8007c5e:	4908      	ldr	r1, [pc, #32]	; (8007c80 <Get_SerialNum+0x54>)
 8007c60:	68b8      	ldr	r0, [r7, #8]
 8007c62:	f000 f80f 	bl	8007c84 <IntToUnicode>
  }
}
 8007c66:	bf00      	nop
 8007c68:	3710      	adds	r7, #16
 8007c6a:	46bd      	mov	sp, r7
 8007c6c:	bd80      	pop	{r7, pc}
 8007c6e:	bf00      	nop
 8007c70:	1ffff7e8 	.word	0x1ffff7e8
 8007c74:	1ffff7ec 	.word	0x1ffff7ec
 8007c78:	1ffff7f0 	.word	0x1ffff7f0
 8007c7c:	200000e6 	.word	0x200000e6
 8007c80:	200000f6 	.word	0x200000f6

08007c84 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007c84:	b480      	push	{r7}
 8007c86:	b087      	sub	sp, #28
 8007c88:	af00      	add	r7, sp, #0
 8007c8a:	60f8      	str	r0, [r7, #12]
 8007c8c:	60b9      	str	r1, [r7, #8]
 8007c8e:	4613      	mov	r3, r2
 8007c90:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007c92:	2300      	movs	r3, #0
 8007c94:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007c96:	2300      	movs	r3, #0
 8007c98:	75fb      	strb	r3, [r7, #23]
 8007c9a:	e027      	b.n	8007cec <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	0f1b      	lsrs	r3, r3, #28
 8007ca0:	2b09      	cmp	r3, #9
 8007ca2:	d80b      	bhi.n	8007cbc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	0f1b      	lsrs	r3, r3, #28
 8007ca8:	b2da      	uxtb	r2, r3
 8007caa:	7dfb      	ldrb	r3, [r7, #23]
 8007cac:	005b      	lsls	r3, r3, #1
 8007cae:	4619      	mov	r1, r3
 8007cb0:	68bb      	ldr	r3, [r7, #8]
 8007cb2:	440b      	add	r3, r1
 8007cb4:	3230      	adds	r2, #48	; 0x30
 8007cb6:	b2d2      	uxtb	r2, r2
 8007cb8:	701a      	strb	r2, [r3, #0]
 8007cba:	e00a      	b.n	8007cd2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	0f1b      	lsrs	r3, r3, #28
 8007cc0:	b2da      	uxtb	r2, r3
 8007cc2:	7dfb      	ldrb	r3, [r7, #23]
 8007cc4:	005b      	lsls	r3, r3, #1
 8007cc6:	4619      	mov	r1, r3
 8007cc8:	68bb      	ldr	r3, [r7, #8]
 8007cca:	440b      	add	r3, r1
 8007ccc:	3237      	adds	r2, #55	; 0x37
 8007cce:	b2d2      	uxtb	r2, r2
 8007cd0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	011b      	lsls	r3, r3, #4
 8007cd6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007cd8:	7dfb      	ldrb	r3, [r7, #23]
 8007cda:	005b      	lsls	r3, r3, #1
 8007cdc:	3301      	adds	r3, #1
 8007cde:	68ba      	ldr	r2, [r7, #8]
 8007ce0:	4413      	add	r3, r2
 8007ce2:	2200      	movs	r2, #0
 8007ce4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007ce6:	7dfb      	ldrb	r3, [r7, #23]
 8007ce8:	3301      	adds	r3, #1
 8007cea:	75fb      	strb	r3, [r7, #23]
 8007cec:	7dfa      	ldrb	r2, [r7, #23]
 8007cee:	79fb      	ldrb	r3, [r7, #7]
 8007cf0:	429a      	cmp	r2, r3
 8007cf2:	d3d3      	bcc.n	8007c9c <IntToUnicode+0x18>
  }
}
 8007cf4:	bf00      	nop
 8007cf6:	bf00      	nop
 8007cf8:	371c      	adds	r7, #28
 8007cfa:	46bd      	mov	sp, r7
 8007cfc:	bc80      	pop	{r7}
 8007cfe:	4770      	bx	lr

08007d00 <STORAGE_Init_FS>:
  * @brief  Initializes over USB FS IP
  * @param  lun:
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Init_FS(uint8_t lun)
{
 8007d00:	b480      	push	{r7}
 8007d02:	b083      	sub	sp, #12
 8007d04:	af00      	add	r7, sp, #0
 8007d06:	4603      	mov	r3, r0
 8007d08:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 2 */
	//DSTATUS ret = disk_initialize(lun);
	//if(ret& STA_NOINIT)
		//return (USBD_FAIL);
  return (USBD_OK);
 8007d0a:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 8007d0c:	4618      	mov	r0, r3
 8007d0e:	370c      	adds	r7, #12
 8007d10:	46bd      	mov	sp, r7
 8007d12:	bc80      	pop	{r7}
 8007d14:	4770      	bx	lr

08007d16 <STORAGE_GetCapacity_FS>:
  * @param  block_num: .
  * @param  block_size: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_GetCapacity_FS(uint8_t lun, uint32_t *block_num, uint16_t *block_size)
{
 8007d16:	b480      	push	{r7}
 8007d18:	b085      	sub	sp, #20
 8007d1a:	af00      	add	r7, sp, #0
 8007d1c:	4603      	mov	r3, r0
 8007d1e:	60b9      	str	r1, [r7, #8]
 8007d20:	607a      	str	r2, [r7, #4]
 8007d22:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 3 */
  *block_num  = STORAGE_BLK_NBR;
 8007d24:	68bb      	ldr	r3, [r7, #8]
 8007d26:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007d2a:	601a      	str	r2, [r3, #0]
  *block_size = STORAGE_BLK_SIZ;
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007d32:	801a      	strh	r2, [r3, #0]
  return (USBD_OK);
 8007d34:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007d36:	4618      	mov	r0, r3
 8007d38:	3714      	adds	r7, #20
 8007d3a:	46bd      	mov	sp, r7
 8007d3c:	bc80      	pop	{r7}
 8007d3e:	4770      	bx	lr

08007d40 <STORAGE_IsReady_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsReady_FS(uint8_t lun)
{
 8007d40:	b480      	push	{r7}
 8007d42:	b083      	sub	sp, #12
 8007d44:	af00      	add	r7, sp, #0
 8007d46:	4603      	mov	r3, r0
 8007d48:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007d4a:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007d4c:	4618      	mov	r0, r3
 8007d4e:	370c      	adds	r7, #12
 8007d50:	46bd      	mov	sp, r7
 8007d52:	bc80      	pop	{r7}
 8007d54:	4770      	bx	lr

08007d56 <STORAGE_IsWriteProtected_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsWriteProtected_FS(uint8_t lun)
{
 8007d56:	b480      	push	{r7}
 8007d58:	b083      	sub	sp, #12
 8007d5a:	af00      	add	r7, sp, #0
 8007d5c:	4603      	mov	r3, r0
 8007d5e:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 8007d60:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007d62:	4618      	mov	r0, r3
 8007d64:	370c      	adds	r7, #12
 8007d66:	46bd      	mov	sp, r7
 8007d68:	bc80      	pop	{r7}
 8007d6a:	4770      	bx	lr

08007d6c <STORAGE_Read_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Read_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 8007d6c:	b580      	push	{r7, lr}
 8007d6e:	b086      	sub	sp, #24
 8007d70:	af00      	add	r7, sp, #0
 8007d72:	60b9      	str	r1, [r7, #8]
 8007d74:	607a      	str	r2, [r7, #4]
 8007d76:	461a      	mov	r2, r3
 8007d78:	4603      	mov	r3, r0
 8007d7a:	73fb      	strb	r3, [r7, #15]
 8007d7c:	4613      	mov	r3, r2
 8007d7e:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 6 */
	DRESULT ret = disk_read(lun, buf, blk_addr, blk_len);
 8007d80:	89bb      	ldrh	r3, [r7, #12]
 8007d82:	7bf8      	ldrb	r0, [r7, #15]
 8007d84:	687a      	ldr	r2, [r7, #4]
 8007d86:	68b9      	ldr	r1, [r7, #8]
 8007d88:	f7ff fd54 	bl	8007834 <disk_read>
 8007d8c:	4603      	mov	r3, r0
 8007d8e:	75fb      	strb	r3, [r7, #23]
	if(ret != RES_OK) return (USBD_FAIL);
 8007d90:	7dfb      	ldrb	r3, [r7, #23]
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d001      	beq.n	8007d9a <STORAGE_Read_FS+0x2e>
 8007d96:	2302      	movs	r3, #2
 8007d98:	e000      	b.n	8007d9c <STORAGE_Read_FS+0x30>
  return (USBD_OK);
 8007d9a:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8007d9c:	4618      	mov	r0, r3
 8007d9e:	3718      	adds	r7, #24
 8007da0:	46bd      	mov	sp, r7
 8007da2:	bd80      	pop	{r7, pc}

08007da4 <STORAGE_Write_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Write_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 8007da4:	b580      	push	{r7, lr}
 8007da6:	b086      	sub	sp, #24
 8007da8:	af00      	add	r7, sp, #0
 8007daa:	60b9      	str	r1, [r7, #8]
 8007dac:	607a      	str	r2, [r7, #4]
 8007dae:	461a      	mov	r2, r3
 8007db0:	4603      	mov	r3, r0
 8007db2:	73fb      	strb	r3, [r7, #15]
 8007db4:	4613      	mov	r3, r2
 8007db6:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 7 */
	DRESULT ret = disk_write(lun, buf, blk_addr, blk_len);
 8007db8:	89bb      	ldrh	r3, [r7, #12]
 8007dba:	7bf8      	ldrb	r0, [r7, #15]
 8007dbc:	687a      	ldr	r2, [r7, #4]
 8007dbe:	68b9      	ldr	r1, [r7, #8]
 8007dc0:	f7ff fda0 	bl	8007904 <disk_write>
 8007dc4:	4603      	mov	r3, r0
 8007dc6:	75fb      	strb	r3, [r7, #23]
	if(ret != RES_OK) return (USBD_FAIL);
 8007dc8:	7dfb      	ldrb	r3, [r7, #23]
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d001      	beq.n	8007dd2 <STORAGE_Write_FS+0x2e>
 8007dce:	2302      	movs	r3, #2
 8007dd0:	e000      	b.n	8007dd4 <STORAGE_Write_FS+0x30>
  return (USBD_OK);
 8007dd2:	2300      	movs	r3, #0
  /* USER CODE END 7 */
}
 8007dd4:	4618      	mov	r0, r3
 8007dd6:	3718      	adds	r7, #24
 8007dd8:	46bd      	mov	sp, r7
 8007dda:	bd80      	pop	{r7, pc}

08007ddc <STORAGE_GetMaxLun_FS>:
  * @brief  .
  * @param  None
  * @retval .
  */
int8_t STORAGE_GetMaxLun_FS(void)
{
 8007ddc:	b480      	push	{r7}
 8007dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  return (STORAGE_LUN_NBR - 1);
 8007de0:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 8007de2:	4618      	mov	r0, r3
 8007de4:	46bd      	mov	sp, r7
 8007de6:	bc80      	pop	{r7}
 8007de8:	4770      	bx	lr
	...

08007dec <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007dec:	b580      	push	{r7, lr}
 8007dee:	b084      	sub	sp, #16
 8007df0:	af00      	add	r7, sp, #0
 8007df2:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	4a0d      	ldr	r2, [pc, #52]	; (8007e30 <HAL_PCD_MspInit+0x44>)
 8007dfa:	4293      	cmp	r3, r2
 8007dfc:	d113      	bne.n	8007e26 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8007dfe:	4b0d      	ldr	r3, [pc, #52]	; (8007e34 <HAL_PCD_MspInit+0x48>)
 8007e00:	69db      	ldr	r3, [r3, #28]
 8007e02:	4a0c      	ldr	r2, [pc, #48]	; (8007e34 <HAL_PCD_MspInit+0x48>)
 8007e04:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007e08:	61d3      	str	r3, [r2, #28]
 8007e0a:	4b0a      	ldr	r3, [pc, #40]	; (8007e34 <HAL_PCD_MspInit+0x48>)
 8007e0c:	69db      	ldr	r3, [r3, #28]
 8007e0e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007e12:	60fb      	str	r3, [r7, #12]
 8007e14:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8007e16:	2200      	movs	r2, #0
 8007e18:	2100      	movs	r1, #0
 8007e1a:	2014      	movs	r0, #20
 8007e1c:	f7f8 fc1d 	bl	800065a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8007e20:	2014      	movs	r0, #20
 8007e22:	f7f8 fc36 	bl	8000692 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8007e26:	bf00      	nop
 8007e28:	3710      	adds	r7, #16
 8007e2a:	46bd      	mov	sp, r7
 8007e2c:	bd80      	pop	{r7, pc}
 8007e2e:	bf00      	nop
 8007e30:	40005c00 	.word	0x40005c00
 8007e34:	40021000 	.word	0x40021000

08007e38 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007e38:	b580      	push	{r7, lr}
 8007e3a:	b082      	sub	sp, #8
 8007e3c:	af00      	add	r7, sp, #0
 8007e3e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8007e4c:	4619      	mov	r1, r3
 8007e4e:	4610      	mov	r0, r2
 8007e50:	f7fe f9b4 	bl	80061bc <USBD_LL_SetupStage>
}
 8007e54:	bf00      	nop
 8007e56:	3708      	adds	r7, #8
 8007e58:	46bd      	mov	sp, r7
 8007e5a:	bd80      	pop	{r7, pc}

08007e5c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007e5c:	b580      	push	{r7, lr}
 8007e5e:	b082      	sub	sp, #8
 8007e60:	af00      	add	r7, sp, #0
 8007e62:	6078      	str	r0, [r7, #4]
 8007e64:	460b      	mov	r3, r1
 8007e66:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8007e6e:	78fa      	ldrb	r2, [r7, #3]
 8007e70:	6879      	ldr	r1, [r7, #4]
 8007e72:	4613      	mov	r3, r2
 8007e74:	009b      	lsls	r3, r3, #2
 8007e76:	4413      	add	r3, r2
 8007e78:	00db      	lsls	r3, r3, #3
 8007e7a:	440b      	add	r3, r1
 8007e7c:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8007e80:	681a      	ldr	r2, [r3, #0]
 8007e82:	78fb      	ldrb	r3, [r7, #3]
 8007e84:	4619      	mov	r1, r3
 8007e86:	f7fe f9e6 	bl	8006256 <USBD_LL_DataOutStage>
}
 8007e8a:	bf00      	nop
 8007e8c:	3708      	adds	r7, #8
 8007e8e:	46bd      	mov	sp, r7
 8007e90:	bd80      	pop	{r7, pc}

08007e92 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007e92:	b580      	push	{r7, lr}
 8007e94:	b082      	sub	sp, #8
 8007e96:	af00      	add	r7, sp, #0
 8007e98:	6078      	str	r0, [r7, #4]
 8007e9a:	460b      	mov	r3, r1
 8007e9c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8007ea4:	78fa      	ldrb	r2, [r7, #3]
 8007ea6:	6879      	ldr	r1, [r7, #4]
 8007ea8:	4613      	mov	r3, r2
 8007eaa:	009b      	lsls	r3, r3, #2
 8007eac:	4413      	add	r3, r2
 8007eae:	00db      	lsls	r3, r3, #3
 8007eb0:	440b      	add	r3, r1
 8007eb2:	333c      	adds	r3, #60	; 0x3c
 8007eb4:	681a      	ldr	r2, [r3, #0]
 8007eb6:	78fb      	ldrb	r3, [r7, #3]
 8007eb8:	4619      	mov	r1, r3
 8007eba:	f7fe fa3d 	bl	8006338 <USBD_LL_DataInStage>
}
 8007ebe:	bf00      	nop
 8007ec0:	3708      	adds	r7, #8
 8007ec2:	46bd      	mov	sp, r7
 8007ec4:	bd80      	pop	{r7, pc}

08007ec6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007ec6:	b580      	push	{r7, lr}
 8007ec8:	b082      	sub	sp, #8
 8007eca:	af00      	add	r7, sp, #0
 8007ecc:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007ed4:	4618      	mov	r0, r3
 8007ed6:	f7fe fb4d 	bl	8006574 <USBD_LL_SOF>
}
 8007eda:	bf00      	nop
 8007edc:	3708      	adds	r7, #8
 8007ede:	46bd      	mov	sp, r7
 8007ee0:	bd80      	pop	{r7, pc}

08007ee2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007ee2:	b580      	push	{r7, lr}
 8007ee4:	b084      	sub	sp, #16
 8007ee6:	af00      	add	r7, sp, #0
 8007ee8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007eea:	2301      	movs	r3, #1
 8007eec:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	689b      	ldr	r3, [r3, #8]
 8007ef2:	2b02      	cmp	r3, #2
 8007ef4:	d001      	beq.n	8007efa <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8007ef6:	f7f8 f9dd 	bl	80002b4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007f00:	7bfa      	ldrb	r2, [r7, #15]
 8007f02:	4611      	mov	r1, r2
 8007f04:	4618      	mov	r0, r3
 8007f06:	f7fe fafd 	bl	8006504 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007f10:	4618      	mov	r0, r3
 8007f12:	f7fe fab6 	bl	8006482 <USBD_LL_Reset>
}
 8007f16:	bf00      	nop
 8007f18:	3710      	adds	r7, #16
 8007f1a:	46bd      	mov	sp, r7
 8007f1c:	bd80      	pop	{r7, pc}
	...

08007f20 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007f20:	b580      	push	{r7, lr}
 8007f22:	b082      	sub	sp, #8
 8007f24:	af00      	add	r7, sp, #0
 8007f26:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007f2e:	4618      	mov	r0, r3
 8007f30:	f7fe faf7 	bl	8006522 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	699b      	ldr	r3, [r3, #24]
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d005      	beq.n	8007f48 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007f3c:	4b04      	ldr	r3, [pc, #16]	; (8007f50 <HAL_PCD_SuspendCallback+0x30>)
 8007f3e:	691b      	ldr	r3, [r3, #16]
 8007f40:	4a03      	ldr	r2, [pc, #12]	; (8007f50 <HAL_PCD_SuspendCallback+0x30>)
 8007f42:	f043 0306 	orr.w	r3, r3, #6
 8007f46:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007f48:	bf00      	nop
 8007f4a:	3708      	adds	r7, #8
 8007f4c:	46bd      	mov	sp, r7
 8007f4e:	bd80      	pop	{r7, pc}
 8007f50:	e000ed00 	.word	0xe000ed00

08007f54 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007f54:	b580      	push	{r7, lr}
 8007f56:	b082      	sub	sp, #8
 8007f58:	af00      	add	r7, sp, #0
 8007f5a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007f62:	4618      	mov	r0, r3
 8007f64:	f7fe faf1 	bl	800654a <USBD_LL_Resume>
}
 8007f68:	bf00      	nop
 8007f6a:	3708      	adds	r7, #8
 8007f6c:	46bd      	mov	sp, r7
 8007f6e:	bd80      	pop	{r7, pc}

08007f70 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007f70:	b580      	push	{r7, lr}
 8007f72:	b082      	sub	sp, #8
 8007f74:	af00      	add	r7, sp, #0
 8007f76:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8007f78:	4a23      	ldr	r2, [pc, #140]	; (8008008 <USBD_LL_Init+0x98>)
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	4a21      	ldr	r2, [pc, #132]	; (8008008 <USBD_LL_Init+0x98>)
 8007f84:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8007f88:	4b1f      	ldr	r3, [pc, #124]	; (8008008 <USBD_LL_Init+0x98>)
 8007f8a:	4a20      	ldr	r2, [pc, #128]	; (800800c <USBD_LL_Init+0x9c>)
 8007f8c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8007f8e:	4b1e      	ldr	r3, [pc, #120]	; (8008008 <USBD_LL_Init+0x98>)
 8007f90:	2208      	movs	r2, #8
 8007f92:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8007f94:	4b1c      	ldr	r3, [pc, #112]	; (8008008 <USBD_LL_Init+0x98>)
 8007f96:	2202      	movs	r2, #2
 8007f98:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8007f9a:	4b1b      	ldr	r3, [pc, #108]	; (8008008 <USBD_LL_Init+0x98>)
 8007f9c:	2200      	movs	r2, #0
 8007f9e:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8007fa0:	4b19      	ldr	r3, [pc, #100]	; (8008008 <USBD_LL_Init+0x98>)
 8007fa2:	2200      	movs	r2, #0
 8007fa4:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8007fa6:	4b18      	ldr	r3, [pc, #96]	; (8008008 <USBD_LL_Init+0x98>)
 8007fa8:	2200      	movs	r2, #0
 8007faa:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8007fac:	4816      	ldr	r0, [pc, #88]	; (8008008 <USBD_LL_Init+0x98>)
 8007fae:	f7f8 fd27 	bl	8000a00 <HAL_PCD_Init>
 8007fb2:	4603      	mov	r3, r0
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d001      	beq.n	8007fbc <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8007fb8:	f7f8 f97c 	bl	80002b4 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007fc2:	2318      	movs	r3, #24
 8007fc4:	2200      	movs	r2, #0
 8007fc6:	2100      	movs	r1, #0
 8007fc8:	f7fa f896 	bl	80020f8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007fd2:	2358      	movs	r3, #88	; 0x58
 8007fd4:	2200      	movs	r2, #0
 8007fd6:	2180      	movs	r1, #128	; 0x80
 8007fd8:	f7fa f88e 	bl	80020f8 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_MSC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0x98);
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007fe2:	2398      	movs	r3, #152	; 0x98
 8007fe4:	2200      	movs	r2, #0
 8007fe6:	2181      	movs	r1, #129	; 0x81
 8007fe8:	f7fa f886 	bl	80020f8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0xD8);
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007ff2:	23d8      	movs	r3, #216	; 0xd8
 8007ff4:	2200      	movs	r2, #0
 8007ff6:	2101      	movs	r1, #1
 8007ff8:	f7fa f87e 	bl	80020f8 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_MSC */
  return USBD_OK;
 8007ffc:	2300      	movs	r3, #0
}
 8007ffe:	4618      	mov	r0, r3
 8008000:	3708      	adds	r7, #8
 8008002:	46bd      	mov	sp, r7
 8008004:	bd80      	pop	{r7, pc}
 8008006:	bf00      	nop
 8008008:	20000884 	.word	0x20000884
 800800c:	40005c00 	.word	0x40005c00

08008010 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008010:	b580      	push	{r7, lr}
 8008012:	b084      	sub	sp, #16
 8008014:	af00      	add	r7, sp, #0
 8008016:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008018:	2300      	movs	r3, #0
 800801a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800801c:	2300      	movs	r3, #0
 800801e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008026:	4618      	mov	r0, r3
 8008028:	f7f8 fdf5 	bl	8000c16 <HAL_PCD_Start>
 800802c:	4603      	mov	r3, r0
 800802e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008030:	7bfb      	ldrb	r3, [r7, #15]
 8008032:	4618      	mov	r0, r3
 8008034:	f000 f96e 	bl	8008314 <USBD_Get_USB_Status>
 8008038:	4603      	mov	r3, r0
 800803a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800803c:	7bbb      	ldrb	r3, [r7, #14]
}
 800803e:	4618      	mov	r0, r3
 8008040:	3710      	adds	r7, #16
 8008042:	46bd      	mov	sp, r7
 8008044:	bd80      	pop	{r7, pc}

08008046 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008046:	b580      	push	{r7, lr}
 8008048:	b084      	sub	sp, #16
 800804a:	af00      	add	r7, sp, #0
 800804c:	6078      	str	r0, [r7, #4]
 800804e:	4608      	mov	r0, r1
 8008050:	4611      	mov	r1, r2
 8008052:	461a      	mov	r2, r3
 8008054:	4603      	mov	r3, r0
 8008056:	70fb      	strb	r3, [r7, #3]
 8008058:	460b      	mov	r3, r1
 800805a:	70bb      	strb	r3, [r7, #2]
 800805c:	4613      	mov	r3, r2
 800805e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008060:	2300      	movs	r3, #0
 8008062:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008064:	2300      	movs	r3, #0
 8008066:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800806e:	78bb      	ldrb	r3, [r7, #2]
 8008070:	883a      	ldrh	r2, [r7, #0]
 8008072:	78f9      	ldrb	r1, [r7, #3]
 8008074:	f7f8 ff6f 	bl	8000f56 <HAL_PCD_EP_Open>
 8008078:	4603      	mov	r3, r0
 800807a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800807c:	7bfb      	ldrb	r3, [r7, #15]
 800807e:	4618      	mov	r0, r3
 8008080:	f000 f948 	bl	8008314 <USBD_Get_USB_Status>
 8008084:	4603      	mov	r3, r0
 8008086:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008088:	7bbb      	ldrb	r3, [r7, #14]
}
 800808a:	4618      	mov	r0, r3
 800808c:	3710      	adds	r7, #16
 800808e:	46bd      	mov	sp, r7
 8008090:	bd80      	pop	{r7, pc}

08008092 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008092:	b580      	push	{r7, lr}
 8008094:	b084      	sub	sp, #16
 8008096:	af00      	add	r7, sp, #0
 8008098:	6078      	str	r0, [r7, #4]
 800809a:	460b      	mov	r3, r1
 800809c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800809e:	2300      	movs	r3, #0
 80080a0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80080a2:	2300      	movs	r3, #0
 80080a4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80080ac:	78fa      	ldrb	r2, [r7, #3]
 80080ae:	4611      	mov	r1, r2
 80080b0:	4618      	mov	r0, r3
 80080b2:	f7f8 ffb6 	bl	8001022 <HAL_PCD_EP_Close>
 80080b6:	4603      	mov	r3, r0
 80080b8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80080ba:	7bfb      	ldrb	r3, [r7, #15]
 80080bc:	4618      	mov	r0, r3
 80080be:	f000 f929 	bl	8008314 <USBD_Get_USB_Status>
 80080c2:	4603      	mov	r3, r0
 80080c4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80080c6:	7bbb      	ldrb	r3, [r7, #14]
}
 80080c8:	4618      	mov	r0, r3
 80080ca:	3710      	adds	r7, #16
 80080cc:	46bd      	mov	sp, r7
 80080ce:	bd80      	pop	{r7, pc}

080080d0 <USBD_LL_FlushEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_FlushEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80080d0:	b580      	push	{r7, lr}
 80080d2:	b084      	sub	sp, #16
 80080d4:	af00      	add	r7, sp, #0
 80080d6:	6078      	str	r0, [r7, #4]
 80080d8:	460b      	mov	r3, r1
 80080da:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80080dc:	2300      	movs	r3, #0
 80080de:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80080e0:	2300      	movs	r3, #0
 80080e2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80080ea:	78fa      	ldrb	r2, [r7, #3]
 80080ec:	4611      	mov	r1, r2
 80080ee:	4618      	mov	r0, r3
 80080f0:	f7f9 f92a 	bl	8001348 <HAL_PCD_EP_Flush>
 80080f4:	4603      	mov	r3, r0
 80080f6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80080f8:	7bfb      	ldrb	r3, [r7, #15]
 80080fa:	4618      	mov	r0, r3
 80080fc:	f000 f90a 	bl	8008314 <USBD_Get_USB_Status>
 8008100:	4603      	mov	r3, r0
 8008102:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008104:	7bbb      	ldrb	r3, [r7, #14]
}
 8008106:	4618      	mov	r0, r3
 8008108:	3710      	adds	r7, #16
 800810a:	46bd      	mov	sp, r7
 800810c:	bd80      	pop	{r7, pc}

0800810e <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800810e:	b580      	push	{r7, lr}
 8008110:	b084      	sub	sp, #16
 8008112:	af00      	add	r7, sp, #0
 8008114:	6078      	str	r0, [r7, #4]
 8008116:	460b      	mov	r3, r1
 8008118:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800811a:	2300      	movs	r3, #0
 800811c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800811e:	2300      	movs	r3, #0
 8008120:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008128:	78fa      	ldrb	r2, [r7, #3]
 800812a:	4611      	mov	r1, r2
 800812c:	4618      	mov	r0, r3
 800812e:	f7f9 f857 	bl	80011e0 <HAL_PCD_EP_SetStall>
 8008132:	4603      	mov	r3, r0
 8008134:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008136:	7bfb      	ldrb	r3, [r7, #15]
 8008138:	4618      	mov	r0, r3
 800813a:	f000 f8eb 	bl	8008314 <USBD_Get_USB_Status>
 800813e:	4603      	mov	r3, r0
 8008140:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008142:	7bbb      	ldrb	r3, [r7, #14]
}
 8008144:	4618      	mov	r0, r3
 8008146:	3710      	adds	r7, #16
 8008148:	46bd      	mov	sp, r7
 800814a:	bd80      	pop	{r7, pc}

0800814c <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800814c:	b580      	push	{r7, lr}
 800814e:	b084      	sub	sp, #16
 8008150:	af00      	add	r7, sp, #0
 8008152:	6078      	str	r0, [r7, #4]
 8008154:	460b      	mov	r3, r1
 8008156:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008158:	2300      	movs	r3, #0
 800815a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800815c:	2300      	movs	r3, #0
 800815e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008166:	78fa      	ldrb	r2, [r7, #3]
 8008168:	4611      	mov	r1, r2
 800816a:	4618      	mov	r0, r3
 800816c:	f7f9 f898 	bl	80012a0 <HAL_PCD_EP_ClrStall>
 8008170:	4603      	mov	r3, r0
 8008172:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008174:	7bfb      	ldrb	r3, [r7, #15]
 8008176:	4618      	mov	r0, r3
 8008178:	f000 f8cc 	bl	8008314 <USBD_Get_USB_Status>
 800817c:	4603      	mov	r3, r0
 800817e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008180:	7bbb      	ldrb	r3, [r7, #14]
}
 8008182:	4618      	mov	r0, r3
 8008184:	3710      	adds	r7, #16
 8008186:	46bd      	mov	sp, r7
 8008188:	bd80      	pop	{r7, pc}

0800818a <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800818a:	b480      	push	{r7}
 800818c:	b085      	sub	sp, #20
 800818e:	af00      	add	r7, sp, #0
 8008190:	6078      	str	r0, [r7, #4]
 8008192:	460b      	mov	r3, r1
 8008194:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800819c:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800819e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	da0c      	bge.n	80081c0 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80081a6:	78fb      	ldrb	r3, [r7, #3]
 80081a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80081ac:	68f9      	ldr	r1, [r7, #12]
 80081ae:	1c5a      	adds	r2, r3, #1
 80081b0:	4613      	mov	r3, r2
 80081b2:	009b      	lsls	r3, r3, #2
 80081b4:	4413      	add	r3, r2
 80081b6:	00db      	lsls	r3, r3, #3
 80081b8:	440b      	add	r3, r1
 80081ba:	3302      	adds	r3, #2
 80081bc:	781b      	ldrb	r3, [r3, #0]
 80081be:	e00b      	b.n	80081d8 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80081c0:	78fb      	ldrb	r3, [r7, #3]
 80081c2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80081c6:	68f9      	ldr	r1, [r7, #12]
 80081c8:	4613      	mov	r3, r2
 80081ca:	009b      	lsls	r3, r3, #2
 80081cc:	4413      	add	r3, r2
 80081ce:	00db      	lsls	r3, r3, #3
 80081d0:	440b      	add	r3, r1
 80081d2:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 80081d6:	781b      	ldrb	r3, [r3, #0]
  }
}
 80081d8:	4618      	mov	r0, r3
 80081da:	3714      	adds	r7, #20
 80081dc:	46bd      	mov	sp, r7
 80081de:	bc80      	pop	{r7}
 80081e0:	4770      	bx	lr

080081e2 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80081e2:	b580      	push	{r7, lr}
 80081e4:	b084      	sub	sp, #16
 80081e6:	af00      	add	r7, sp, #0
 80081e8:	6078      	str	r0, [r7, #4]
 80081ea:	460b      	mov	r3, r1
 80081ec:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80081ee:	2300      	movs	r3, #0
 80081f0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80081f2:	2300      	movs	r3, #0
 80081f4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80081fc:	78fa      	ldrb	r2, [r7, #3]
 80081fe:	4611      	mov	r1, r2
 8008200:	4618      	mov	r0, r3
 8008202:	f7f8 fe83 	bl	8000f0c <HAL_PCD_SetAddress>
 8008206:	4603      	mov	r3, r0
 8008208:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800820a:	7bfb      	ldrb	r3, [r7, #15]
 800820c:	4618      	mov	r0, r3
 800820e:	f000 f881 	bl	8008314 <USBD_Get_USB_Status>
 8008212:	4603      	mov	r3, r0
 8008214:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008216:	7bbb      	ldrb	r3, [r7, #14]
}
 8008218:	4618      	mov	r0, r3
 800821a:	3710      	adds	r7, #16
 800821c:	46bd      	mov	sp, r7
 800821e:	bd80      	pop	{r7, pc}

08008220 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008220:	b580      	push	{r7, lr}
 8008222:	b086      	sub	sp, #24
 8008224:	af00      	add	r7, sp, #0
 8008226:	60f8      	str	r0, [r7, #12]
 8008228:	607a      	str	r2, [r7, #4]
 800822a:	461a      	mov	r2, r3
 800822c:	460b      	mov	r3, r1
 800822e:	72fb      	strb	r3, [r7, #11]
 8008230:	4613      	mov	r3, r2
 8008232:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008234:	2300      	movs	r3, #0
 8008236:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008238:	2300      	movs	r3, #0
 800823a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008242:	893b      	ldrh	r3, [r7, #8]
 8008244:	7af9      	ldrb	r1, [r7, #11]
 8008246:	687a      	ldr	r2, [r7, #4]
 8008248:	f7f8 ff87 	bl	800115a <HAL_PCD_EP_Transmit>
 800824c:	4603      	mov	r3, r0
 800824e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008250:	7dfb      	ldrb	r3, [r7, #23]
 8008252:	4618      	mov	r0, r3
 8008254:	f000 f85e 	bl	8008314 <USBD_Get_USB_Status>
 8008258:	4603      	mov	r3, r0
 800825a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800825c:	7dbb      	ldrb	r3, [r7, #22]
}
 800825e:	4618      	mov	r0, r3
 8008260:	3718      	adds	r7, #24
 8008262:	46bd      	mov	sp, r7
 8008264:	bd80      	pop	{r7, pc}

08008266 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008266:	b580      	push	{r7, lr}
 8008268:	b086      	sub	sp, #24
 800826a:	af00      	add	r7, sp, #0
 800826c:	60f8      	str	r0, [r7, #12]
 800826e:	607a      	str	r2, [r7, #4]
 8008270:	461a      	mov	r2, r3
 8008272:	460b      	mov	r3, r1
 8008274:	72fb      	strb	r3, [r7, #11]
 8008276:	4613      	mov	r3, r2
 8008278:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800827a:	2300      	movs	r3, #0
 800827c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800827e:	2300      	movs	r3, #0
 8008280:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008288:	893b      	ldrh	r3, [r7, #8]
 800828a:	7af9      	ldrb	r1, [r7, #11]
 800828c:	687a      	ldr	r2, [r7, #4]
 800828e:	f7f8 ff10 	bl	80010b2 <HAL_PCD_EP_Receive>
 8008292:	4603      	mov	r3, r0
 8008294:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008296:	7dfb      	ldrb	r3, [r7, #23]
 8008298:	4618      	mov	r0, r3
 800829a:	f000 f83b 	bl	8008314 <USBD_Get_USB_Status>
 800829e:	4603      	mov	r3, r0
 80082a0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80082a2:	7dbb      	ldrb	r3, [r7, #22]
}
 80082a4:	4618      	mov	r0, r3
 80082a6:	3718      	adds	r7, #24
 80082a8:	46bd      	mov	sp, r7
 80082aa:	bd80      	pop	{r7, pc}

080082ac <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80082ac:	b580      	push	{r7, lr}
 80082ae:	b082      	sub	sp, #8
 80082b0:	af00      	add	r7, sp, #0
 80082b2:	6078      	str	r0, [r7, #4]
 80082b4:	460b      	mov	r3, r1
 80082b6:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80082be:	78fa      	ldrb	r2, [r7, #3]
 80082c0:	4611      	mov	r1, r2
 80082c2:	4618      	mov	r0, r3
 80082c4:	f7f8 ff32 	bl	800112c <HAL_PCD_EP_GetRxCount>
 80082c8:	4603      	mov	r3, r0
}
 80082ca:	4618      	mov	r0, r3
 80082cc:	3708      	adds	r7, #8
 80082ce:	46bd      	mov	sp, r7
 80082d0:	bd80      	pop	{r7, pc}
	...

080082d4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80082d4:	b480      	push	{r7}
 80082d6:	b083      	sub	sp, #12
 80082d8:	af00      	add	r7, sp, #0
 80082da:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_MSC_BOT_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80082dc:	4b02      	ldr	r3, [pc, #8]	; (80082e8 <USBD_static_malloc+0x14>)
}
 80082de:	4618      	mov	r0, r3
 80082e0:	370c      	adds	r7, #12
 80082e2:	46bd      	mov	sp, r7
 80082e4:	bc80      	pop	{r7}
 80082e6:	4770      	bx	lr
 80082e8:	2000014c 	.word	0x2000014c

080082ec <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80082ec:	b480      	push	{r7}
 80082ee:	b083      	sub	sp, #12
 80082f0:	af00      	add	r7, sp, #0
 80082f2:	6078      	str	r0, [r7, #4]

}
 80082f4:	bf00      	nop
 80082f6:	370c      	adds	r7, #12
 80082f8:	46bd      	mov	sp, r7
 80082fa:	bc80      	pop	{r7}
 80082fc:	4770      	bx	lr

080082fe <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80082fe:	b480      	push	{r7}
 8008300:	b083      	sub	sp, #12
 8008302:	af00      	add	r7, sp, #0
 8008304:	6078      	str	r0, [r7, #4]
 8008306:	460b      	mov	r3, r1
 8008308:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800830a:	bf00      	nop
 800830c:	370c      	adds	r7, #12
 800830e:	46bd      	mov	sp, r7
 8008310:	bc80      	pop	{r7}
 8008312:	4770      	bx	lr

08008314 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008314:	b480      	push	{r7}
 8008316:	b085      	sub	sp, #20
 8008318:	af00      	add	r7, sp, #0
 800831a:	4603      	mov	r3, r0
 800831c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800831e:	2300      	movs	r3, #0
 8008320:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008322:	79fb      	ldrb	r3, [r7, #7]
 8008324:	2b03      	cmp	r3, #3
 8008326:	d817      	bhi.n	8008358 <USBD_Get_USB_Status+0x44>
 8008328:	a201      	add	r2, pc, #4	; (adr r2, 8008330 <USBD_Get_USB_Status+0x1c>)
 800832a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800832e:	bf00      	nop
 8008330:	08008341 	.word	0x08008341
 8008334:	08008347 	.word	0x08008347
 8008338:	0800834d 	.word	0x0800834d
 800833c:	08008353 	.word	0x08008353
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008340:	2300      	movs	r3, #0
 8008342:	73fb      	strb	r3, [r7, #15]
    break;
 8008344:	e00b      	b.n	800835e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008346:	2302      	movs	r3, #2
 8008348:	73fb      	strb	r3, [r7, #15]
    break;
 800834a:	e008      	b.n	800835e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800834c:	2301      	movs	r3, #1
 800834e:	73fb      	strb	r3, [r7, #15]
    break;
 8008350:	e005      	b.n	800835e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008352:	2302      	movs	r3, #2
 8008354:	73fb      	strb	r3, [r7, #15]
    break;
 8008356:	e002      	b.n	800835e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008358:	2302      	movs	r3, #2
 800835a:	73fb      	strb	r3, [r7, #15]
    break;
 800835c:	bf00      	nop
  }
  return usb_status;
 800835e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008360:	4618      	mov	r0, r3
 8008362:	3714      	adds	r7, #20
 8008364:	46bd      	mov	sp, r7
 8008366:	bc80      	pop	{r7}
 8008368:	4770      	bx	lr
 800836a:	bf00      	nop

0800836c <__libc_init_array>:
 800836c:	b570      	push	{r4, r5, r6, lr}
 800836e:	2600      	movs	r6, #0
 8008370:	4d0c      	ldr	r5, [pc, #48]	; (80083a4 <__libc_init_array+0x38>)
 8008372:	4c0d      	ldr	r4, [pc, #52]	; (80083a8 <__libc_init_array+0x3c>)
 8008374:	1b64      	subs	r4, r4, r5
 8008376:	10a4      	asrs	r4, r4, #2
 8008378:	42a6      	cmp	r6, r4
 800837a:	d109      	bne.n	8008390 <__libc_init_array+0x24>
 800837c:	f000 f822 	bl	80083c4 <_init>
 8008380:	2600      	movs	r6, #0
 8008382:	4d0a      	ldr	r5, [pc, #40]	; (80083ac <__libc_init_array+0x40>)
 8008384:	4c0a      	ldr	r4, [pc, #40]	; (80083b0 <__libc_init_array+0x44>)
 8008386:	1b64      	subs	r4, r4, r5
 8008388:	10a4      	asrs	r4, r4, #2
 800838a:	42a6      	cmp	r6, r4
 800838c:	d105      	bne.n	800839a <__libc_init_array+0x2e>
 800838e:	bd70      	pop	{r4, r5, r6, pc}
 8008390:	f855 3b04 	ldr.w	r3, [r5], #4
 8008394:	4798      	blx	r3
 8008396:	3601      	adds	r6, #1
 8008398:	e7ee      	b.n	8008378 <__libc_init_array+0xc>
 800839a:	f855 3b04 	ldr.w	r3, [r5], #4
 800839e:	4798      	blx	r3
 80083a0:	3601      	adds	r6, #1
 80083a2:	e7f2      	b.n	800838a <__libc_init_array+0x1e>
 80083a4:	0800847c 	.word	0x0800847c
 80083a8:	0800847c 	.word	0x0800847c
 80083ac:	0800847c 	.word	0x0800847c
 80083b0:	08008480 	.word	0x08008480

080083b4 <memset>:
 80083b4:	4603      	mov	r3, r0
 80083b6:	4402      	add	r2, r0
 80083b8:	4293      	cmp	r3, r2
 80083ba:	d100      	bne.n	80083be <memset+0xa>
 80083bc:	4770      	bx	lr
 80083be:	f803 1b01 	strb.w	r1, [r3], #1
 80083c2:	e7f9      	b.n	80083b8 <memset+0x4>

080083c4 <_init>:
 80083c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083c6:	bf00      	nop
 80083c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80083ca:	bc08      	pop	{r3}
 80083cc:	469e      	mov	lr, r3
 80083ce:	4770      	bx	lr

080083d0 <_fini>:
 80083d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083d2:	bf00      	nop
 80083d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80083d6:	bc08      	pop	{r3}
 80083d8:	469e      	mov	lr, r3
 80083da:	4770      	bx	lr
