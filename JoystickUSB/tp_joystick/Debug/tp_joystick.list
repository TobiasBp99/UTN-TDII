
tp_joystick.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007554  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  08007660  08007660  00017660  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080076e0  080076e0  00020164  2**0
                  CONTENTS
  4 .ARM          00000000  080076e0  080076e0  00020164  2**0
                  CONTENTS
  5 .preinit_array 00000000  080076e0  080076e0  00020164  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080076e0  080076e0  000176e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080076e4  080076e4  000176e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000164  20000000  080076e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000828  20000164  0800784c  00020164  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000098c  0800784c  0002098c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020164  2**0
                  CONTENTS, READONLY
 12 .debug_info   000121c2  00000000  00000000  0002018d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e84  00000000  00000000  0003234f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b80  00000000  00000000  000351d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a28  00000000  00000000  00035d58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019d50  00000000  00000000  00036780  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ef83  00000000  00000000  000504d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000898b1  00000000  00000000  0005f453  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e8d04  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002cbc  00000000  00000000  000e8d58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000164 	.word	0x20000164
 8000128:	00000000 	.word	0x00000000
 800012c:	08007648 	.word	0x08007648

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000168 	.word	0x20000168
 8000148:	08007648 	.word	0x08007648

0800014c <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 800014c:	b580      	push	{r7, lr}
 800014e:	b084      	sub	sp, #16
 8000150:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 1 */
	uint8_t s_r3 = 0;
 8000152:	2300      	movs	r3, #0
 8000154:	73fb      	strb	r3, [r7, #15]
	int8_t q_deb = 0;
 8000156:	2300      	movs	r3, #0
 8000158:	73bb      	strb	r3, [r7, #14]
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800015a:	f000 fab9 	bl	80006d0 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800015e:	f000 f8df 	bl	8000320 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000162:	f000 f987 	bl	8000474 <MX_GPIO_Init>
	MX_USB_DEVICE_Init();
 8000166:	f006 fe89 	bl	8006e7c <MX_USB_DEVICE_Init>
	MX_ADC1_Init();
 800016a:	f000 f937 	bl	80003dc <MX_ADC1_Init>
	/* USER CODE BEGIN 2 */
	ticks_adc = HAL_GetTick();
 800016e:	f000 fb07 	bl	8000780 <HAL_GetTick>
 8000172:	4603      	mov	r3, r0
 8000174:	4a62      	ldr	r2, [pc, #392]	; (8000300 <main+0x1b4>)
 8000176:	6013      	str	r3, [r2, #0]
	ticks_but = HAL_GetTick();
 8000178:	f000 fb02 	bl	8000780 <HAL_GetTick>
 800017c:	4603      	mov	r3, r0
 800017e:	4a61      	ldr	r2, [pc, #388]	; (8000304 <main+0x1b8>)
 8000180:	6013      	str	r3, [r2, #0]
	HAL_ADCEx_Calibration_Start(&hadc1);
 8000182:	4861      	ldr	r0, [pc, #388]	; (8000308 <main+0x1bc>)
 8000184:	f000 ff42 	bl	800100c <HAL_ADCEx_Calibration_Start>
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		if ((HAL_GetTick() - ticks_adc) >= TICKS_ADC_MS) {
 8000188:	f000 fafa 	bl	8000780 <HAL_GetTick>
 800018c:	4602      	mov	r2, r0
 800018e:	4b5c      	ldr	r3, [pc, #368]	; (8000300 <main+0x1b4>)
 8000190:	681b      	ldr	r3, [r3, #0]
 8000192:	1ad3      	subs	r3, r2, r3
 8000194:	2b31      	cmp	r3, #49	; 0x31
 8000196:	d937      	bls.n	8000208 <main+0xbc>
			ticks_adc = HAL_GetTick();
 8000198:	f000 faf2 	bl	8000780 <HAL_GetTick>
 800019c:	4603      	mov	r3, r0
 800019e:	4a58      	ldr	r2, [pc, #352]	; (8000300 <main+0x1b4>)
 80001a0:	6013      	str	r3, [r2, #0]
			HAL_ADC_Start(&hadc1);
 80001a2:	4859      	ldr	r0, [pc, #356]	; (8000308 <main+0x1bc>)
 80001a4:	f000 fbce 	bl	8000944 <HAL_ADC_Start>
			HAL_ADC_PollForConversion(&hadc1, 10);
 80001a8:	210a      	movs	r1, #10
 80001aa:	4857      	ldr	r0, [pc, #348]	; (8000308 <main+0x1bc>)
 80001ac:	f000 fca4 	bl	8000af8 <HAL_ADC_PollForConversion>
			demora_software(DELAY_ADC);
 80001b0:	2300      	movs	r3, #0
 80001b2:	60bb      	str	r3, [r7, #8]
 80001b4:	e002      	b.n	80001bc <main+0x70>
 80001b6:	68bb      	ldr	r3, [r7, #8]
 80001b8:	3301      	adds	r3, #1
 80001ba:	60bb      	str	r3, [r7, #8]
 80001bc:	68bb      	ldr	r3, [r7, #8]
 80001be:	2b3f      	cmp	r3, #63	; 0x3f
 80001c0:	ddf9      	ble.n	80001b6 <main+0x6a>
			rx = HAL_ADC_GetValue(&hadc1);
 80001c2:	4851      	ldr	r0, [pc, #324]	; (8000308 <main+0x1bc>)
 80001c4:	f000 fd92 	bl	8000cec <HAL_ADC_GetValue>
 80001c8:	4603      	mov	r3, r0
 80001ca:	b29a      	uxth	r2, r3
 80001cc:	4b4f      	ldr	r3, [pc, #316]	; (800030c <main+0x1c0>)
 80001ce:	801a      	strh	r2, [r3, #0]
			HAL_ADC_PollForConversion(&hadc1, 10);
 80001d0:	210a      	movs	r1, #10
 80001d2:	484d      	ldr	r0, [pc, #308]	; (8000308 <main+0x1bc>)
 80001d4:	f000 fc90 	bl	8000af8 <HAL_ADC_PollForConversion>
			demora_software(DELAY_ADC);
 80001d8:	2300      	movs	r3, #0
 80001da:	607b      	str	r3, [r7, #4]
 80001dc:	e002      	b.n	80001e4 <main+0x98>
 80001de:	687b      	ldr	r3, [r7, #4]
 80001e0:	3301      	adds	r3, #1
 80001e2:	607b      	str	r3, [r7, #4]
 80001e4:	687b      	ldr	r3, [r7, #4]
 80001e6:	2b3f      	cmp	r3, #63	; 0x3f
 80001e8:	ddf9      	ble.n	80001de <main+0x92>
			ry = HAL_ADC_GetValue(&hadc1);
 80001ea:	4847      	ldr	r0, [pc, #284]	; (8000308 <main+0x1bc>)
 80001ec:	f000 fd7e 	bl	8000cec <HAL_ADC_GetValue>
 80001f0:	4603      	mov	r3, r0
 80001f2:	b29a      	uxth	r2, r3
 80001f4:	4b46      	ldr	r3, [pc, #280]	; (8000310 <main+0x1c4>)
 80001f6:	801a      	strh	r2, [r3, #0]
			HAL_ADC_Stop(&hadc1);
 80001f8:	4843      	ldr	r0, [pc, #268]	; (8000308 <main+0x1bc>)
 80001fa:	f000 fc51 	bl	8000aa0 <HAL_ADC_Stop>
			HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80001fe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000202:	4844      	ldr	r0, [pc, #272]	; (8000314 <main+0x1c8>)
 8000204:	f001 fa5f 	bl	80016c6 <HAL_GPIO_TogglePin>

		}
		if ((HAL_GetTick() - ticks_but) >= TICKS_BUT_MS) {
 8000208:	f000 faba 	bl	8000780 <HAL_GetTick>
 800020c:	4602      	mov	r2, r0
 800020e:	4b3d      	ldr	r3, [pc, #244]	; (8000304 <main+0x1b8>)
 8000210:	681b      	ldr	r3, [r3, #0]
 8000212:	1ad3      	subs	r3, r2, r3
 8000214:	2b18      	cmp	r3, #24
 8000216:	d96b      	bls.n	80002f0 <main+0x1a4>
			ticks_but = HAL_GetTick();
 8000218:	f000 fab2 	bl	8000780 <HAL_GetTick>
 800021c:	4603      	mov	r3, r0
 800021e:	4a39      	ldr	r2, [pc, #228]	; (8000304 <main+0x1b8>)
 8000220:	6013      	str	r3, [r2, #0]
			switch (s_r3) {
 8000222:	7bfb      	ldrb	r3, [r7, #15]
 8000224:	2b02      	cmp	r3, #2
 8000226:	d044      	beq.n	80002b2 <main+0x166>
 8000228:	2b02      	cmp	r3, #2
 800022a:	dc59      	bgt.n	80002e0 <main+0x194>
 800022c:	2b00      	cmp	r3, #0
 800022e:	d002      	beq.n	8000236 <main+0xea>
 8000230:	2b01      	cmp	r3, #1
 8000232:	d00a      	beq.n	800024a <main+0xfe>
 8000234:	e054      	b.n	80002e0 <main+0x194>
			case 0:
				if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2))
 8000236:	2104      	movs	r1, #4
 8000238:	4837      	ldr	r0, [pc, #220]	; (8000318 <main+0x1cc>)
 800023a:	f001 fa15 	bl	8001668 <HAL_GPIO_ReadPin>
 800023e:	4603      	mov	r3, r0
 8000240:	2b00      	cmp	r3, #0
 8000242:	d057      	beq.n	80002f4 <main+0x1a8>
					s_r3 = 1;
 8000244:	2301      	movs	r3, #1
 8000246:	73fb      	strb	r3, [r7, #15]
				break;
 8000248:	e054      	b.n	80002f4 <main+0x1a8>

			case 1:
				if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2))
 800024a:	2104      	movs	r1, #4
 800024c:	4832      	ldr	r0, [pc, #200]	; (8000318 <main+0x1cc>)
 800024e:	f001 fa0b 	bl	8001668 <HAL_GPIO_ReadPin>
 8000252:	4603      	mov	r3, r0
 8000254:	2b00      	cmp	r3, #0
 8000256:	d006      	beq.n	8000266 <main+0x11a>
					q_deb++;
 8000258:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800025c:	b2db      	uxtb	r3, r3
 800025e:	3301      	adds	r3, #1
 8000260:	b2db      	uxtb	r3, r3
 8000262:	73bb      	strb	r3, [r7, #14]
 8000264:	e005      	b.n	8000272 <main+0x126>
				else
					q_deb--;
 8000266:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800026a:	b2db      	uxtb	r3, r3
 800026c:	3b01      	subs	r3, #1
 800026e:	b2db      	uxtb	r3, r3
 8000270:	73bb      	strb	r3, [r7, #14]

				if (q_deb == 10) {
 8000272:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000276:	2b0a      	cmp	r3, #10
 8000278:	d10a      	bne.n	8000290 <main+0x144>
					q_deb = 0;
 800027a:	2300      	movs	r3, #0
 800027c:	73bb      	strb	r3, [r7, #14]
					s_r3 = 2;
 800027e:	2302      	movs	r3, #2
 8000280:	73fb      	strb	r3, [r7, #15]
					r3 ^= 0x01;
 8000282:	4b26      	ldr	r3, [pc, #152]	; (800031c <main+0x1d0>)
 8000284:	781b      	ldrb	r3, [r3, #0]
 8000286:	f083 0301 	eor.w	r3, r3, #1
 800028a:	b2da      	uxtb	r2, r3
 800028c:	4b23      	ldr	r3, [pc, #140]	; (800031c <main+0x1d0>)
 800028e:	701a      	strb	r2, [r3, #0]
				}
				if (q_deb == -10) {
 8000290:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000294:	f113 0f0a 	cmn.w	r3, #10
 8000298:	d12e      	bne.n	80002f8 <main+0x1ac>
					q_deb = 0;
 800029a:	2300      	movs	r3, #0
 800029c:	73bb      	strb	r3, [r7, #14]
					s_r3 = 0;
 800029e:	2300      	movs	r3, #0
 80002a0:	73fb      	strb	r3, [r7, #15]
					r3 ^= 0x01;
 80002a2:	4b1e      	ldr	r3, [pc, #120]	; (800031c <main+0x1d0>)
 80002a4:	781b      	ldrb	r3, [r3, #0]
 80002a6:	f083 0301 	eor.w	r3, r3, #1
 80002aa:	b2da      	uxtb	r2, r3
 80002ac:	4b1b      	ldr	r3, [pc, #108]	; (800031c <main+0x1d0>)
 80002ae:	701a      	strb	r2, [r3, #0]
				}
				break;
 80002b0:	e022      	b.n	80002f8 <main+0x1ac>

			case 2:
				if (!HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2)) {
 80002b2:	2104      	movs	r1, #4
 80002b4:	4818      	ldr	r0, [pc, #96]	; (8000318 <main+0x1cc>)
 80002b6:	f001 f9d7 	bl	8001668 <HAL_GPIO_ReadPin>
 80002ba:	4603      	mov	r3, r0
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d105      	bne.n	80002cc <main+0x180>
					q_deb--;
 80002c0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80002c4:	b2db      	uxtb	r3, r3
 80002c6:	3b01      	subs	r3, #1
 80002c8:	b2db      	uxtb	r3, r3
 80002ca:	73bb      	strb	r3, [r7, #14]
				}
				if (q_deb == -10) {
 80002cc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80002d0:	f113 0f0a 	cmn.w	r3, #10
 80002d4:	d112      	bne.n	80002fc <main+0x1b0>
					q_deb = 0;
 80002d6:	2300      	movs	r3, #0
 80002d8:	73bb      	strb	r3, [r7, #14]
					s_r3 = 0;
 80002da:	2300      	movs	r3, #0
 80002dc:	73fb      	strb	r3, [r7, #15]
				}

				break;
 80002de:	e00d      	b.n	80002fc <main+0x1b0>
			default:
				s_r3 = 0;
 80002e0:	2300      	movs	r3, #0
 80002e2:	73fb      	strb	r3, [r7, #15]
				r3 = 0;
 80002e4:	4b0d      	ldr	r3, [pc, #52]	; (800031c <main+0x1d0>)
 80002e6:	2200      	movs	r2, #0
 80002e8:	701a      	strb	r2, [r3, #0]
				q_deb = 0;
 80002ea:	2300      	movs	r3, #0
 80002ec:	73bb      	strb	r3, [r7, #14]
				break;
 80002ee:	e006      	b.n	80002fe <main+0x1b2>

			}

		}
 80002f0:	bf00      	nop
 80002f2:	e749      	b.n	8000188 <main+0x3c>
				break;
 80002f4:	bf00      	nop
 80002f6:	e747      	b.n	8000188 <main+0x3c>
				break;
 80002f8:	bf00      	nop
 80002fa:	e745      	b.n	8000188 <main+0x3c>
				break;
 80002fc:	bf00      	nop
		if ((HAL_GetTick() - ticks_adc) >= TICKS_ADC_MS) {
 80002fe:	e743      	b.n	8000188 <main+0x3c>
 8000300:	200001d4 	.word	0x200001d4
 8000304:	200001a0 	.word	0x200001a0
 8000308:	200001a4 	.word	0x200001a4
 800030c:	2000019c 	.word	0x2000019c
 8000310:	20000198 	.word	0x20000198
 8000314:	40011000 	.word	0x40011000
 8000318:	40010800 	.word	0x40010800
 800031c:	2000019a 	.word	0x2000019a

08000320 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000320:	b580      	push	{r7, lr}
 8000322:	b094      	sub	sp, #80	; 0x50
 8000324:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000326:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800032a:	2228      	movs	r2, #40	; 0x28
 800032c:	2100      	movs	r1, #0
 800032e:	4618      	mov	r0, r3
 8000330:	f007 f982 	bl	8007638 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000334:	f107 0314 	add.w	r3, r7, #20
 8000338:	2200      	movs	r2, #0
 800033a:	601a      	str	r2, [r3, #0]
 800033c:	605a      	str	r2, [r3, #4]
 800033e:	609a      	str	r2, [r3, #8]
 8000340:	60da      	str	r2, [r3, #12]
 8000342:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 8000344:	1d3b      	adds	r3, r7, #4
 8000346:	2200      	movs	r2, #0
 8000348:	601a      	str	r2, [r3, #0]
 800034a:	605a      	str	r2, [r3, #4]
 800034c:	609a      	str	r2, [r3, #8]
 800034e:	60da      	str	r2, [r3, #12]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000350:	2301      	movs	r3, #1
 8000352:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000354:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000358:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800035a:	2300      	movs	r3, #0
 800035c:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800035e:	2301      	movs	r3, #1
 8000360:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000362:	2302      	movs	r3, #2
 8000364:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000366:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800036a:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800036c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000370:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000372:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000376:	4618      	mov	r0, r3
 8000378:	f002 fd38 	bl	8002dec <HAL_RCC_OscConfig>
 800037c:	4603      	mov	r3, r0
 800037e:	2b00      	cmp	r3, #0
 8000380:	d001      	beq.n	8000386 <SystemClock_Config+0x66>
		Error_Handler();
 8000382:	f000 f8d1 	bl	8000528 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000386:	230f      	movs	r3, #15
 8000388:	617b      	str	r3, [r7, #20]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800038a:	2302      	movs	r3, #2
 800038c:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800038e:	2300      	movs	r3, #0
 8000390:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000392:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000396:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000398:	2300      	movs	r3, #0
 800039a:	627b      	str	r3, [r7, #36]	; 0x24

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 800039c:	f107 0314 	add.w	r3, r7, #20
 80003a0:	2102      	movs	r1, #2
 80003a2:	4618      	mov	r0, r3
 80003a4:	f002 ffa2 	bl	80032ec <HAL_RCC_ClockConfig>
 80003a8:	4603      	mov	r3, r0
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	d001      	beq.n	80003b2 <SystemClock_Config+0x92>
		Error_Handler();
 80003ae:	f000 f8bb 	bl	8000528 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC | RCC_PERIPHCLK_USB;
 80003b2:	2312      	movs	r3, #18
 80003b4:	607b      	str	r3, [r7, #4]
	PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80003b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80003ba:	60fb      	str	r3, [r7, #12]
	PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 80003bc:	2300      	movs	r3, #0
 80003be:	613b      	str	r3, [r7, #16]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 80003c0:	1d3b      	adds	r3, r7, #4
 80003c2:	4618      	mov	r0, r3
 80003c4:	f003 f918 	bl	80035f8 <HAL_RCCEx_PeriphCLKConfig>
 80003c8:	4603      	mov	r3, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d001      	beq.n	80003d2 <SystemClock_Config+0xb2>
		Error_Handler();
 80003ce:	f000 f8ab 	bl	8000528 <Error_Handler>
	}
}
 80003d2:	bf00      	nop
 80003d4:	3750      	adds	r7, #80	; 0x50
 80003d6:	46bd      	mov	sp, r7
 80003d8:	bd80      	pop	{r7, pc}
	...

080003dc <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 80003dc:	b580      	push	{r7, lr}
 80003de:	b084      	sub	sp, #16
 80003e0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 80003e2:	1d3b      	adds	r3, r7, #4
 80003e4:	2200      	movs	r2, #0
 80003e6:	601a      	str	r2, [r3, #0]
 80003e8:	605a      	str	r2, [r3, #4]
 80003ea:	609a      	str	r2, [r3, #8]
	/* USER CODE BEGIN ADC1_Init 1 */

	/* USER CODE END ADC1_Init 1 */
	/** Common config
	 */
	hadc1.Instance = ADC1;
 80003ec:	4b1f      	ldr	r3, [pc, #124]	; (800046c <MX_ADC1_Init+0x90>)
 80003ee:	4a20      	ldr	r2, [pc, #128]	; (8000470 <MX_ADC1_Init+0x94>)
 80003f0:	601a      	str	r2, [r3, #0]
	hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80003f2:	4b1e      	ldr	r3, [pc, #120]	; (800046c <MX_ADC1_Init+0x90>)
 80003f4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80003f8:	609a      	str	r2, [r3, #8]
	hadc1.Init.ContinuousConvMode = ENABLE;
 80003fa:	4b1c      	ldr	r3, [pc, #112]	; (800046c <MX_ADC1_Init+0x90>)
 80003fc:	2201      	movs	r2, #1
 80003fe:	731a      	strb	r2, [r3, #12]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000400:	4b1a      	ldr	r3, [pc, #104]	; (800046c <MX_ADC1_Init+0x90>)
 8000402:	2200      	movs	r2, #0
 8000404:	751a      	strb	r2, [r3, #20]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000406:	4b19      	ldr	r3, [pc, #100]	; (800046c <MX_ADC1_Init+0x90>)
 8000408:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800040c:	61da      	str	r2, [r3, #28]
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800040e:	4b17      	ldr	r3, [pc, #92]	; (800046c <MX_ADC1_Init+0x90>)
 8000410:	2200      	movs	r2, #0
 8000412:	605a      	str	r2, [r3, #4]
	hadc1.Init.NbrOfConversion = 2;
 8000414:	4b15      	ldr	r3, [pc, #84]	; (800046c <MX_ADC1_Init+0x90>)
 8000416:	2202      	movs	r2, #2
 8000418:	611a      	str	r2, [r3, #16]
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 800041a:	4814      	ldr	r0, [pc, #80]	; (800046c <MX_ADC1_Init+0x90>)
 800041c:	f000 f9ba 	bl	8000794 <HAL_ADC_Init>
 8000420:	4603      	mov	r3, r0
 8000422:	2b00      	cmp	r3, #0
 8000424:	d001      	beq.n	800042a <MX_ADC1_Init+0x4e>
		Error_Handler();
 8000426:	f000 f87f 	bl	8000528 <Error_Handler>
	}
	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_0;
 800042a:	2300      	movs	r3, #0
 800042c:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 800042e:	2301      	movs	r3, #1
 8000430:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000432:	2300      	movs	r3, #0
 8000434:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8000436:	1d3b      	adds	r3, r7, #4
 8000438:	4619      	mov	r1, r3
 800043a:	480c      	ldr	r0, [pc, #48]	; (800046c <MX_ADC1_Init+0x90>)
 800043c:	f000 fc62 	bl	8000d04 <HAL_ADC_ConfigChannel>
 8000440:	4603      	mov	r3, r0
 8000442:	2b00      	cmp	r3, #0
 8000444:	d001      	beq.n	800044a <MX_ADC1_Init+0x6e>
		Error_Handler();
 8000446:	f000 f86f 	bl	8000528 <Error_Handler>
	}
	/** Configure Regular Channel
	 */
	sConfig.Rank = ADC_REGULAR_RANK_2;
 800044a:	2302      	movs	r3, #2
 800044c:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 800044e:	1d3b      	adds	r3, r7, #4
 8000450:	4619      	mov	r1, r3
 8000452:	4806      	ldr	r0, [pc, #24]	; (800046c <MX_ADC1_Init+0x90>)
 8000454:	f000 fc56 	bl	8000d04 <HAL_ADC_ConfigChannel>
 8000458:	4603      	mov	r3, r0
 800045a:	2b00      	cmp	r3, #0
 800045c:	d001      	beq.n	8000462 <MX_ADC1_Init+0x86>
		Error_Handler();
 800045e:	f000 f863 	bl	8000528 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 8000462:	bf00      	nop
 8000464:	3710      	adds	r7, #16
 8000466:	46bd      	mov	sp, r7
 8000468:	bd80      	pop	{r7, pc}
 800046a:	bf00      	nop
 800046c:	200001a4 	.word	0x200001a4
 8000470:	40012400 	.word	0x40012400

08000474 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000474:	b580      	push	{r7, lr}
 8000476:	b088      	sub	sp, #32
 8000478:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800047a:	f107 0310 	add.w	r3, r7, #16
 800047e:	2200      	movs	r2, #0
 8000480:	601a      	str	r2, [r3, #0]
 8000482:	605a      	str	r2, [r3, #4]
 8000484:	609a      	str	r2, [r3, #8]
 8000486:	60da      	str	r2, [r3, #12]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000488:	4b24      	ldr	r3, [pc, #144]	; (800051c <MX_GPIO_Init+0xa8>)
 800048a:	699b      	ldr	r3, [r3, #24]
 800048c:	4a23      	ldr	r2, [pc, #140]	; (800051c <MX_GPIO_Init+0xa8>)
 800048e:	f043 0310 	orr.w	r3, r3, #16
 8000492:	6193      	str	r3, [r2, #24]
 8000494:	4b21      	ldr	r3, [pc, #132]	; (800051c <MX_GPIO_Init+0xa8>)
 8000496:	699b      	ldr	r3, [r3, #24]
 8000498:	f003 0310 	and.w	r3, r3, #16
 800049c:	60fb      	str	r3, [r7, #12]
 800049e:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80004a0:	4b1e      	ldr	r3, [pc, #120]	; (800051c <MX_GPIO_Init+0xa8>)
 80004a2:	699b      	ldr	r3, [r3, #24]
 80004a4:	4a1d      	ldr	r2, [pc, #116]	; (800051c <MX_GPIO_Init+0xa8>)
 80004a6:	f043 0320 	orr.w	r3, r3, #32
 80004aa:	6193      	str	r3, [r2, #24]
 80004ac:	4b1b      	ldr	r3, [pc, #108]	; (800051c <MX_GPIO_Init+0xa8>)
 80004ae:	699b      	ldr	r3, [r3, #24]
 80004b0:	f003 0320 	and.w	r3, r3, #32
 80004b4:	60bb      	str	r3, [r7, #8]
 80004b6:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80004b8:	4b18      	ldr	r3, [pc, #96]	; (800051c <MX_GPIO_Init+0xa8>)
 80004ba:	699b      	ldr	r3, [r3, #24]
 80004bc:	4a17      	ldr	r2, [pc, #92]	; (800051c <MX_GPIO_Init+0xa8>)
 80004be:	f043 0304 	orr.w	r3, r3, #4
 80004c2:	6193      	str	r3, [r2, #24]
 80004c4:	4b15      	ldr	r3, [pc, #84]	; (800051c <MX_GPIO_Init+0xa8>)
 80004c6:	699b      	ldr	r3, [r3, #24]
 80004c8:	f003 0304 	and.w	r3, r3, #4
 80004cc:	607b      	str	r3, [r7, #4]
 80004ce:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80004d0:	2200      	movs	r2, #0
 80004d2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004d6:	4812      	ldr	r0, [pc, #72]	; (8000520 <MX_GPIO_Init+0xac>)
 80004d8:	f001 f8dd 	bl	8001696 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : PC13 */
	GPIO_InitStruct.Pin = GPIO_PIN_13;
 80004dc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80004e0:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004e2:	2301      	movs	r3, #1
 80004e4:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004e6:	2300      	movs	r3, #0
 80004e8:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004ea:	2302      	movs	r3, #2
 80004ec:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80004ee:	f107 0310 	add.w	r3, r7, #16
 80004f2:	4619      	mov	r1, r3
 80004f4:	480a      	ldr	r0, [pc, #40]	; (8000520 <MX_GPIO_Init+0xac>)
 80004f6:	f000 ff33 	bl	8001360 <HAL_GPIO_Init>

	/*Configure GPIO pin : PA2 */
	GPIO_InitStruct.Pin = GPIO_PIN_2;
 80004fa:	2304      	movs	r3, #4
 80004fc:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004fe:	2300      	movs	r3, #0
 8000500:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000502:	2302      	movs	r3, #2
 8000504:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000506:	f107 0310 	add.w	r3, r7, #16
 800050a:	4619      	mov	r1, r3
 800050c:	4805      	ldr	r0, [pc, #20]	; (8000524 <MX_GPIO_Init+0xb0>)
 800050e:	f000 ff27 	bl	8001360 <HAL_GPIO_Init>

}
 8000512:	bf00      	nop
 8000514:	3720      	adds	r7, #32
 8000516:	46bd      	mov	sp, r7
 8000518:	bd80      	pop	{r7, pc}
 800051a:	bf00      	nop
 800051c:	40021000 	.word	0x40021000
 8000520:	40011000 	.word	0x40011000
 8000524:	40010800 	.word	0x40010800

08000528 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000528:	b480      	push	{r7}
 800052a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 800052c:	bf00      	nop
 800052e:	46bd      	mov	sp, r7
 8000530:	bc80      	pop	{r7}
 8000532:	4770      	bx	lr

08000534 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000534:	b480      	push	{r7}
 8000536:	b085      	sub	sp, #20
 8000538:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800053a:	4b15      	ldr	r3, [pc, #84]	; (8000590 <HAL_MspInit+0x5c>)
 800053c:	699b      	ldr	r3, [r3, #24]
 800053e:	4a14      	ldr	r2, [pc, #80]	; (8000590 <HAL_MspInit+0x5c>)
 8000540:	f043 0301 	orr.w	r3, r3, #1
 8000544:	6193      	str	r3, [r2, #24]
 8000546:	4b12      	ldr	r3, [pc, #72]	; (8000590 <HAL_MspInit+0x5c>)
 8000548:	699b      	ldr	r3, [r3, #24]
 800054a:	f003 0301 	and.w	r3, r3, #1
 800054e:	60bb      	str	r3, [r7, #8]
 8000550:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000552:	4b0f      	ldr	r3, [pc, #60]	; (8000590 <HAL_MspInit+0x5c>)
 8000554:	69db      	ldr	r3, [r3, #28]
 8000556:	4a0e      	ldr	r2, [pc, #56]	; (8000590 <HAL_MspInit+0x5c>)
 8000558:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800055c:	61d3      	str	r3, [r2, #28]
 800055e:	4b0c      	ldr	r3, [pc, #48]	; (8000590 <HAL_MspInit+0x5c>)
 8000560:	69db      	ldr	r3, [r3, #28]
 8000562:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000566:	607b      	str	r3, [r7, #4]
 8000568:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800056a:	4b0a      	ldr	r3, [pc, #40]	; (8000594 <HAL_MspInit+0x60>)
 800056c:	685b      	ldr	r3, [r3, #4]
 800056e:	60fb      	str	r3, [r7, #12]
 8000570:	68fb      	ldr	r3, [r7, #12]
 8000572:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000576:	60fb      	str	r3, [r7, #12]
 8000578:	68fb      	ldr	r3, [r7, #12]
 800057a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800057e:	60fb      	str	r3, [r7, #12]
 8000580:	4a04      	ldr	r2, [pc, #16]	; (8000594 <HAL_MspInit+0x60>)
 8000582:	68fb      	ldr	r3, [r7, #12]
 8000584:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000586:	bf00      	nop
 8000588:	3714      	adds	r7, #20
 800058a:	46bd      	mov	sp, r7
 800058c:	bc80      	pop	{r7}
 800058e:	4770      	bx	lr
 8000590:	40021000 	.word	0x40021000
 8000594:	40010000 	.word	0x40010000

08000598 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b088      	sub	sp, #32
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005a0:	f107 0310 	add.w	r3, r7, #16
 80005a4:	2200      	movs	r2, #0
 80005a6:	601a      	str	r2, [r3, #0]
 80005a8:	605a      	str	r2, [r3, #4]
 80005aa:	609a      	str	r2, [r3, #8]
 80005ac:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	681b      	ldr	r3, [r3, #0]
 80005b2:	4a14      	ldr	r2, [pc, #80]	; (8000604 <HAL_ADC_MspInit+0x6c>)
 80005b4:	4293      	cmp	r3, r2
 80005b6:	d121      	bne.n	80005fc <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80005b8:	4b13      	ldr	r3, [pc, #76]	; (8000608 <HAL_ADC_MspInit+0x70>)
 80005ba:	699b      	ldr	r3, [r3, #24]
 80005bc:	4a12      	ldr	r2, [pc, #72]	; (8000608 <HAL_ADC_MspInit+0x70>)
 80005be:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80005c2:	6193      	str	r3, [r2, #24]
 80005c4:	4b10      	ldr	r3, [pc, #64]	; (8000608 <HAL_ADC_MspInit+0x70>)
 80005c6:	699b      	ldr	r3, [r3, #24]
 80005c8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80005cc:	60fb      	str	r3, [r7, #12]
 80005ce:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005d0:	4b0d      	ldr	r3, [pc, #52]	; (8000608 <HAL_ADC_MspInit+0x70>)
 80005d2:	699b      	ldr	r3, [r3, #24]
 80005d4:	4a0c      	ldr	r2, [pc, #48]	; (8000608 <HAL_ADC_MspInit+0x70>)
 80005d6:	f043 0304 	orr.w	r3, r3, #4
 80005da:	6193      	str	r3, [r2, #24]
 80005dc:	4b0a      	ldr	r3, [pc, #40]	; (8000608 <HAL_ADC_MspInit+0x70>)
 80005de:	699b      	ldr	r3, [r3, #24]
 80005e0:	f003 0304 	and.w	r3, r3, #4
 80005e4:	60bb      	str	r3, [r7, #8]
 80005e6:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80005e8:	2303      	movs	r3, #3
 80005ea:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80005ec:	2303      	movs	r3, #3
 80005ee:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005f0:	f107 0310 	add.w	r3, r7, #16
 80005f4:	4619      	mov	r1, r3
 80005f6:	4805      	ldr	r0, [pc, #20]	; (800060c <HAL_ADC_MspInit+0x74>)
 80005f8:	f000 feb2 	bl	8001360 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80005fc:	bf00      	nop
 80005fe:	3720      	adds	r7, #32
 8000600:	46bd      	mov	sp, r7
 8000602:	bd80      	pop	{r7, pc}
 8000604:	40012400 	.word	0x40012400
 8000608:	40021000 	.word	0x40021000
 800060c:	40010800 	.word	0x40010800

08000610 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000610:	b480      	push	{r7}
 8000612:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000614:	bf00      	nop
 8000616:	46bd      	mov	sp, r7
 8000618:	bc80      	pop	{r7}
 800061a:	4770      	bx	lr

0800061c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800061c:	b480      	push	{r7}
 800061e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000620:	e7fe      	b.n	8000620 <HardFault_Handler+0x4>

08000622 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000622:	b480      	push	{r7}
 8000624:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000626:	e7fe      	b.n	8000626 <MemManage_Handler+0x4>

08000628 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000628:	b480      	push	{r7}
 800062a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800062c:	e7fe      	b.n	800062c <BusFault_Handler+0x4>

0800062e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800062e:	b480      	push	{r7}
 8000630:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000632:	e7fe      	b.n	8000632 <UsageFault_Handler+0x4>

08000634 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000634:	b480      	push	{r7}
 8000636:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000638:	bf00      	nop
 800063a:	46bd      	mov	sp, r7
 800063c:	bc80      	pop	{r7}
 800063e:	4770      	bx	lr

08000640 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000640:	b480      	push	{r7}
 8000642:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000644:	bf00      	nop
 8000646:	46bd      	mov	sp, r7
 8000648:	bc80      	pop	{r7}
 800064a:	4770      	bx	lr

0800064c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800064c:	b480      	push	{r7}
 800064e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000650:	bf00      	nop
 8000652:	46bd      	mov	sp, r7
 8000654:	bc80      	pop	{r7}
 8000656:	4770      	bx	lr

08000658 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800065c:	f000 f87e 	bl	800075c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000660:	bf00      	nop
 8000662:	bd80      	pop	{r7, pc}

08000664 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000668:	4802      	ldr	r0, [pc, #8]	; (8000674 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 800066a:	f001 f976 	bl	800195a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 800066e:	bf00      	nop
 8000670:	bd80      	pop	{r7, pc}
 8000672:	bf00      	nop
 8000674:	200006a0 	.word	0x200006a0

08000678 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000678:	b480      	push	{r7}
 800067a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800067c:	bf00      	nop
 800067e:	46bd      	mov	sp, r7
 8000680:	bc80      	pop	{r7}
 8000682:	4770      	bx	lr

08000684 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000684:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000686:	e003      	b.n	8000690 <LoopCopyDataInit>

08000688 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000688:	4b0b      	ldr	r3, [pc, #44]	; (80006b8 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800068a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800068c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800068e:	3104      	adds	r1, #4

08000690 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000690:	480a      	ldr	r0, [pc, #40]	; (80006bc <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000692:	4b0b      	ldr	r3, [pc, #44]	; (80006c0 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000694:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000696:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000698:	d3f6      	bcc.n	8000688 <CopyDataInit>
  ldr r2, =_sbss
 800069a:	4a0a      	ldr	r2, [pc, #40]	; (80006c4 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 800069c:	e002      	b.n	80006a4 <LoopFillZerobss>

0800069e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800069e:	2300      	movs	r3, #0
  str r3, [r2], #4
 80006a0:	f842 3b04 	str.w	r3, [r2], #4

080006a4 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80006a4:	4b08      	ldr	r3, [pc, #32]	; (80006c8 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80006a6:	429a      	cmp	r2, r3
  bcc FillZerobss
 80006a8:	d3f9      	bcc.n	800069e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80006aa:	f7ff ffe5 	bl	8000678 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80006ae:	f006 ff9f 	bl	80075f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80006b2:	f7ff fd4b 	bl	800014c <main>
  bx lr
 80006b6:	4770      	bx	lr
  ldr r3, =_sidata
 80006b8:	080076e8 	.word	0x080076e8
  ldr r0, =_sdata
 80006bc:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80006c0:	20000164 	.word	0x20000164
  ldr r2, =_sbss
 80006c4:	20000164 	.word	0x20000164
  ldr r3, = _ebss
 80006c8:	2000098c 	.word	0x2000098c

080006cc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80006cc:	e7fe      	b.n	80006cc <ADC1_2_IRQHandler>
	...

080006d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80006d4:	4b08      	ldr	r3, [pc, #32]	; (80006f8 <HAL_Init+0x28>)
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	4a07      	ldr	r2, [pc, #28]	; (80006f8 <HAL_Init+0x28>)
 80006da:	f043 0310 	orr.w	r3, r3, #16
 80006de:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80006e0:	2003      	movs	r0, #3
 80006e2:	f000 fdfb 	bl	80012dc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80006e6:	2000      	movs	r0, #0
 80006e8:	f000 f808 	bl	80006fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80006ec:	f7ff ff22 	bl	8000534 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80006f0:	2300      	movs	r3, #0
}
 80006f2:	4618      	mov	r0, r3
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	bf00      	nop
 80006f8:	40022000 	.word	0x40022000

080006fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b082      	sub	sp, #8
 8000700:	af00      	add	r7, sp, #0
 8000702:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000704:	4b12      	ldr	r3, [pc, #72]	; (8000750 <HAL_InitTick+0x54>)
 8000706:	681a      	ldr	r2, [r3, #0]
 8000708:	4b12      	ldr	r3, [pc, #72]	; (8000754 <HAL_InitTick+0x58>)
 800070a:	781b      	ldrb	r3, [r3, #0]
 800070c:	4619      	mov	r1, r3
 800070e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000712:	fbb3 f3f1 	udiv	r3, r3, r1
 8000716:	fbb2 f3f3 	udiv	r3, r2, r3
 800071a:	4618      	mov	r0, r3
 800071c:	f000 fe13 	bl	8001346 <HAL_SYSTICK_Config>
 8000720:	4603      	mov	r3, r0
 8000722:	2b00      	cmp	r3, #0
 8000724:	d001      	beq.n	800072a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000726:	2301      	movs	r3, #1
 8000728:	e00e      	b.n	8000748 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	2b0f      	cmp	r3, #15
 800072e:	d80a      	bhi.n	8000746 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000730:	2200      	movs	r2, #0
 8000732:	6879      	ldr	r1, [r7, #4]
 8000734:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000738:	f000 fddb 	bl	80012f2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800073c:	4a06      	ldr	r2, [pc, #24]	; (8000758 <HAL_InitTick+0x5c>)
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000742:	2300      	movs	r3, #0
 8000744:	e000      	b.n	8000748 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000746:	2301      	movs	r3, #1
}
 8000748:	4618      	mov	r0, r3
 800074a:	3708      	adds	r7, #8
 800074c:	46bd      	mov	sp, r7
 800074e:	bd80      	pop	{r7, pc}
 8000750:	20000000 	.word	0x20000000
 8000754:	20000008 	.word	0x20000008
 8000758:	20000004 	.word	0x20000004

0800075c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800075c:	b480      	push	{r7}
 800075e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000760:	4b05      	ldr	r3, [pc, #20]	; (8000778 <HAL_IncTick+0x1c>)
 8000762:	781b      	ldrb	r3, [r3, #0]
 8000764:	461a      	mov	r2, r3
 8000766:	4b05      	ldr	r3, [pc, #20]	; (800077c <HAL_IncTick+0x20>)
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	4413      	add	r3, r2
 800076c:	4a03      	ldr	r2, [pc, #12]	; (800077c <HAL_IncTick+0x20>)
 800076e:	6013      	str	r3, [r2, #0]
}
 8000770:	bf00      	nop
 8000772:	46bd      	mov	sp, r7
 8000774:	bc80      	pop	{r7}
 8000776:	4770      	bx	lr
 8000778:	20000008 	.word	0x20000008
 800077c:	200001d8 	.word	0x200001d8

08000780 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000780:	b480      	push	{r7}
 8000782:	af00      	add	r7, sp, #0
  return uwTick;
 8000784:	4b02      	ldr	r3, [pc, #8]	; (8000790 <HAL_GetTick+0x10>)
 8000786:	681b      	ldr	r3, [r3, #0]
}
 8000788:	4618      	mov	r0, r3
 800078a:	46bd      	mov	sp, r7
 800078c:	bc80      	pop	{r7}
 800078e:	4770      	bx	lr
 8000790:	200001d8 	.word	0x200001d8

08000794 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b086      	sub	sp, #24
 8000798:	af00      	add	r7, sp, #0
 800079a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800079c:	2300      	movs	r3, #0
 800079e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80007a0:	2300      	movs	r3, #0
 80007a2:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80007a4:	2300      	movs	r3, #0
 80007a6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80007a8:	2300      	movs	r3, #0
 80007aa:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d101      	bne.n	80007b6 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80007b2:	2301      	movs	r3, #1
 80007b4:	e0be      	b.n	8000934 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	689b      	ldr	r3, [r3, #8]
 80007ba:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d109      	bne.n	80007d8 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	2200      	movs	r2, #0
 80007c8:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	2200      	movs	r2, #0
 80007ce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80007d2:	6878      	ldr	r0, [r7, #4]
 80007d4:	f7ff fee0 	bl	8000598 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80007d8:	6878      	ldr	r0, [r7, #4]
 80007da:	f000 fbdd 	bl	8000f98 <ADC_ConversionStop_Disable>
 80007de:	4603      	mov	r3, r0
 80007e0:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80007e6:	f003 0310 	and.w	r3, r3, #16
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	f040 8099 	bne.w	8000922 <HAL_ADC_Init+0x18e>
 80007f0:	7dfb      	ldrb	r3, [r7, #23]
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	f040 8095 	bne.w	8000922 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80007fc:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000800:	f023 0302 	bic.w	r3, r3, #2
 8000804:	f043 0202 	orr.w	r2, r3, #2
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000814:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	7b1b      	ldrb	r3, [r3, #12]
 800081a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800081c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800081e:	68ba      	ldr	r2, [r7, #8]
 8000820:	4313      	orrs	r3, r2
 8000822:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	689b      	ldr	r3, [r3, #8]
 8000828:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800082c:	d003      	beq.n	8000836 <HAL_ADC_Init+0xa2>
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	689b      	ldr	r3, [r3, #8]
 8000832:	2b01      	cmp	r3, #1
 8000834:	d102      	bne.n	800083c <HAL_ADC_Init+0xa8>
 8000836:	f44f 7380 	mov.w	r3, #256	; 0x100
 800083a:	e000      	b.n	800083e <HAL_ADC_Init+0xaa>
 800083c:	2300      	movs	r3, #0
 800083e:	693a      	ldr	r2, [r7, #16]
 8000840:	4313      	orrs	r3, r2
 8000842:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	7d1b      	ldrb	r3, [r3, #20]
 8000848:	2b01      	cmp	r3, #1
 800084a:	d119      	bne.n	8000880 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	7b1b      	ldrb	r3, [r3, #12]
 8000850:	2b00      	cmp	r3, #0
 8000852:	d109      	bne.n	8000868 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	699b      	ldr	r3, [r3, #24]
 8000858:	3b01      	subs	r3, #1
 800085a:	035a      	lsls	r2, r3, #13
 800085c:	693b      	ldr	r3, [r7, #16]
 800085e:	4313      	orrs	r3, r2
 8000860:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000864:	613b      	str	r3, [r7, #16]
 8000866:	e00b      	b.n	8000880 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800086c:	f043 0220 	orr.w	r2, r3, #32
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000878:	f043 0201 	orr.w	r2, r3, #1
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	685b      	ldr	r3, [r3, #4]
 8000886:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	693a      	ldr	r2, [r7, #16]
 8000890:	430a      	orrs	r2, r1
 8000892:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	689a      	ldr	r2, [r3, #8]
 800089a:	4b28      	ldr	r3, [pc, #160]	; (800093c <HAL_ADC_Init+0x1a8>)
 800089c:	4013      	ands	r3, r2
 800089e:	687a      	ldr	r2, [r7, #4]
 80008a0:	6812      	ldr	r2, [r2, #0]
 80008a2:	68b9      	ldr	r1, [r7, #8]
 80008a4:	430b      	orrs	r3, r1
 80008a6:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	689b      	ldr	r3, [r3, #8]
 80008ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80008b0:	d003      	beq.n	80008ba <HAL_ADC_Init+0x126>
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	689b      	ldr	r3, [r3, #8]
 80008b6:	2b01      	cmp	r3, #1
 80008b8:	d104      	bne.n	80008c4 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	691b      	ldr	r3, [r3, #16]
 80008be:	3b01      	subs	r3, #1
 80008c0:	051b      	lsls	r3, r3, #20
 80008c2:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008ca:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	68fa      	ldr	r2, [r7, #12]
 80008d4:	430a      	orrs	r2, r1
 80008d6:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	689a      	ldr	r2, [r3, #8]
 80008de:	4b18      	ldr	r3, [pc, #96]	; (8000940 <HAL_ADC_Init+0x1ac>)
 80008e0:	4013      	ands	r3, r2
 80008e2:	68ba      	ldr	r2, [r7, #8]
 80008e4:	429a      	cmp	r2, r3
 80008e6:	d10b      	bne.n	8000900 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	2200      	movs	r2, #0
 80008ec:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80008f2:	f023 0303 	bic.w	r3, r3, #3
 80008f6:	f043 0201 	orr.w	r2, r3, #1
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80008fe:	e018      	b.n	8000932 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000904:	f023 0312 	bic.w	r3, r3, #18
 8000908:	f043 0210 	orr.w	r2, r3, #16
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000914:	f043 0201 	orr.w	r2, r3, #1
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 800091c:	2301      	movs	r3, #1
 800091e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000920:	e007      	b.n	8000932 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000926:	f043 0210 	orr.w	r2, r3, #16
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 800092e:	2301      	movs	r3, #1
 8000930:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000932:	7dfb      	ldrb	r3, [r7, #23]
}
 8000934:	4618      	mov	r0, r3
 8000936:	3718      	adds	r7, #24
 8000938:	46bd      	mov	sp, r7
 800093a:	bd80      	pop	{r7, pc}
 800093c:	ffe1f7fd 	.word	0xffe1f7fd
 8000940:	ff1f0efe 	.word	0xff1f0efe

08000944 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b084      	sub	sp, #16
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800094c:	2300      	movs	r3, #0
 800094e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000956:	2b01      	cmp	r3, #1
 8000958:	d101      	bne.n	800095e <HAL_ADC_Start+0x1a>
 800095a:	2302      	movs	r3, #2
 800095c:	e098      	b.n	8000a90 <HAL_ADC_Start+0x14c>
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	2201      	movs	r2, #1
 8000962:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8000966:	6878      	ldr	r0, [r7, #4]
 8000968:	f000 fac4 	bl	8000ef4 <ADC_Enable>
 800096c:	4603      	mov	r3, r0
 800096e:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8000970:	7bfb      	ldrb	r3, [r7, #15]
 8000972:	2b00      	cmp	r3, #0
 8000974:	f040 8087 	bne.w	8000a86 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800097c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000980:	f023 0301 	bic.w	r3, r3, #1
 8000984:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	4a41      	ldr	r2, [pc, #260]	; (8000a98 <HAL_ADC_Start+0x154>)
 8000992:	4293      	cmp	r3, r2
 8000994:	d105      	bne.n	80009a2 <HAL_ADC_Start+0x5e>
 8000996:	4b41      	ldr	r3, [pc, #260]	; (8000a9c <HAL_ADC_Start+0x158>)
 8000998:	685b      	ldr	r3, [r3, #4]
 800099a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d115      	bne.n	80009ce <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009a6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	685b      	ldr	r3, [r3, #4]
 80009b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d026      	beq.n	8000a0a <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009c0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80009c4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80009cc:	e01d      	b.n	8000a0a <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009d2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	4a2f      	ldr	r2, [pc, #188]	; (8000a9c <HAL_ADC_Start+0x158>)
 80009e0:	4293      	cmp	r3, r2
 80009e2:	d004      	beq.n	80009ee <HAL_ADC_Start+0xaa>
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	4a2b      	ldr	r2, [pc, #172]	; (8000a98 <HAL_ADC_Start+0x154>)
 80009ea:	4293      	cmp	r3, r2
 80009ec:	d10d      	bne.n	8000a0a <HAL_ADC_Start+0xc6>
 80009ee:	4b2b      	ldr	r3, [pc, #172]	; (8000a9c <HAL_ADC_Start+0x158>)
 80009f0:	685b      	ldr	r3, [r3, #4]
 80009f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d007      	beq.n	8000a0a <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009fe:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000a02:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a0e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d006      	beq.n	8000a24 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a1a:	f023 0206 	bic.w	r2, r3, #6
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	62da      	str	r2, [r3, #44]	; 0x2c
 8000a22:	e002      	b.n	8000a2a <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	2200      	movs	r2, #0
 8000a28:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	f06f 0202 	mvn.w	r2, #2
 8000a3a:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	689b      	ldr	r3, [r3, #8]
 8000a42:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000a46:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000a4a:	d113      	bne.n	8000a74 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000a50:	4a11      	ldr	r2, [pc, #68]	; (8000a98 <HAL_ADC_Start+0x154>)
 8000a52:	4293      	cmp	r3, r2
 8000a54:	d105      	bne.n	8000a62 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000a56:	4b11      	ldr	r3, [pc, #68]	; (8000a9c <HAL_ADC_Start+0x158>)
 8000a58:	685b      	ldr	r3, [r3, #4]
 8000a5a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d108      	bne.n	8000a74 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	689a      	ldr	r2, [r3, #8]
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8000a70:	609a      	str	r2, [r3, #8]
 8000a72:	e00c      	b.n	8000a8e <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	689a      	ldr	r2, [r3, #8]
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8000a82:	609a      	str	r2, [r3, #8]
 8000a84:	e003      	b.n	8000a8e <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	2200      	movs	r2, #0
 8000a8a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8000a8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a90:	4618      	mov	r0, r3
 8000a92:	3710      	adds	r7, #16
 8000a94:	46bd      	mov	sp, r7
 8000a96:	bd80      	pop	{r7, pc}
 8000a98:	40012800 	.word	0x40012800
 8000a9c:	40012400 	.word	0x40012400

08000aa0 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b084      	sub	sp, #16
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000ab2:	2b01      	cmp	r3, #1
 8000ab4:	d101      	bne.n	8000aba <HAL_ADC_Stop+0x1a>
 8000ab6:	2302      	movs	r3, #2
 8000ab8:	e01a      	b.n	8000af0 <HAL_ADC_Stop+0x50>
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	2201      	movs	r2, #1
 8000abe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000ac2:	6878      	ldr	r0, [r7, #4]
 8000ac4:	f000 fa68 	bl	8000f98 <ADC_ConversionStop_Disable>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8000acc:	7bfb      	ldrb	r3, [r7, #15]
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d109      	bne.n	8000ae6 <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ad6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000ada:	f023 0301 	bic.w	r3, r3, #1
 8000ade:	f043 0201 	orr.w	r2, r3, #1
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	2200      	movs	r2, #0
 8000aea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8000aee:	7bfb      	ldrb	r3, [r7, #15]
}
 8000af0:	4618      	mov	r0, r3
 8000af2:	3710      	adds	r7, #16
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bd80      	pop	{r7, pc}

08000af8 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8000af8:	b590      	push	{r4, r7, lr}
 8000afa:	b087      	sub	sp, #28
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
 8000b00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8000b02:	2300      	movs	r3, #0
 8000b04:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8000b06:	2300      	movs	r3, #0
 8000b08:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8000b0e:	f7ff fe37 	bl	8000780 <HAL_GetTick>
 8000b12:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	689b      	ldr	r3, [r3, #8]
 8000b1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d00b      	beq.n	8000b3a <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b26:	f043 0220 	orr.w	r2, r3, #32
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	2200      	movs	r2, #0
 8000b32:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 8000b36:	2301      	movs	r3, #1
 8000b38:	e0c8      	b.n	8000ccc <HAL_ADC_PollForConversion+0x1d4>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	685b      	ldr	r3, [r3, #4]
 8000b40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d12a      	bne.n	8000b9e <HAL_ADC_PollForConversion+0xa6>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b4e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d123      	bne.n	8000b9e <HAL_ADC_PollForConversion+0xa6>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8000b56:	e01a      	b.n	8000b8e <HAL_ADC_PollForConversion+0x96>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8000b58:	683b      	ldr	r3, [r7, #0]
 8000b5a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000b5e:	d016      	beq.n	8000b8e <HAL_ADC_PollForConversion+0x96>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8000b60:	683b      	ldr	r3, [r7, #0]
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d007      	beq.n	8000b76 <HAL_ADC_PollForConversion+0x7e>
 8000b66:	f7ff fe0b 	bl	8000780 <HAL_GetTick>
 8000b6a:	4602      	mov	r2, r0
 8000b6c:	697b      	ldr	r3, [r7, #20]
 8000b6e:	1ad3      	subs	r3, r2, r3
 8000b70:	683a      	ldr	r2, [r7, #0]
 8000b72:	429a      	cmp	r2, r3
 8000b74:	d20b      	bcs.n	8000b8e <HAL_ADC_PollForConversion+0x96>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b7a:	f043 0204 	orr.w	r2, r3, #4
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	629a      	str	r2, [r3, #40]	; 0x28
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	2200      	movs	r2, #0
 8000b86:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          
          return HAL_TIMEOUT;
 8000b8a:	2303      	movs	r3, #3
 8000b8c:	e09e      	b.n	8000ccc <HAL_ADC_PollForConversion+0x1d4>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	f003 0302 	and.w	r3, r3, #2
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d0dd      	beq.n	8000b58 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000b9c:	e06c      	b.n	8000c78 <HAL_ADC_PollForConversion+0x180>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8000b9e:	4b4d      	ldr	r3, [pc, #308]	; (8000cd4 <HAL_ADC_PollForConversion+0x1dc>)
 8000ba0:	681c      	ldr	r4, [r3, #0]
 8000ba2:	2002      	movs	r0, #2
 8000ba4:	f002 fdde 	bl	8003764 <HAL_RCCEx_GetPeriphCLKFreq>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	6919      	ldr	r1, [r3, #16]
 8000bb4:	4b48      	ldr	r3, [pc, #288]	; (8000cd8 <HAL_ADC_PollForConversion+0x1e0>)
 8000bb6:	400b      	ands	r3, r1
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d118      	bne.n	8000bee <HAL_ADC_PollForConversion+0xf6>
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	68d9      	ldr	r1, [r3, #12]
 8000bc2:	4b46      	ldr	r3, [pc, #280]	; (8000cdc <HAL_ADC_PollForConversion+0x1e4>)
 8000bc4:	400b      	ands	r3, r1
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d111      	bne.n	8000bee <HAL_ADC_PollForConversion+0xf6>
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	6919      	ldr	r1, [r3, #16]
 8000bd0:	4b43      	ldr	r3, [pc, #268]	; (8000ce0 <HAL_ADC_PollForConversion+0x1e8>)
 8000bd2:	400b      	ands	r3, r1
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d108      	bne.n	8000bea <HAL_ADC_PollForConversion+0xf2>
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	68d9      	ldr	r1, [r3, #12]
 8000bde:	4b41      	ldr	r3, [pc, #260]	; (8000ce4 <HAL_ADC_PollForConversion+0x1ec>)
 8000be0:	400b      	ands	r3, r1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d101      	bne.n	8000bea <HAL_ADC_PollForConversion+0xf2>
 8000be6:	2314      	movs	r3, #20
 8000be8:	e020      	b.n	8000c2c <HAL_ADC_PollForConversion+0x134>
 8000bea:	2329      	movs	r3, #41	; 0x29
 8000bec:	e01e      	b.n	8000c2c <HAL_ADC_PollForConversion+0x134>
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	6919      	ldr	r1, [r3, #16]
 8000bf4:	4b3a      	ldr	r3, [pc, #232]	; (8000ce0 <HAL_ADC_PollForConversion+0x1e8>)
 8000bf6:	400b      	ands	r3, r1
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d106      	bne.n	8000c0a <HAL_ADC_PollForConversion+0x112>
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	68d9      	ldr	r1, [r3, #12]
 8000c02:	4b38      	ldr	r3, [pc, #224]	; (8000ce4 <HAL_ADC_PollForConversion+0x1ec>)
 8000c04:	400b      	ands	r3, r1
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d00d      	beq.n	8000c26 <HAL_ADC_PollForConversion+0x12e>
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	6919      	ldr	r1, [r3, #16]
 8000c10:	4b35      	ldr	r3, [pc, #212]	; (8000ce8 <HAL_ADC_PollForConversion+0x1f0>)
 8000c12:	400b      	ands	r3, r1
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d108      	bne.n	8000c2a <HAL_ADC_PollForConversion+0x132>
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	68d9      	ldr	r1, [r3, #12]
 8000c1e:	4b32      	ldr	r3, [pc, #200]	; (8000ce8 <HAL_ADC_PollForConversion+0x1f0>)
 8000c20:	400b      	ands	r3, r1
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d101      	bne.n	8000c2a <HAL_ADC_PollForConversion+0x132>
 8000c26:	2354      	movs	r3, #84	; 0x54
 8000c28:	e000      	b.n	8000c2c <HAL_ADC_PollForConversion+0x134>
 8000c2a:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8000c2c:	fb02 f303 	mul.w	r3, r2, r3
 8000c30:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8000c32:	e01d      	b.n	8000c70 <HAL_ADC_PollForConversion+0x178>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8000c34:	683b      	ldr	r3, [r7, #0]
 8000c36:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000c3a:	d016      	beq.n	8000c6a <HAL_ADC_PollForConversion+0x172>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8000c3c:	683b      	ldr	r3, [r7, #0]
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d007      	beq.n	8000c52 <HAL_ADC_PollForConversion+0x15a>
 8000c42:	f7ff fd9d 	bl	8000780 <HAL_GetTick>
 8000c46:	4602      	mov	r2, r0
 8000c48:	697b      	ldr	r3, [r7, #20]
 8000c4a:	1ad3      	subs	r3, r2, r3
 8000c4c:	683a      	ldr	r2, [r7, #0]
 8000c4e:	429a      	cmp	r2, r3
 8000c50:	d20b      	bcs.n	8000c6a <HAL_ADC_PollForConversion+0x172>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c56:	f043 0204 	orr.w	r2, r3, #4
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	629a      	str	r2, [r3, #40]	; 0x28
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	2200      	movs	r2, #0
 8000c62:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          
          return HAL_TIMEOUT;
 8000c66:	2303      	movs	r3, #3
 8000c68:	e030      	b.n	8000ccc <HAL_ADC_PollForConversion+0x1d4>
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8000c6a:	68fb      	ldr	r3, [r7, #12]
 8000c6c:	3301      	adds	r3, #1
 8000c6e:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8000c70:	68fb      	ldr	r3, [r7, #12]
 8000c72:	693a      	ldr	r2, [r7, #16]
 8000c74:	429a      	cmp	r2, r3
 8000c76:	d8dd      	bhi.n	8000c34 <HAL_ADC_PollForConversion+0x13c>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	f06f 0212 	mvn.w	r2, #18
 8000c80:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c86:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	689b      	ldr	r3, [r3, #8]
 8000c94:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000c98:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000c9c:	d115      	bne.n	8000cca <HAL_ADC_PollForConversion+0x1d2>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d111      	bne.n	8000cca <HAL_ADC_PollForConversion+0x1d2>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000caa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cb6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d105      	bne.n	8000cca <HAL_ADC_PollForConversion+0x1d2>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cc2:	f043 0201 	orr.w	r2, r3, #1
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8000cca:	2300      	movs	r3, #0
}
 8000ccc:	4618      	mov	r0, r3
 8000cce:	371c      	adds	r7, #28
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	bd90      	pop	{r4, r7, pc}
 8000cd4:	20000000 	.word	0x20000000
 8000cd8:	24924924 	.word	0x24924924
 8000cdc:	00924924 	.word	0x00924924
 8000ce0:	12492492 	.word	0x12492492
 8000ce4:	00492492 	.word	0x00492492
 8000ce8:	00249249 	.word	0x00249249

08000cec <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8000cec:	b480      	push	{r7}
 8000cee:	b083      	sub	sp, #12
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	370c      	adds	r7, #12
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bc80      	pop	{r7}
 8000d02:	4770      	bx	lr

08000d04 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8000d04:	b480      	push	{r7}
 8000d06:	b085      	sub	sp, #20
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
 8000d0c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8000d12:	2300      	movs	r3, #0
 8000d14:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000d1c:	2b01      	cmp	r3, #1
 8000d1e:	d101      	bne.n	8000d24 <HAL_ADC_ConfigChannel+0x20>
 8000d20:	2302      	movs	r3, #2
 8000d22:	e0dc      	b.n	8000ede <HAL_ADC_ConfigChannel+0x1da>
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	2201      	movs	r2, #1
 8000d28:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000d2c:	683b      	ldr	r3, [r7, #0]
 8000d2e:	685b      	ldr	r3, [r3, #4]
 8000d30:	2b06      	cmp	r3, #6
 8000d32:	d81c      	bhi.n	8000d6e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000d3a:	683b      	ldr	r3, [r7, #0]
 8000d3c:	685a      	ldr	r2, [r3, #4]
 8000d3e:	4613      	mov	r3, r2
 8000d40:	009b      	lsls	r3, r3, #2
 8000d42:	4413      	add	r3, r2
 8000d44:	3b05      	subs	r3, #5
 8000d46:	221f      	movs	r2, #31
 8000d48:	fa02 f303 	lsl.w	r3, r2, r3
 8000d4c:	43db      	mvns	r3, r3
 8000d4e:	4019      	ands	r1, r3
 8000d50:	683b      	ldr	r3, [r7, #0]
 8000d52:	6818      	ldr	r0, [r3, #0]
 8000d54:	683b      	ldr	r3, [r7, #0]
 8000d56:	685a      	ldr	r2, [r3, #4]
 8000d58:	4613      	mov	r3, r2
 8000d5a:	009b      	lsls	r3, r3, #2
 8000d5c:	4413      	add	r3, r2
 8000d5e:	3b05      	subs	r3, #5
 8000d60:	fa00 f203 	lsl.w	r2, r0, r3
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	430a      	orrs	r2, r1
 8000d6a:	635a      	str	r2, [r3, #52]	; 0x34
 8000d6c:	e03c      	b.n	8000de8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000d6e:	683b      	ldr	r3, [r7, #0]
 8000d70:	685b      	ldr	r3, [r3, #4]
 8000d72:	2b0c      	cmp	r3, #12
 8000d74:	d81c      	bhi.n	8000db0 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000d7c:	683b      	ldr	r3, [r7, #0]
 8000d7e:	685a      	ldr	r2, [r3, #4]
 8000d80:	4613      	mov	r3, r2
 8000d82:	009b      	lsls	r3, r3, #2
 8000d84:	4413      	add	r3, r2
 8000d86:	3b23      	subs	r3, #35	; 0x23
 8000d88:	221f      	movs	r2, #31
 8000d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d8e:	43db      	mvns	r3, r3
 8000d90:	4019      	ands	r1, r3
 8000d92:	683b      	ldr	r3, [r7, #0]
 8000d94:	6818      	ldr	r0, [r3, #0]
 8000d96:	683b      	ldr	r3, [r7, #0]
 8000d98:	685a      	ldr	r2, [r3, #4]
 8000d9a:	4613      	mov	r3, r2
 8000d9c:	009b      	lsls	r3, r3, #2
 8000d9e:	4413      	add	r3, r2
 8000da0:	3b23      	subs	r3, #35	; 0x23
 8000da2:	fa00 f203 	lsl.w	r2, r0, r3
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	430a      	orrs	r2, r1
 8000dac:	631a      	str	r2, [r3, #48]	; 0x30
 8000dae:	e01b      	b.n	8000de8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000db6:	683b      	ldr	r3, [r7, #0]
 8000db8:	685a      	ldr	r2, [r3, #4]
 8000dba:	4613      	mov	r3, r2
 8000dbc:	009b      	lsls	r3, r3, #2
 8000dbe:	4413      	add	r3, r2
 8000dc0:	3b41      	subs	r3, #65	; 0x41
 8000dc2:	221f      	movs	r2, #31
 8000dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc8:	43db      	mvns	r3, r3
 8000dca:	4019      	ands	r1, r3
 8000dcc:	683b      	ldr	r3, [r7, #0]
 8000dce:	6818      	ldr	r0, [r3, #0]
 8000dd0:	683b      	ldr	r3, [r7, #0]
 8000dd2:	685a      	ldr	r2, [r3, #4]
 8000dd4:	4613      	mov	r3, r2
 8000dd6:	009b      	lsls	r3, r3, #2
 8000dd8:	4413      	add	r3, r2
 8000dda:	3b41      	subs	r3, #65	; 0x41
 8000ddc:	fa00 f203 	lsl.w	r2, r0, r3
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	430a      	orrs	r2, r1
 8000de6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000de8:	683b      	ldr	r3, [r7, #0]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	2b09      	cmp	r3, #9
 8000dee:	d91c      	bls.n	8000e2a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	68d9      	ldr	r1, [r3, #12]
 8000df6:	683b      	ldr	r3, [r7, #0]
 8000df8:	681a      	ldr	r2, [r3, #0]
 8000dfa:	4613      	mov	r3, r2
 8000dfc:	005b      	lsls	r3, r3, #1
 8000dfe:	4413      	add	r3, r2
 8000e00:	3b1e      	subs	r3, #30
 8000e02:	2207      	movs	r2, #7
 8000e04:	fa02 f303 	lsl.w	r3, r2, r3
 8000e08:	43db      	mvns	r3, r3
 8000e0a:	4019      	ands	r1, r3
 8000e0c:	683b      	ldr	r3, [r7, #0]
 8000e0e:	6898      	ldr	r0, [r3, #8]
 8000e10:	683b      	ldr	r3, [r7, #0]
 8000e12:	681a      	ldr	r2, [r3, #0]
 8000e14:	4613      	mov	r3, r2
 8000e16:	005b      	lsls	r3, r3, #1
 8000e18:	4413      	add	r3, r2
 8000e1a:	3b1e      	subs	r3, #30
 8000e1c:	fa00 f203 	lsl.w	r2, r0, r3
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	430a      	orrs	r2, r1
 8000e26:	60da      	str	r2, [r3, #12]
 8000e28:	e019      	b.n	8000e5e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	6919      	ldr	r1, [r3, #16]
 8000e30:	683b      	ldr	r3, [r7, #0]
 8000e32:	681a      	ldr	r2, [r3, #0]
 8000e34:	4613      	mov	r3, r2
 8000e36:	005b      	lsls	r3, r3, #1
 8000e38:	4413      	add	r3, r2
 8000e3a:	2207      	movs	r2, #7
 8000e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e40:	43db      	mvns	r3, r3
 8000e42:	4019      	ands	r1, r3
 8000e44:	683b      	ldr	r3, [r7, #0]
 8000e46:	6898      	ldr	r0, [r3, #8]
 8000e48:	683b      	ldr	r3, [r7, #0]
 8000e4a:	681a      	ldr	r2, [r3, #0]
 8000e4c:	4613      	mov	r3, r2
 8000e4e:	005b      	lsls	r3, r3, #1
 8000e50:	4413      	add	r3, r2
 8000e52:	fa00 f203 	lsl.w	r2, r0, r3
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	430a      	orrs	r2, r1
 8000e5c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000e5e:	683b      	ldr	r3, [r7, #0]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	2b10      	cmp	r3, #16
 8000e64:	d003      	beq.n	8000e6e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8000e66:	683b      	ldr	r3, [r7, #0]
 8000e68:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000e6a:	2b11      	cmp	r3, #17
 8000e6c:	d132      	bne.n	8000ed4 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	4a1d      	ldr	r2, [pc, #116]	; (8000ee8 <HAL_ADC_ConfigChannel+0x1e4>)
 8000e74:	4293      	cmp	r3, r2
 8000e76:	d125      	bne.n	8000ec4 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	689b      	ldr	r3, [r3, #8]
 8000e7e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d126      	bne.n	8000ed4 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	689a      	ldr	r2, [r3, #8]
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8000e94:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8000e96:	683b      	ldr	r3, [r7, #0]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	2b10      	cmp	r3, #16
 8000e9c:	d11a      	bne.n	8000ed4 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000e9e:	4b13      	ldr	r3, [pc, #76]	; (8000eec <HAL_ADC_ConfigChannel+0x1e8>)
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	4a13      	ldr	r2, [pc, #76]	; (8000ef0 <HAL_ADC_ConfigChannel+0x1ec>)
 8000ea4:	fba2 2303 	umull	r2, r3, r2, r3
 8000ea8:	0c9a      	lsrs	r2, r3, #18
 8000eaa:	4613      	mov	r3, r2
 8000eac:	009b      	lsls	r3, r3, #2
 8000eae:	4413      	add	r3, r2
 8000eb0:	005b      	lsls	r3, r3, #1
 8000eb2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000eb4:	e002      	b.n	8000ebc <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8000eb6:	68bb      	ldr	r3, [r7, #8]
 8000eb8:	3b01      	subs	r3, #1
 8000eba:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000ebc:	68bb      	ldr	r3, [r7, #8]
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d1f9      	bne.n	8000eb6 <HAL_ADC_ConfigChannel+0x1b2>
 8000ec2:	e007      	b.n	8000ed4 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ec8:	f043 0220 	orr.w	r2, r3, #32
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8000ed0:	2301      	movs	r3, #1
 8000ed2:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8000edc:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ede:	4618      	mov	r0, r3
 8000ee0:	3714      	adds	r7, #20
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bc80      	pop	{r7}
 8000ee6:	4770      	bx	lr
 8000ee8:	40012400 	.word	0x40012400
 8000eec:	20000000 	.word	0x20000000
 8000ef0:	431bde83 	.word	0x431bde83

08000ef4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b084      	sub	sp, #16
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000efc:	2300      	movs	r3, #0
 8000efe:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8000f00:	2300      	movs	r3, #0
 8000f02:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	689b      	ldr	r3, [r3, #8]
 8000f0a:	f003 0301 	and.w	r3, r3, #1
 8000f0e:	2b01      	cmp	r3, #1
 8000f10:	d039      	beq.n	8000f86 <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	689a      	ldr	r2, [r3, #8]
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	f042 0201 	orr.w	r2, r2, #1
 8000f20:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000f22:	4b1b      	ldr	r3, [pc, #108]	; (8000f90 <ADC_Enable+0x9c>)
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	4a1b      	ldr	r2, [pc, #108]	; (8000f94 <ADC_Enable+0xa0>)
 8000f28:	fba2 2303 	umull	r2, r3, r2, r3
 8000f2c:	0c9b      	lsrs	r3, r3, #18
 8000f2e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8000f30:	e002      	b.n	8000f38 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8000f32:	68bb      	ldr	r3, [r7, #8]
 8000f34:	3b01      	subs	r3, #1
 8000f36:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8000f38:	68bb      	ldr	r3, [r7, #8]
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d1f9      	bne.n	8000f32 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8000f3e:	f7ff fc1f 	bl	8000780 <HAL_GetTick>
 8000f42:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8000f44:	e018      	b.n	8000f78 <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8000f46:	f7ff fc1b 	bl	8000780 <HAL_GetTick>
 8000f4a:	4602      	mov	r2, r0
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	1ad3      	subs	r3, r2, r3
 8000f50:	2b02      	cmp	r3, #2
 8000f52:	d911      	bls.n	8000f78 <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f58:	f043 0210 	orr.w	r2, r3, #16
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f64:	f043 0201 	orr.w	r2, r3, #1
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	2200      	movs	r2, #0
 8000f70:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 8000f74:	2301      	movs	r3, #1
 8000f76:	e007      	b.n	8000f88 <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	689b      	ldr	r3, [r3, #8]
 8000f7e:	f003 0301 	and.w	r3, r3, #1
 8000f82:	2b01      	cmp	r3, #1
 8000f84:	d1df      	bne.n	8000f46 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8000f86:	2300      	movs	r3, #0
}
 8000f88:	4618      	mov	r0, r3
 8000f8a:	3710      	adds	r7, #16
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bd80      	pop	{r7, pc}
 8000f90:	20000000 	.word	0x20000000
 8000f94:	431bde83 	.word	0x431bde83

08000f98 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b084      	sub	sp, #16
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	689b      	ldr	r3, [r3, #8]
 8000faa:	f003 0301 	and.w	r3, r3, #1
 8000fae:	2b01      	cmp	r3, #1
 8000fb0:	d127      	bne.n	8001002 <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	689a      	ldr	r2, [r3, #8]
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	f022 0201 	bic.w	r2, r2, #1
 8000fc0:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8000fc2:	f7ff fbdd 	bl	8000780 <HAL_GetTick>
 8000fc6:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000fc8:	e014      	b.n	8000ff4 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8000fca:	f7ff fbd9 	bl	8000780 <HAL_GetTick>
 8000fce:	4602      	mov	r2, r0
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	1ad3      	subs	r3, r2, r3
 8000fd4:	2b02      	cmp	r3, #2
 8000fd6:	d90d      	bls.n	8000ff4 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fdc:	f043 0210 	orr.w	r2, r3, #16
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fe8:	f043 0201 	orr.w	r2, r3, #1
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8000ff0:	2301      	movs	r3, #1
 8000ff2:	e007      	b.n	8001004 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	689b      	ldr	r3, [r3, #8]
 8000ffa:	f003 0301 	and.w	r3, r3, #1
 8000ffe:	2b01      	cmp	r3, #1
 8001000:	d0e3      	beq.n	8000fca <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001002:	2300      	movs	r3, #0
}
 8001004:	4618      	mov	r0, r3
 8001006:	3710      	adds	r7, #16
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}

0800100c <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 800100c:	b590      	push	{r4, r7, lr}
 800100e:	b087      	sub	sp, #28
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001014:	2300      	movs	r3, #0
 8001016:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8001018:	2300      	movs	r3, #0
 800101a:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001022:	2b01      	cmp	r3, #1
 8001024:	d101      	bne.n	800102a <HAL_ADCEx_Calibration_Start+0x1e>
 8001026:	2302      	movs	r3, #2
 8001028:	e086      	b.n	8001138 <HAL_ADCEx_Calibration_Start+0x12c>
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	2201      	movs	r2, #1
 800102e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  /* 1. Calibration prerequisite:                                             */
  /*    - ADC must be disabled for at least two ADC clock cycles in disable   */
  /*      mode before ADC enable                                              */
  /* Stop potential conversion on going, on regular and injected groups       */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001032:	6878      	ldr	r0, [r7, #4]
 8001034:	f7ff ffb0 	bl	8000f98 <ADC_ConversionStop_Disable>
 8001038:	4603      	mov	r3, r0
 800103a:	75fb      	strb	r3, [r7, #23]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800103c:	7dfb      	ldrb	r3, [r7, #23]
 800103e:	2b00      	cmp	r3, #0
 8001040:	d175      	bne.n	800112e <HAL_ADCEx_Calibration_Start+0x122>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001046:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800104a:	f023 0302 	bic.w	r3, r3, #2
 800104e:	f043 0202 	orr.w	r2, r3, #2
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8001056:	4b3a      	ldr	r3, [pc, #232]	; (8001140 <HAL_ADCEx_Calibration_Start+0x134>)
 8001058:	681c      	ldr	r4, [r3, #0]
 800105a:	2002      	movs	r0, #2
 800105c:	f002 fb82 	bl	8003764 <HAL_RCCEx_GetPeriphCLKFreq>
 8001060:	4603      	mov	r3, r0
 8001062:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 8001066:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 8001068:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 800106a:	e002      	b.n	8001072 <HAL_ADCEx_Calibration_Start+0x66>
    {
      wait_loop_index--;
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	3b01      	subs	r3, #1
 8001070:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	2b00      	cmp	r3, #0
 8001076:	d1f9      	bne.n	800106c <HAL_ADCEx_Calibration_Start+0x60>
    }
    
    /* 2. Enable the ADC peripheral */
    ADC_Enable(hadc);
 8001078:	6878      	ldr	r0, [r7, #4]
 800107a:	f7ff ff3b 	bl	8000ef4 <ADC_Enable>
    
    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	689a      	ldr	r2, [r3, #8]
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	f042 0208 	orr.w	r2, r2, #8
 800108c:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 800108e:	f7ff fb77 	bl	8000780 <HAL_GetTick>
 8001092:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8001094:	e014      	b.n	80010c0 <HAL_ADCEx_Calibration_Start+0xb4>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8001096:	f7ff fb73 	bl	8000780 <HAL_GetTick>
 800109a:	4602      	mov	r2, r0
 800109c:	693b      	ldr	r3, [r7, #16]
 800109e:	1ad3      	subs	r3, r2, r3
 80010a0:	2b0a      	cmp	r3, #10
 80010a2:	d90d      	bls.n	80010c0 <HAL_ADCEx_Calibration_Start+0xb4>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010a8:	f023 0312 	bic.w	r3, r3, #18
 80010ac:	f043 0210 	orr.w	r2, r3, #16
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	629a      	str	r2, [r3, #40]	; 0x28
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	2200      	movs	r2, #0
 80010b8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        
        return HAL_ERROR;
 80010bc:	2301      	movs	r3, #1
 80010be:	e03b      	b.n	8001138 <HAL_ADCEx_Calibration_Start+0x12c>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	689b      	ldr	r3, [r3, #8]
 80010c6:	f003 0308 	and.w	r3, r3, #8
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d1e3      	bne.n	8001096 <HAL_ADCEx_Calibration_Start+0x8a>
      }
    }
    
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	689a      	ldr	r2, [r3, #8]
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	f042 0204 	orr.w	r2, r2, #4
 80010dc:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 80010de:	f7ff fb4f 	bl	8000780 <HAL_GetTick>
 80010e2:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80010e4:	e014      	b.n	8001110 <HAL_ADCEx_Calibration_Start+0x104>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80010e6:	f7ff fb4b 	bl	8000780 <HAL_GetTick>
 80010ea:	4602      	mov	r2, r0
 80010ec:	693b      	ldr	r3, [r7, #16]
 80010ee:	1ad3      	subs	r3, r2, r3
 80010f0:	2b0a      	cmp	r3, #10
 80010f2:	d90d      	bls.n	8001110 <HAL_ADCEx_Calibration_Start+0x104>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010f8:	f023 0312 	bic.w	r3, r3, #18
 80010fc:	f043 0210 	orr.w	r2, r3, #16
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	629a      	str	r2, [r3, #40]	; 0x28
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	2200      	movs	r2, #0
 8001108:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        
        return HAL_ERROR;
 800110c:	2301      	movs	r3, #1
 800110e:	e013      	b.n	8001138 <HAL_ADCEx_Calibration_Start+0x12c>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	689b      	ldr	r3, [r3, #8]
 8001116:	f003 0304 	and.w	r3, r3, #4
 800111a:	2b00      	cmp	r3, #0
 800111c:	d1e3      	bne.n	80010e6 <HAL_ADCEx_Calibration_Start+0xda>
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001122:	f023 0303 	bic.w	r3, r3, #3
 8001126:	f043 0201 	orr.w	r2, r3, #1
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	2200      	movs	r2, #0
 8001132:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001136:	7dfb      	ldrb	r3, [r7, #23]
}
 8001138:	4618      	mov	r0, r3
 800113a:	371c      	adds	r7, #28
 800113c:	46bd      	mov	sp, r7
 800113e:	bd90      	pop	{r4, r7, pc}
 8001140:	20000000 	.word	0x20000000

08001144 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001144:	b480      	push	{r7}
 8001146:	b085      	sub	sp, #20
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	f003 0307 	and.w	r3, r3, #7
 8001152:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001154:	4b0c      	ldr	r3, [pc, #48]	; (8001188 <__NVIC_SetPriorityGrouping+0x44>)
 8001156:	68db      	ldr	r3, [r3, #12]
 8001158:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800115a:	68ba      	ldr	r2, [r7, #8]
 800115c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001160:	4013      	ands	r3, r2
 8001162:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001168:	68bb      	ldr	r3, [r7, #8]
 800116a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800116c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001170:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001174:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001176:	4a04      	ldr	r2, [pc, #16]	; (8001188 <__NVIC_SetPriorityGrouping+0x44>)
 8001178:	68bb      	ldr	r3, [r7, #8]
 800117a:	60d3      	str	r3, [r2, #12]
}
 800117c:	bf00      	nop
 800117e:	3714      	adds	r7, #20
 8001180:	46bd      	mov	sp, r7
 8001182:	bc80      	pop	{r7}
 8001184:	4770      	bx	lr
 8001186:	bf00      	nop
 8001188:	e000ed00 	.word	0xe000ed00

0800118c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800118c:	b480      	push	{r7}
 800118e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001190:	4b04      	ldr	r3, [pc, #16]	; (80011a4 <__NVIC_GetPriorityGrouping+0x18>)
 8001192:	68db      	ldr	r3, [r3, #12]
 8001194:	0a1b      	lsrs	r3, r3, #8
 8001196:	f003 0307 	and.w	r3, r3, #7
}
 800119a:	4618      	mov	r0, r3
 800119c:	46bd      	mov	sp, r7
 800119e:	bc80      	pop	{r7}
 80011a0:	4770      	bx	lr
 80011a2:	bf00      	nop
 80011a4:	e000ed00 	.word	0xe000ed00

080011a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011a8:	b480      	push	{r7}
 80011aa:	b083      	sub	sp, #12
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	4603      	mov	r3, r0
 80011b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	db0b      	blt.n	80011d2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011ba:	79fb      	ldrb	r3, [r7, #7]
 80011bc:	f003 021f 	and.w	r2, r3, #31
 80011c0:	4906      	ldr	r1, [pc, #24]	; (80011dc <__NVIC_EnableIRQ+0x34>)
 80011c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011c6:	095b      	lsrs	r3, r3, #5
 80011c8:	2001      	movs	r0, #1
 80011ca:	fa00 f202 	lsl.w	r2, r0, r2
 80011ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80011d2:	bf00      	nop
 80011d4:	370c      	adds	r7, #12
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bc80      	pop	{r7}
 80011da:	4770      	bx	lr
 80011dc:	e000e100 	.word	0xe000e100

080011e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011e0:	b480      	push	{r7}
 80011e2:	b083      	sub	sp, #12
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	4603      	mov	r3, r0
 80011e8:	6039      	str	r1, [r7, #0]
 80011ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	db0a      	blt.n	800120a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	b2da      	uxtb	r2, r3
 80011f8:	490c      	ldr	r1, [pc, #48]	; (800122c <__NVIC_SetPriority+0x4c>)
 80011fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011fe:	0112      	lsls	r2, r2, #4
 8001200:	b2d2      	uxtb	r2, r2
 8001202:	440b      	add	r3, r1
 8001204:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001208:	e00a      	b.n	8001220 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800120a:	683b      	ldr	r3, [r7, #0]
 800120c:	b2da      	uxtb	r2, r3
 800120e:	4908      	ldr	r1, [pc, #32]	; (8001230 <__NVIC_SetPriority+0x50>)
 8001210:	79fb      	ldrb	r3, [r7, #7]
 8001212:	f003 030f 	and.w	r3, r3, #15
 8001216:	3b04      	subs	r3, #4
 8001218:	0112      	lsls	r2, r2, #4
 800121a:	b2d2      	uxtb	r2, r2
 800121c:	440b      	add	r3, r1
 800121e:	761a      	strb	r2, [r3, #24]
}
 8001220:	bf00      	nop
 8001222:	370c      	adds	r7, #12
 8001224:	46bd      	mov	sp, r7
 8001226:	bc80      	pop	{r7}
 8001228:	4770      	bx	lr
 800122a:	bf00      	nop
 800122c:	e000e100 	.word	0xe000e100
 8001230:	e000ed00 	.word	0xe000ed00

08001234 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001234:	b480      	push	{r7}
 8001236:	b089      	sub	sp, #36	; 0x24
 8001238:	af00      	add	r7, sp, #0
 800123a:	60f8      	str	r0, [r7, #12]
 800123c:	60b9      	str	r1, [r7, #8]
 800123e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	f003 0307 	and.w	r3, r3, #7
 8001246:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001248:	69fb      	ldr	r3, [r7, #28]
 800124a:	f1c3 0307 	rsb	r3, r3, #7
 800124e:	2b04      	cmp	r3, #4
 8001250:	bf28      	it	cs
 8001252:	2304      	movcs	r3, #4
 8001254:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001256:	69fb      	ldr	r3, [r7, #28]
 8001258:	3304      	adds	r3, #4
 800125a:	2b06      	cmp	r3, #6
 800125c:	d902      	bls.n	8001264 <NVIC_EncodePriority+0x30>
 800125e:	69fb      	ldr	r3, [r7, #28]
 8001260:	3b03      	subs	r3, #3
 8001262:	e000      	b.n	8001266 <NVIC_EncodePriority+0x32>
 8001264:	2300      	movs	r3, #0
 8001266:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001268:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800126c:	69bb      	ldr	r3, [r7, #24]
 800126e:	fa02 f303 	lsl.w	r3, r2, r3
 8001272:	43da      	mvns	r2, r3
 8001274:	68bb      	ldr	r3, [r7, #8]
 8001276:	401a      	ands	r2, r3
 8001278:	697b      	ldr	r3, [r7, #20]
 800127a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800127c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001280:	697b      	ldr	r3, [r7, #20]
 8001282:	fa01 f303 	lsl.w	r3, r1, r3
 8001286:	43d9      	mvns	r1, r3
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800128c:	4313      	orrs	r3, r2
         );
}
 800128e:	4618      	mov	r0, r3
 8001290:	3724      	adds	r7, #36	; 0x24
 8001292:	46bd      	mov	sp, r7
 8001294:	bc80      	pop	{r7}
 8001296:	4770      	bx	lr

08001298 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b082      	sub	sp, #8
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	3b01      	subs	r3, #1
 80012a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80012a8:	d301      	bcc.n	80012ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012aa:	2301      	movs	r3, #1
 80012ac:	e00f      	b.n	80012ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012ae:	4a0a      	ldr	r2, [pc, #40]	; (80012d8 <SysTick_Config+0x40>)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	3b01      	subs	r3, #1
 80012b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012b6:	210f      	movs	r1, #15
 80012b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80012bc:	f7ff ff90 	bl	80011e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012c0:	4b05      	ldr	r3, [pc, #20]	; (80012d8 <SysTick_Config+0x40>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012c6:	4b04      	ldr	r3, [pc, #16]	; (80012d8 <SysTick_Config+0x40>)
 80012c8:	2207      	movs	r2, #7
 80012ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012cc:	2300      	movs	r3, #0
}
 80012ce:	4618      	mov	r0, r3
 80012d0:	3708      	adds	r7, #8
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	e000e010 	.word	0xe000e010

080012dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b082      	sub	sp, #8
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012e4:	6878      	ldr	r0, [r7, #4]
 80012e6:	f7ff ff2d 	bl	8001144 <__NVIC_SetPriorityGrouping>
}
 80012ea:	bf00      	nop
 80012ec:	3708      	adds	r7, #8
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}

080012f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012f2:	b580      	push	{r7, lr}
 80012f4:	b086      	sub	sp, #24
 80012f6:	af00      	add	r7, sp, #0
 80012f8:	4603      	mov	r3, r0
 80012fa:	60b9      	str	r1, [r7, #8]
 80012fc:	607a      	str	r2, [r7, #4]
 80012fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001300:	2300      	movs	r3, #0
 8001302:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001304:	f7ff ff42 	bl	800118c <__NVIC_GetPriorityGrouping>
 8001308:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800130a:	687a      	ldr	r2, [r7, #4]
 800130c:	68b9      	ldr	r1, [r7, #8]
 800130e:	6978      	ldr	r0, [r7, #20]
 8001310:	f7ff ff90 	bl	8001234 <NVIC_EncodePriority>
 8001314:	4602      	mov	r2, r0
 8001316:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800131a:	4611      	mov	r1, r2
 800131c:	4618      	mov	r0, r3
 800131e:	f7ff ff5f 	bl	80011e0 <__NVIC_SetPriority>
}
 8001322:	bf00      	nop
 8001324:	3718      	adds	r7, #24
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}

0800132a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800132a:	b580      	push	{r7, lr}
 800132c:	b082      	sub	sp, #8
 800132e:	af00      	add	r7, sp, #0
 8001330:	4603      	mov	r3, r0
 8001332:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001334:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001338:	4618      	mov	r0, r3
 800133a:	f7ff ff35 	bl	80011a8 <__NVIC_EnableIRQ>
}
 800133e:	bf00      	nop
 8001340:	3708      	adds	r7, #8
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}

08001346 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001346:	b580      	push	{r7, lr}
 8001348:	b082      	sub	sp, #8
 800134a:	af00      	add	r7, sp, #0
 800134c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800134e:	6878      	ldr	r0, [r7, #4]
 8001350:	f7ff ffa2 	bl	8001298 <SysTick_Config>
 8001354:	4603      	mov	r3, r0
}
 8001356:	4618      	mov	r0, r3
 8001358:	3708      	adds	r7, #8
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}
	...

08001360 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001360:	b480      	push	{r7}
 8001362:	b08b      	sub	sp, #44	; 0x2c
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
 8001368:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800136a:	2300      	movs	r3, #0
 800136c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800136e:	2300      	movs	r3, #0
 8001370:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001372:	e169      	b.n	8001648 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001374:	2201      	movs	r2, #1
 8001376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001378:	fa02 f303 	lsl.w	r3, r2, r3
 800137c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800137e:	683b      	ldr	r3, [r7, #0]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	69fa      	ldr	r2, [r7, #28]
 8001384:	4013      	ands	r3, r2
 8001386:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001388:	69ba      	ldr	r2, [r7, #24]
 800138a:	69fb      	ldr	r3, [r7, #28]
 800138c:	429a      	cmp	r2, r3
 800138e:	f040 8158 	bne.w	8001642 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	685b      	ldr	r3, [r3, #4]
 8001396:	4a9a      	ldr	r2, [pc, #616]	; (8001600 <HAL_GPIO_Init+0x2a0>)
 8001398:	4293      	cmp	r3, r2
 800139a:	d05e      	beq.n	800145a <HAL_GPIO_Init+0xfa>
 800139c:	4a98      	ldr	r2, [pc, #608]	; (8001600 <HAL_GPIO_Init+0x2a0>)
 800139e:	4293      	cmp	r3, r2
 80013a0:	d875      	bhi.n	800148e <HAL_GPIO_Init+0x12e>
 80013a2:	4a98      	ldr	r2, [pc, #608]	; (8001604 <HAL_GPIO_Init+0x2a4>)
 80013a4:	4293      	cmp	r3, r2
 80013a6:	d058      	beq.n	800145a <HAL_GPIO_Init+0xfa>
 80013a8:	4a96      	ldr	r2, [pc, #600]	; (8001604 <HAL_GPIO_Init+0x2a4>)
 80013aa:	4293      	cmp	r3, r2
 80013ac:	d86f      	bhi.n	800148e <HAL_GPIO_Init+0x12e>
 80013ae:	4a96      	ldr	r2, [pc, #600]	; (8001608 <HAL_GPIO_Init+0x2a8>)
 80013b0:	4293      	cmp	r3, r2
 80013b2:	d052      	beq.n	800145a <HAL_GPIO_Init+0xfa>
 80013b4:	4a94      	ldr	r2, [pc, #592]	; (8001608 <HAL_GPIO_Init+0x2a8>)
 80013b6:	4293      	cmp	r3, r2
 80013b8:	d869      	bhi.n	800148e <HAL_GPIO_Init+0x12e>
 80013ba:	4a94      	ldr	r2, [pc, #592]	; (800160c <HAL_GPIO_Init+0x2ac>)
 80013bc:	4293      	cmp	r3, r2
 80013be:	d04c      	beq.n	800145a <HAL_GPIO_Init+0xfa>
 80013c0:	4a92      	ldr	r2, [pc, #584]	; (800160c <HAL_GPIO_Init+0x2ac>)
 80013c2:	4293      	cmp	r3, r2
 80013c4:	d863      	bhi.n	800148e <HAL_GPIO_Init+0x12e>
 80013c6:	4a92      	ldr	r2, [pc, #584]	; (8001610 <HAL_GPIO_Init+0x2b0>)
 80013c8:	4293      	cmp	r3, r2
 80013ca:	d046      	beq.n	800145a <HAL_GPIO_Init+0xfa>
 80013cc:	4a90      	ldr	r2, [pc, #576]	; (8001610 <HAL_GPIO_Init+0x2b0>)
 80013ce:	4293      	cmp	r3, r2
 80013d0:	d85d      	bhi.n	800148e <HAL_GPIO_Init+0x12e>
 80013d2:	2b12      	cmp	r3, #18
 80013d4:	d82a      	bhi.n	800142c <HAL_GPIO_Init+0xcc>
 80013d6:	2b12      	cmp	r3, #18
 80013d8:	d859      	bhi.n	800148e <HAL_GPIO_Init+0x12e>
 80013da:	a201      	add	r2, pc, #4	; (adr r2, 80013e0 <HAL_GPIO_Init+0x80>)
 80013dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013e0:	0800145b 	.word	0x0800145b
 80013e4:	08001435 	.word	0x08001435
 80013e8:	08001447 	.word	0x08001447
 80013ec:	08001489 	.word	0x08001489
 80013f0:	0800148f 	.word	0x0800148f
 80013f4:	0800148f 	.word	0x0800148f
 80013f8:	0800148f 	.word	0x0800148f
 80013fc:	0800148f 	.word	0x0800148f
 8001400:	0800148f 	.word	0x0800148f
 8001404:	0800148f 	.word	0x0800148f
 8001408:	0800148f 	.word	0x0800148f
 800140c:	0800148f 	.word	0x0800148f
 8001410:	0800148f 	.word	0x0800148f
 8001414:	0800148f 	.word	0x0800148f
 8001418:	0800148f 	.word	0x0800148f
 800141c:	0800148f 	.word	0x0800148f
 8001420:	0800148f 	.word	0x0800148f
 8001424:	0800143d 	.word	0x0800143d
 8001428:	08001451 	.word	0x08001451
 800142c:	4a79      	ldr	r2, [pc, #484]	; (8001614 <HAL_GPIO_Init+0x2b4>)
 800142e:	4293      	cmp	r3, r2
 8001430:	d013      	beq.n	800145a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001432:	e02c      	b.n	800148e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	68db      	ldr	r3, [r3, #12]
 8001438:	623b      	str	r3, [r7, #32]
          break;
 800143a:	e029      	b.n	8001490 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	68db      	ldr	r3, [r3, #12]
 8001440:	3304      	adds	r3, #4
 8001442:	623b      	str	r3, [r7, #32]
          break;
 8001444:	e024      	b.n	8001490 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	68db      	ldr	r3, [r3, #12]
 800144a:	3308      	adds	r3, #8
 800144c:	623b      	str	r3, [r7, #32]
          break;
 800144e:	e01f      	b.n	8001490 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	68db      	ldr	r3, [r3, #12]
 8001454:	330c      	adds	r3, #12
 8001456:	623b      	str	r3, [r7, #32]
          break;
 8001458:	e01a      	b.n	8001490 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800145a:	683b      	ldr	r3, [r7, #0]
 800145c:	689b      	ldr	r3, [r3, #8]
 800145e:	2b00      	cmp	r3, #0
 8001460:	d102      	bne.n	8001468 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001462:	2304      	movs	r3, #4
 8001464:	623b      	str	r3, [r7, #32]
          break;
 8001466:	e013      	b.n	8001490 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	689b      	ldr	r3, [r3, #8]
 800146c:	2b01      	cmp	r3, #1
 800146e:	d105      	bne.n	800147c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001470:	2308      	movs	r3, #8
 8001472:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	69fa      	ldr	r2, [r7, #28]
 8001478:	611a      	str	r2, [r3, #16]
          break;
 800147a:	e009      	b.n	8001490 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800147c:	2308      	movs	r3, #8
 800147e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	69fa      	ldr	r2, [r7, #28]
 8001484:	615a      	str	r2, [r3, #20]
          break;
 8001486:	e003      	b.n	8001490 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001488:	2300      	movs	r3, #0
 800148a:	623b      	str	r3, [r7, #32]
          break;
 800148c:	e000      	b.n	8001490 <HAL_GPIO_Init+0x130>
          break;
 800148e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001490:	69bb      	ldr	r3, [r7, #24]
 8001492:	2bff      	cmp	r3, #255	; 0xff
 8001494:	d801      	bhi.n	800149a <HAL_GPIO_Init+0x13a>
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	e001      	b.n	800149e <HAL_GPIO_Init+0x13e>
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	3304      	adds	r3, #4
 800149e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80014a0:	69bb      	ldr	r3, [r7, #24]
 80014a2:	2bff      	cmp	r3, #255	; 0xff
 80014a4:	d802      	bhi.n	80014ac <HAL_GPIO_Init+0x14c>
 80014a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014a8:	009b      	lsls	r3, r3, #2
 80014aa:	e002      	b.n	80014b2 <HAL_GPIO_Init+0x152>
 80014ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014ae:	3b08      	subs	r3, #8
 80014b0:	009b      	lsls	r3, r3, #2
 80014b2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80014b4:	697b      	ldr	r3, [r7, #20]
 80014b6:	681a      	ldr	r2, [r3, #0]
 80014b8:	210f      	movs	r1, #15
 80014ba:	693b      	ldr	r3, [r7, #16]
 80014bc:	fa01 f303 	lsl.w	r3, r1, r3
 80014c0:	43db      	mvns	r3, r3
 80014c2:	401a      	ands	r2, r3
 80014c4:	6a39      	ldr	r1, [r7, #32]
 80014c6:	693b      	ldr	r3, [r7, #16]
 80014c8:	fa01 f303 	lsl.w	r3, r1, r3
 80014cc:	431a      	orrs	r2, r3
 80014ce:	697b      	ldr	r3, [r7, #20]
 80014d0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	685b      	ldr	r3, [r3, #4]
 80014d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014da:	2b00      	cmp	r3, #0
 80014dc:	f000 80b1 	beq.w	8001642 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80014e0:	4b4d      	ldr	r3, [pc, #308]	; (8001618 <HAL_GPIO_Init+0x2b8>)
 80014e2:	699b      	ldr	r3, [r3, #24]
 80014e4:	4a4c      	ldr	r2, [pc, #304]	; (8001618 <HAL_GPIO_Init+0x2b8>)
 80014e6:	f043 0301 	orr.w	r3, r3, #1
 80014ea:	6193      	str	r3, [r2, #24]
 80014ec:	4b4a      	ldr	r3, [pc, #296]	; (8001618 <HAL_GPIO_Init+0x2b8>)
 80014ee:	699b      	ldr	r3, [r3, #24]
 80014f0:	f003 0301 	and.w	r3, r3, #1
 80014f4:	60bb      	str	r3, [r7, #8]
 80014f6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80014f8:	4a48      	ldr	r2, [pc, #288]	; (800161c <HAL_GPIO_Init+0x2bc>)
 80014fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014fc:	089b      	lsrs	r3, r3, #2
 80014fe:	3302      	adds	r3, #2
 8001500:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001504:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001508:	f003 0303 	and.w	r3, r3, #3
 800150c:	009b      	lsls	r3, r3, #2
 800150e:	220f      	movs	r2, #15
 8001510:	fa02 f303 	lsl.w	r3, r2, r3
 8001514:	43db      	mvns	r3, r3
 8001516:	68fa      	ldr	r2, [r7, #12]
 8001518:	4013      	ands	r3, r2
 800151a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	4a40      	ldr	r2, [pc, #256]	; (8001620 <HAL_GPIO_Init+0x2c0>)
 8001520:	4293      	cmp	r3, r2
 8001522:	d013      	beq.n	800154c <HAL_GPIO_Init+0x1ec>
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	4a3f      	ldr	r2, [pc, #252]	; (8001624 <HAL_GPIO_Init+0x2c4>)
 8001528:	4293      	cmp	r3, r2
 800152a:	d00d      	beq.n	8001548 <HAL_GPIO_Init+0x1e8>
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	4a3e      	ldr	r2, [pc, #248]	; (8001628 <HAL_GPIO_Init+0x2c8>)
 8001530:	4293      	cmp	r3, r2
 8001532:	d007      	beq.n	8001544 <HAL_GPIO_Init+0x1e4>
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	4a3d      	ldr	r2, [pc, #244]	; (800162c <HAL_GPIO_Init+0x2cc>)
 8001538:	4293      	cmp	r3, r2
 800153a:	d101      	bne.n	8001540 <HAL_GPIO_Init+0x1e0>
 800153c:	2303      	movs	r3, #3
 800153e:	e006      	b.n	800154e <HAL_GPIO_Init+0x1ee>
 8001540:	2304      	movs	r3, #4
 8001542:	e004      	b.n	800154e <HAL_GPIO_Init+0x1ee>
 8001544:	2302      	movs	r3, #2
 8001546:	e002      	b.n	800154e <HAL_GPIO_Init+0x1ee>
 8001548:	2301      	movs	r3, #1
 800154a:	e000      	b.n	800154e <HAL_GPIO_Init+0x1ee>
 800154c:	2300      	movs	r3, #0
 800154e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001550:	f002 0203 	and.w	r2, r2, #3
 8001554:	0092      	lsls	r2, r2, #2
 8001556:	4093      	lsls	r3, r2
 8001558:	68fa      	ldr	r2, [r7, #12]
 800155a:	4313      	orrs	r3, r2
 800155c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800155e:	492f      	ldr	r1, [pc, #188]	; (800161c <HAL_GPIO_Init+0x2bc>)
 8001560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001562:	089b      	lsrs	r3, r3, #2
 8001564:	3302      	adds	r3, #2
 8001566:	68fa      	ldr	r2, [r7, #12]
 8001568:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	685b      	ldr	r3, [r3, #4]
 8001570:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001574:	2b00      	cmp	r3, #0
 8001576:	d006      	beq.n	8001586 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001578:	4b2d      	ldr	r3, [pc, #180]	; (8001630 <HAL_GPIO_Init+0x2d0>)
 800157a:	681a      	ldr	r2, [r3, #0]
 800157c:	492c      	ldr	r1, [pc, #176]	; (8001630 <HAL_GPIO_Init+0x2d0>)
 800157e:	69bb      	ldr	r3, [r7, #24]
 8001580:	4313      	orrs	r3, r2
 8001582:	600b      	str	r3, [r1, #0]
 8001584:	e006      	b.n	8001594 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001586:	4b2a      	ldr	r3, [pc, #168]	; (8001630 <HAL_GPIO_Init+0x2d0>)
 8001588:	681a      	ldr	r2, [r3, #0]
 800158a:	69bb      	ldr	r3, [r7, #24]
 800158c:	43db      	mvns	r3, r3
 800158e:	4928      	ldr	r1, [pc, #160]	; (8001630 <HAL_GPIO_Init+0x2d0>)
 8001590:	4013      	ands	r3, r2
 8001592:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	685b      	ldr	r3, [r3, #4]
 8001598:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800159c:	2b00      	cmp	r3, #0
 800159e:	d006      	beq.n	80015ae <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80015a0:	4b23      	ldr	r3, [pc, #140]	; (8001630 <HAL_GPIO_Init+0x2d0>)
 80015a2:	685a      	ldr	r2, [r3, #4]
 80015a4:	4922      	ldr	r1, [pc, #136]	; (8001630 <HAL_GPIO_Init+0x2d0>)
 80015a6:	69bb      	ldr	r3, [r7, #24]
 80015a8:	4313      	orrs	r3, r2
 80015aa:	604b      	str	r3, [r1, #4]
 80015ac:	e006      	b.n	80015bc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80015ae:	4b20      	ldr	r3, [pc, #128]	; (8001630 <HAL_GPIO_Init+0x2d0>)
 80015b0:	685a      	ldr	r2, [r3, #4]
 80015b2:	69bb      	ldr	r3, [r7, #24]
 80015b4:	43db      	mvns	r3, r3
 80015b6:	491e      	ldr	r1, [pc, #120]	; (8001630 <HAL_GPIO_Init+0x2d0>)
 80015b8:	4013      	ands	r3, r2
 80015ba:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	685b      	ldr	r3, [r3, #4]
 80015c0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d006      	beq.n	80015d6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80015c8:	4b19      	ldr	r3, [pc, #100]	; (8001630 <HAL_GPIO_Init+0x2d0>)
 80015ca:	689a      	ldr	r2, [r3, #8]
 80015cc:	4918      	ldr	r1, [pc, #96]	; (8001630 <HAL_GPIO_Init+0x2d0>)
 80015ce:	69bb      	ldr	r3, [r7, #24]
 80015d0:	4313      	orrs	r3, r2
 80015d2:	608b      	str	r3, [r1, #8]
 80015d4:	e006      	b.n	80015e4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80015d6:	4b16      	ldr	r3, [pc, #88]	; (8001630 <HAL_GPIO_Init+0x2d0>)
 80015d8:	689a      	ldr	r2, [r3, #8]
 80015da:	69bb      	ldr	r3, [r7, #24]
 80015dc:	43db      	mvns	r3, r3
 80015de:	4914      	ldr	r1, [pc, #80]	; (8001630 <HAL_GPIO_Init+0x2d0>)
 80015e0:	4013      	ands	r3, r2
 80015e2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	685b      	ldr	r3, [r3, #4]
 80015e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d021      	beq.n	8001634 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80015f0:	4b0f      	ldr	r3, [pc, #60]	; (8001630 <HAL_GPIO_Init+0x2d0>)
 80015f2:	68da      	ldr	r2, [r3, #12]
 80015f4:	490e      	ldr	r1, [pc, #56]	; (8001630 <HAL_GPIO_Init+0x2d0>)
 80015f6:	69bb      	ldr	r3, [r7, #24]
 80015f8:	4313      	orrs	r3, r2
 80015fa:	60cb      	str	r3, [r1, #12]
 80015fc:	e021      	b.n	8001642 <HAL_GPIO_Init+0x2e2>
 80015fe:	bf00      	nop
 8001600:	10320000 	.word	0x10320000
 8001604:	10310000 	.word	0x10310000
 8001608:	10220000 	.word	0x10220000
 800160c:	10210000 	.word	0x10210000
 8001610:	10120000 	.word	0x10120000
 8001614:	10110000 	.word	0x10110000
 8001618:	40021000 	.word	0x40021000
 800161c:	40010000 	.word	0x40010000
 8001620:	40010800 	.word	0x40010800
 8001624:	40010c00 	.word	0x40010c00
 8001628:	40011000 	.word	0x40011000
 800162c:	40011400 	.word	0x40011400
 8001630:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001634:	4b0b      	ldr	r3, [pc, #44]	; (8001664 <HAL_GPIO_Init+0x304>)
 8001636:	68da      	ldr	r2, [r3, #12]
 8001638:	69bb      	ldr	r3, [r7, #24]
 800163a:	43db      	mvns	r3, r3
 800163c:	4909      	ldr	r1, [pc, #36]	; (8001664 <HAL_GPIO_Init+0x304>)
 800163e:	4013      	ands	r3, r2
 8001640:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001644:	3301      	adds	r3, #1
 8001646:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001648:	683b      	ldr	r3, [r7, #0]
 800164a:	681a      	ldr	r2, [r3, #0]
 800164c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800164e:	fa22 f303 	lsr.w	r3, r2, r3
 8001652:	2b00      	cmp	r3, #0
 8001654:	f47f ae8e 	bne.w	8001374 <HAL_GPIO_Init+0x14>
  }
}
 8001658:	bf00      	nop
 800165a:	bf00      	nop
 800165c:	372c      	adds	r7, #44	; 0x2c
 800165e:	46bd      	mov	sp, r7
 8001660:	bc80      	pop	{r7}
 8001662:	4770      	bx	lr
 8001664:	40010400 	.word	0x40010400

08001668 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001668:	b480      	push	{r7}
 800166a:	b085      	sub	sp, #20
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
 8001670:	460b      	mov	r3, r1
 8001672:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	689a      	ldr	r2, [r3, #8]
 8001678:	887b      	ldrh	r3, [r7, #2]
 800167a:	4013      	ands	r3, r2
 800167c:	2b00      	cmp	r3, #0
 800167e:	d002      	beq.n	8001686 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001680:	2301      	movs	r3, #1
 8001682:	73fb      	strb	r3, [r7, #15]
 8001684:	e001      	b.n	800168a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001686:	2300      	movs	r3, #0
 8001688:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800168a:	7bfb      	ldrb	r3, [r7, #15]
}
 800168c:	4618      	mov	r0, r3
 800168e:	3714      	adds	r7, #20
 8001690:	46bd      	mov	sp, r7
 8001692:	bc80      	pop	{r7}
 8001694:	4770      	bx	lr

08001696 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001696:	b480      	push	{r7}
 8001698:	b083      	sub	sp, #12
 800169a:	af00      	add	r7, sp, #0
 800169c:	6078      	str	r0, [r7, #4]
 800169e:	460b      	mov	r3, r1
 80016a0:	807b      	strh	r3, [r7, #2]
 80016a2:	4613      	mov	r3, r2
 80016a4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80016a6:	787b      	ldrb	r3, [r7, #1]
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d003      	beq.n	80016b4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80016ac:	887a      	ldrh	r2, [r7, #2]
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80016b2:	e003      	b.n	80016bc <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80016b4:	887b      	ldrh	r3, [r7, #2]
 80016b6:	041a      	lsls	r2, r3, #16
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	611a      	str	r2, [r3, #16]
}
 80016bc:	bf00      	nop
 80016be:	370c      	adds	r7, #12
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bc80      	pop	{r7}
 80016c4:	4770      	bx	lr

080016c6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80016c6:	b480      	push	{r7}
 80016c8:	b085      	sub	sp, #20
 80016ca:	af00      	add	r7, sp, #0
 80016cc:	6078      	str	r0, [r7, #4]
 80016ce:	460b      	mov	r3, r1
 80016d0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	68db      	ldr	r3, [r3, #12]
 80016d6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80016d8:	887a      	ldrh	r2, [r7, #2]
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	4013      	ands	r3, r2
 80016de:	041a      	lsls	r2, r3, #16
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	43d9      	mvns	r1, r3
 80016e4:	887b      	ldrh	r3, [r7, #2]
 80016e6:	400b      	ands	r3, r1
 80016e8:	431a      	orrs	r2, r3
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	611a      	str	r2, [r3, #16]
}
 80016ee:	bf00      	nop
 80016f0:	3714      	adds	r7, #20
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bc80      	pop	{r7}
 80016f6:	4770      	bx	lr

080016f8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80016f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016fa:	b08b      	sub	sp, #44	; 0x2c
 80016fc:	af06      	add	r7, sp, #24
 80016fe:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	2b00      	cmp	r3, #0
 8001704:	d101      	bne.n	800170a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001706:	2301      	movs	r3, #1
 8001708:	e0fd      	b.n	8001906 <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8001710:	b2db      	uxtb	r3, r3
 8001712:	2b00      	cmp	r3, #0
 8001714:	d106      	bne.n	8001724 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	2200      	movs	r2, #0
 800171a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800171e:	6878      	ldr	r0, [r7, #4]
 8001720:	f005 fce0 	bl	80070e4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	2203      	movs	r2, #3
 8001728:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	4618      	mov	r0, r3
 8001732:	f002 f901 	bl	8003938 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	603b      	str	r3, [r7, #0]
 800173c:	687e      	ldr	r6, [r7, #4]
 800173e:	466d      	mov	r5, sp
 8001740:	f106 0410 	add.w	r4, r6, #16
 8001744:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001746:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001748:	6823      	ldr	r3, [r4, #0]
 800174a:	602b      	str	r3, [r5, #0]
 800174c:	1d33      	adds	r3, r6, #4
 800174e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001750:	6838      	ldr	r0, [r7, #0]
 8001752:	f002 f8cb 	bl	80038ec <USB_CoreInit>
 8001756:	4603      	mov	r3, r0
 8001758:	2b00      	cmp	r3, #0
 800175a:	d005      	beq.n	8001768 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	2202      	movs	r2, #2
 8001760:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001764:	2301      	movs	r3, #1
 8001766:	e0ce      	b.n	8001906 <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	2100      	movs	r1, #0
 800176e:	4618      	mov	r0, r3
 8001770:	f002 f8fc 	bl	800396c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001774:	2300      	movs	r3, #0
 8001776:	73fb      	strb	r3, [r7, #15]
 8001778:	e04c      	b.n	8001814 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800177a:	7bfb      	ldrb	r3, [r7, #15]
 800177c:	6879      	ldr	r1, [r7, #4]
 800177e:	1c5a      	adds	r2, r3, #1
 8001780:	4613      	mov	r3, r2
 8001782:	009b      	lsls	r3, r3, #2
 8001784:	4413      	add	r3, r2
 8001786:	00db      	lsls	r3, r3, #3
 8001788:	440b      	add	r3, r1
 800178a:	3301      	adds	r3, #1
 800178c:	2201      	movs	r2, #1
 800178e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001790:	7bfb      	ldrb	r3, [r7, #15]
 8001792:	6879      	ldr	r1, [r7, #4]
 8001794:	1c5a      	adds	r2, r3, #1
 8001796:	4613      	mov	r3, r2
 8001798:	009b      	lsls	r3, r3, #2
 800179a:	4413      	add	r3, r2
 800179c:	00db      	lsls	r3, r3, #3
 800179e:	440b      	add	r3, r1
 80017a0:	7bfa      	ldrb	r2, [r7, #15]
 80017a2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80017a4:	7bfa      	ldrb	r2, [r7, #15]
 80017a6:	7bfb      	ldrb	r3, [r7, #15]
 80017a8:	b298      	uxth	r0, r3
 80017aa:	6879      	ldr	r1, [r7, #4]
 80017ac:	4613      	mov	r3, r2
 80017ae:	009b      	lsls	r3, r3, #2
 80017b0:	4413      	add	r3, r2
 80017b2:	00db      	lsls	r3, r3, #3
 80017b4:	440b      	add	r3, r1
 80017b6:	3336      	adds	r3, #54	; 0x36
 80017b8:	4602      	mov	r2, r0
 80017ba:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80017bc:	7bfb      	ldrb	r3, [r7, #15]
 80017be:	6879      	ldr	r1, [r7, #4]
 80017c0:	1c5a      	adds	r2, r3, #1
 80017c2:	4613      	mov	r3, r2
 80017c4:	009b      	lsls	r3, r3, #2
 80017c6:	4413      	add	r3, r2
 80017c8:	00db      	lsls	r3, r3, #3
 80017ca:	440b      	add	r3, r1
 80017cc:	3303      	adds	r3, #3
 80017ce:	2200      	movs	r2, #0
 80017d0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80017d2:	7bfa      	ldrb	r2, [r7, #15]
 80017d4:	6879      	ldr	r1, [r7, #4]
 80017d6:	4613      	mov	r3, r2
 80017d8:	009b      	lsls	r3, r3, #2
 80017da:	4413      	add	r3, r2
 80017dc:	00db      	lsls	r3, r3, #3
 80017de:	440b      	add	r3, r1
 80017e0:	3338      	adds	r3, #56	; 0x38
 80017e2:	2200      	movs	r2, #0
 80017e4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80017e6:	7bfa      	ldrb	r2, [r7, #15]
 80017e8:	6879      	ldr	r1, [r7, #4]
 80017ea:	4613      	mov	r3, r2
 80017ec:	009b      	lsls	r3, r3, #2
 80017ee:	4413      	add	r3, r2
 80017f0:	00db      	lsls	r3, r3, #3
 80017f2:	440b      	add	r3, r1
 80017f4:	333c      	adds	r3, #60	; 0x3c
 80017f6:	2200      	movs	r2, #0
 80017f8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80017fa:	7bfa      	ldrb	r2, [r7, #15]
 80017fc:	6879      	ldr	r1, [r7, #4]
 80017fe:	4613      	mov	r3, r2
 8001800:	009b      	lsls	r3, r3, #2
 8001802:	4413      	add	r3, r2
 8001804:	00db      	lsls	r3, r3, #3
 8001806:	440b      	add	r3, r1
 8001808:	3340      	adds	r3, #64	; 0x40
 800180a:	2200      	movs	r2, #0
 800180c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800180e:	7bfb      	ldrb	r3, [r7, #15]
 8001810:	3301      	adds	r3, #1
 8001812:	73fb      	strb	r3, [r7, #15]
 8001814:	7bfa      	ldrb	r2, [r7, #15]
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	685b      	ldr	r3, [r3, #4]
 800181a:	429a      	cmp	r2, r3
 800181c:	d3ad      	bcc.n	800177a <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800181e:	2300      	movs	r3, #0
 8001820:	73fb      	strb	r3, [r7, #15]
 8001822:	e044      	b.n	80018ae <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001824:	7bfa      	ldrb	r2, [r7, #15]
 8001826:	6879      	ldr	r1, [r7, #4]
 8001828:	4613      	mov	r3, r2
 800182a:	009b      	lsls	r3, r3, #2
 800182c:	4413      	add	r3, r2
 800182e:	00db      	lsls	r3, r3, #3
 8001830:	440b      	add	r3, r1
 8001832:	f203 1369 	addw	r3, r3, #361	; 0x169
 8001836:	2200      	movs	r2, #0
 8001838:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800183a:	7bfa      	ldrb	r2, [r7, #15]
 800183c:	6879      	ldr	r1, [r7, #4]
 800183e:	4613      	mov	r3, r2
 8001840:	009b      	lsls	r3, r3, #2
 8001842:	4413      	add	r3, r2
 8001844:	00db      	lsls	r3, r3, #3
 8001846:	440b      	add	r3, r1
 8001848:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800184c:	7bfa      	ldrb	r2, [r7, #15]
 800184e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001850:	7bfa      	ldrb	r2, [r7, #15]
 8001852:	6879      	ldr	r1, [r7, #4]
 8001854:	4613      	mov	r3, r2
 8001856:	009b      	lsls	r3, r3, #2
 8001858:	4413      	add	r3, r2
 800185a:	00db      	lsls	r3, r3, #3
 800185c:	440b      	add	r3, r1
 800185e:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001862:	2200      	movs	r2, #0
 8001864:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001866:	7bfa      	ldrb	r2, [r7, #15]
 8001868:	6879      	ldr	r1, [r7, #4]
 800186a:	4613      	mov	r3, r2
 800186c:	009b      	lsls	r3, r3, #2
 800186e:	4413      	add	r3, r2
 8001870:	00db      	lsls	r3, r3, #3
 8001872:	440b      	add	r3, r1
 8001874:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001878:	2200      	movs	r2, #0
 800187a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800187c:	7bfa      	ldrb	r2, [r7, #15]
 800187e:	6879      	ldr	r1, [r7, #4]
 8001880:	4613      	mov	r3, r2
 8001882:	009b      	lsls	r3, r3, #2
 8001884:	4413      	add	r3, r2
 8001886:	00db      	lsls	r3, r3, #3
 8001888:	440b      	add	r3, r1
 800188a:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800188e:	2200      	movs	r2, #0
 8001890:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001892:	7bfa      	ldrb	r2, [r7, #15]
 8001894:	6879      	ldr	r1, [r7, #4]
 8001896:	4613      	mov	r3, r2
 8001898:	009b      	lsls	r3, r3, #2
 800189a:	4413      	add	r3, r2
 800189c:	00db      	lsls	r3, r3, #3
 800189e:	440b      	add	r3, r1
 80018a0:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80018a4:	2200      	movs	r2, #0
 80018a6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80018a8:	7bfb      	ldrb	r3, [r7, #15]
 80018aa:	3301      	adds	r3, #1
 80018ac:	73fb      	strb	r3, [r7, #15]
 80018ae:	7bfa      	ldrb	r2, [r7, #15]
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	685b      	ldr	r3, [r3, #4]
 80018b4:	429a      	cmp	r2, r3
 80018b6:	d3b5      	bcc.n	8001824 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	603b      	str	r3, [r7, #0]
 80018be:	687e      	ldr	r6, [r7, #4]
 80018c0:	466d      	mov	r5, sp
 80018c2:	f106 0410 	add.w	r4, r6, #16
 80018c6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80018c8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80018ca:	6823      	ldr	r3, [r4, #0]
 80018cc:	602b      	str	r3, [r5, #0]
 80018ce:	1d33      	adds	r3, r6, #4
 80018d0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80018d2:	6838      	ldr	r0, [r7, #0]
 80018d4:	f002 f856 	bl	8003984 <USB_DevInit>
 80018d8:	4603      	mov	r3, r0
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d005      	beq.n	80018ea <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	2202      	movs	r2, #2
 80018e2:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 80018e6:	2301      	movs	r3, #1
 80018e8:	e00d      	b.n	8001906 <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	2200      	movs	r2, #0
 80018ee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	2201      	movs	r2, #1
 80018f6:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	4618      	mov	r0, r3
 8001900:	f003 fff0 	bl	80058e4 <USB_DevDisconnect>

  return HAL_OK;
 8001904:	2300      	movs	r3, #0
}
 8001906:	4618      	mov	r0, r3
 8001908:	3714      	adds	r7, #20
 800190a:	46bd      	mov	sp, r7
 800190c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800190e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800190e:	b580      	push	{r7, lr}
 8001910:	b082      	sub	sp, #8
 8001912:	af00      	add	r7, sp, #0
 8001914:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800191c:	2b01      	cmp	r3, #1
 800191e:	d101      	bne.n	8001924 <HAL_PCD_Start+0x16>
 8001920:	2302      	movs	r3, #2
 8001922:	e016      	b.n	8001952 <HAL_PCD_Start+0x44>
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	2201      	movs	r2, #1
 8001928:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	4618      	mov	r0, r3
 8001932:	f001 ffeb 	bl	800390c <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8001936:	2101      	movs	r1, #1
 8001938:	6878      	ldr	r0, [r7, #4]
 800193a:	f005 fe22 	bl	8007582 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	4618      	mov	r0, r3
 8001944:	f003 ffc4 	bl	80058d0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	2200      	movs	r2, #0
 800194c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001950:	2300      	movs	r3, #0
}
 8001952:	4618      	mov	r0, r3
 8001954:	3708      	adds	r7, #8
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}

0800195a <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800195a:	b580      	push	{r7, lr}
 800195c:	b088      	sub	sp, #32
 800195e:	af00      	add	r7, sp, #0
 8001960:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	4618      	mov	r0, r3
 8001968:	f003 ffc6 	bl	80058f8 <USB_ReadInterrupts>
 800196c:	4603      	mov	r3, r0
 800196e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001972:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001976:	d102      	bne.n	800197e <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001978:	6878      	ldr	r0, [r7, #4]
 800197a:	f000 fb4a 	bl	8002012 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	4618      	mov	r0, r3
 8001984:	f003 ffb8 	bl	80058f8 <USB_ReadInterrupts>
 8001988:	4603      	mov	r3, r0
 800198a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800198e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001992:	d112      	bne.n	80019ba <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800199c:	b29a      	uxth	r2, r3
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80019a6:	b292      	uxth	r2, r2
 80019a8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80019ac:	6878      	ldr	r0, [r7, #4]
 80019ae:	f005 fc14 	bl	80071da <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80019b2:	2100      	movs	r1, #0
 80019b4:	6878      	ldr	r0, [r7, #4]
 80019b6:	f000 f925 	bl	8001c04 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	4618      	mov	r0, r3
 80019c0:	f003 ff9a 	bl	80058f8 <USB_ReadInterrupts>
 80019c4:	4603      	mov	r3, r0
 80019c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019ca:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80019ce:	d10b      	bne.n	80019e8 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80019d8:	b29a      	uxth	r2, r3
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80019e2:	b292      	uxth	r2, r2
 80019e4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	4618      	mov	r0, r3
 80019ee:	f003 ff83 	bl	80058f8 <USB_ReadInterrupts>
 80019f2:	4603      	mov	r3, r0
 80019f4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80019f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80019fc:	d10b      	bne.n	8001a16 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001a06:	b29a      	uxth	r2, r3
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001a10:	b292      	uxth	r2, r2
 8001a12:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	f003 ff6c 	bl	80058f8 <USB_ReadInterrupts>
 8001a20:	4603      	mov	r3, r0
 8001a22:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001a2a:	d126      	bne.n	8001a7a <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001a34:	b29a      	uxth	r2, r3
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f022 0204 	bic.w	r2, r2, #4
 8001a3e:	b292      	uxth	r2, r2
 8001a40:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001a4c:	b29a      	uxth	r2, r3
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f022 0208 	bic.w	r2, r2, #8
 8001a56:	b292      	uxth	r2, r2
 8001a58:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001a5c:	6878      	ldr	r0, [r7, #4]
 8001a5e:	f005 fbf5 	bl	800724c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001a6a:	b29a      	uxth	r2, r3
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001a74:	b292      	uxth	r2, r2
 8001a76:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	4618      	mov	r0, r3
 8001a80:	f003 ff3a 	bl	80058f8 <USB_ReadInterrupts>
 8001a84:	4603      	mov	r3, r0
 8001a86:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001a8a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001a8e:	f040 8084 	bne.w	8001b9a <HAL_PCD_IRQHandler+0x240>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 8001a92:	2300      	movs	r3, #0
 8001a94:	77fb      	strb	r3, [r7, #31]
 8001a96:	e011      	b.n	8001abc <HAL_PCD_IRQHandler+0x162>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	461a      	mov	r2, r3
 8001a9e:	7ffb      	ldrb	r3, [r7, #31]
 8001aa0:	009b      	lsls	r3, r3, #2
 8001aa2:	441a      	add	r2, r3
 8001aa4:	7ffb      	ldrb	r3, [r7, #31]
 8001aa6:	8812      	ldrh	r2, [r2, #0]
 8001aa8:	b292      	uxth	r2, r2
 8001aaa:	005b      	lsls	r3, r3, #1
 8001aac:	f107 0120 	add.w	r1, r7, #32
 8001ab0:	440b      	add	r3, r1
 8001ab2:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 8001ab6:	7ffb      	ldrb	r3, [r7, #31]
 8001ab8:	3301      	adds	r3, #1
 8001aba:	77fb      	strb	r3, [r7, #31]
 8001abc:	7ffb      	ldrb	r3, [r7, #31]
 8001abe:	2b07      	cmp	r3, #7
 8001ac0:	d9ea      	bls.n	8001a98 <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001aca:	b29a      	uxth	r2, r3
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f042 0201 	orr.w	r2, r2, #1
 8001ad4:	b292      	uxth	r2, r2
 8001ad6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001ae2:	b29a      	uxth	r2, r3
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f022 0201 	bic.w	r2, r2, #1
 8001aec:	b292      	uxth	r2, r2
 8001aee:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8001af2:	bf00      	nop
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001afc:	b29b      	uxth	r3, r3
 8001afe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d0f6      	beq.n	8001af4 <HAL_PCD_IRQHandler+0x19a>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001b0e:	b29a      	uxth	r2, r3
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001b18:	b292      	uxth	r2, r2
 8001b1a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8001b1e:	2300      	movs	r3, #0
 8001b20:	77fb      	strb	r3, [r7, #31]
 8001b22:	e010      	b.n	8001b46 <HAL_PCD_IRQHandler+0x1ec>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8001b24:	7ffb      	ldrb	r3, [r7, #31]
 8001b26:	687a      	ldr	r2, [r7, #4]
 8001b28:	6812      	ldr	r2, [r2, #0]
 8001b2a:	4611      	mov	r1, r2
 8001b2c:	7ffa      	ldrb	r2, [r7, #31]
 8001b2e:	0092      	lsls	r2, r2, #2
 8001b30:	440a      	add	r2, r1
 8001b32:	005b      	lsls	r3, r3, #1
 8001b34:	f107 0120 	add.w	r1, r7, #32
 8001b38:	440b      	add	r3, r1
 8001b3a:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8001b3e:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8001b40:	7ffb      	ldrb	r3, [r7, #31]
 8001b42:	3301      	adds	r3, #1
 8001b44:	77fb      	strb	r3, [r7, #31]
 8001b46:	7ffb      	ldrb	r3, [r7, #31]
 8001b48:	2b07      	cmp	r3, #7
 8001b4a:	d9eb      	bls.n	8001b24 <HAL_PCD_IRQHandler+0x1ca>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001b54:	b29a      	uxth	r2, r3
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f042 0208 	orr.w	r2, r2, #8
 8001b5e:	b292      	uxth	r2, r2
 8001b60:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001b6c:	b29a      	uxth	r2, r3
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001b76:	b292      	uxth	r2, r2
 8001b78:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001b84:	b29a      	uxth	r2, r3
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f042 0204 	orr.w	r2, r2, #4
 8001b8e:	b292      	uxth	r2, r2
 8001b90:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001b94:	6878      	ldr	r0, [r7, #4]
 8001b96:	f005 fb3f 	bl	8007218 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	f003 feaa 	bl	80058f8 <USB_ReadInterrupts>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001baa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001bae:	d10e      	bne.n	8001bce <HAL_PCD_IRQHandler+0x274>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001bb8:	b29a      	uxth	r2, r3
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001bc2:	b292      	uxth	r2, r2
 8001bc4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001bc8:	6878      	ldr	r0, [r7, #4]
 8001bca:	f005 faf8 	bl	80071be <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	f003 fe90 	bl	80058f8 <USB_ReadInterrupts>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bde:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001be2:	d10b      	bne.n	8001bfc <HAL_PCD_IRQHandler+0x2a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001bec:	b29a      	uxth	r2, r3
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001bf6:	b292      	uxth	r2, r2
 8001bf8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8001bfc:	bf00      	nop
 8001bfe:	3720      	adds	r7, #32
 8001c00:	46bd      	mov	sp, r7
 8001c02:	bd80      	pop	{r7, pc}

08001c04 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b082      	sub	sp, #8
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
 8001c0c:	460b      	mov	r3, r1
 8001c0e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001c16:	2b01      	cmp	r3, #1
 8001c18:	d101      	bne.n	8001c1e <HAL_PCD_SetAddress+0x1a>
 8001c1a:	2302      	movs	r3, #2
 8001c1c:	e013      	b.n	8001c46 <HAL_PCD_SetAddress+0x42>
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	2201      	movs	r2, #1
 8001c22:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	78fa      	ldrb	r2, [r7, #3]
 8001c2a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	78fa      	ldrb	r2, [r7, #3]
 8001c34:	4611      	mov	r1, r2
 8001c36:	4618      	mov	r0, r3
 8001c38:	f003 fe37 	bl	80058aa <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2200      	movs	r2, #0
 8001c40:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001c44:	2300      	movs	r3, #0
}
 8001c46:	4618      	mov	r0, r3
 8001c48:	3708      	adds	r7, #8
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bd80      	pop	{r7, pc}

08001c4e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001c4e:	b580      	push	{r7, lr}
 8001c50:	b084      	sub	sp, #16
 8001c52:	af00      	add	r7, sp, #0
 8001c54:	6078      	str	r0, [r7, #4]
 8001c56:	4608      	mov	r0, r1
 8001c58:	4611      	mov	r1, r2
 8001c5a:	461a      	mov	r2, r3
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	70fb      	strb	r3, [r7, #3]
 8001c60:	460b      	mov	r3, r1
 8001c62:	803b      	strh	r3, [r7, #0]
 8001c64:	4613      	mov	r3, r2
 8001c66:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001c6c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	da0e      	bge.n	8001c92 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001c74:	78fb      	ldrb	r3, [r7, #3]
 8001c76:	f003 0307 	and.w	r3, r3, #7
 8001c7a:	1c5a      	adds	r2, r3, #1
 8001c7c:	4613      	mov	r3, r2
 8001c7e:	009b      	lsls	r3, r3, #2
 8001c80:	4413      	add	r3, r2
 8001c82:	00db      	lsls	r3, r3, #3
 8001c84:	687a      	ldr	r2, [r7, #4]
 8001c86:	4413      	add	r3, r2
 8001c88:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	2201      	movs	r2, #1
 8001c8e:	705a      	strb	r2, [r3, #1]
 8001c90:	e00e      	b.n	8001cb0 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001c92:	78fb      	ldrb	r3, [r7, #3]
 8001c94:	f003 0207 	and.w	r2, r3, #7
 8001c98:	4613      	mov	r3, r2
 8001c9a:	009b      	lsls	r3, r3, #2
 8001c9c:	4413      	add	r3, r2
 8001c9e:	00db      	lsls	r3, r3, #3
 8001ca0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001ca4:	687a      	ldr	r2, [r7, #4]
 8001ca6:	4413      	add	r3, r2
 8001ca8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	2200      	movs	r2, #0
 8001cae:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001cb0:	78fb      	ldrb	r3, [r7, #3]
 8001cb2:	f003 0307 	and.w	r3, r3, #7
 8001cb6:	b2da      	uxtb	r2, r3
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001cbc:	883a      	ldrh	r2, [r7, #0]
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	78ba      	ldrb	r2, [r7, #2]
 8001cc6:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	785b      	ldrb	r3, [r3, #1]
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d004      	beq.n	8001cda <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	781b      	ldrb	r3, [r3, #0]
 8001cd4:	b29a      	uxth	r2, r3
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001cda:	78bb      	ldrb	r3, [r7, #2]
 8001cdc:	2b02      	cmp	r3, #2
 8001cde:	d102      	bne.n	8001ce6 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001cec:	2b01      	cmp	r3, #1
 8001cee:	d101      	bne.n	8001cf4 <HAL_PCD_EP_Open+0xa6>
 8001cf0:	2302      	movs	r3, #2
 8001cf2:	e00e      	b.n	8001d12 <HAL_PCD_EP_Open+0xc4>
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	2201      	movs	r2, #1
 8001cf8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	68f9      	ldr	r1, [r7, #12]
 8001d02:	4618      	mov	r0, r3
 8001d04:	f001 fe5e 	bl	80039c4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8001d10:	7afb      	ldrb	r3, [r7, #11]
}
 8001d12:	4618      	mov	r0, r3
 8001d14:	3710      	adds	r7, #16
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}

08001d1a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001d1a:	b580      	push	{r7, lr}
 8001d1c:	b084      	sub	sp, #16
 8001d1e:	af00      	add	r7, sp, #0
 8001d20:	6078      	str	r0, [r7, #4]
 8001d22:	460b      	mov	r3, r1
 8001d24:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001d26:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	da0e      	bge.n	8001d4c <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d2e:	78fb      	ldrb	r3, [r7, #3]
 8001d30:	f003 0307 	and.w	r3, r3, #7
 8001d34:	1c5a      	adds	r2, r3, #1
 8001d36:	4613      	mov	r3, r2
 8001d38:	009b      	lsls	r3, r3, #2
 8001d3a:	4413      	add	r3, r2
 8001d3c:	00db      	lsls	r3, r3, #3
 8001d3e:	687a      	ldr	r2, [r7, #4]
 8001d40:	4413      	add	r3, r2
 8001d42:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	2201      	movs	r2, #1
 8001d48:	705a      	strb	r2, [r3, #1]
 8001d4a:	e00e      	b.n	8001d6a <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001d4c:	78fb      	ldrb	r3, [r7, #3]
 8001d4e:	f003 0207 	and.w	r2, r3, #7
 8001d52:	4613      	mov	r3, r2
 8001d54:	009b      	lsls	r3, r3, #2
 8001d56:	4413      	add	r3, r2
 8001d58:	00db      	lsls	r3, r3, #3
 8001d5a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001d5e:	687a      	ldr	r2, [r7, #4]
 8001d60:	4413      	add	r3, r2
 8001d62:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	2200      	movs	r2, #0
 8001d68:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001d6a:	78fb      	ldrb	r3, [r7, #3]
 8001d6c:	f003 0307 	and.w	r3, r3, #7
 8001d70:	b2da      	uxtb	r2, r3
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001d7c:	2b01      	cmp	r3, #1
 8001d7e:	d101      	bne.n	8001d84 <HAL_PCD_EP_Close+0x6a>
 8001d80:	2302      	movs	r3, #2
 8001d82:	e00e      	b.n	8001da2 <HAL_PCD_EP_Close+0x88>
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2201      	movs	r2, #1
 8001d88:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	68f9      	ldr	r1, [r7, #12]
 8001d92:	4618      	mov	r0, r3
 8001d94:	f002 f980 	bl	8004098 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8001da0:	2300      	movs	r3, #0
}
 8001da2:	4618      	mov	r0, r3
 8001da4:	3710      	adds	r7, #16
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bd80      	pop	{r7, pc}

08001daa <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001daa:	b580      	push	{r7, lr}
 8001dac:	b086      	sub	sp, #24
 8001dae:	af00      	add	r7, sp, #0
 8001db0:	60f8      	str	r0, [r7, #12]
 8001db2:	607a      	str	r2, [r7, #4]
 8001db4:	603b      	str	r3, [r7, #0]
 8001db6:	460b      	mov	r3, r1
 8001db8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001dba:	7afb      	ldrb	r3, [r7, #11]
 8001dbc:	f003 0207 	and.w	r2, r3, #7
 8001dc0:	4613      	mov	r3, r2
 8001dc2:	009b      	lsls	r3, r3, #2
 8001dc4:	4413      	add	r3, r2
 8001dc6:	00db      	lsls	r3, r3, #3
 8001dc8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001dcc:	68fa      	ldr	r2, [r7, #12]
 8001dce:	4413      	add	r3, r2
 8001dd0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001dd2:	697b      	ldr	r3, [r7, #20]
 8001dd4:	687a      	ldr	r2, [r7, #4]
 8001dd6:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001dd8:	697b      	ldr	r3, [r7, #20]
 8001dda:	683a      	ldr	r2, [r7, #0]
 8001ddc:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001dde:	697b      	ldr	r3, [r7, #20]
 8001de0:	2200      	movs	r2, #0
 8001de2:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001de4:	697b      	ldr	r3, [r7, #20]
 8001de6:	2200      	movs	r2, #0
 8001de8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001dea:	7afb      	ldrb	r3, [r7, #11]
 8001dec:	f003 0307 	and.w	r3, r3, #7
 8001df0:	b2da      	uxtb	r2, r3
 8001df2:	697b      	ldr	r3, [r7, #20]
 8001df4:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001df6:	7afb      	ldrb	r3, [r7, #11]
 8001df8:	f003 0307 	and.w	r3, r3, #7
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d106      	bne.n	8001e0e <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	6979      	ldr	r1, [r7, #20]
 8001e06:	4618      	mov	r0, r3
 8001e08:	f002 fb32 	bl	8004470 <USB_EPStartXfer>
 8001e0c:	e005      	b.n	8001e1a <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	6979      	ldr	r1, [r7, #20]
 8001e14:	4618      	mov	r0, r3
 8001e16:	f002 fb2b 	bl	8004470 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001e1a:	2300      	movs	r3, #0
}
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	3718      	adds	r7, #24
 8001e20:	46bd      	mov	sp, r7
 8001e22:	bd80      	pop	{r7, pc}

08001e24 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b086      	sub	sp, #24
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	60f8      	str	r0, [r7, #12]
 8001e2c:	607a      	str	r2, [r7, #4]
 8001e2e:	603b      	str	r3, [r7, #0]
 8001e30:	460b      	mov	r3, r1
 8001e32:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e34:	7afb      	ldrb	r3, [r7, #11]
 8001e36:	f003 0307 	and.w	r3, r3, #7
 8001e3a:	1c5a      	adds	r2, r3, #1
 8001e3c:	4613      	mov	r3, r2
 8001e3e:	009b      	lsls	r3, r3, #2
 8001e40:	4413      	add	r3, r2
 8001e42:	00db      	lsls	r3, r3, #3
 8001e44:	68fa      	ldr	r2, [r7, #12]
 8001e46:	4413      	add	r3, r2
 8001e48:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001e4a:	697b      	ldr	r3, [r7, #20]
 8001e4c:	687a      	ldr	r2, [r7, #4]
 8001e4e:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001e50:	697b      	ldr	r3, [r7, #20]
 8001e52:	683a      	ldr	r2, [r7, #0]
 8001e54:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8001e56:	697b      	ldr	r3, [r7, #20]
 8001e58:	2201      	movs	r2, #1
 8001e5a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8001e5e:	697b      	ldr	r3, [r7, #20]
 8001e60:	683a      	ldr	r2, [r7, #0]
 8001e62:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8001e64:	697b      	ldr	r3, [r7, #20]
 8001e66:	2200      	movs	r2, #0
 8001e68:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001e6a:	697b      	ldr	r3, [r7, #20]
 8001e6c:	2201      	movs	r2, #1
 8001e6e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001e70:	7afb      	ldrb	r3, [r7, #11]
 8001e72:	f003 0307 	and.w	r3, r3, #7
 8001e76:	b2da      	uxtb	r2, r3
 8001e78:	697b      	ldr	r3, [r7, #20]
 8001e7a:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001e7c:	7afb      	ldrb	r3, [r7, #11]
 8001e7e:	f003 0307 	and.w	r3, r3, #7
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d106      	bne.n	8001e94 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	6979      	ldr	r1, [r7, #20]
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	f002 faef 	bl	8004470 <USB_EPStartXfer>
 8001e92:	e005      	b.n	8001ea0 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	6979      	ldr	r1, [r7, #20]
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	f002 fae8 	bl	8004470 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001ea0:	2300      	movs	r3, #0
}
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	3718      	adds	r7, #24
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bd80      	pop	{r7, pc}

08001eaa <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001eaa:	b580      	push	{r7, lr}
 8001eac:	b084      	sub	sp, #16
 8001eae:	af00      	add	r7, sp, #0
 8001eb0:	6078      	str	r0, [r7, #4]
 8001eb2:	460b      	mov	r3, r1
 8001eb4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001eb6:	78fb      	ldrb	r3, [r7, #3]
 8001eb8:	f003 0207 	and.w	r2, r3, #7
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	429a      	cmp	r2, r3
 8001ec2:	d901      	bls.n	8001ec8 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001ec4:	2301      	movs	r3, #1
 8001ec6:	e04c      	b.n	8001f62 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001ec8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	da0e      	bge.n	8001eee <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ed0:	78fb      	ldrb	r3, [r7, #3]
 8001ed2:	f003 0307 	and.w	r3, r3, #7
 8001ed6:	1c5a      	adds	r2, r3, #1
 8001ed8:	4613      	mov	r3, r2
 8001eda:	009b      	lsls	r3, r3, #2
 8001edc:	4413      	add	r3, r2
 8001ede:	00db      	lsls	r3, r3, #3
 8001ee0:	687a      	ldr	r2, [r7, #4]
 8001ee2:	4413      	add	r3, r2
 8001ee4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	2201      	movs	r2, #1
 8001eea:	705a      	strb	r2, [r3, #1]
 8001eec:	e00c      	b.n	8001f08 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001eee:	78fa      	ldrb	r2, [r7, #3]
 8001ef0:	4613      	mov	r3, r2
 8001ef2:	009b      	lsls	r3, r3, #2
 8001ef4:	4413      	add	r3, r2
 8001ef6:	00db      	lsls	r3, r3, #3
 8001ef8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001efc:	687a      	ldr	r2, [r7, #4]
 8001efe:	4413      	add	r3, r2
 8001f00:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	2200      	movs	r2, #0
 8001f06:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	2201      	movs	r2, #1
 8001f0c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001f0e:	78fb      	ldrb	r3, [r7, #3]
 8001f10:	f003 0307 	and.w	r3, r3, #7
 8001f14:	b2da      	uxtb	r2, r3
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001f20:	2b01      	cmp	r3, #1
 8001f22:	d101      	bne.n	8001f28 <HAL_PCD_EP_SetStall+0x7e>
 8001f24:	2302      	movs	r3, #2
 8001f26:	e01c      	b.n	8001f62 <HAL_PCD_EP_SetStall+0xb8>
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	2201      	movs	r2, #1
 8001f2c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	68f9      	ldr	r1, [r7, #12]
 8001f36:	4618      	mov	r0, r3
 8001f38:	f003 fbba 	bl	80056b0 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001f3c:	78fb      	ldrb	r3, [r7, #3]
 8001f3e:	f003 0307 	and.w	r3, r3, #7
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d108      	bne.n	8001f58 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681a      	ldr	r2, [r3, #0]
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8001f50:	4619      	mov	r1, r3
 8001f52:	4610      	mov	r0, r2
 8001f54:	f003 fcdf 	bl	8005916 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001f60:	2300      	movs	r3, #0
}
 8001f62:	4618      	mov	r0, r3
 8001f64:	3710      	adds	r7, #16
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bd80      	pop	{r7, pc}

08001f6a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001f6a:	b580      	push	{r7, lr}
 8001f6c:	b084      	sub	sp, #16
 8001f6e:	af00      	add	r7, sp, #0
 8001f70:	6078      	str	r0, [r7, #4]
 8001f72:	460b      	mov	r3, r1
 8001f74:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001f76:	78fb      	ldrb	r3, [r7, #3]
 8001f78:	f003 020f 	and.w	r2, r3, #15
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	429a      	cmp	r2, r3
 8001f82:	d901      	bls.n	8001f88 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001f84:	2301      	movs	r3, #1
 8001f86:	e040      	b.n	800200a <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001f88:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	da0e      	bge.n	8001fae <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f90:	78fb      	ldrb	r3, [r7, #3]
 8001f92:	f003 0307 	and.w	r3, r3, #7
 8001f96:	1c5a      	adds	r2, r3, #1
 8001f98:	4613      	mov	r3, r2
 8001f9a:	009b      	lsls	r3, r3, #2
 8001f9c:	4413      	add	r3, r2
 8001f9e:	00db      	lsls	r3, r3, #3
 8001fa0:	687a      	ldr	r2, [r7, #4]
 8001fa2:	4413      	add	r3, r2
 8001fa4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	2201      	movs	r2, #1
 8001faa:	705a      	strb	r2, [r3, #1]
 8001fac:	e00e      	b.n	8001fcc <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001fae:	78fb      	ldrb	r3, [r7, #3]
 8001fb0:	f003 0207 	and.w	r2, r3, #7
 8001fb4:	4613      	mov	r3, r2
 8001fb6:	009b      	lsls	r3, r3, #2
 8001fb8:	4413      	add	r3, r2
 8001fba:	00db      	lsls	r3, r3, #3
 8001fbc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001fc0:	687a      	ldr	r2, [r7, #4]
 8001fc2:	4413      	add	r3, r2
 8001fc4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	2200      	movs	r2, #0
 8001fca:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	2200      	movs	r2, #0
 8001fd0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001fd2:	78fb      	ldrb	r3, [r7, #3]
 8001fd4:	f003 0307 	and.w	r3, r3, #7
 8001fd8:	b2da      	uxtb	r2, r3
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001fe4:	2b01      	cmp	r3, #1
 8001fe6:	d101      	bne.n	8001fec <HAL_PCD_EP_ClrStall+0x82>
 8001fe8:	2302      	movs	r3, #2
 8001fea:	e00e      	b.n	800200a <HAL_PCD_EP_ClrStall+0xa0>
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2201      	movs	r2, #1
 8001ff0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	68f9      	ldr	r1, [r7, #12]
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	f003 fba8 	bl	8005750 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2200      	movs	r2, #0
 8002004:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002008:	2300      	movs	r3, #0
}
 800200a:	4618      	mov	r0, r3
 800200c:	3710      	adds	r7, #16
 800200e:	46bd      	mov	sp, r7
 8002010:	bd80      	pop	{r7, pc}

08002012 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8002012:	b580      	push	{r7, lr}
 8002014:	b08e      	sub	sp, #56	; 0x38
 8002016:	af00      	add	r7, sp, #0
 8002018:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800201a:	e2df      	b.n	80025dc <PCD_EP_ISR_Handler+0x5ca>
  {
    wIstr = hpcd->Instance->ISTR;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002024:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8002026:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002028:	b2db      	uxtb	r3, r3
 800202a:	f003 030f 	and.w	r3, r3, #15
 800202e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8002032:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002036:	2b00      	cmp	r3, #0
 8002038:	f040 8158 	bne.w	80022ec <PCD_EP_ISR_Handler+0x2da>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800203c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800203e:	f003 0310 	and.w	r3, r3, #16
 8002042:	2b00      	cmp	r3, #0
 8002044:	d152      	bne.n	80020ec <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	881b      	ldrh	r3, [r3, #0]
 800204c:	b29b      	uxth	r3, r3
 800204e:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002052:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002056:	81fb      	strh	r3, [r7, #14]
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681a      	ldr	r2, [r3, #0]
 800205c:	89fb      	ldrh	r3, [r7, #14]
 800205e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002062:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002066:	b29b      	uxth	r3, r3
 8002068:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	3328      	adds	r3, #40	; 0x28
 800206e:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002078:	b29b      	uxth	r3, r3
 800207a:	461a      	mov	r2, r3
 800207c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800207e:	781b      	ldrb	r3, [r3, #0]
 8002080:	00db      	lsls	r3, r3, #3
 8002082:	4413      	add	r3, r2
 8002084:	3302      	adds	r3, #2
 8002086:	005b      	lsls	r3, r3, #1
 8002088:	687a      	ldr	r2, [r7, #4]
 800208a:	6812      	ldr	r2, [r2, #0]
 800208c:	4413      	add	r3, r2
 800208e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002092:	881b      	ldrh	r3, [r3, #0]
 8002094:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800209a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800209c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800209e:	695a      	ldr	r2, [r3, #20]
 80020a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020a2:	69db      	ldr	r3, [r3, #28]
 80020a4:	441a      	add	r2, r3
 80020a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020a8:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80020aa:	2100      	movs	r1, #0
 80020ac:	6878      	ldr	r0, [r7, #4]
 80020ae:	f005 f86c 	bl	800718a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80020b8:	b2db      	uxtb	r3, r3
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	f000 828e 	beq.w	80025dc <PCD_EP_ISR_Handler+0x5ca>
 80020c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020c2:	699b      	ldr	r3, [r3, #24]
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	f040 8289 	bne.w	80025dc <PCD_EP_ISR_Handler+0x5ca>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80020d0:	b2db      	uxtb	r3, r3
 80020d2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80020d6:	b2da      	uxtb	r2, r3
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	b292      	uxth	r2, r2
 80020de:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	2200      	movs	r2, #0
 80020e6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80020ea:	e277      	b.n	80025dc <PCD_EP_ISR_Handler+0x5ca>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80020f2:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	881b      	ldrh	r3, [r3, #0]
 80020fa:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80020fc:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80020fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002102:	2b00      	cmp	r3, #0
 8002104:	d034      	beq.n	8002170 <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800210e:	b29b      	uxth	r3, r3
 8002110:	461a      	mov	r2, r3
 8002112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002114:	781b      	ldrb	r3, [r3, #0]
 8002116:	00db      	lsls	r3, r3, #3
 8002118:	4413      	add	r3, r2
 800211a:	3306      	adds	r3, #6
 800211c:	005b      	lsls	r3, r3, #1
 800211e:	687a      	ldr	r2, [r7, #4]
 8002120:	6812      	ldr	r2, [r2, #0]
 8002122:	4413      	add	r3, r2
 8002124:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002128:	881b      	ldrh	r3, [r3, #0]
 800212a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800212e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002130:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	6818      	ldr	r0, [r3, #0]
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 800213c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800213e:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8002140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002142:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002144:	b29b      	uxth	r3, r3
 8002146:	f003 fc36 	bl	80059b6 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	881b      	ldrh	r3, [r3, #0]
 8002150:	b29a      	uxth	r2, r3
 8002152:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002156:	4013      	ands	r3, r2
 8002158:	823b      	strh	r3, [r7, #16]
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	8a3a      	ldrh	r2, [r7, #16]
 8002160:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002164:	b292      	uxth	r2, r2
 8002166:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8002168:	6878      	ldr	r0, [r7, #4]
 800216a:	f004 ffe1 	bl	8007130 <HAL_PCD_SetupStageCallback>
 800216e:	e235      	b.n	80025dc <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002170:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8002174:	2b00      	cmp	r3, #0
 8002176:	f280 8231 	bge.w	80025dc <PCD_EP_ISR_Handler+0x5ca>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	881b      	ldrh	r3, [r3, #0]
 8002180:	b29a      	uxth	r2, r3
 8002182:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002186:	4013      	ands	r3, r2
 8002188:	83bb      	strh	r3, [r7, #28]
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	8bba      	ldrh	r2, [r7, #28]
 8002190:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002194:	b292      	uxth	r2, r2
 8002196:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80021a0:	b29b      	uxth	r3, r3
 80021a2:	461a      	mov	r2, r3
 80021a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021a6:	781b      	ldrb	r3, [r3, #0]
 80021a8:	00db      	lsls	r3, r3, #3
 80021aa:	4413      	add	r3, r2
 80021ac:	3306      	adds	r3, #6
 80021ae:	005b      	lsls	r3, r3, #1
 80021b0:	687a      	ldr	r2, [r7, #4]
 80021b2:	6812      	ldr	r2, [r2, #0]
 80021b4:	4413      	add	r3, r2
 80021b6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80021ba:	881b      	ldrh	r3, [r3, #0]
 80021bc:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80021c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021c2:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80021c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021c6:	69db      	ldr	r3, [r3, #28]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d019      	beq.n	8002200 <PCD_EP_ISR_Handler+0x1ee>
 80021cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ce:	695b      	ldr	r3, [r3, #20]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d015      	beq.n	8002200 <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6818      	ldr	r0, [r3, #0]
 80021d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021da:	6959      	ldr	r1, [r3, #20]
 80021dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021de:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80021e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021e2:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80021e4:	b29b      	uxth	r3, r3
 80021e6:	f003 fbe6 	bl	80059b6 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80021ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ec:	695a      	ldr	r2, [r3, #20]
 80021ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021f0:	69db      	ldr	r3, [r3, #28]
 80021f2:	441a      	add	r2, r3
 80021f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021f6:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80021f8:	2100      	movs	r1, #0
 80021fa:	6878      	ldr	r0, [r7, #4]
 80021fc:	f004 ffaa 	bl	8007154 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	61bb      	str	r3, [r7, #24]
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800220e:	b29b      	uxth	r3, r3
 8002210:	461a      	mov	r2, r3
 8002212:	69bb      	ldr	r3, [r7, #24]
 8002214:	4413      	add	r3, r2
 8002216:	61bb      	str	r3, [r7, #24]
 8002218:	69bb      	ldr	r3, [r7, #24]
 800221a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800221e:	617b      	str	r3, [r7, #20]
 8002220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002222:	691b      	ldr	r3, [r3, #16]
 8002224:	2b00      	cmp	r3, #0
 8002226:	d112      	bne.n	800224e <PCD_EP_ISR_Handler+0x23c>
 8002228:	697b      	ldr	r3, [r7, #20]
 800222a:	881b      	ldrh	r3, [r3, #0]
 800222c:	b29b      	uxth	r3, r3
 800222e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002232:	b29a      	uxth	r2, r3
 8002234:	697b      	ldr	r3, [r7, #20]
 8002236:	801a      	strh	r2, [r3, #0]
 8002238:	697b      	ldr	r3, [r7, #20]
 800223a:	881b      	ldrh	r3, [r3, #0]
 800223c:	b29b      	uxth	r3, r3
 800223e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002242:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002246:	b29a      	uxth	r2, r3
 8002248:	697b      	ldr	r3, [r7, #20]
 800224a:	801a      	strh	r2, [r3, #0]
 800224c:	e02f      	b.n	80022ae <PCD_EP_ISR_Handler+0x29c>
 800224e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002250:	691b      	ldr	r3, [r3, #16]
 8002252:	2b3e      	cmp	r3, #62	; 0x3e
 8002254:	d813      	bhi.n	800227e <PCD_EP_ISR_Handler+0x26c>
 8002256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002258:	691b      	ldr	r3, [r3, #16]
 800225a:	085b      	lsrs	r3, r3, #1
 800225c:	633b      	str	r3, [r7, #48]	; 0x30
 800225e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002260:	691b      	ldr	r3, [r3, #16]
 8002262:	f003 0301 	and.w	r3, r3, #1
 8002266:	2b00      	cmp	r3, #0
 8002268:	d002      	beq.n	8002270 <PCD_EP_ISR_Handler+0x25e>
 800226a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800226c:	3301      	adds	r3, #1
 800226e:	633b      	str	r3, [r7, #48]	; 0x30
 8002270:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002272:	b29b      	uxth	r3, r3
 8002274:	029b      	lsls	r3, r3, #10
 8002276:	b29a      	uxth	r2, r3
 8002278:	697b      	ldr	r3, [r7, #20]
 800227a:	801a      	strh	r2, [r3, #0]
 800227c:	e017      	b.n	80022ae <PCD_EP_ISR_Handler+0x29c>
 800227e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002280:	691b      	ldr	r3, [r3, #16]
 8002282:	095b      	lsrs	r3, r3, #5
 8002284:	633b      	str	r3, [r7, #48]	; 0x30
 8002286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002288:	691b      	ldr	r3, [r3, #16]
 800228a:	f003 031f 	and.w	r3, r3, #31
 800228e:	2b00      	cmp	r3, #0
 8002290:	d102      	bne.n	8002298 <PCD_EP_ISR_Handler+0x286>
 8002292:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002294:	3b01      	subs	r3, #1
 8002296:	633b      	str	r3, [r7, #48]	; 0x30
 8002298:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800229a:	b29b      	uxth	r3, r3
 800229c:	029b      	lsls	r3, r3, #10
 800229e:	b29b      	uxth	r3, r3
 80022a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80022a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80022a8:	b29a      	uxth	r2, r3
 80022aa:	697b      	ldr	r3, [r7, #20]
 80022ac:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	881b      	ldrh	r3, [r3, #0]
 80022b4:	b29b      	uxth	r3, r3
 80022b6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80022ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80022be:	827b      	strh	r3, [r7, #18]
 80022c0:	8a7b      	ldrh	r3, [r7, #18]
 80022c2:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80022c6:	827b      	strh	r3, [r7, #18]
 80022c8:	8a7b      	ldrh	r3, [r7, #18]
 80022ca:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80022ce:	827b      	strh	r3, [r7, #18]
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681a      	ldr	r2, [r3, #0]
 80022d4:	8a7b      	ldrh	r3, [r7, #18]
 80022d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80022da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80022de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80022e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80022e6:	b29b      	uxth	r3, r3
 80022e8:	8013      	strh	r3, [r2, #0]
 80022ea:	e177      	b.n	80025dc <PCD_EP_ISR_Handler+0x5ca>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	461a      	mov	r2, r3
 80022f2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80022f6:	009b      	lsls	r3, r3, #2
 80022f8:	4413      	add	r3, r2
 80022fa:	881b      	ldrh	r3, [r3, #0]
 80022fc:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80022fe:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8002302:	2b00      	cmp	r3, #0
 8002304:	f280 80ea 	bge.w	80024dc <PCD_EP_ISR_Handler+0x4ca>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	461a      	mov	r2, r3
 800230e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002312:	009b      	lsls	r3, r3, #2
 8002314:	4413      	add	r3, r2
 8002316:	881b      	ldrh	r3, [r3, #0]
 8002318:	b29a      	uxth	r2, r3
 800231a:	f640 738f 	movw	r3, #3983	; 0xf8f
 800231e:	4013      	ands	r3, r2
 8002320:	853b      	strh	r3, [r7, #40]	; 0x28
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	461a      	mov	r2, r3
 8002328:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800232c:	009b      	lsls	r3, r3, #2
 800232e:	4413      	add	r3, r2
 8002330:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002332:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002336:	b292      	uxth	r2, r2
 8002338:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800233a:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 800233e:	4613      	mov	r3, r2
 8002340:	009b      	lsls	r3, r3, #2
 8002342:	4413      	add	r3, r2
 8002344:	00db      	lsls	r3, r3, #3
 8002346:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800234a:	687a      	ldr	r2, [r7, #4]
 800234c:	4413      	add	r3, r2
 800234e:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8002350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002352:	7b1b      	ldrb	r3, [r3, #12]
 8002354:	2b00      	cmp	r3, #0
 8002356:	d122      	bne.n	800239e <PCD_EP_ISR_Handler+0x38c>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002360:	b29b      	uxth	r3, r3
 8002362:	461a      	mov	r2, r3
 8002364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002366:	781b      	ldrb	r3, [r3, #0]
 8002368:	00db      	lsls	r3, r3, #3
 800236a:	4413      	add	r3, r2
 800236c:	3306      	adds	r3, #6
 800236e:	005b      	lsls	r3, r3, #1
 8002370:	687a      	ldr	r2, [r7, #4]
 8002372:	6812      	ldr	r2, [r2, #0]
 8002374:	4413      	add	r3, r2
 8002376:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800237a:	881b      	ldrh	r3, [r3, #0]
 800237c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002380:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8002382:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002384:	2b00      	cmp	r3, #0
 8002386:	f000 8087 	beq.w	8002498 <PCD_EP_ISR_Handler+0x486>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6818      	ldr	r0, [r3, #0]
 800238e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002390:	6959      	ldr	r1, [r3, #20]
 8002392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002394:	88da      	ldrh	r2, [r3, #6]
 8002396:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002398:	f003 fb0d 	bl	80059b6 <USB_ReadPMA>
 800239c:	e07c      	b.n	8002498 <PCD_EP_ISR_Handler+0x486>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800239e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023a0:	78db      	ldrb	r3, [r3, #3]
 80023a2:	2b02      	cmp	r3, #2
 80023a4:	d108      	bne.n	80023b8 <PCD_EP_ISR_Handler+0x3a6>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80023a6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80023a8:	461a      	mov	r2, r3
 80023aa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80023ac:	6878      	ldr	r0, [r7, #4]
 80023ae:	f000 f923 	bl	80025f8 <HAL_PCD_EP_DB_Receive>
 80023b2:	4603      	mov	r3, r0
 80023b4:	86fb      	strh	r3, [r7, #54]	; 0x36
 80023b6:	e06f      	b.n	8002498 <PCD_EP_ISR_Handler+0x486>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	461a      	mov	r2, r3
 80023be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023c0:	781b      	ldrb	r3, [r3, #0]
 80023c2:	009b      	lsls	r3, r3, #2
 80023c4:	4413      	add	r3, r2
 80023c6:	881b      	ldrh	r3, [r3, #0]
 80023c8:	b29b      	uxth	r3, r3
 80023ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80023ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80023d2:	847b      	strh	r3, [r7, #34]	; 0x22
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	461a      	mov	r2, r3
 80023da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023dc:	781b      	ldrb	r3, [r3, #0]
 80023de:	009b      	lsls	r3, r3, #2
 80023e0:	441a      	add	r2, r3
 80023e2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80023e4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80023e8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80023ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80023f0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80023f4:	b29b      	uxth	r3, r3
 80023f6:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	461a      	mov	r2, r3
 80023fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002400:	781b      	ldrb	r3, [r3, #0]
 8002402:	009b      	lsls	r3, r3, #2
 8002404:	4413      	add	r3, r2
 8002406:	881b      	ldrh	r3, [r3, #0]
 8002408:	b29b      	uxth	r3, r3
 800240a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800240e:	2b00      	cmp	r3, #0
 8002410:	d021      	beq.n	8002456 <PCD_EP_ISR_Handler+0x444>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800241a:	b29b      	uxth	r3, r3
 800241c:	461a      	mov	r2, r3
 800241e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002420:	781b      	ldrb	r3, [r3, #0]
 8002422:	00db      	lsls	r3, r3, #3
 8002424:	4413      	add	r3, r2
 8002426:	3302      	adds	r3, #2
 8002428:	005b      	lsls	r3, r3, #1
 800242a:	687a      	ldr	r2, [r7, #4]
 800242c:	6812      	ldr	r2, [r2, #0]
 800242e:	4413      	add	r3, r2
 8002430:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002434:	881b      	ldrh	r3, [r3, #0]
 8002436:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800243a:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 800243c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800243e:	2b00      	cmp	r3, #0
 8002440:	d02a      	beq.n	8002498 <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6818      	ldr	r0, [r3, #0]
 8002446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002448:	6959      	ldr	r1, [r3, #20]
 800244a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800244c:	891a      	ldrh	r2, [r3, #8]
 800244e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002450:	f003 fab1 	bl	80059b6 <USB_ReadPMA>
 8002454:	e020      	b.n	8002498 <PCD_EP_ISR_Handler+0x486>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800245e:	b29b      	uxth	r3, r3
 8002460:	461a      	mov	r2, r3
 8002462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002464:	781b      	ldrb	r3, [r3, #0]
 8002466:	00db      	lsls	r3, r3, #3
 8002468:	4413      	add	r3, r2
 800246a:	3306      	adds	r3, #6
 800246c:	005b      	lsls	r3, r3, #1
 800246e:	687a      	ldr	r2, [r7, #4]
 8002470:	6812      	ldr	r2, [r2, #0]
 8002472:	4413      	add	r3, r2
 8002474:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002478:	881b      	ldrh	r3, [r3, #0]
 800247a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800247e:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8002480:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002482:	2b00      	cmp	r3, #0
 8002484:	d008      	beq.n	8002498 <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6818      	ldr	r0, [r3, #0]
 800248a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800248c:	6959      	ldr	r1, [r3, #20]
 800248e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002490:	895a      	ldrh	r2, [r3, #10]
 8002492:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002494:	f003 fa8f 	bl	80059b6 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8002498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800249a:	69da      	ldr	r2, [r3, #28]
 800249c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800249e:	441a      	add	r2, r3
 80024a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024a2:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80024a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024a6:	695a      	ldr	r2, [r3, #20]
 80024a8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80024aa:	441a      	add	r2, r3
 80024ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ae:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80024b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024b2:	699b      	ldr	r3, [r3, #24]
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d004      	beq.n	80024c2 <PCD_EP_ISR_Handler+0x4b0>
 80024b8:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80024ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024bc:	691b      	ldr	r3, [r3, #16]
 80024be:	429a      	cmp	r2, r3
 80024c0:	d206      	bcs.n	80024d0 <PCD_EP_ISR_Handler+0x4be>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80024c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024c4:	781b      	ldrb	r3, [r3, #0]
 80024c6:	4619      	mov	r1, r3
 80024c8:	6878      	ldr	r0, [r7, #4]
 80024ca:	f004 fe43 	bl	8007154 <HAL_PCD_DataOutStageCallback>
 80024ce:	e005      	b.n	80024dc <PCD_EP_ISR_Handler+0x4ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80024d6:	4618      	mov	r0, r3
 80024d8:	f001 ffca 	bl	8004470 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80024dc:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80024de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d07a      	beq.n	80025dc <PCD_EP_ISR_Handler+0x5ca>
      {
        ep = &hpcd->IN_ep[epindex];
 80024e6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80024ea:	1c5a      	adds	r2, r3, #1
 80024ec:	4613      	mov	r3, r2
 80024ee:	009b      	lsls	r3, r3, #2
 80024f0:	4413      	add	r3, r2
 80024f2:	00db      	lsls	r3, r3, #3
 80024f4:	687a      	ldr	r2, [r7, #4]
 80024f6:	4413      	add	r3, r2
 80024f8:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	461a      	mov	r2, r3
 8002500:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002504:	009b      	lsls	r3, r3, #2
 8002506:	4413      	add	r3, r2
 8002508:	881b      	ldrh	r3, [r3, #0]
 800250a:	b29b      	uxth	r3, r3
 800250c:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002510:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002514:	843b      	strh	r3, [r7, #32]
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	461a      	mov	r2, r3
 800251c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002520:	009b      	lsls	r3, r3, #2
 8002522:	441a      	add	r2, r3
 8002524:	8c3b      	ldrh	r3, [r7, #32]
 8002526:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800252a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800252e:	b29b      	uxth	r3, r3
 8002530:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk transaction or Bulk Single Buffer Transaction */
        if ((ep->type != EP_TYPE_BULK) ||
 8002532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002534:	78db      	ldrb	r3, [r3, #3]
 8002536:	2b02      	cmp	r3, #2
 8002538:	d108      	bne.n	800254c <PCD_EP_ISR_Handler+0x53a>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 800253a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800253c:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type != EP_TYPE_BULK) ||
 800253e:	2b02      	cmp	r3, #2
 8002540:	d146      	bne.n	80025d0 <PCD_EP_ISR_Handler+0x5be>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8002542:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002544:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002548:	2b00      	cmp	r3, #0
 800254a:	d141      	bne.n	80025d0 <PCD_EP_ISR_Handler+0x5be>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002554:	b29b      	uxth	r3, r3
 8002556:	461a      	mov	r2, r3
 8002558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800255a:	781b      	ldrb	r3, [r3, #0]
 800255c:	00db      	lsls	r3, r3, #3
 800255e:	4413      	add	r3, r2
 8002560:	3302      	adds	r3, #2
 8002562:	005b      	lsls	r3, r3, #1
 8002564:	687a      	ldr	r2, [r7, #4]
 8002566:	6812      	ldr	r2, [r2, #0]
 8002568:	4413      	add	r3, r2
 800256a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800256e:	881b      	ldrh	r3, [r3, #0]
 8002570:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002574:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8002576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002578:	699a      	ldr	r2, [r3, #24]
 800257a:	8bfb      	ldrh	r3, [r7, #30]
 800257c:	429a      	cmp	r2, r3
 800257e:	d906      	bls.n	800258e <PCD_EP_ISR_Handler+0x57c>
          {
            ep->xfer_len -= TxByteNbre;
 8002580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002582:	699a      	ldr	r2, [r3, #24]
 8002584:	8bfb      	ldrh	r3, [r7, #30]
 8002586:	1ad2      	subs	r2, r2, r3
 8002588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800258a:	619a      	str	r2, [r3, #24]
 800258c:	e002      	b.n	8002594 <PCD_EP_ISR_Handler+0x582>
          }
          else
          {
            ep->xfer_len = 0U;
 800258e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002590:	2200      	movs	r2, #0
 8002592:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8002594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002596:	699b      	ldr	r3, [r3, #24]
 8002598:	2b00      	cmp	r3, #0
 800259a:	d106      	bne.n	80025aa <PCD_EP_ISR_Handler+0x598>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800259c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800259e:	781b      	ldrb	r3, [r3, #0]
 80025a0:	4619      	mov	r1, r3
 80025a2:	6878      	ldr	r0, [r7, #4]
 80025a4:	f004 fdf1 	bl	800718a <HAL_PCD_DataInStageCallback>
 80025a8:	e018      	b.n	80025dc <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 80025aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ac:	695a      	ldr	r2, [r3, #20]
 80025ae:	8bfb      	ldrh	r3, [r7, #30]
 80025b0:	441a      	add	r2, r3
 80025b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025b4:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 80025b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025b8:	69da      	ldr	r2, [r3, #28]
 80025ba:	8bfb      	ldrh	r3, [r7, #30]
 80025bc:	441a      	add	r2, r3
 80025be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025c0:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80025c8:	4618      	mov	r0, r3
 80025ca:	f001 ff51 	bl	8004470 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 80025ce:	e005      	b.n	80025dc <PCD_EP_ISR_Handler+0x5ca>
          }
        }
        /* bulk in double buffer enable in case of transferLen> Ep_Mps */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80025d0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80025d2:	461a      	mov	r2, r3
 80025d4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80025d6:	6878      	ldr	r0, [r7, #4]
 80025d8:	f000 f91b 	bl	8002812 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80025e4:	b29b      	uxth	r3, r3
 80025e6:	b21b      	sxth	r3, r3
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	f6ff ad17 	blt.w	800201c <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80025ee:	2300      	movs	r3, #0
}
 80025f0:	4618      	mov	r0, r3
 80025f2:	3738      	adds	r7, #56	; 0x38
 80025f4:	46bd      	mov	sp, r7
 80025f6:	bd80      	pop	{r7, pc}

080025f8 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b088      	sub	sp, #32
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	60f8      	str	r0, [r7, #12]
 8002600:	60b9      	str	r1, [r7, #8]
 8002602:	4613      	mov	r3, r2
 8002604:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002606:	88fb      	ldrh	r3, [r7, #6]
 8002608:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800260c:	2b00      	cmp	r3, #0
 800260e:	d07e      	beq.n	800270e <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002618:	b29b      	uxth	r3, r3
 800261a:	461a      	mov	r2, r3
 800261c:	68bb      	ldr	r3, [r7, #8]
 800261e:	781b      	ldrb	r3, [r3, #0]
 8002620:	00db      	lsls	r3, r3, #3
 8002622:	4413      	add	r3, r2
 8002624:	3302      	adds	r3, #2
 8002626:	005b      	lsls	r3, r3, #1
 8002628:	68fa      	ldr	r2, [r7, #12]
 800262a:	6812      	ldr	r2, [r2, #0]
 800262c:	4413      	add	r3, r2
 800262e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002632:	881b      	ldrh	r3, [r3, #0]
 8002634:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002638:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800263a:	68bb      	ldr	r3, [r7, #8]
 800263c:	699a      	ldr	r2, [r3, #24]
 800263e:	8b7b      	ldrh	r3, [r7, #26]
 8002640:	429a      	cmp	r2, r3
 8002642:	d306      	bcc.n	8002652 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8002644:	68bb      	ldr	r3, [r7, #8]
 8002646:	699a      	ldr	r2, [r3, #24]
 8002648:	8b7b      	ldrh	r3, [r7, #26]
 800264a:	1ad2      	subs	r2, r2, r3
 800264c:	68bb      	ldr	r3, [r7, #8]
 800264e:	619a      	str	r2, [r3, #24]
 8002650:	e002      	b.n	8002658 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8002652:	68bb      	ldr	r3, [r7, #8]
 8002654:	2200      	movs	r2, #0
 8002656:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002658:	68bb      	ldr	r3, [r7, #8]
 800265a:	699b      	ldr	r3, [r3, #24]
 800265c:	2b00      	cmp	r3, #0
 800265e:	d123      	bne.n	80026a8 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	461a      	mov	r2, r3
 8002666:	68bb      	ldr	r3, [r7, #8]
 8002668:	781b      	ldrb	r3, [r3, #0]
 800266a:	009b      	lsls	r3, r3, #2
 800266c:	4413      	add	r3, r2
 800266e:	881b      	ldrh	r3, [r3, #0]
 8002670:	b29b      	uxth	r3, r3
 8002672:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002676:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800267a:	833b      	strh	r3, [r7, #24]
 800267c:	8b3b      	ldrh	r3, [r7, #24]
 800267e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002682:	833b      	strh	r3, [r7, #24]
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	461a      	mov	r2, r3
 800268a:	68bb      	ldr	r3, [r7, #8]
 800268c:	781b      	ldrb	r3, [r3, #0]
 800268e:	009b      	lsls	r3, r3, #2
 8002690:	441a      	add	r2, r3
 8002692:	8b3b      	ldrh	r3, [r7, #24]
 8002694:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002698:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800269c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80026a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80026a4:	b29b      	uxth	r3, r3
 80026a6:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80026a8:	88fb      	ldrh	r3, [r7, #6]
 80026aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d01f      	beq.n	80026f2 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	461a      	mov	r2, r3
 80026b8:	68bb      	ldr	r3, [r7, #8]
 80026ba:	781b      	ldrb	r3, [r3, #0]
 80026bc:	009b      	lsls	r3, r3, #2
 80026be:	4413      	add	r3, r2
 80026c0:	881b      	ldrh	r3, [r3, #0]
 80026c2:	b29b      	uxth	r3, r3
 80026c4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80026c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026cc:	82fb      	strh	r3, [r7, #22]
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	461a      	mov	r2, r3
 80026d4:	68bb      	ldr	r3, [r7, #8]
 80026d6:	781b      	ldrb	r3, [r3, #0]
 80026d8:	009b      	lsls	r3, r3, #2
 80026da:	441a      	add	r2, r3
 80026dc:	8afb      	ldrh	r3, [r7, #22]
 80026de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80026e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80026e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80026ea:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80026ee:	b29b      	uxth	r3, r3
 80026f0:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80026f2:	8b7b      	ldrh	r3, [r7, #26]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	f000 8087 	beq.w	8002808 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	6818      	ldr	r0, [r3, #0]
 80026fe:	68bb      	ldr	r3, [r7, #8]
 8002700:	6959      	ldr	r1, [r3, #20]
 8002702:	68bb      	ldr	r3, [r7, #8]
 8002704:	891a      	ldrh	r2, [r3, #8]
 8002706:	8b7b      	ldrh	r3, [r7, #26]
 8002708:	f003 f955 	bl	80059b6 <USB_ReadPMA>
 800270c:	e07c      	b.n	8002808 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002716:	b29b      	uxth	r3, r3
 8002718:	461a      	mov	r2, r3
 800271a:	68bb      	ldr	r3, [r7, #8]
 800271c:	781b      	ldrb	r3, [r3, #0]
 800271e:	00db      	lsls	r3, r3, #3
 8002720:	4413      	add	r3, r2
 8002722:	3306      	adds	r3, #6
 8002724:	005b      	lsls	r3, r3, #1
 8002726:	68fa      	ldr	r2, [r7, #12]
 8002728:	6812      	ldr	r2, [r2, #0]
 800272a:	4413      	add	r3, r2
 800272c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002730:	881b      	ldrh	r3, [r3, #0]
 8002732:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002736:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002738:	68bb      	ldr	r3, [r7, #8]
 800273a:	699a      	ldr	r2, [r3, #24]
 800273c:	8b7b      	ldrh	r3, [r7, #26]
 800273e:	429a      	cmp	r2, r3
 8002740:	d306      	bcc.n	8002750 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8002742:	68bb      	ldr	r3, [r7, #8]
 8002744:	699a      	ldr	r2, [r3, #24]
 8002746:	8b7b      	ldrh	r3, [r7, #26]
 8002748:	1ad2      	subs	r2, r2, r3
 800274a:	68bb      	ldr	r3, [r7, #8]
 800274c:	619a      	str	r2, [r3, #24]
 800274e:	e002      	b.n	8002756 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8002750:	68bb      	ldr	r3, [r7, #8]
 8002752:	2200      	movs	r2, #0
 8002754:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002756:	68bb      	ldr	r3, [r7, #8]
 8002758:	699b      	ldr	r3, [r3, #24]
 800275a:	2b00      	cmp	r3, #0
 800275c:	d123      	bne.n	80027a6 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	461a      	mov	r2, r3
 8002764:	68bb      	ldr	r3, [r7, #8]
 8002766:	781b      	ldrb	r3, [r3, #0]
 8002768:	009b      	lsls	r3, r3, #2
 800276a:	4413      	add	r3, r2
 800276c:	881b      	ldrh	r3, [r3, #0]
 800276e:	b29b      	uxth	r3, r3
 8002770:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002774:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002778:	83fb      	strh	r3, [r7, #30]
 800277a:	8bfb      	ldrh	r3, [r7, #30]
 800277c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002780:	83fb      	strh	r3, [r7, #30]
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	461a      	mov	r2, r3
 8002788:	68bb      	ldr	r3, [r7, #8]
 800278a:	781b      	ldrb	r3, [r3, #0]
 800278c:	009b      	lsls	r3, r3, #2
 800278e:	441a      	add	r2, r3
 8002790:	8bfb      	ldrh	r3, [r7, #30]
 8002792:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002796:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800279a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800279e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80027a2:	b29b      	uxth	r3, r3
 80027a4:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80027a6:	88fb      	ldrh	r3, [r7, #6]
 80027a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d11f      	bne.n	80027f0 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	461a      	mov	r2, r3
 80027b6:	68bb      	ldr	r3, [r7, #8]
 80027b8:	781b      	ldrb	r3, [r3, #0]
 80027ba:	009b      	lsls	r3, r3, #2
 80027bc:	4413      	add	r3, r2
 80027be:	881b      	ldrh	r3, [r3, #0]
 80027c0:	b29b      	uxth	r3, r3
 80027c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80027c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027ca:	83bb      	strh	r3, [r7, #28]
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	461a      	mov	r2, r3
 80027d2:	68bb      	ldr	r3, [r7, #8]
 80027d4:	781b      	ldrb	r3, [r3, #0]
 80027d6:	009b      	lsls	r3, r3, #2
 80027d8:	441a      	add	r2, r3
 80027da:	8bbb      	ldrh	r3, [r7, #28]
 80027dc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80027e0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80027e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80027e8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80027ec:	b29b      	uxth	r3, r3
 80027ee:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80027f0:	8b7b      	ldrh	r3, [r7, #26]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d008      	beq.n	8002808 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	6818      	ldr	r0, [r3, #0]
 80027fa:	68bb      	ldr	r3, [r7, #8]
 80027fc:	6959      	ldr	r1, [r3, #20]
 80027fe:	68bb      	ldr	r3, [r7, #8]
 8002800:	895a      	ldrh	r2, [r3, #10]
 8002802:	8b7b      	ldrh	r3, [r7, #26]
 8002804:	f003 f8d7 	bl	80059b6 <USB_ReadPMA>
    }
  }

  return count;
 8002808:	8b7b      	ldrh	r3, [r7, #26]
}
 800280a:	4618      	mov	r0, r3
 800280c:	3720      	adds	r7, #32
 800280e:	46bd      	mov	sp, r7
 8002810:	bd80      	pop	{r7, pc}

08002812 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002812:	b580      	push	{r7, lr}
 8002814:	b094      	sub	sp, #80	; 0x50
 8002816:	af00      	add	r7, sp, #0
 8002818:	60f8      	str	r0, [r7, #12]
 800281a:	60b9      	str	r1, [r7, #8]
 800281c:	4613      	mov	r3, r2
 800281e:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002820:	88fb      	ldrh	r3, [r7, #6]
 8002822:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002826:	2b00      	cmp	r3, #0
 8002828:	f000 8138 	beq.w	8002a9c <HAL_PCD_EP_DB_Transmit+0x28a>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002834:	b29b      	uxth	r3, r3
 8002836:	461a      	mov	r2, r3
 8002838:	68bb      	ldr	r3, [r7, #8]
 800283a:	781b      	ldrb	r3, [r3, #0]
 800283c:	00db      	lsls	r3, r3, #3
 800283e:	4413      	add	r3, r2
 8002840:	3302      	adds	r3, #2
 8002842:	005b      	lsls	r3, r3, #1
 8002844:	68fa      	ldr	r2, [r7, #12]
 8002846:	6812      	ldr	r2, [r2, #0]
 8002848:	4413      	add	r3, r2
 800284a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800284e:	881b      	ldrh	r3, [r3, #0]
 8002850:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002854:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

    if (ep->xfer_len > TxByteNbre)
 8002858:	68bb      	ldr	r3, [r7, #8]
 800285a:	699a      	ldr	r2, [r3, #24]
 800285c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002860:	429a      	cmp	r2, r3
 8002862:	d907      	bls.n	8002874 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 8002864:	68bb      	ldr	r3, [r7, #8]
 8002866:	699a      	ldr	r2, [r3, #24]
 8002868:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800286c:	1ad2      	subs	r2, r2, r3
 800286e:	68bb      	ldr	r3, [r7, #8]
 8002870:	619a      	str	r2, [r3, #24]
 8002872:	e002      	b.n	800287a <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8002874:	68bb      	ldr	r3, [r7, #8]
 8002876:	2200      	movs	r2, #0
 8002878:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800287a:	68bb      	ldr	r3, [r7, #8]
 800287c:	699b      	ldr	r3, [r3, #24]
 800287e:	2b00      	cmp	r3, #0
 8002880:	d12c      	bne.n	80028dc <HAL_PCD_EP_DB_Transmit+0xca>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002882:	68bb      	ldr	r3, [r7, #8]
 8002884:	781b      	ldrb	r3, [r3, #0]
 8002886:	4619      	mov	r1, r3
 8002888:	68f8      	ldr	r0, [r7, #12]
 800288a:	f004 fc7e 	bl	800718a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800288e:	88fb      	ldrh	r3, [r7, #6]
 8002890:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002894:	2b00      	cmp	r3, #0
 8002896:	f000 823a 	beq.w	8002d0e <HAL_PCD_EP_DB_Transmit+0x4fc>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	461a      	mov	r2, r3
 80028a0:	68bb      	ldr	r3, [r7, #8]
 80028a2:	781b      	ldrb	r3, [r3, #0]
 80028a4:	009b      	lsls	r3, r3, #2
 80028a6:	4413      	add	r3, r2
 80028a8:	881b      	ldrh	r3, [r3, #0]
 80028aa:	b29b      	uxth	r3, r3
 80028ac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80028b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028b4:	82fb      	strh	r3, [r7, #22]
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	461a      	mov	r2, r3
 80028bc:	68bb      	ldr	r3, [r7, #8]
 80028be:	781b      	ldrb	r3, [r3, #0]
 80028c0:	009b      	lsls	r3, r3, #2
 80028c2:	441a      	add	r2, r3
 80028c4:	8afb      	ldrh	r3, [r7, #22]
 80028c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80028ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80028ce:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80028d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80028d6:	b29b      	uxth	r3, r3
 80028d8:	8013      	strh	r3, [r2, #0]
 80028da:	e218      	b.n	8002d0e <HAL_PCD_EP_DB_Transmit+0x4fc>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80028dc:	88fb      	ldrh	r3, [r7, #6]
 80028de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d01f      	beq.n	8002926 <HAL_PCD_EP_DB_Transmit+0x114>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	461a      	mov	r2, r3
 80028ec:	68bb      	ldr	r3, [r7, #8]
 80028ee:	781b      	ldrb	r3, [r3, #0]
 80028f0:	009b      	lsls	r3, r3, #2
 80028f2:	4413      	add	r3, r2
 80028f4:	881b      	ldrh	r3, [r3, #0]
 80028f6:	b29b      	uxth	r3, r3
 80028f8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80028fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002900:	857b      	strh	r3, [r7, #42]	; 0x2a
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	461a      	mov	r2, r3
 8002908:	68bb      	ldr	r3, [r7, #8]
 800290a:	781b      	ldrb	r3, [r3, #0]
 800290c:	009b      	lsls	r3, r3, #2
 800290e:	441a      	add	r2, r3
 8002910:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002912:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002916:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800291a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800291e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002922:	b29b      	uxth	r3, r3
 8002924:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002926:	68bb      	ldr	r3, [r7, #8]
 8002928:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800292c:	2b01      	cmp	r3, #1
 800292e:	f040 81ee 	bne.w	8002d0e <HAL_PCD_EP_DB_Transmit+0x4fc>
      {
        ep->xfer_buff += TxByteNbre;
 8002932:	68bb      	ldr	r3, [r7, #8]
 8002934:	695a      	ldr	r2, [r3, #20]
 8002936:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800293a:	441a      	add	r2, r3
 800293c:	68bb      	ldr	r3, [r7, #8]
 800293e:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002940:	68bb      	ldr	r3, [r7, #8]
 8002942:	69da      	ldr	r2, [r3, #28]
 8002944:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002948:	441a      	add	r2, r3
 800294a:	68bb      	ldr	r3, [r7, #8]
 800294c:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800294e:	68bb      	ldr	r3, [r7, #8]
 8002950:	6a1a      	ldr	r2, [r3, #32]
 8002952:	68bb      	ldr	r3, [r7, #8]
 8002954:	691b      	ldr	r3, [r3, #16]
 8002956:	429a      	cmp	r2, r3
 8002958:	d309      	bcc.n	800296e <HAL_PCD_EP_DB_Transmit+0x15c>
        {
          len = ep->maxpacket;
 800295a:	68bb      	ldr	r3, [r7, #8]
 800295c:	691b      	ldr	r3, [r3, #16]
 800295e:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db -= len;
 8002960:	68bb      	ldr	r3, [r7, #8]
 8002962:	6a1a      	ldr	r2, [r3, #32]
 8002964:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002966:	1ad2      	subs	r2, r2, r3
 8002968:	68bb      	ldr	r3, [r7, #8]
 800296a:	621a      	str	r2, [r3, #32]
 800296c:	e015      	b.n	800299a <HAL_PCD_EP_DB_Transmit+0x188>
        }
        else if (ep->xfer_len_db == 0U)
 800296e:	68bb      	ldr	r3, [r7, #8]
 8002970:	6a1b      	ldr	r3, [r3, #32]
 8002972:	2b00      	cmp	r3, #0
 8002974:	d107      	bne.n	8002986 <HAL_PCD_EP_DB_Transmit+0x174>
        {
          len = TxByteNbre;
 8002976:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800297a:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_fill_db = 0U;
 800297c:	68bb      	ldr	r3, [r7, #8]
 800297e:	2200      	movs	r2, #0
 8002980:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002984:	e009      	b.n	800299a <HAL_PCD_EP_DB_Transmit+0x188>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002986:	68bb      	ldr	r3, [r7, #8]
 8002988:	2200      	movs	r2, #0
 800298a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 800298e:	68bb      	ldr	r3, [r7, #8]
 8002990:	6a1b      	ldr	r3, [r3, #32]
 8002992:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db = 0U;
 8002994:	68bb      	ldr	r3, [r7, #8]
 8002996:	2200      	movs	r2, #0
 8002998:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800299a:	68bb      	ldr	r3, [r7, #8]
 800299c:	785b      	ldrb	r3, [r3, #1]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d155      	bne.n	8002a4e <HAL_PCD_EP_DB_Transmit+0x23c>
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	61fb      	str	r3, [r7, #28]
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80029b0:	b29b      	uxth	r3, r3
 80029b2:	461a      	mov	r2, r3
 80029b4:	69fb      	ldr	r3, [r7, #28]
 80029b6:	4413      	add	r3, r2
 80029b8:	61fb      	str	r3, [r7, #28]
 80029ba:	68bb      	ldr	r3, [r7, #8]
 80029bc:	781b      	ldrb	r3, [r3, #0]
 80029be:	011a      	lsls	r2, r3, #4
 80029c0:	69fb      	ldr	r3, [r7, #28]
 80029c2:	4413      	add	r3, r2
 80029c4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80029c8:	61bb      	str	r3, [r7, #24]
 80029ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d112      	bne.n	80029f6 <HAL_PCD_EP_DB_Transmit+0x1e4>
 80029d0:	69bb      	ldr	r3, [r7, #24]
 80029d2:	881b      	ldrh	r3, [r3, #0]
 80029d4:	b29b      	uxth	r3, r3
 80029d6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80029da:	b29a      	uxth	r2, r3
 80029dc:	69bb      	ldr	r3, [r7, #24]
 80029de:	801a      	strh	r2, [r3, #0]
 80029e0:	69bb      	ldr	r3, [r7, #24]
 80029e2:	881b      	ldrh	r3, [r3, #0]
 80029e4:	b29b      	uxth	r3, r3
 80029e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80029ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80029ee:	b29a      	uxth	r2, r3
 80029f0:	69bb      	ldr	r3, [r7, #24]
 80029f2:	801a      	strh	r2, [r3, #0]
 80029f4:	e047      	b.n	8002a86 <HAL_PCD_EP_DB_Transmit+0x274>
 80029f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80029f8:	2b3e      	cmp	r3, #62	; 0x3e
 80029fa:	d811      	bhi.n	8002a20 <HAL_PCD_EP_DB_Transmit+0x20e>
 80029fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80029fe:	085b      	lsrs	r3, r3, #1
 8002a00:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a02:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a04:	f003 0301 	and.w	r3, r3, #1
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d002      	beq.n	8002a12 <HAL_PCD_EP_DB_Transmit+0x200>
 8002a0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a0e:	3301      	adds	r3, #1
 8002a10:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a14:	b29b      	uxth	r3, r3
 8002a16:	029b      	lsls	r3, r3, #10
 8002a18:	b29a      	uxth	r2, r3
 8002a1a:	69bb      	ldr	r3, [r7, #24]
 8002a1c:	801a      	strh	r2, [r3, #0]
 8002a1e:	e032      	b.n	8002a86 <HAL_PCD_EP_DB_Transmit+0x274>
 8002a20:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a22:	095b      	lsrs	r3, r3, #5
 8002a24:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a26:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a28:	f003 031f 	and.w	r3, r3, #31
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d102      	bne.n	8002a36 <HAL_PCD_EP_DB_Transmit+0x224>
 8002a30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a32:	3b01      	subs	r3, #1
 8002a34:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a38:	b29b      	uxth	r3, r3
 8002a3a:	029b      	lsls	r3, r3, #10
 8002a3c:	b29b      	uxth	r3, r3
 8002a3e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002a42:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002a46:	b29a      	uxth	r2, r3
 8002a48:	69bb      	ldr	r3, [r7, #24]
 8002a4a:	801a      	strh	r2, [r3, #0]
 8002a4c:	e01b      	b.n	8002a86 <HAL_PCD_EP_DB_Transmit+0x274>
 8002a4e:	68bb      	ldr	r3, [r7, #8]
 8002a50:	785b      	ldrb	r3, [r3, #1]
 8002a52:	2b01      	cmp	r3, #1
 8002a54:	d117      	bne.n	8002a86 <HAL_PCD_EP_DB_Transmit+0x274>
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	627b      	str	r3, [r7, #36]	; 0x24
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a64:	b29b      	uxth	r3, r3
 8002a66:	461a      	mov	r2, r3
 8002a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a6a:	4413      	add	r3, r2
 8002a6c:	627b      	str	r3, [r7, #36]	; 0x24
 8002a6e:	68bb      	ldr	r3, [r7, #8]
 8002a70:	781b      	ldrb	r3, [r3, #0]
 8002a72:	011a      	lsls	r2, r3, #4
 8002a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a76:	4413      	add	r3, r2
 8002a78:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002a7c:	623b      	str	r3, [r7, #32]
 8002a7e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a80:	b29a      	uxth	r2, r3
 8002a82:	6a3b      	ldr	r3, [r7, #32]
 8002a84:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	6818      	ldr	r0, [r3, #0]
 8002a8a:	68bb      	ldr	r3, [r7, #8]
 8002a8c:	6959      	ldr	r1, [r3, #20]
 8002a8e:	68bb      	ldr	r3, [r7, #8]
 8002a90:	891a      	ldrh	r2, [r3, #8]
 8002a92:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a94:	b29b      	uxth	r3, r3
 8002a96:	f002 ff49 	bl	800592c <USB_WritePMA>
 8002a9a:	e138      	b.n	8002d0e <HAL_PCD_EP_DB_Transmit+0x4fc>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002aa4:	b29b      	uxth	r3, r3
 8002aa6:	461a      	mov	r2, r3
 8002aa8:	68bb      	ldr	r3, [r7, #8]
 8002aaa:	781b      	ldrb	r3, [r3, #0]
 8002aac:	00db      	lsls	r3, r3, #3
 8002aae:	4413      	add	r3, r2
 8002ab0:	3306      	adds	r3, #6
 8002ab2:	005b      	lsls	r3, r3, #1
 8002ab4:	68fa      	ldr	r2, [r7, #12]
 8002ab6:	6812      	ldr	r2, [r2, #0]
 8002ab8:	4413      	add	r3, r2
 8002aba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002abe:	881b      	ldrh	r3, [r3, #0]
 8002ac0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002ac4:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

    if (ep->xfer_len >= TxByteNbre)
 8002ac8:	68bb      	ldr	r3, [r7, #8]
 8002aca:	699a      	ldr	r2, [r3, #24]
 8002acc:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002ad0:	429a      	cmp	r2, r3
 8002ad2:	d307      	bcc.n	8002ae4 <HAL_PCD_EP_DB_Transmit+0x2d2>
    {
      ep->xfer_len -= TxByteNbre;
 8002ad4:	68bb      	ldr	r3, [r7, #8]
 8002ad6:	699a      	ldr	r2, [r3, #24]
 8002ad8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002adc:	1ad2      	subs	r2, r2, r3
 8002ade:	68bb      	ldr	r3, [r7, #8]
 8002ae0:	619a      	str	r2, [r3, #24]
 8002ae2:	e002      	b.n	8002aea <HAL_PCD_EP_DB_Transmit+0x2d8>
    }
    else
    {
      ep->xfer_len = 0U;
 8002ae4:	68bb      	ldr	r3, [r7, #8]
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002aea:	68bb      	ldr	r3, [r7, #8]
 8002aec:	699b      	ldr	r3, [r3, #24]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d12e      	bne.n	8002b50 <HAL_PCD_EP_DB_Transmit+0x33e>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002af2:	68bb      	ldr	r3, [r7, #8]
 8002af4:	781b      	ldrb	r3, [r3, #0]
 8002af6:	4619      	mov	r1, r3
 8002af8:	68f8      	ldr	r0, [r7, #12]
 8002afa:	f004 fb46 	bl	800718a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /*need to Free USB Buff*/
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002afe:	88fb      	ldrh	r3, [r7, #6]
 8002b00:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	f040 8102 	bne.w	8002d0e <HAL_PCD_EP_DB_Transmit+0x4fc>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	461a      	mov	r2, r3
 8002b10:	68bb      	ldr	r3, [r7, #8]
 8002b12:	781b      	ldrb	r3, [r3, #0]
 8002b14:	009b      	lsls	r3, r3, #2
 8002b16:	4413      	add	r3, r2
 8002b18:	881b      	ldrh	r3, [r3, #0]
 8002b1a:	b29b      	uxth	r3, r3
 8002b1c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002b20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b24:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	461a      	mov	r2, r3
 8002b2e:	68bb      	ldr	r3, [r7, #8]
 8002b30:	781b      	ldrb	r3, [r3, #0]
 8002b32:	009b      	lsls	r3, r3, #2
 8002b34:	441a      	add	r2, r3
 8002b36:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002b3a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002b3e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002b42:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002b46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b4a:	b29b      	uxth	r3, r3
 8002b4c:	8013      	strh	r3, [r2, #0]
 8002b4e:	e0de      	b.n	8002d0e <HAL_PCD_EP_DB_Transmit+0x4fc>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002b50:	88fb      	ldrh	r3, [r7, #6]
 8002b52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d11f      	bne.n	8002b9a <HAL_PCD_EP_DB_Transmit+0x388>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	461a      	mov	r2, r3
 8002b60:	68bb      	ldr	r3, [r7, #8]
 8002b62:	781b      	ldrb	r3, [r3, #0]
 8002b64:	009b      	lsls	r3, r3, #2
 8002b66:	4413      	add	r3, r2
 8002b68:	881b      	ldrh	r3, [r3, #0]
 8002b6a:	b29b      	uxth	r3, r3
 8002b6c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002b70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b74:	867b      	strh	r3, [r7, #50]	; 0x32
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	461a      	mov	r2, r3
 8002b7c:	68bb      	ldr	r3, [r7, #8]
 8002b7e:	781b      	ldrb	r3, [r3, #0]
 8002b80:	009b      	lsls	r3, r3, #2
 8002b82:	441a      	add	r2, r3
 8002b84:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8002b86:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002b8a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002b8e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002b92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b96:	b29b      	uxth	r3, r3
 8002b98:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002b9a:	68bb      	ldr	r3, [r7, #8]
 8002b9c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002ba0:	2b01      	cmp	r3, #1
 8002ba2:	f040 80b4 	bne.w	8002d0e <HAL_PCD_EP_DB_Transmit+0x4fc>
      {
        ep->xfer_buff += TxByteNbre;
 8002ba6:	68bb      	ldr	r3, [r7, #8]
 8002ba8:	695a      	ldr	r2, [r3, #20]
 8002baa:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002bae:	441a      	add	r2, r3
 8002bb0:	68bb      	ldr	r3, [r7, #8]
 8002bb2:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002bb4:	68bb      	ldr	r3, [r7, #8]
 8002bb6:	69da      	ldr	r2, [r3, #28]
 8002bb8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002bbc:	441a      	add	r2, r3
 8002bbe:	68bb      	ldr	r3, [r7, #8]
 8002bc0:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002bc2:	68bb      	ldr	r3, [r7, #8]
 8002bc4:	6a1a      	ldr	r2, [r3, #32]
 8002bc6:	68bb      	ldr	r3, [r7, #8]
 8002bc8:	691b      	ldr	r3, [r3, #16]
 8002bca:	429a      	cmp	r2, r3
 8002bcc:	d309      	bcc.n	8002be2 <HAL_PCD_EP_DB_Transmit+0x3d0>
        {
          len = ep->maxpacket;
 8002bce:	68bb      	ldr	r3, [r7, #8]
 8002bd0:	691b      	ldr	r3, [r3, #16]
 8002bd2:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db -= len;
 8002bd4:	68bb      	ldr	r3, [r7, #8]
 8002bd6:	6a1a      	ldr	r2, [r3, #32]
 8002bd8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002bda:	1ad2      	subs	r2, r2, r3
 8002bdc:	68bb      	ldr	r3, [r7, #8]
 8002bde:	621a      	str	r2, [r3, #32]
 8002be0:	e015      	b.n	8002c0e <HAL_PCD_EP_DB_Transmit+0x3fc>
        }
        else if (ep->xfer_len_db == 0U)
 8002be2:	68bb      	ldr	r3, [r7, #8]
 8002be4:	6a1b      	ldr	r3, [r3, #32]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d107      	bne.n	8002bfa <HAL_PCD_EP_DB_Transmit+0x3e8>
        {
          len = TxByteNbre;
 8002bea:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002bee:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_fill_db = 0U;
 8002bf0:	68bb      	ldr	r3, [r7, #8]
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002bf8:	e009      	b.n	8002c0e <HAL_PCD_EP_DB_Transmit+0x3fc>
        }
        else
        {
          len = ep->xfer_len_db;
 8002bfa:	68bb      	ldr	r3, [r7, #8]
 8002bfc:	6a1b      	ldr	r3, [r3, #32]
 8002bfe:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db = 0U;
 8002c00:	68bb      	ldr	r3, [r7, #8]
 8002c02:	2200      	movs	r2, #0
 8002c04:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8002c06:	68bb      	ldr	r3, [r7, #8]
 8002c08:	2200      	movs	r2, #0
 8002c0a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	643b      	str	r3, [r7, #64]	; 0x40
 8002c14:	68bb      	ldr	r3, [r7, #8]
 8002c16:	785b      	ldrb	r3, [r3, #1]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d155      	bne.n	8002cc8 <HAL_PCD_EP_DB_Transmit+0x4b6>
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	63bb      	str	r3, [r7, #56]	; 0x38
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c2a:	b29b      	uxth	r3, r3
 8002c2c:	461a      	mov	r2, r3
 8002c2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c30:	4413      	add	r3, r2
 8002c32:	63bb      	str	r3, [r7, #56]	; 0x38
 8002c34:	68bb      	ldr	r3, [r7, #8]
 8002c36:	781b      	ldrb	r3, [r3, #0]
 8002c38:	011a      	lsls	r2, r3, #4
 8002c3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c3c:	4413      	add	r3, r2
 8002c3e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002c42:	637b      	str	r3, [r7, #52]	; 0x34
 8002c44:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d112      	bne.n	8002c70 <HAL_PCD_EP_DB_Transmit+0x45e>
 8002c4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c4c:	881b      	ldrh	r3, [r3, #0]
 8002c4e:	b29b      	uxth	r3, r3
 8002c50:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002c54:	b29a      	uxth	r2, r3
 8002c56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c58:	801a      	strh	r2, [r3, #0]
 8002c5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c5c:	881b      	ldrh	r3, [r3, #0]
 8002c5e:	b29b      	uxth	r3, r3
 8002c60:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002c64:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002c68:	b29a      	uxth	r2, r3
 8002c6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c6c:	801a      	strh	r2, [r3, #0]
 8002c6e:	e044      	b.n	8002cfa <HAL_PCD_EP_DB_Transmit+0x4e8>
 8002c70:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c72:	2b3e      	cmp	r3, #62	; 0x3e
 8002c74:	d811      	bhi.n	8002c9a <HAL_PCD_EP_DB_Transmit+0x488>
 8002c76:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c78:	085b      	lsrs	r3, r3, #1
 8002c7a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002c7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c7e:	f003 0301 	and.w	r3, r3, #1
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d002      	beq.n	8002c8c <HAL_PCD_EP_DB_Transmit+0x47a>
 8002c86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c88:	3301      	adds	r3, #1
 8002c8a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002c8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c8e:	b29b      	uxth	r3, r3
 8002c90:	029b      	lsls	r3, r3, #10
 8002c92:	b29a      	uxth	r2, r3
 8002c94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c96:	801a      	strh	r2, [r3, #0]
 8002c98:	e02f      	b.n	8002cfa <HAL_PCD_EP_DB_Transmit+0x4e8>
 8002c9a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c9c:	095b      	lsrs	r3, r3, #5
 8002c9e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002ca0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ca2:	f003 031f 	and.w	r3, r3, #31
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d102      	bne.n	8002cb0 <HAL_PCD_EP_DB_Transmit+0x49e>
 8002caa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002cac:	3b01      	subs	r3, #1
 8002cae:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002cb0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002cb2:	b29b      	uxth	r3, r3
 8002cb4:	029b      	lsls	r3, r3, #10
 8002cb6:	b29b      	uxth	r3, r3
 8002cb8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002cbc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002cc0:	b29a      	uxth	r2, r3
 8002cc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cc4:	801a      	strh	r2, [r3, #0]
 8002cc6:	e018      	b.n	8002cfa <HAL_PCD_EP_DB_Transmit+0x4e8>
 8002cc8:	68bb      	ldr	r3, [r7, #8]
 8002cca:	785b      	ldrb	r3, [r3, #1]
 8002ccc:	2b01      	cmp	r3, #1
 8002cce:	d114      	bne.n	8002cfa <HAL_PCD_EP_DB_Transmit+0x4e8>
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002cd8:	b29b      	uxth	r3, r3
 8002cda:	461a      	mov	r2, r3
 8002cdc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002cde:	4413      	add	r3, r2
 8002ce0:	643b      	str	r3, [r7, #64]	; 0x40
 8002ce2:	68bb      	ldr	r3, [r7, #8]
 8002ce4:	781b      	ldrb	r3, [r3, #0]
 8002ce6:	011a      	lsls	r2, r3, #4
 8002ce8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002cea:	4413      	add	r3, r2
 8002cec:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002cf0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002cf2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002cf4:	b29a      	uxth	r2, r3
 8002cf6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002cf8:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	6818      	ldr	r0, [r3, #0]
 8002cfe:	68bb      	ldr	r3, [r7, #8]
 8002d00:	6959      	ldr	r1, [r3, #20]
 8002d02:	68bb      	ldr	r3, [r7, #8]
 8002d04:	895a      	ldrh	r2, [r3, #10]
 8002d06:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d08:	b29b      	uxth	r3, r3
 8002d0a:	f002 fe0f 	bl	800592c <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	461a      	mov	r2, r3
 8002d14:	68bb      	ldr	r3, [r7, #8]
 8002d16:	781b      	ldrb	r3, [r3, #0]
 8002d18:	009b      	lsls	r3, r3, #2
 8002d1a:	4413      	add	r3, r2
 8002d1c:	881b      	ldrh	r3, [r3, #0]
 8002d1e:	b29b      	uxth	r3, r3
 8002d20:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002d24:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002d28:	82bb      	strh	r3, [r7, #20]
 8002d2a:	8abb      	ldrh	r3, [r7, #20]
 8002d2c:	f083 0310 	eor.w	r3, r3, #16
 8002d30:	82bb      	strh	r3, [r7, #20]
 8002d32:	8abb      	ldrh	r3, [r7, #20]
 8002d34:	f083 0320 	eor.w	r3, r3, #32
 8002d38:	82bb      	strh	r3, [r7, #20]
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	461a      	mov	r2, r3
 8002d40:	68bb      	ldr	r3, [r7, #8]
 8002d42:	781b      	ldrb	r3, [r3, #0]
 8002d44:	009b      	lsls	r3, r3, #2
 8002d46:	441a      	add	r2, r3
 8002d48:	8abb      	ldrh	r3, [r7, #20]
 8002d4a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002d4e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002d52:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d5a:	b29b      	uxth	r3, r3
 8002d5c:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8002d5e:	2300      	movs	r3, #0
}
 8002d60:	4618      	mov	r0, r3
 8002d62:	3750      	adds	r7, #80	; 0x50
 8002d64:	46bd      	mov	sp, r7
 8002d66:	bd80      	pop	{r7, pc}

08002d68 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	b087      	sub	sp, #28
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	60f8      	str	r0, [r7, #12]
 8002d70:	607b      	str	r3, [r7, #4]
 8002d72:	460b      	mov	r3, r1
 8002d74:	817b      	strh	r3, [r7, #10]
 8002d76:	4613      	mov	r3, r2
 8002d78:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002d7a:	897b      	ldrh	r3, [r7, #10]
 8002d7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d80:	b29b      	uxth	r3, r3
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d00b      	beq.n	8002d9e <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002d86:	897b      	ldrh	r3, [r7, #10]
 8002d88:	f003 0307 	and.w	r3, r3, #7
 8002d8c:	1c5a      	adds	r2, r3, #1
 8002d8e:	4613      	mov	r3, r2
 8002d90:	009b      	lsls	r3, r3, #2
 8002d92:	4413      	add	r3, r2
 8002d94:	00db      	lsls	r3, r3, #3
 8002d96:	68fa      	ldr	r2, [r7, #12]
 8002d98:	4413      	add	r3, r2
 8002d9a:	617b      	str	r3, [r7, #20]
 8002d9c:	e009      	b.n	8002db2 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002d9e:	897a      	ldrh	r2, [r7, #10]
 8002da0:	4613      	mov	r3, r2
 8002da2:	009b      	lsls	r3, r3, #2
 8002da4:	4413      	add	r3, r2
 8002da6:	00db      	lsls	r3, r3, #3
 8002da8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002dac:	68fa      	ldr	r2, [r7, #12]
 8002dae:	4413      	add	r3, r2
 8002db0:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002db2:	893b      	ldrh	r3, [r7, #8]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d107      	bne.n	8002dc8 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002db8:	697b      	ldr	r3, [r7, #20]
 8002dba:	2200      	movs	r2, #0
 8002dbc:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	b29a      	uxth	r2, r3
 8002dc2:	697b      	ldr	r3, [r7, #20]
 8002dc4:	80da      	strh	r2, [r3, #6]
 8002dc6:	e00b      	b.n	8002de0 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002dc8:	697b      	ldr	r3, [r7, #20]
 8002dca:	2201      	movs	r2, #1
 8002dcc:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	b29a      	uxth	r2, r3
 8002dd2:	697b      	ldr	r3, [r7, #20]
 8002dd4:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	0c1b      	lsrs	r3, r3, #16
 8002dda:	b29a      	uxth	r2, r3
 8002ddc:	697b      	ldr	r3, [r7, #20]
 8002dde:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8002de0:	2300      	movs	r3, #0
}
 8002de2:	4618      	mov	r0, r3
 8002de4:	371c      	adds	r7, #28
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bc80      	pop	{r7}
 8002dea:	4770      	bx	lr

08002dec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b086      	sub	sp, #24
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d101      	bne.n	8002dfe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	e26c      	b.n	80032d8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f003 0301 	and.w	r3, r3, #1
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	f000 8087 	beq.w	8002f1a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002e0c:	4b92      	ldr	r3, [pc, #584]	; (8003058 <HAL_RCC_OscConfig+0x26c>)
 8002e0e:	685b      	ldr	r3, [r3, #4]
 8002e10:	f003 030c 	and.w	r3, r3, #12
 8002e14:	2b04      	cmp	r3, #4
 8002e16:	d00c      	beq.n	8002e32 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002e18:	4b8f      	ldr	r3, [pc, #572]	; (8003058 <HAL_RCC_OscConfig+0x26c>)
 8002e1a:	685b      	ldr	r3, [r3, #4]
 8002e1c:	f003 030c 	and.w	r3, r3, #12
 8002e20:	2b08      	cmp	r3, #8
 8002e22:	d112      	bne.n	8002e4a <HAL_RCC_OscConfig+0x5e>
 8002e24:	4b8c      	ldr	r3, [pc, #560]	; (8003058 <HAL_RCC_OscConfig+0x26c>)
 8002e26:	685b      	ldr	r3, [r3, #4]
 8002e28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e30:	d10b      	bne.n	8002e4a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e32:	4b89      	ldr	r3, [pc, #548]	; (8003058 <HAL_RCC_OscConfig+0x26c>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d06c      	beq.n	8002f18 <HAL_RCC_OscConfig+0x12c>
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	685b      	ldr	r3, [r3, #4]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d168      	bne.n	8002f18 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002e46:	2301      	movs	r3, #1
 8002e48:	e246      	b.n	80032d8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	685b      	ldr	r3, [r3, #4]
 8002e4e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e52:	d106      	bne.n	8002e62 <HAL_RCC_OscConfig+0x76>
 8002e54:	4b80      	ldr	r3, [pc, #512]	; (8003058 <HAL_RCC_OscConfig+0x26c>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4a7f      	ldr	r2, [pc, #508]	; (8003058 <HAL_RCC_OscConfig+0x26c>)
 8002e5a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e5e:	6013      	str	r3, [r2, #0]
 8002e60:	e02e      	b.n	8002ec0 <HAL_RCC_OscConfig+0xd4>
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	685b      	ldr	r3, [r3, #4]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d10c      	bne.n	8002e84 <HAL_RCC_OscConfig+0x98>
 8002e6a:	4b7b      	ldr	r3, [pc, #492]	; (8003058 <HAL_RCC_OscConfig+0x26c>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	4a7a      	ldr	r2, [pc, #488]	; (8003058 <HAL_RCC_OscConfig+0x26c>)
 8002e70:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e74:	6013      	str	r3, [r2, #0]
 8002e76:	4b78      	ldr	r3, [pc, #480]	; (8003058 <HAL_RCC_OscConfig+0x26c>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4a77      	ldr	r2, [pc, #476]	; (8003058 <HAL_RCC_OscConfig+0x26c>)
 8002e7c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e80:	6013      	str	r3, [r2, #0]
 8002e82:	e01d      	b.n	8002ec0 <HAL_RCC_OscConfig+0xd4>
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002e8c:	d10c      	bne.n	8002ea8 <HAL_RCC_OscConfig+0xbc>
 8002e8e:	4b72      	ldr	r3, [pc, #456]	; (8003058 <HAL_RCC_OscConfig+0x26c>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	4a71      	ldr	r2, [pc, #452]	; (8003058 <HAL_RCC_OscConfig+0x26c>)
 8002e94:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e98:	6013      	str	r3, [r2, #0]
 8002e9a:	4b6f      	ldr	r3, [pc, #444]	; (8003058 <HAL_RCC_OscConfig+0x26c>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	4a6e      	ldr	r2, [pc, #440]	; (8003058 <HAL_RCC_OscConfig+0x26c>)
 8002ea0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ea4:	6013      	str	r3, [r2, #0]
 8002ea6:	e00b      	b.n	8002ec0 <HAL_RCC_OscConfig+0xd4>
 8002ea8:	4b6b      	ldr	r3, [pc, #428]	; (8003058 <HAL_RCC_OscConfig+0x26c>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	4a6a      	ldr	r2, [pc, #424]	; (8003058 <HAL_RCC_OscConfig+0x26c>)
 8002eae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002eb2:	6013      	str	r3, [r2, #0]
 8002eb4:	4b68      	ldr	r3, [pc, #416]	; (8003058 <HAL_RCC_OscConfig+0x26c>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4a67      	ldr	r2, [pc, #412]	; (8003058 <HAL_RCC_OscConfig+0x26c>)
 8002eba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ebe:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	685b      	ldr	r3, [r3, #4]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d013      	beq.n	8002ef0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ec8:	f7fd fc5a 	bl	8000780 <HAL_GetTick>
 8002ecc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ece:	e008      	b.n	8002ee2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ed0:	f7fd fc56 	bl	8000780 <HAL_GetTick>
 8002ed4:	4602      	mov	r2, r0
 8002ed6:	693b      	ldr	r3, [r7, #16]
 8002ed8:	1ad3      	subs	r3, r2, r3
 8002eda:	2b64      	cmp	r3, #100	; 0x64
 8002edc:	d901      	bls.n	8002ee2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002ede:	2303      	movs	r3, #3
 8002ee0:	e1fa      	b.n	80032d8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ee2:	4b5d      	ldr	r3, [pc, #372]	; (8003058 <HAL_RCC_OscConfig+0x26c>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d0f0      	beq.n	8002ed0 <HAL_RCC_OscConfig+0xe4>
 8002eee:	e014      	b.n	8002f1a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ef0:	f7fd fc46 	bl	8000780 <HAL_GetTick>
 8002ef4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ef6:	e008      	b.n	8002f0a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ef8:	f7fd fc42 	bl	8000780 <HAL_GetTick>
 8002efc:	4602      	mov	r2, r0
 8002efe:	693b      	ldr	r3, [r7, #16]
 8002f00:	1ad3      	subs	r3, r2, r3
 8002f02:	2b64      	cmp	r3, #100	; 0x64
 8002f04:	d901      	bls.n	8002f0a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002f06:	2303      	movs	r3, #3
 8002f08:	e1e6      	b.n	80032d8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f0a:	4b53      	ldr	r3, [pc, #332]	; (8003058 <HAL_RCC_OscConfig+0x26c>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d1f0      	bne.n	8002ef8 <HAL_RCC_OscConfig+0x10c>
 8002f16:	e000      	b.n	8002f1a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f18:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f003 0302 	and.w	r3, r3, #2
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d063      	beq.n	8002fee <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002f26:	4b4c      	ldr	r3, [pc, #304]	; (8003058 <HAL_RCC_OscConfig+0x26c>)
 8002f28:	685b      	ldr	r3, [r3, #4]
 8002f2a:	f003 030c 	and.w	r3, r3, #12
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d00b      	beq.n	8002f4a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002f32:	4b49      	ldr	r3, [pc, #292]	; (8003058 <HAL_RCC_OscConfig+0x26c>)
 8002f34:	685b      	ldr	r3, [r3, #4]
 8002f36:	f003 030c 	and.w	r3, r3, #12
 8002f3a:	2b08      	cmp	r3, #8
 8002f3c:	d11c      	bne.n	8002f78 <HAL_RCC_OscConfig+0x18c>
 8002f3e:	4b46      	ldr	r3, [pc, #280]	; (8003058 <HAL_RCC_OscConfig+0x26c>)
 8002f40:	685b      	ldr	r3, [r3, #4]
 8002f42:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d116      	bne.n	8002f78 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f4a:	4b43      	ldr	r3, [pc, #268]	; (8003058 <HAL_RCC_OscConfig+0x26c>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f003 0302 	and.w	r3, r3, #2
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d005      	beq.n	8002f62 <HAL_RCC_OscConfig+0x176>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	691b      	ldr	r3, [r3, #16]
 8002f5a:	2b01      	cmp	r3, #1
 8002f5c:	d001      	beq.n	8002f62 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002f5e:	2301      	movs	r3, #1
 8002f60:	e1ba      	b.n	80032d8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f62:	4b3d      	ldr	r3, [pc, #244]	; (8003058 <HAL_RCC_OscConfig+0x26c>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	695b      	ldr	r3, [r3, #20]
 8002f6e:	00db      	lsls	r3, r3, #3
 8002f70:	4939      	ldr	r1, [pc, #228]	; (8003058 <HAL_RCC_OscConfig+0x26c>)
 8002f72:	4313      	orrs	r3, r2
 8002f74:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f76:	e03a      	b.n	8002fee <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	691b      	ldr	r3, [r3, #16]
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d020      	beq.n	8002fc2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f80:	4b36      	ldr	r3, [pc, #216]	; (800305c <HAL_RCC_OscConfig+0x270>)
 8002f82:	2201      	movs	r2, #1
 8002f84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f86:	f7fd fbfb 	bl	8000780 <HAL_GetTick>
 8002f8a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f8c:	e008      	b.n	8002fa0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f8e:	f7fd fbf7 	bl	8000780 <HAL_GetTick>
 8002f92:	4602      	mov	r2, r0
 8002f94:	693b      	ldr	r3, [r7, #16]
 8002f96:	1ad3      	subs	r3, r2, r3
 8002f98:	2b02      	cmp	r3, #2
 8002f9a:	d901      	bls.n	8002fa0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002f9c:	2303      	movs	r3, #3
 8002f9e:	e19b      	b.n	80032d8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fa0:	4b2d      	ldr	r3, [pc, #180]	; (8003058 <HAL_RCC_OscConfig+0x26c>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f003 0302 	and.w	r3, r3, #2
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d0f0      	beq.n	8002f8e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fac:	4b2a      	ldr	r3, [pc, #168]	; (8003058 <HAL_RCC_OscConfig+0x26c>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	695b      	ldr	r3, [r3, #20]
 8002fb8:	00db      	lsls	r3, r3, #3
 8002fba:	4927      	ldr	r1, [pc, #156]	; (8003058 <HAL_RCC_OscConfig+0x26c>)
 8002fbc:	4313      	orrs	r3, r2
 8002fbe:	600b      	str	r3, [r1, #0]
 8002fc0:	e015      	b.n	8002fee <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002fc2:	4b26      	ldr	r3, [pc, #152]	; (800305c <HAL_RCC_OscConfig+0x270>)
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fc8:	f7fd fbda 	bl	8000780 <HAL_GetTick>
 8002fcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002fce:	e008      	b.n	8002fe2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002fd0:	f7fd fbd6 	bl	8000780 <HAL_GetTick>
 8002fd4:	4602      	mov	r2, r0
 8002fd6:	693b      	ldr	r3, [r7, #16]
 8002fd8:	1ad3      	subs	r3, r2, r3
 8002fda:	2b02      	cmp	r3, #2
 8002fdc:	d901      	bls.n	8002fe2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002fde:	2303      	movs	r3, #3
 8002fe0:	e17a      	b.n	80032d8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002fe2:	4b1d      	ldr	r3, [pc, #116]	; (8003058 <HAL_RCC_OscConfig+0x26c>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f003 0302 	and.w	r3, r3, #2
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d1f0      	bne.n	8002fd0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f003 0308 	and.w	r3, r3, #8
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d03a      	beq.n	8003070 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	699b      	ldr	r3, [r3, #24]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d019      	beq.n	8003036 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003002:	4b17      	ldr	r3, [pc, #92]	; (8003060 <HAL_RCC_OscConfig+0x274>)
 8003004:	2201      	movs	r2, #1
 8003006:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003008:	f7fd fbba 	bl	8000780 <HAL_GetTick>
 800300c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800300e:	e008      	b.n	8003022 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003010:	f7fd fbb6 	bl	8000780 <HAL_GetTick>
 8003014:	4602      	mov	r2, r0
 8003016:	693b      	ldr	r3, [r7, #16]
 8003018:	1ad3      	subs	r3, r2, r3
 800301a:	2b02      	cmp	r3, #2
 800301c:	d901      	bls.n	8003022 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800301e:	2303      	movs	r3, #3
 8003020:	e15a      	b.n	80032d8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003022:	4b0d      	ldr	r3, [pc, #52]	; (8003058 <HAL_RCC_OscConfig+0x26c>)
 8003024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003026:	f003 0302 	and.w	r3, r3, #2
 800302a:	2b00      	cmp	r3, #0
 800302c:	d0f0      	beq.n	8003010 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800302e:	2001      	movs	r0, #1
 8003030:	f000 fac4 	bl	80035bc <RCC_Delay>
 8003034:	e01c      	b.n	8003070 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003036:	4b0a      	ldr	r3, [pc, #40]	; (8003060 <HAL_RCC_OscConfig+0x274>)
 8003038:	2200      	movs	r2, #0
 800303a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800303c:	f7fd fba0 	bl	8000780 <HAL_GetTick>
 8003040:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003042:	e00f      	b.n	8003064 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003044:	f7fd fb9c 	bl	8000780 <HAL_GetTick>
 8003048:	4602      	mov	r2, r0
 800304a:	693b      	ldr	r3, [r7, #16]
 800304c:	1ad3      	subs	r3, r2, r3
 800304e:	2b02      	cmp	r3, #2
 8003050:	d908      	bls.n	8003064 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003052:	2303      	movs	r3, #3
 8003054:	e140      	b.n	80032d8 <HAL_RCC_OscConfig+0x4ec>
 8003056:	bf00      	nop
 8003058:	40021000 	.word	0x40021000
 800305c:	42420000 	.word	0x42420000
 8003060:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003064:	4b9e      	ldr	r3, [pc, #632]	; (80032e0 <HAL_RCC_OscConfig+0x4f4>)
 8003066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003068:	f003 0302 	and.w	r3, r3, #2
 800306c:	2b00      	cmp	r3, #0
 800306e:	d1e9      	bne.n	8003044 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f003 0304 	and.w	r3, r3, #4
 8003078:	2b00      	cmp	r3, #0
 800307a:	f000 80a6 	beq.w	80031ca <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800307e:	2300      	movs	r3, #0
 8003080:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003082:	4b97      	ldr	r3, [pc, #604]	; (80032e0 <HAL_RCC_OscConfig+0x4f4>)
 8003084:	69db      	ldr	r3, [r3, #28]
 8003086:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800308a:	2b00      	cmp	r3, #0
 800308c:	d10d      	bne.n	80030aa <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800308e:	4b94      	ldr	r3, [pc, #592]	; (80032e0 <HAL_RCC_OscConfig+0x4f4>)
 8003090:	69db      	ldr	r3, [r3, #28]
 8003092:	4a93      	ldr	r2, [pc, #588]	; (80032e0 <HAL_RCC_OscConfig+0x4f4>)
 8003094:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003098:	61d3      	str	r3, [r2, #28]
 800309a:	4b91      	ldr	r3, [pc, #580]	; (80032e0 <HAL_RCC_OscConfig+0x4f4>)
 800309c:	69db      	ldr	r3, [r3, #28]
 800309e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030a2:	60bb      	str	r3, [r7, #8]
 80030a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80030a6:	2301      	movs	r3, #1
 80030a8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030aa:	4b8e      	ldr	r3, [pc, #568]	; (80032e4 <HAL_RCC_OscConfig+0x4f8>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d118      	bne.n	80030e8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80030b6:	4b8b      	ldr	r3, [pc, #556]	; (80032e4 <HAL_RCC_OscConfig+0x4f8>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	4a8a      	ldr	r2, [pc, #552]	; (80032e4 <HAL_RCC_OscConfig+0x4f8>)
 80030bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80030c2:	f7fd fb5d 	bl	8000780 <HAL_GetTick>
 80030c6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030c8:	e008      	b.n	80030dc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030ca:	f7fd fb59 	bl	8000780 <HAL_GetTick>
 80030ce:	4602      	mov	r2, r0
 80030d0:	693b      	ldr	r3, [r7, #16]
 80030d2:	1ad3      	subs	r3, r2, r3
 80030d4:	2b64      	cmp	r3, #100	; 0x64
 80030d6:	d901      	bls.n	80030dc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80030d8:	2303      	movs	r3, #3
 80030da:	e0fd      	b.n	80032d8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030dc:	4b81      	ldr	r3, [pc, #516]	; (80032e4 <HAL_RCC_OscConfig+0x4f8>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d0f0      	beq.n	80030ca <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	68db      	ldr	r3, [r3, #12]
 80030ec:	2b01      	cmp	r3, #1
 80030ee:	d106      	bne.n	80030fe <HAL_RCC_OscConfig+0x312>
 80030f0:	4b7b      	ldr	r3, [pc, #492]	; (80032e0 <HAL_RCC_OscConfig+0x4f4>)
 80030f2:	6a1b      	ldr	r3, [r3, #32]
 80030f4:	4a7a      	ldr	r2, [pc, #488]	; (80032e0 <HAL_RCC_OscConfig+0x4f4>)
 80030f6:	f043 0301 	orr.w	r3, r3, #1
 80030fa:	6213      	str	r3, [r2, #32]
 80030fc:	e02d      	b.n	800315a <HAL_RCC_OscConfig+0x36e>
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	68db      	ldr	r3, [r3, #12]
 8003102:	2b00      	cmp	r3, #0
 8003104:	d10c      	bne.n	8003120 <HAL_RCC_OscConfig+0x334>
 8003106:	4b76      	ldr	r3, [pc, #472]	; (80032e0 <HAL_RCC_OscConfig+0x4f4>)
 8003108:	6a1b      	ldr	r3, [r3, #32]
 800310a:	4a75      	ldr	r2, [pc, #468]	; (80032e0 <HAL_RCC_OscConfig+0x4f4>)
 800310c:	f023 0301 	bic.w	r3, r3, #1
 8003110:	6213      	str	r3, [r2, #32]
 8003112:	4b73      	ldr	r3, [pc, #460]	; (80032e0 <HAL_RCC_OscConfig+0x4f4>)
 8003114:	6a1b      	ldr	r3, [r3, #32]
 8003116:	4a72      	ldr	r2, [pc, #456]	; (80032e0 <HAL_RCC_OscConfig+0x4f4>)
 8003118:	f023 0304 	bic.w	r3, r3, #4
 800311c:	6213      	str	r3, [r2, #32]
 800311e:	e01c      	b.n	800315a <HAL_RCC_OscConfig+0x36e>
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	68db      	ldr	r3, [r3, #12]
 8003124:	2b05      	cmp	r3, #5
 8003126:	d10c      	bne.n	8003142 <HAL_RCC_OscConfig+0x356>
 8003128:	4b6d      	ldr	r3, [pc, #436]	; (80032e0 <HAL_RCC_OscConfig+0x4f4>)
 800312a:	6a1b      	ldr	r3, [r3, #32]
 800312c:	4a6c      	ldr	r2, [pc, #432]	; (80032e0 <HAL_RCC_OscConfig+0x4f4>)
 800312e:	f043 0304 	orr.w	r3, r3, #4
 8003132:	6213      	str	r3, [r2, #32]
 8003134:	4b6a      	ldr	r3, [pc, #424]	; (80032e0 <HAL_RCC_OscConfig+0x4f4>)
 8003136:	6a1b      	ldr	r3, [r3, #32]
 8003138:	4a69      	ldr	r2, [pc, #420]	; (80032e0 <HAL_RCC_OscConfig+0x4f4>)
 800313a:	f043 0301 	orr.w	r3, r3, #1
 800313e:	6213      	str	r3, [r2, #32]
 8003140:	e00b      	b.n	800315a <HAL_RCC_OscConfig+0x36e>
 8003142:	4b67      	ldr	r3, [pc, #412]	; (80032e0 <HAL_RCC_OscConfig+0x4f4>)
 8003144:	6a1b      	ldr	r3, [r3, #32]
 8003146:	4a66      	ldr	r2, [pc, #408]	; (80032e0 <HAL_RCC_OscConfig+0x4f4>)
 8003148:	f023 0301 	bic.w	r3, r3, #1
 800314c:	6213      	str	r3, [r2, #32]
 800314e:	4b64      	ldr	r3, [pc, #400]	; (80032e0 <HAL_RCC_OscConfig+0x4f4>)
 8003150:	6a1b      	ldr	r3, [r3, #32]
 8003152:	4a63      	ldr	r2, [pc, #396]	; (80032e0 <HAL_RCC_OscConfig+0x4f4>)
 8003154:	f023 0304 	bic.w	r3, r3, #4
 8003158:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	68db      	ldr	r3, [r3, #12]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d015      	beq.n	800318e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003162:	f7fd fb0d 	bl	8000780 <HAL_GetTick>
 8003166:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003168:	e00a      	b.n	8003180 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800316a:	f7fd fb09 	bl	8000780 <HAL_GetTick>
 800316e:	4602      	mov	r2, r0
 8003170:	693b      	ldr	r3, [r7, #16]
 8003172:	1ad3      	subs	r3, r2, r3
 8003174:	f241 3288 	movw	r2, #5000	; 0x1388
 8003178:	4293      	cmp	r3, r2
 800317a:	d901      	bls.n	8003180 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800317c:	2303      	movs	r3, #3
 800317e:	e0ab      	b.n	80032d8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003180:	4b57      	ldr	r3, [pc, #348]	; (80032e0 <HAL_RCC_OscConfig+0x4f4>)
 8003182:	6a1b      	ldr	r3, [r3, #32]
 8003184:	f003 0302 	and.w	r3, r3, #2
 8003188:	2b00      	cmp	r3, #0
 800318a:	d0ee      	beq.n	800316a <HAL_RCC_OscConfig+0x37e>
 800318c:	e014      	b.n	80031b8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800318e:	f7fd faf7 	bl	8000780 <HAL_GetTick>
 8003192:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003194:	e00a      	b.n	80031ac <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003196:	f7fd faf3 	bl	8000780 <HAL_GetTick>
 800319a:	4602      	mov	r2, r0
 800319c:	693b      	ldr	r3, [r7, #16]
 800319e:	1ad3      	subs	r3, r2, r3
 80031a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80031a4:	4293      	cmp	r3, r2
 80031a6:	d901      	bls.n	80031ac <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80031a8:	2303      	movs	r3, #3
 80031aa:	e095      	b.n	80032d8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031ac:	4b4c      	ldr	r3, [pc, #304]	; (80032e0 <HAL_RCC_OscConfig+0x4f4>)
 80031ae:	6a1b      	ldr	r3, [r3, #32]
 80031b0:	f003 0302 	and.w	r3, r3, #2
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d1ee      	bne.n	8003196 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80031b8:	7dfb      	ldrb	r3, [r7, #23]
 80031ba:	2b01      	cmp	r3, #1
 80031bc:	d105      	bne.n	80031ca <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031be:	4b48      	ldr	r3, [pc, #288]	; (80032e0 <HAL_RCC_OscConfig+0x4f4>)
 80031c0:	69db      	ldr	r3, [r3, #28]
 80031c2:	4a47      	ldr	r2, [pc, #284]	; (80032e0 <HAL_RCC_OscConfig+0x4f4>)
 80031c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80031c8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	69db      	ldr	r3, [r3, #28]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	f000 8081 	beq.w	80032d6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80031d4:	4b42      	ldr	r3, [pc, #264]	; (80032e0 <HAL_RCC_OscConfig+0x4f4>)
 80031d6:	685b      	ldr	r3, [r3, #4]
 80031d8:	f003 030c 	and.w	r3, r3, #12
 80031dc:	2b08      	cmp	r3, #8
 80031de:	d061      	beq.n	80032a4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	69db      	ldr	r3, [r3, #28]
 80031e4:	2b02      	cmp	r3, #2
 80031e6:	d146      	bne.n	8003276 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031e8:	4b3f      	ldr	r3, [pc, #252]	; (80032e8 <HAL_RCC_OscConfig+0x4fc>)
 80031ea:	2200      	movs	r2, #0
 80031ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031ee:	f7fd fac7 	bl	8000780 <HAL_GetTick>
 80031f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80031f4:	e008      	b.n	8003208 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031f6:	f7fd fac3 	bl	8000780 <HAL_GetTick>
 80031fa:	4602      	mov	r2, r0
 80031fc:	693b      	ldr	r3, [r7, #16]
 80031fe:	1ad3      	subs	r3, r2, r3
 8003200:	2b02      	cmp	r3, #2
 8003202:	d901      	bls.n	8003208 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003204:	2303      	movs	r3, #3
 8003206:	e067      	b.n	80032d8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003208:	4b35      	ldr	r3, [pc, #212]	; (80032e0 <HAL_RCC_OscConfig+0x4f4>)
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003210:	2b00      	cmp	r3, #0
 8003212:	d1f0      	bne.n	80031f6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6a1b      	ldr	r3, [r3, #32]
 8003218:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800321c:	d108      	bne.n	8003230 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800321e:	4b30      	ldr	r3, [pc, #192]	; (80032e0 <HAL_RCC_OscConfig+0x4f4>)
 8003220:	685b      	ldr	r3, [r3, #4]
 8003222:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	689b      	ldr	r3, [r3, #8]
 800322a:	492d      	ldr	r1, [pc, #180]	; (80032e0 <HAL_RCC_OscConfig+0x4f4>)
 800322c:	4313      	orrs	r3, r2
 800322e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003230:	4b2b      	ldr	r3, [pc, #172]	; (80032e0 <HAL_RCC_OscConfig+0x4f4>)
 8003232:	685b      	ldr	r3, [r3, #4]
 8003234:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6a19      	ldr	r1, [r3, #32]
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003240:	430b      	orrs	r3, r1
 8003242:	4927      	ldr	r1, [pc, #156]	; (80032e0 <HAL_RCC_OscConfig+0x4f4>)
 8003244:	4313      	orrs	r3, r2
 8003246:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003248:	4b27      	ldr	r3, [pc, #156]	; (80032e8 <HAL_RCC_OscConfig+0x4fc>)
 800324a:	2201      	movs	r2, #1
 800324c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800324e:	f7fd fa97 	bl	8000780 <HAL_GetTick>
 8003252:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003254:	e008      	b.n	8003268 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003256:	f7fd fa93 	bl	8000780 <HAL_GetTick>
 800325a:	4602      	mov	r2, r0
 800325c:	693b      	ldr	r3, [r7, #16]
 800325e:	1ad3      	subs	r3, r2, r3
 8003260:	2b02      	cmp	r3, #2
 8003262:	d901      	bls.n	8003268 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003264:	2303      	movs	r3, #3
 8003266:	e037      	b.n	80032d8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003268:	4b1d      	ldr	r3, [pc, #116]	; (80032e0 <HAL_RCC_OscConfig+0x4f4>)
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003270:	2b00      	cmp	r3, #0
 8003272:	d0f0      	beq.n	8003256 <HAL_RCC_OscConfig+0x46a>
 8003274:	e02f      	b.n	80032d6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003276:	4b1c      	ldr	r3, [pc, #112]	; (80032e8 <HAL_RCC_OscConfig+0x4fc>)
 8003278:	2200      	movs	r2, #0
 800327a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800327c:	f7fd fa80 	bl	8000780 <HAL_GetTick>
 8003280:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003282:	e008      	b.n	8003296 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003284:	f7fd fa7c 	bl	8000780 <HAL_GetTick>
 8003288:	4602      	mov	r2, r0
 800328a:	693b      	ldr	r3, [r7, #16]
 800328c:	1ad3      	subs	r3, r2, r3
 800328e:	2b02      	cmp	r3, #2
 8003290:	d901      	bls.n	8003296 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003292:	2303      	movs	r3, #3
 8003294:	e020      	b.n	80032d8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003296:	4b12      	ldr	r3, [pc, #72]	; (80032e0 <HAL_RCC_OscConfig+0x4f4>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d1f0      	bne.n	8003284 <HAL_RCC_OscConfig+0x498>
 80032a2:	e018      	b.n	80032d6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	69db      	ldr	r3, [r3, #28]
 80032a8:	2b01      	cmp	r3, #1
 80032aa:	d101      	bne.n	80032b0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80032ac:	2301      	movs	r3, #1
 80032ae:	e013      	b.n	80032d8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80032b0:	4b0b      	ldr	r3, [pc, #44]	; (80032e0 <HAL_RCC_OscConfig+0x4f4>)
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6a1b      	ldr	r3, [r3, #32]
 80032c0:	429a      	cmp	r2, r3
 80032c2:	d106      	bne.n	80032d2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032ce:	429a      	cmp	r2, r3
 80032d0:	d001      	beq.n	80032d6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80032d2:	2301      	movs	r3, #1
 80032d4:	e000      	b.n	80032d8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80032d6:	2300      	movs	r3, #0
}
 80032d8:	4618      	mov	r0, r3
 80032da:	3718      	adds	r7, #24
 80032dc:	46bd      	mov	sp, r7
 80032de:	bd80      	pop	{r7, pc}
 80032e0:	40021000 	.word	0x40021000
 80032e4:	40007000 	.word	0x40007000
 80032e8:	42420060 	.word	0x42420060

080032ec <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b084      	sub	sp, #16
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
 80032f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d101      	bne.n	8003300 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80032fc:	2301      	movs	r3, #1
 80032fe:	e0d0      	b.n	80034a2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003300:	4b6a      	ldr	r3, [pc, #424]	; (80034ac <HAL_RCC_ClockConfig+0x1c0>)
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f003 0307 	and.w	r3, r3, #7
 8003308:	683a      	ldr	r2, [r7, #0]
 800330a:	429a      	cmp	r2, r3
 800330c:	d910      	bls.n	8003330 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800330e:	4b67      	ldr	r3, [pc, #412]	; (80034ac <HAL_RCC_ClockConfig+0x1c0>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f023 0207 	bic.w	r2, r3, #7
 8003316:	4965      	ldr	r1, [pc, #404]	; (80034ac <HAL_RCC_ClockConfig+0x1c0>)
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	4313      	orrs	r3, r2
 800331c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800331e:	4b63      	ldr	r3, [pc, #396]	; (80034ac <HAL_RCC_ClockConfig+0x1c0>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f003 0307 	and.w	r3, r3, #7
 8003326:	683a      	ldr	r2, [r7, #0]
 8003328:	429a      	cmp	r2, r3
 800332a:	d001      	beq.n	8003330 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800332c:	2301      	movs	r3, #1
 800332e:	e0b8      	b.n	80034a2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f003 0302 	and.w	r3, r3, #2
 8003338:	2b00      	cmp	r3, #0
 800333a:	d020      	beq.n	800337e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f003 0304 	and.w	r3, r3, #4
 8003344:	2b00      	cmp	r3, #0
 8003346:	d005      	beq.n	8003354 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003348:	4b59      	ldr	r3, [pc, #356]	; (80034b0 <HAL_RCC_ClockConfig+0x1c4>)
 800334a:	685b      	ldr	r3, [r3, #4]
 800334c:	4a58      	ldr	r2, [pc, #352]	; (80034b0 <HAL_RCC_ClockConfig+0x1c4>)
 800334e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003352:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f003 0308 	and.w	r3, r3, #8
 800335c:	2b00      	cmp	r3, #0
 800335e:	d005      	beq.n	800336c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003360:	4b53      	ldr	r3, [pc, #332]	; (80034b0 <HAL_RCC_ClockConfig+0x1c4>)
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	4a52      	ldr	r2, [pc, #328]	; (80034b0 <HAL_RCC_ClockConfig+0x1c4>)
 8003366:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800336a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800336c:	4b50      	ldr	r3, [pc, #320]	; (80034b0 <HAL_RCC_ClockConfig+0x1c4>)
 800336e:	685b      	ldr	r3, [r3, #4]
 8003370:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	689b      	ldr	r3, [r3, #8]
 8003378:	494d      	ldr	r1, [pc, #308]	; (80034b0 <HAL_RCC_ClockConfig+0x1c4>)
 800337a:	4313      	orrs	r3, r2
 800337c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f003 0301 	and.w	r3, r3, #1
 8003386:	2b00      	cmp	r3, #0
 8003388:	d040      	beq.n	800340c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	685b      	ldr	r3, [r3, #4]
 800338e:	2b01      	cmp	r3, #1
 8003390:	d107      	bne.n	80033a2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003392:	4b47      	ldr	r3, [pc, #284]	; (80034b0 <HAL_RCC_ClockConfig+0x1c4>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800339a:	2b00      	cmp	r3, #0
 800339c:	d115      	bne.n	80033ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800339e:	2301      	movs	r3, #1
 80033a0:	e07f      	b.n	80034a2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	2b02      	cmp	r3, #2
 80033a8:	d107      	bne.n	80033ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033aa:	4b41      	ldr	r3, [pc, #260]	; (80034b0 <HAL_RCC_ClockConfig+0x1c4>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d109      	bne.n	80033ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033b6:	2301      	movs	r3, #1
 80033b8:	e073      	b.n	80034a2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033ba:	4b3d      	ldr	r3, [pc, #244]	; (80034b0 <HAL_RCC_ClockConfig+0x1c4>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f003 0302 	and.w	r3, r3, #2
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d101      	bne.n	80033ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033c6:	2301      	movs	r3, #1
 80033c8:	e06b      	b.n	80034a2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80033ca:	4b39      	ldr	r3, [pc, #228]	; (80034b0 <HAL_RCC_ClockConfig+0x1c4>)
 80033cc:	685b      	ldr	r3, [r3, #4]
 80033ce:	f023 0203 	bic.w	r2, r3, #3
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	685b      	ldr	r3, [r3, #4]
 80033d6:	4936      	ldr	r1, [pc, #216]	; (80034b0 <HAL_RCC_ClockConfig+0x1c4>)
 80033d8:	4313      	orrs	r3, r2
 80033da:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80033dc:	f7fd f9d0 	bl	8000780 <HAL_GetTick>
 80033e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033e2:	e00a      	b.n	80033fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033e4:	f7fd f9cc 	bl	8000780 <HAL_GetTick>
 80033e8:	4602      	mov	r2, r0
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	1ad3      	subs	r3, r2, r3
 80033ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d901      	bls.n	80033fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80033f6:	2303      	movs	r3, #3
 80033f8:	e053      	b.n	80034a2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033fa:	4b2d      	ldr	r3, [pc, #180]	; (80034b0 <HAL_RCC_ClockConfig+0x1c4>)
 80033fc:	685b      	ldr	r3, [r3, #4]
 80033fe:	f003 020c 	and.w	r2, r3, #12
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	685b      	ldr	r3, [r3, #4]
 8003406:	009b      	lsls	r3, r3, #2
 8003408:	429a      	cmp	r2, r3
 800340a:	d1eb      	bne.n	80033e4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800340c:	4b27      	ldr	r3, [pc, #156]	; (80034ac <HAL_RCC_ClockConfig+0x1c0>)
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f003 0307 	and.w	r3, r3, #7
 8003414:	683a      	ldr	r2, [r7, #0]
 8003416:	429a      	cmp	r2, r3
 8003418:	d210      	bcs.n	800343c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800341a:	4b24      	ldr	r3, [pc, #144]	; (80034ac <HAL_RCC_ClockConfig+0x1c0>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f023 0207 	bic.w	r2, r3, #7
 8003422:	4922      	ldr	r1, [pc, #136]	; (80034ac <HAL_RCC_ClockConfig+0x1c0>)
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	4313      	orrs	r3, r2
 8003428:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800342a:	4b20      	ldr	r3, [pc, #128]	; (80034ac <HAL_RCC_ClockConfig+0x1c0>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f003 0307 	and.w	r3, r3, #7
 8003432:	683a      	ldr	r2, [r7, #0]
 8003434:	429a      	cmp	r2, r3
 8003436:	d001      	beq.n	800343c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003438:	2301      	movs	r3, #1
 800343a:	e032      	b.n	80034a2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f003 0304 	and.w	r3, r3, #4
 8003444:	2b00      	cmp	r3, #0
 8003446:	d008      	beq.n	800345a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003448:	4b19      	ldr	r3, [pc, #100]	; (80034b0 <HAL_RCC_ClockConfig+0x1c4>)
 800344a:	685b      	ldr	r3, [r3, #4]
 800344c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	68db      	ldr	r3, [r3, #12]
 8003454:	4916      	ldr	r1, [pc, #88]	; (80034b0 <HAL_RCC_ClockConfig+0x1c4>)
 8003456:	4313      	orrs	r3, r2
 8003458:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f003 0308 	and.w	r3, r3, #8
 8003462:	2b00      	cmp	r3, #0
 8003464:	d009      	beq.n	800347a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003466:	4b12      	ldr	r3, [pc, #72]	; (80034b0 <HAL_RCC_ClockConfig+0x1c4>)
 8003468:	685b      	ldr	r3, [r3, #4]
 800346a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	691b      	ldr	r3, [r3, #16]
 8003472:	00db      	lsls	r3, r3, #3
 8003474:	490e      	ldr	r1, [pc, #56]	; (80034b0 <HAL_RCC_ClockConfig+0x1c4>)
 8003476:	4313      	orrs	r3, r2
 8003478:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800347a:	f000 f821 	bl	80034c0 <HAL_RCC_GetSysClockFreq>
 800347e:	4602      	mov	r2, r0
 8003480:	4b0b      	ldr	r3, [pc, #44]	; (80034b0 <HAL_RCC_ClockConfig+0x1c4>)
 8003482:	685b      	ldr	r3, [r3, #4]
 8003484:	091b      	lsrs	r3, r3, #4
 8003486:	f003 030f 	and.w	r3, r3, #15
 800348a:	490a      	ldr	r1, [pc, #40]	; (80034b4 <HAL_RCC_ClockConfig+0x1c8>)
 800348c:	5ccb      	ldrb	r3, [r1, r3]
 800348e:	fa22 f303 	lsr.w	r3, r2, r3
 8003492:	4a09      	ldr	r2, [pc, #36]	; (80034b8 <HAL_RCC_ClockConfig+0x1cc>)
 8003494:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003496:	4b09      	ldr	r3, [pc, #36]	; (80034bc <HAL_RCC_ClockConfig+0x1d0>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	4618      	mov	r0, r3
 800349c:	f7fd f92e 	bl	80006fc <HAL_InitTick>

  return HAL_OK;
 80034a0:	2300      	movs	r3, #0
}
 80034a2:	4618      	mov	r0, r3
 80034a4:	3710      	adds	r7, #16
 80034a6:	46bd      	mov	sp, r7
 80034a8:	bd80      	pop	{r7, pc}
 80034aa:	bf00      	nop
 80034ac:	40022000 	.word	0x40022000
 80034b0:	40021000 	.word	0x40021000
 80034b4:	080076c8 	.word	0x080076c8
 80034b8:	20000000 	.word	0x20000000
 80034bc:	20000004 	.word	0x20000004

080034c0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80034c0:	b490      	push	{r4, r7}
 80034c2:	b08a      	sub	sp, #40	; 0x28
 80034c4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80034c6:	4b2a      	ldr	r3, [pc, #168]	; (8003570 <HAL_RCC_GetSysClockFreq+0xb0>)
 80034c8:	1d3c      	adds	r4, r7, #4
 80034ca:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80034cc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80034d0:	f240 2301 	movw	r3, #513	; 0x201
 80034d4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80034d6:	2300      	movs	r3, #0
 80034d8:	61fb      	str	r3, [r7, #28]
 80034da:	2300      	movs	r3, #0
 80034dc:	61bb      	str	r3, [r7, #24]
 80034de:	2300      	movs	r3, #0
 80034e0:	627b      	str	r3, [r7, #36]	; 0x24
 80034e2:	2300      	movs	r3, #0
 80034e4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80034e6:	2300      	movs	r3, #0
 80034e8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80034ea:	4b22      	ldr	r3, [pc, #136]	; (8003574 <HAL_RCC_GetSysClockFreq+0xb4>)
 80034ec:	685b      	ldr	r3, [r3, #4]
 80034ee:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80034f0:	69fb      	ldr	r3, [r7, #28]
 80034f2:	f003 030c 	and.w	r3, r3, #12
 80034f6:	2b04      	cmp	r3, #4
 80034f8:	d002      	beq.n	8003500 <HAL_RCC_GetSysClockFreq+0x40>
 80034fa:	2b08      	cmp	r3, #8
 80034fc:	d003      	beq.n	8003506 <HAL_RCC_GetSysClockFreq+0x46>
 80034fe:	e02d      	b.n	800355c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003500:	4b1d      	ldr	r3, [pc, #116]	; (8003578 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003502:	623b      	str	r3, [r7, #32]
      break;
 8003504:	e02d      	b.n	8003562 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003506:	69fb      	ldr	r3, [r7, #28]
 8003508:	0c9b      	lsrs	r3, r3, #18
 800350a:	f003 030f 	and.w	r3, r3, #15
 800350e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003512:	4413      	add	r3, r2
 8003514:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003518:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800351a:	69fb      	ldr	r3, [r7, #28]
 800351c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003520:	2b00      	cmp	r3, #0
 8003522:	d013      	beq.n	800354c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003524:	4b13      	ldr	r3, [pc, #76]	; (8003574 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003526:	685b      	ldr	r3, [r3, #4]
 8003528:	0c5b      	lsrs	r3, r3, #17
 800352a:	f003 0301 	and.w	r3, r3, #1
 800352e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003532:	4413      	add	r3, r2
 8003534:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003538:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800353a:	697b      	ldr	r3, [r7, #20]
 800353c:	4a0e      	ldr	r2, [pc, #56]	; (8003578 <HAL_RCC_GetSysClockFreq+0xb8>)
 800353e:	fb02 f203 	mul.w	r2, r2, r3
 8003542:	69bb      	ldr	r3, [r7, #24]
 8003544:	fbb2 f3f3 	udiv	r3, r2, r3
 8003548:	627b      	str	r3, [r7, #36]	; 0x24
 800354a:	e004      	b.n	8003556 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800354c:	697b      	ldr	r3, [r7, #20]
 800354e:	4a0b      	ldr	r2, [pc, #44]	; (800357c <HAL_RCC_GetSysClockFreq+0xbc>)
 8003550:	fb02 f303 	mul.w	r3, r2, r3
 8003554:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003558:	623b      	str	r3, [r7, #32]
      break;
 800355a:	e002      	b.n	8003562 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800355c:	4b06      	ldr	r3, [pc, #24]	; (8003578 <HAL_RCC_GetSysClockFreq+0xb8>)
 800355e:	623b      	str	r3, [r7, #32]
      break;
 8003560:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003562:	6a3b      	ldr	r3, [r7, #32]
}
 8003564:	4618      	mov	r0, r3
 8003566:	3728      	adds	r7, #40	; 0x28
 8003568:	46bd      	mov	sp, r7
 800356a:	bc90      	pop	{r4, r7}
 800356c:	4770      	bx	lr
 800356e:	bf00      	nop
 8003570:	08007660 	.word	0x08007660
 8003574:	40021000 	.word	0x40021000
 8003578:	007a1200 	.word	0x007a1200
 800357c:	003d0900 	.word	0x003d0900

08003580 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003580:	b480      	push	{r7}
 8003582:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003584:	4b02      	ldr	r3, [pc, #8]	; (8003590 <HAL_RCC_GetHCLKFreq+0x10>)
 8003586:	681b      	ldr	r3, [r3, #0]
}
 8003588:	4618      	mov	r0, r3
 800358a:	46bd      	mov	sp, r7
 800358c:	bc80      	pop	{r7}
 800358e:	4770      	bx	lr
 8003590:	20000000 	.word	0x20000000

08003594 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003598:	f7ff fff2 	bl	8003580 <HAL_RCC_GetHCLKFreq>
 800359c:	4602      	mov	r2, r0
 800359e:	4b05      	ldr	r3, [pc, #20]	; (80035b4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80035a0:	685b      	ldr	r3, [r3, #4]
 80035a2:	0adb      	lsrs	r3, r3, #11
 80035a4:	f003 0307 	and.w	r3, r3, #7
 80035a8:	4903      	ldr	r1, [pc, #12]	; (80035b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80035aa:	5ccb      	ldrb	r3, [r1, r3]
 80035ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80035b0:	4618      	mov	r0, r3
 80035b2:	bd80      	pop	{r7, pc}
 80035b4:	40021000 	.word	0x40021000
 80035b8:	080076d8 	.word	0x080076d8

080035bc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80035bc:	b480      	push	{r7}
 80035be:	b085      	sub	sp, #20
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80035c4:	4b0a      	ldr	r3, [pc, #40]	; (80035f0 <RCC_Delay+0x34>)
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	4a0a      	ldr	r2, [pc, #40]	; (80035f4 <RCC_Delay+0x38>)
 80035ca:	fba2 2303 	umull	r2, r3, r2, r3
 80035ce:	0a5b      	lsrs	r3, r3, #9
 80035d0:	687a      	ldr	r2, [r7, #4]
 80035d2:	fb02 f303 	mul.w	r3, r2, r3
 80035d6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80035d8:	bf00      	nop
  }
  while (Delay --);
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	1e5a      	subs	r2, r3, #1
 80035de:	60fa      	str	r2, [r7, #12]
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d1f9      	bne.n	80035d8 <RCC_Delay+0x1c>
}
 80035e4:	bf00      	nop
 80035e6:	bf00      	nop
 80035e8:	3714      	adds	r7, #20
 80035ea:	46bd      	mov	sp, r7
 80035ec:	bc80      	pop	{r7}
 80035ee:	4770      	bx	lr
 80035f0:	20000000 	.word	0x20000000
 80035f4:	10624dd3 	.word	0x10624dd3

080035f8 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b086      	sub	sp, #24
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003600:	2300      	movs	r3, #0
 8003602:	613b      	str	r3, [r7, #16]
 8003604:	2300      	movs	r3, #0
 8003606:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f003 0301 	and.w	r3, r3, #1
 8003610:	2b00      	cmp	r3, #0
 8003612:	d07d      	beq.n	8003710 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8003614:	2300      	movs	r3, #0
 8003616:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003618:	4b4f      	ldr	r3, [pc, #316]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800361a:	69db      	ldr	r3, [r3, #28]
 800361c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003620:	2b00      	cmp	r3, #0
 8003622:	d10d      	bne.n	8003640 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003624:	4b4c      	ldr	r3, [pc, #304]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003626:	69db      	ldr	r3, [r3, #28]
 8003628:	4a4b      	ldr	r2, [pc, #300]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800362a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800362e:	61d3      	str	r3, [r2, #28]
 8003630:	4b49      	ldr	r3, [pc, #292]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003632:	69db      	ldr	r3, [r3, #28]
 8003634:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003638:	60bb      	str	r3, [r7, #8]
 800363a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800363c:	2301      	movs	r3, #1
 800363e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003640:	4b46      	ldr	r3, [pc, #280]	; (800375c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003648:	2b00      	cmp	r3, #0
 800364a:	d118      	bne.n	800367e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800364c:	4b43      	ldr	r3, [pc, #268]	; (800375c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4a42      	ldr	r2, [pc, #264]	; (800375c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003652:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003656:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003658:	f7fd f892 	bl	8000780 <HAL_GetTick>
 800365c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800365e:	e008      	b.n	8003672 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003660:	f7fd f88e 	bl	8000780 <HAL_GetTick>
 8003664:	4602      	mov	r2, r0
 8003666:	693b      	ldr	r3, [r7, #16]
 8003668:	1ad3      	subs	r3, r2, r3
 800366a:	2b64      	cmp	r3, #100	; 0x64
 800366c:	d901      	bls.n	8003672 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800366e:	2303      	movs	r3, #3
 8003670:	e06d      	b.n	800374e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003672:	4b3a      	ldr	r3, [pc, #232]	; (800375c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800367a:	2b00      	cmp	r3, #0
 800367c:	d0f0      	beq.n	8003660 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800367e:	4b36      	ldr	r3, [pc, #216]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003680:	6a1b      	ldr	r3, [r3, #32]
 8003682:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003686:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	2b00      	cmp	r3, #0
 800368c:	d02e      	beq.n	80036ec <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	685b      	ldr	r3, [r3, #4]
 8003692:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003696:	68fa      	ldr	r2, [r7, #12]
 8003698:	429a      	cmp	r2, r3
 800369a:	d027      	beq.n	80036ec <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800369c:	4b2e      	ldr	r3, [pc, #184]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800369e:	6a1b      	ldr	r3, [r3, #32]
 80036a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036a4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80036a6:	4b2e      	ldr	r3, [pc, #184]	; (8003760 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80036a8:	2201      	movs	r2, #1
 80036aa:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80036ac:	4b2c      	ldr	r3, [pc, #176]	; (8003760 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80036ae:	2200      	movs	r2, #0
 80036b0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80036b2:	4a29      	ldr	r2, [pc, #164]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	f003 0301 	and.w	r3, r3, #1
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d014      	beq.n	80036ec <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036c2:	f7fd f85d 	bl	8000780 <HAL_GetTick>
 80036c6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036c8:	e00a      	b.n	80036e0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036ca:	f7fd f859 	bl	8000780 <HAL_GetTick>
 80036ce:	4602      	mov	r2, r0
 80036d0:	693b      	ldr	r3, [r7, #16]
 80036d2:	1ad3      	subs	r3, r2, r3
 80036d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80036d8:	4293      	cmp	r3, r2
 80036da:	d901      	bls.n	80036e0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80036dc:	2303      	movs	r3, #3
 80036de:	e036      	b.n	800374e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036e0:	4b1d      	ldr	r3, [pc, #116]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036e2:	6a1b      	ldr	r3, [r3, #32]
 80036e4:	f003 0302 	and.w	r3, r3, #2
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d0ee      	beq.n	80036ca <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80036ec:	4b1a      	ldr	r3, [pc, #104]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036ee:	6a1b      	ldr	r3, [r3, #32]
 80036f0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	685b      	ldr	r3, [r3, #4]
 80036f8:	4917      	ldr	r1, [pc, #92]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036fa:	4313      	orrs	r3, r2
 80036fc:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80036fe:	7dfb      	ldrb	r3, [r7, #23]
 8003700:	2b01      	cmp	r3, #1
 8003702:	d105      	bne.n	8003710 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003704:	4b14      	ldr	r3, [pc, #80]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003706:	69db      	ldr	r3, [r3, #28]
 8003708:	4a13      	ldr	r2, [pc, #76]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800370a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800370e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f003 0302 	and.w	r3, r3, #2
 8003718:	2b00      	cmp	r3, #0
 800371a:	d008      	beq.n	800372e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800371c:	4b0e      	ldr	r3, [pc, #56]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800371e:	685b      	ldr	r3, [r3, #4]
 8003720:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	689b      	ldr	r3, [r3, #8]
 8003728:	490b      	ldr	r1, [pc, #44]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800372a:	4313      	orrs	r3, r2
 800372c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f003 0310 	and.w	r3, r3, #16
 8003736:	2b00      	cmp	r3, #0
 8003738:	d008      	beq.n	800374c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800373a:	4b07      	ldr	r3, [pc, #28]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800373c:	685b      	ldr	r3, [r3, #4]
 800373e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	68db      	ldr	r3, [r3, #12]
 8003746:	4904      	ldr	r1, [pc, #16]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003748:	4313      	orrs	r3, r2
 800374a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800374c:	2300      	movs	r3, #0
}
 800374e:	4618      	mov	r0, r3
 8003750:	3718      	adds	r7, #24
 8003752:	46bd      	mov	sp, r7
 8003754:	bd80      	pop	{r7, pc}
 8003756:	bf00      	nop
 8003758:	40021000 	.word	0x40021000
 800375c:	40007000 	.word	0x40007000
 8003760:	42420440 	.word	0x42420440

08003764 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003764:	b590      	push	{r4, r7, lr}
 8003766:	b08d      	sub	sp, #52	; 0x34
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800376c:	4b5a      	ldr	r3, [pc, #360]	; (80038d8 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 800376e:	f107 040c 	add.w	r4, r7, #12
 8003772:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003774:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003778:	f240 2301 	movw	r3, #513	; 0x201
 800377c:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 800377e:	2300      	movs	r3, #0
 8003780:	627b      	str	r3, [r7, #36]	; 0x24
 8003782:	2300      	movs	r3, #0
 8003784:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003786:	2300      	movs	r3, #0
 8003788:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 800378a:	2300      	movs	r3, #0
 800378c:	61fb      	str	r3, [r7, #28]
 800378e:	2300      	movs	r3, #0
 8003790:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2b10      	cmp	r3, #16
 8003796:	d00a      	beq.n	80037ae <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2b10      	cmp	r3, #16
 800379c:	f200 8091 	bhi.w	80038c2 <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2b01      	cmp	r3, #1
 80037a4:	d04c      	beq.n	8003840 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2b02      	cmp	r3, #2
 80037aa:	d07c      	beq.n	80038a6 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 80037ac:	e089      	b.n	80038c2 <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
      temp_reg = RCC->CFGR;
 80037ae:	4b4b      	ldr	r3, [pc, #300]	; (80038dc <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80037b0:	685b      	ldr	r3, [r3, #4]
 80037b2:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80037b4:	4b49      	ldr	r3, [pc, #292]	; (80038dc <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80037bc:	2b00      	cmp	r3, #0
 80037be:	f000 8082 	beq.w	80038c6 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80037c2:	69fb      	ldr	r3, [r7, #28]
 80037c4:	0c9b      	lsrs	r3, r3, #18
 80037c6:	f003 030f 	and.w	r3, r3, #15
 80037ca:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80037ce:	4413      	add	r3, r2
 80037d0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80037d4:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80037d6:	69fb      	ldr	r3, [r7, #28]
 80037d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d018      	beq.n	8003812 <HAL_RCCEx_GetPeriphCLKFreq+0xae>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80037e0:	4b3e      	ldr	r3, [pc, #248]	; (80038dc <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80037e2:	685b      	ldr	r3, [r3, #4]
 80037e4:	0c5b      	lsrs	r3, r3, #17
 80037e6:	f003 0301 	and.w	r3, r3, #1
 80037ea:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80037ee:	4413      	add	r3, r2
 80037f0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80037f4:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80037f6:	69fb      	ldr	r3, [r7, #28]
 80037f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d00d      	beq.n	800381c <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8003800:	4a37      	ldr	r2, [pc, #220]	; (80038e0 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 8003802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003804:	fbb2 f2f3 	udiv	r2, r2, r3
 8003808:	6a3b      	ldr	r3, [r7, #32]
 800380a:	fb02 f303 	mul.w	r3, r2, r3
 800380e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003810:	e004      	b.n	800381c <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003812:	6a3b      	ldr	r3, [r7, #32]
 8003814:	4a33      	ldr	r2, [pc, #204]	; (80038e4 <HAL_RCCEx_GetPeriphCLKFreq+0x180>)
 8003816:	fb02 f303 	mul.w	r3, r2, r3
 800381a:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 800381c:	4b2f      	ldr	r3, [pc, #188]	; (80038dc <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 800381e:	685b      	ldr	r3, [r3, #4]
 8003820:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003824:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003828:	d102      	bne.n	8003830 <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
          frequency = pllclk;
 800382a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800382c:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800382e:	e04a      	b.n	80038c6 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
          frequency = (pllclk * 2) / 3;
 8003830:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003832:	005b      	lsls	r3, r3, #1
 8003834:	4a2c      	ldr	r2, [pc, #176]	; (80038e8 <HAL_RCCEx_GetPeriphCLKFreq+0x184>)
 8003836:	fba2 2303 	umull	r2, r3, r2, r3
 800383a:	085b      	lsrs	r3, r3, #1
 800383c:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800383e:	e042      	b.n	80038c6 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      temp_reg = RCC->BDCR;
 8003840:	4b26      	ldr	r3, [pc, #152]	; (80038dc <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8003842:	6a1b      	ldr	r3, [r3, #32]
 8003844:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8003846:	69fb      	ldr	r3, [r7, #28]
 8003848:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800384c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003850:	d108      	bne.n	8003864 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8003852:	69fb      	ldr	r3, [r7, #28]
 8003854:	f003 0302 	and.w	r3, r3, #2
 8003858:	2b00      	cmp	r3, #0
 800385a:	d003      	beq.n	8003864 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSE_VALUE;
 800385c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003860:	62bb      	str	r3, [r7, #40]	; 0x28
 8003862:	e01f      	b.n	80038a4 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8003864:	69fb      	ldr	r3, [r7, #28]
 8003866:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800386a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800386e:	d109      	bne.n	8003884 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 8003870:	4b1a      	ldr	r3, [pc, #104]	; (80038dc <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8003872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003874:	f003 0302 	and.w	r3, r3, #2
 8003878:	2b00      	cmp	r3, #0
 800387a:	d003      	beq.n	8003884 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
        frequency = LSI_VALUE;
 800387c:	f649 4340 	movw	r3, #40000	; 0x9c40
 8003880:	62bb      	str	r3, [r7, #40]	; 0x28
 8003882:	e00f      	b.n	80038a4 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8003884:	69fb      	ldr	r3, [r7, #28]
 8003886:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800388a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800388e:	d11c      	bne.n	80038ca <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 8003890:	4b12      	ldr	r3, [pc, #72]	; (80038dc <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003898:	2b00      	cmp	r3, #0
 800389a:	d016      	beq.n	80038ca <HAL_RCCEx_GetPeriphCLKFreq+0x166>
        frequency = HSE_VALUE / 128U;
 800389c:	f24f 4324 	movw	r3, #62500	; 0xf424
 80038a0:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80038a2:	e012      	b.n	80038ca <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 80038a4:	e011      	b.n	80038ca <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80038a6:	f7ff fe75 	bl	8003594 <HAL_RCC_GetPCLK2Freq>
 80038aa:	4602      	mov	r2, r0
 80038ac:	4b0b      	ldr	r3, [pc, #44]	; (80038dc <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80038ae:	685b      	ldr	r3, [r3, #4]
 80038b0:	0b9b      	lsrs	r3, r3, #14
 80038b2:	f003 0303 	and.w	r3, r3, #3
 80038b6:	3301      	adds	r3, #1
 80038b8:	005b      	lsls	r3, r3, #1
 80038ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80038be:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80038c0:	e004      	b.n	80038cc <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 80038c2:	bf00      	nop
 80038c4:	e002      	b.n	80038cc <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 80038c6:	bf00      	nop
 80038c8:	e000      	b.n	80038cc <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 80038ca:	bf00      	nop
    }
  }
  return (frequency);
 80038cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 80038ce:	4618      	mov	r0, r3
 80038d0:	3734      	adds	r7, #52	; 0x34
 80038d2:	46bd      	mov	sp, r7
 80038d4:	bd90      	pop	{r4, r7, pc}
 80038d6:	bf00      	nop
 80038d8:	08007670 	.word	0x08007670
 80038dc:	40021000 	.word	0x40021000
 80038e0:	007a1200 	.word	0x007a1200
 80038e4:	003d0900 	.word	0x003d0900
 80038e8:	aaaaaaab 	.word	0xaaaaaaab

080038ec <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80038ec:	b084      	sub	sp, #16
 80038ee:	b480      	push	{r7}
 80038f0:	b083      	sub	sp, #12
 80038f2:	af00      	add	r7, sp, #0
 80038f4:	6078      	str	r0, [r7, #4]
 80038f6:	f107 0014 	add.w	r0, r7, #20
 80038fa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80038fe:	2300      	movs	r3, #0
}
 8003900:	4618      	mov	r0, r3
 8003902:	370c      	adds	r7, #12
 8003904:	46bd      	mov	sp, r7
 8003906:	bc80      	pop	{r7}
 8003908:	b004      	add	sp, #16
 800390a:	4770      	bx	lr

0800390c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800390c:	b480      	push	{r7}
 800390e:	b085      	sub	sp, #20
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2200      	movs	r2, #0
 8003918:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800391c:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8003920:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	b29a      	uxth	r2, r3
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800392c:	2300      	movs	r3, #0
}
 800392e:	4618      	mov	r0, r3
 8003930:	3714      	adds	r7, #20
 8003932:	46bd      	mov	sp, r7
 8003934:	bc80      	pop	{r7}
 8003936:	4770      	bx	lr

08003938 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8003938:	b480      	push	{r7}
 800393a:	b085      	sub	sp, #20
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003940:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8003944:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800394c:	b29a      	uxth	r2, r3
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	b29b      	uxth	r3, r3
 8003952:	43db      	mvns	r3, r3
 8003954:	b29b      	uxth	r3, r3
 8003956:	4013      	ands	r3, r2
 8003958:	b29a      	uxth	r2, r3
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003960:	2300      	movs	r3, #0
}
 8003962:	4618      	mov	r0, r3
 8003964:	3714      	adds	r7, #20
 8003966:	46bd      	mov	sp, r7
 8003968:	bc80      	pop	{r7}
 800396a:	4770      	bx	lr

0800396c <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 800396c:	b480      	push	{r7}
 800396e:	b083      	sub	sp, #12
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
 8003974:	460b      	mov	r3, r1
 8003976:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8003978:	2300      	movs	r3, #0
}
 800397a:	4618      	mov	r0, r3
 800397c:	370c      	adds	r7, #12
 800397e:	46bd      	mov	sp, r7
 8003980:	bc80      	pop	{r7}
 8003982:	4770      	bx	lr

08003984 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003984:	b084      	sub	sp, #16
 8003986:	b480      	push	{r7}
 8003988:	b083      	sub	sp, #12
 800398a:	af00      	add	r7, sp, #0
 800398c:	6078      	str	r0, [r7, #4]
 800398e:	f107 0014 	add.w	r0, r7, #20
 8003992:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	2201      	movs	r2, #1
 800399a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2200      	movs	r2, #0
 80039a2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	2200      	movs	r2, #0
 80039aa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	2200      	movs	r2, #0
 80039b2:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80039b6:	2300      	movs	r3, #0
}
 80039b8:	4618      	mov	r0, r3
 80039ba:	370c      	adds	r7, #12
 80039bc:	46bd      	mov	sp, r7
 80039be:	bc80      	pop	{r7}
 80039c0:	b004      	add	sp, #16
 80039c2:	4770      	bx	lr

080039c4 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80039c4:	b480      	push	{r7}
 80039c6:	b09b      	sub	sp, #108	; 0x6c
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
 80039cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80039ce:	2300      	movs	r3, #0
 80039d0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80039d4:	687a      	ldr	r2, [r7, #4]
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	781b      	ldrb	r3, [r3, #0]
 80039da:	009b      	lsls	r3, r3, #2
 80039dc:	4413      	add	r3, r2
 80039de:	881b      	ldrh	r3, [r3, #0]
 80039e0:	b29b      	uxth	r3, r3
 80039e2:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80039e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039ea:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	78db      	ldrb	r3, [r3, #3]
 80039f2:	2b03      	cmp	r3, #3
 80039f4:	d81f      	bhi.n	8003a36 <USB_ActivateEndpoint+0x72>
 80039f6:	a201      	add	r2, pc, #4	; (adr r2, 80039fc <USB_ActivateEndpoint+0x38>)
 80039f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039fc:	08003a0d 	.word	0x08003a0d
 8003a00:	08003a29 	.word	0x08003a29
 8003a04:	08003a3f 	.word	0x08003a3f
 8003a08:	08003a1b 	.word	0x08003a1b
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8003a0c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003a10:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003a14:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8003a18:	e012      	b.n	8003a40 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8003a1a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003a1e:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8003a22:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8003a26:	e00b      	b.n	8003a40 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8003a28:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003a2c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003a30:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8003a34:	e004      	b.n	8003a40 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8003a36:	2301      	movs	r3, #1
 8003a38:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8003a3c:	e000      	b.n	8003a40 <USB_ActivateEndpoint+0x7c>
      break;
 8003a3e:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8003a40:	687a      	ldr	r2, [r7, #4]
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	781b      	ldrb	r3, [r3, #0]
 8003a46:	009b      	lsls	r3, r3, #2
 8003a48:	441a      	add	r2, r3
 8003a4a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003a4e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003a52:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003a56:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a5e:	b29b      	uxth	r3, r3
 8003a60:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8003a62:	687a      	ldr	r2, [r7, #4]
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	781b      	ldrb	r3, [r3, #0]
 8003a68:	009b      	lsls	r3, r3, #2
 8003a6a:	4413      	add	r3, r2
 8003a6c:	881b      	ldrh	r3, [r3, #0]
 8003a6e:	b29b      	uxth	r3, r3
 8003a70:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a78:	b29a      	uxth	r2, r3
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	781b      	ldrb	r3, [r3, #0]
 8003a7e:	b29b      	uxth	r3, r3
 8003a80:	4313      	orrs	r3, r2
 8003a82:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8003a86:	687a      	ldr	r2, [r7, #4]
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	781b      	ldrb	r3, [r3, #0]
 8003a8c:	009b      	lsls	r3, r3, #2
 8003a8e:	441a      	add	r2, r3
 8003a90:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8003a94:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003a98:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003a9c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003aa0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003aa4:	b29b      	uxth	r3, r3
 8003aa6:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	7b1b      	ldrb	r3, [r3, #12]
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	f040 8149 	bne.w	8003d44 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	785b      	ldrb	r3, [r3, #1]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	f000 8084 	beq.w	8003bc4 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	617b      	str	r3, [r7, #20]
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003ac6:	b29b      	uxth	r3, r3
 8003ac8:	461a      	mov	r2, r3
 8003aca:	697b      	ldr	r3, [r7, #20]
 8003acc:	4413      	add	r3, r2
 8003ace:	617b      	str	r3, [r7, #20]
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	781b      	ldrb	r3, [r3, #0]
 8003ad4:	011a      	lsls	r2, r3, #4
 8003ad6:	697b      	ldr	r3, [r7, #20]
 8003ad8:	4413      	add	r3, r2
 8003ada:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003ade:	613b      	str	r3, [r7, #16]
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	88db      	ldrh	r3, [r3, #6]
 8003ae4:	085b      	lsrs	r3, r3, #1
 8003ae6:	b29b      	uxth	r3, r3
 8003ae8:	005b      	lsls	r3, r3, #1
 8003aea:	b29a      	uxth	r2, r3
 8003aec:	693b      	ldr	r3, [r7, #16]
 8003aee:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003af0:	687a      	ldr	r2, [r7, #4]
 8003af2:	683b      	ldr	r3, [r7, #0]
 8003af4:	781b      	ldrb	r3, [r3, #0]
 8003af6:	009b      	lsls	r3, r3, #2
 8003af8:	4413      	add	r3, r2
 8003afa:	881b      	ldrh	r3, [r3, #0]
 8003afc:	81fb      	strh	r3, [r7, #14]
 8003afe:	89fb      	ldrh	r3, [r7, #14]
 8003b00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d01b      	beq.n	8003b40 <USB_ActivateEndpoint+0x17c>
 8003b08:	687a      	ldr	r2, [r7, #4]
 8003b0a:	683b      	ldr	r3, [r7, #0]
 8003b0c:	781b      	ldrb	r3, [r3, #0]
 8003b0e:	009b      	lsls	r3, r3, #2
 8003b10:	4413      	add	r3, r2
 8003b12:	881b      	ldrh	r3, [r3, #0]
 8003b14:	b29b      	uxth	r3, r3
 8003b16:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b1e:	81bb      	strh	r3, [r7, #12]
 8003b20:	687a      	ldr	r2, [r7, #4]
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	781b      	ldrb	r3, [r3, #0]
 8003b26:	009b      	lsls	r3, r3, #2
 8003b28:	441a      	add	r2, r3
 8003b2a:	89bb      	ldrh	r3, [r7, #12]
 8003b2c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003b30:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003b34:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b38:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003b3c:	b29b      	uxth	r3, r3
 8003b3e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	78db      	ldrb	r3, [r3, #3]
 8003b44:	2b01      	cmp	r3, #1
 8003b46:	d020      	beq.n	8003b8a <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003b48:	687a      	ldr	r2, [r7, #4]
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	781b      	ldrb	r3, [r3, #0]
 8003b4e:	009b      	lsls	r3, r3, #2
 8003b50:	4413      	add	r3, r2
 8003b52:	881b      	ldrh	r3, [r3, #0]
 8003b54:	b29b      	uxth	r3, r3
 8003b56:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b5a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003b5e:	813b      	strh	r3, [r7, #8]
 8003b60:	893b      	ldrh	r3, [r7, #8]
 8003b62:	f083 0320 	eor.w	r3, r3, #32
 8003b66:	813b      	strh	r3, [r7, #8]
 8003b68:	687a      	ldr	r2, [r7, #4]
 8003b6a:	683b      	ldr	r3, [r7, #0]
 8003b6c:	781b      	ldrb	r3, [r3, #0]
 8003b6e:	009b      	lsls	r3, r3, #2
 8003b70:	441a      	add	r2, r3
 8003b72:	893b      	ldrh	r3, [r7, #8]
 8003b74:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003b78:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003b7c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b84:	b29b      	uxth	r3, r3
 8003b86:	8013      	strh	r3, [r2, #0]
 8003b88:	e27f      	b.n	800408a <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003b8a:	687a      	ldr	r2, [r7, #4]
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	781b      	ldrb	r3, [r3, #0]
 8003b90:	009b      	lsls	r3, r3, #2
 8003b92:	4413      	add	r3, r2
 8003b94:	881b      	ldrh	r3, [r3, #0]
 8003b96:	b29b      	uxth	r3, r3
 8003b98:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b9c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003ba0:	817b      	strh	r3, [r7, #10]
 8003ba2:	687a      	ldr	r2, [r7, #4]
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	781b      	ldrb	r3, [r3, #0]
 8003ba8:	009b      	lsls	r3, r3, #2
 8003baa:	441a      	add	r2, r3
 8003bac:	897b      	ldrh	r3, [r7, #10]
 8003bae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003bb2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003bb6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003bba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003bbe:	b29b      	uxth	r3, r3
 8003bc0:	8013      	strh	r3, [r2, #0]
 8003bc2:	e262      	b.n	800408a <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003bce:	b29b      	uxth	r3, r3
 8003bd0:	461a      	mov	r2, r3
 8003bd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bd4:	4413      	add	r3, r2
 8003bd6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	781b      	ldrb	r3, [r3, #0]
 8003bdc:	011a      	lsls	r2, r3, #4
 8003bde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003be0:	4413      	add	r3, r2
 8003be2:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8003be6:	62bb      	str	r3, [r7, #40]	; 0x28
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	88db      	ldrh	r3, [r3, #6]
 8003bec:	085b      	lsrs	r3, r3, #1
 8003bee:	b29b      	uxth	r3, r3
 8003bf0:	005b      	lsls	r3, r3, #1
 8003bf2:	b29a      	uxth	r2, r3
 8003bf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bf6:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	627b      	str	r3, [r7, #36]	; 0x24
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003c02:	b29b      	uxth	r3, r3
 8003c04:	461a      	mov	r2, r3
 8003c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c08:	4413      	add	r3, r2
 8003c0a:	627b      	str	r3, [r7, #36]	; 0x24
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	781b      	ldrb	r3, [r3, #0]
 8003c10:	011a      	lsls	r2, r3, #4
 8003c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c14:	4413      	add	r3, r2
 8003c16:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003c1a:	623b      	str	r3, [r7, #32]
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	691b      	ldr	r3, [r3, #16]
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d112      	bne.n	8003c4a <USB_ActivateEndpoint+0x286>
 8003c24:	6a3b      	ldr	r3, [r7, #32]
 8003c26:	881b      	ldrh	r3, [r3, #0]
 8003c28:	b29b      	uxth	r3, r3
 8003c2a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003c2e:	b29a      	uxth	r2, r3
 8003c30:	6a3b      	ldr	r3, [r7, #32]
 8003c32:	801a      	strh	r2, [r3, #0]
 8003c34:	6a3b      	ldr	r3, [r7, #32]
 8003c36:	881b      	ldrh	r3, [r3, #0]
 8003c38:	b29b      	uxth	r3, r3
 8003c3a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003c3e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003c42:	b29a      	uxth	r2, r3
 8003c44:	6a3b      	ldr	r3, [r7, #32]
 8003c46:	801a      	strh	r2, [r3, #0]
 8003c48:	e02f      	b.n	8003caa <USB_ActivateEndpoint+0x2e6>
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	691b      	ldr	r3, [r3, #16]
 8003c4e:	2b3e      	cmp	r3, #62	; 0x3e
 8003c50:	d813      	bhi.n	8003c7a <USB_ActivateEndpoint+0x2b6>
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	691b      	ldr	r3, [r3, #16]
 8003c56:	085b      	lsrs	r3, r3, #1
 8003c58:	663b      	str	r3, [r7, #96]	; 0x60
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	691b      	ldr	r3, [r3, #16]
 8003c5e:	f003 0301 	and.w	r3, r3, #1
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d002      	beq.n	8003c6c <USB_ActivateEndpoint+0x2a8>
 8003c66:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003c68:	3301      	adds	r3, #1
 8003c6a:	663b      	str	r3, [r7, #96]	; 0x60
 8003c6c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003c6e:	b29b      	uxth	r3, r3
 8003c70:	029b      	lsls	r3, r3, #10
 8003c72:	b29a      	uxth	r2, r3
 8003c74:	6a3b      	ldr	r3, [r7, #32]
 8003c76:	801a      	strh	r2, [r3, #0]
 8003c78:	e017      	b.n	8003caa <USB_ActivateEndpoint+0x2e6>
 8003c7a:	683b      	ldr	r3, [r7, #0]
 8003c7c:	691b      	ldr	r3, [r3, #16]
 8003c7e:	095b      	lsrs	r3, r3, #5
 8003c80:	663b      	str	r3, [r7, #96]	; 0x60
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	691b      	ldr	r3, [r3, #16]
 8003c86:	f003 031f 	and.w	r3, r3, #31
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d102      	bne.n	8003c94 <USB_ActivateEndpoint+0x2d0>
 8003c8e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003c90:	3b01      	subs	r3, #1
 8003c92:	663b      	str	r3, [r7, #96]	; 0x60
 8003c94:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003c96:	b29b      	uxth	r3, r3
 8003c98:	029b      	lsls	r3, r3, #10
 8003c9a:	b29b      	uxth	r3, r3
 8003c9c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003ca0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003ca4:	b29a      	uxth	r2, r3
 8003ca6:	6a3b      	ldr	r3, [r7, #32]
 8003ca8:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003caa:	687a      	ldr	r2, [r7, #4]
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	781b      	ldrb	r3, [r3, #0]
 8003cb0:	009b      	lsls	r3, r3, #2
 8003cb2:	4413      	add	r3, r2
 8003cb4:	881b      	ldrh	r3, [r3, #0]
 8003cb6:	83fb      	strh	r3, [r7, #30]
 8003cb8:	8bfb      	ldrh	r3, [r7, #30]
 8003cba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d01b      	beq.n	8003cfa <USB_ActivateEndpoint+0x336>
 8003cc2:	687a      	ldr	r2, [r7, #4]
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	781b      	ldrb	r3, [r3, #0]
 8003cc8:	009b      	lsls	r3, r3, #2
 8003cca:	4413      	add	r3, r2
 8003ccc:	881b      	ldrh	r3, [r3, #0]
 8003cce:	b29b      	uxth	r3, r3
 8003cd0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003cd4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cd8:	83bb      	strh	r3, [r7, #28]
 8003cda:	687a      	ldr	r2, [r7, #4]
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	781b      	ldrb	r3, [r3, #0]
 8003ce0:	009b      	lsls	r3, r3, #2
 8003ce2:	441a      	add	r2, r3
 8003ce4:	8bbb      	ldrh	r3, [r7, #28]
 8003ce6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003cea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003cee:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003cf2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003cf6:	b29b      	uxth	r3, r3
 8003cf8:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003cfa:	687a      	ldr	r2, [r7, #4]
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	781b      	ldrb	r3, [r3, #0]
 8003d00:	009b      	lsls	r3, r3, #2
 8003d02:	4413      	add	r3, r2
 8003d04:	881b      	ldrh	r3, [r3, #0]
 8003d06:	b29b      	uxth	r3, r3
 8003d08:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003d0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d10:	837b      	strh	r3, [r7, #26]
 8003d12:	8b7b      	ldrh	r3, [r7, #26]
 8003d14:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8003d18:	837b      	strh	r3, [r7, #26]
 8003d1a:	8b7b      	ldrh	r3, [r7, #26]
 8003d1c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003d20:	837b      	strh	r3, [r7, #26]
 8003d22:	687a      	ldr	r2, [r7, #4]
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	781b      	ldrb	r3, [r3, #0]
 8003d28:	009b      	lsls	r3, r3, #2
 8003d2a:	441a      	add	r2, r3
 8003d2c:	8b7b      	ldrh	r3, [r7, #26]
 8003d2e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003d32:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003d36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d3e:	b29b      	uxth	r3, r3
 8003d40:	8013      	strh	r3, [r2, #0]
 8003d42:	e1a2      	b.n	800408a <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8003d44:	687a      	ldr	r2, [r7, #4]
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	781b      	ldrb	r3, [r3, #0]
 8003d4a:	009b      	lsls	r3, r3, #2
 8003d4c:	4413      	add	r3, r2
 8003d4e:	881b      	ldrh	r3, [r3, #0]
 8003d50:	b29b      	uxth	r3, r3
 8003d52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d5a:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8003d5e:	687a      	ldr	r2, [r7, #4]
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	781b      	ldrb	r3, [r3, #0]
 8003d64:	009b      	lsls	r3, r3, #2
 8003d66:	441a      	add	r2, r3
 8003d68:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8003d6c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003d70:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003d74:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8003d78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d7c:	b29b      	uxth	r3, r3
 8003d7e:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	65bb      	str	r3, [r7, #88]	; 0x58
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003d8a:	b29b      	uxth	r3, r3
 8003d8c:	461a      	mov	r2, r3
 8003d8e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003d90:	4413      	add	r3, r2
 8003d92:	65bb      	str	r3, [r7, #88]	; 0x58
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	781b      	ldrb	r3, [r3, #0]
 8003d98:	011a      	lsls	r2, r3, #4
 8003d9a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003d9c:	4413      	add	r3, r2
 8003d9e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003da2:	657b      	str	r3, [r7, #84]	; 0x54
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	891b      	ldrh	r3, [r3, #8]
 8003da8:	085b      	lsrs	r3, r3, #1
 8003daa:	b29b      	uxth	r3, r3
 8003dac:	005b      	lsls	r3, r3, #1
 8003dae:	b29a      	uxth	r2, r3
 8003db0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003db2:	801a      	strh	r2, [r3, #0]
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	653b      	str	r3, [r7, #80]	; 0x50
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003dbe:	b29b      	uxth	r3, r3
 8003dc0:	461a      	mov	r2, r3
 8003dc2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003dc4:	4413      	add	r3, r2
 8003dc6:	653b      	str	r3, [r7, #80]	; 0x50
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	781b      	ldrb	r3, [r3, #0]
 8003dcc:	011a      	lsls	r2, r3, #4
 8003dce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003dd0:	4413      	add	r3, r2
 8003dd2:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8003dd6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	895b      	ldrh	r3, [r3, #10]
 8003ddc:	085b      	lsrs	r3, r3, #1
 8003dde:	b29b      	uxth	r3, r3
 8003de0:	005b      	lsls	r3, r3, #1
 8003de2:	b29a      	uxth	r2, r3
 8003de4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003de6:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	785b      	ldrb	r3, [r3, #1]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	f040 8091 	bne.w	8003f14 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003df2:	687a      	ldr	r2, [r7, #4]
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	781b      	ldrb	r3, [r3, #0]
 8003df8:	009b      	lsls	r3, r3, #2
 8003dfa:	4413      	add	r3, r2
 8003dfc:	881b      	ldrh	r3, [r3, #0]
 8003dfe:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8003e00:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8003e02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d01b      	beq.n	8003e42 <USB_ActivateEndpoint+0x47e>
 8003e0a:	687a      	ldr	r2, [r7, #4]
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	781b      	ldrb	r3, [r3, #0]
 8003e10:	009b      	lsls	r3, r3, #2
 8003e12:	4413      	add	r3, r2
 8003e14:	881b      	ldrh	r3, [r3, #0]
 8003e16:	b29b      	uxth	r3, r3
 8003e18:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e20:	877b      	strh	r3, [r7, #58]	; 0x3a
 8003e22:	687a      	ldr	r2, [r7, #4]
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	781b      	ldrb	r3, [r3, #0]
 8003e28:	009b      	lsls	r3, r3, #2
 8003e2a:	441a      	add	r2, r3
 8003e2c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8003e2e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003e32:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003e36:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003e3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e3e:	b29b      	uxth	r3, r3
 8003e40:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003e42:	687a      	ldr	r2, [r7, #4]
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	781b      	ldrb	r3, [r3, #0]
 8003e48:	009b      	lsls	r3, r3, #2
 8003e4a:	4413      	add	r3, r2
 8003e4c:	881b      	ldrh	r3, [r3, #0]
 8003e4e:	873b      	strh	r3, [r7, #56]	; 0x38
 8003e50:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8003e52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d01b      	beq.n	8003e92 <USB_ActivateEndpoint+0x4ce>
 8003e5a:	687a      	ldr	r2, [r7, #4]
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	781b      	ldrb	r3, [r3, #0]
 8003e60:	009b      	lsls	r3, r3, #2
 8003e62:	4413      	add	r3, r2
 8003e64:	881b      	ldrh	r3, [r3, #0]
 8003e66:	b29b      	uxth	r3, r3
 8003e68:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e70:	86fb      	strh	r3, [r7, #54]	; 0x36
 8003e72:	687a      	ldr	r2, [r7, #4]
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	781b      	ldrb	r3, [r3, #0]
 8003e78:	009b      	lsls	r3, r3, #2
 8003e7a:	441a      	add	r2, r3
 8003e7c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003e7e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003e82:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003e86:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e8a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003e8e:	b29b      	uxth	r3, r3
 8003e90:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003e92:	687a      	ldr	r2, [r7, #4]
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	781b      	ldrb	r3, [r3, #0]
 8003e98:	009b      	lsls	r3, r3, #2
 8003e9a:	4413      	add	r3, r2
 8003e9c:	881b      	ldrh	r3, [r3, #0]
 8003e9e:	b29b      	uxth	r3, r3
 8003ea0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003ea4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ea8:	86bb      	strh	r3, [r7, #52]	; 0x34
 8003eaa:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8003eac:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8003eb0:	86bb      	strh	r3, [r7, #52]	; 0x34
 8003eb2:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8003eb4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003eb8:	86bb      	strh	r3, [r7, #52]	; 0x34
 8003eba:	687a      	ldr	r2, [r7, #4]
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	781b      	ldrb	r3, [r3, #0]
 8003ec0:	009b      	lsls	r3, r3, #2
 8003ec2:	441a      	add	r2, r3
 8003ec4:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8003ec6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003eca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003ece:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003ed2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ed6:	b29b      	uxth	r3, r3
 8003ed8:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003eda:	687a      	ldr	r2, [r7, #4]
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	781b      	ldrb	r3, [r3, #0]
 8003ee0:	009b      	lsls	r3, r3, #2
 8003ee2:	4413      	add	r3, r2
 8003ee4:	881b      	ldrh	r3, [r3, #0]
 8003ee6:	b29b      	uxth	r3, r3
 8003ee8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003eec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003ef0:	867b      	strh	r3, [r7, #50]	; 0x32
 8003ef2:	687a      	ldr	r2, [r7, #4]
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	781b      	ldrb	r3, [r3, #0]
 8003ef8:	009b      	lsls	r3, r3, #2
 8003efa:	441a      	add	r2, r3
 8003efc:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8003efe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003f02:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003f06:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f0e:	b29b      	uxth	r3, r3
 8003f10:	8013      	strh	r3, [r2, #0]
 8003f12:	e0ba      	b.n	800408a <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003f14:	687a      	ldr	r2, [r7, #4]
 8003f16:	683b      	ldr	r3, [r7, #0]
 8003f18:	781b      	ldrb	r3, [r3, #0]
 8003f1a:	009b      	lsls	r3, r3, #2
 8003f1c:	4413      	add	r3, r2
 8003f1e:	881b      	ldrh	r3, [r3, #0]
 8003f20:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8003f24:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003f28:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d01d      	beq.n	8003f6c <USB_ActivateEndpoint+0x5a8>
 8003f30:	687a      	ldr	r2, [r7, #4]
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	781b      	ldrb	r3, [r3, #0]
 8003f36:	009b      	lsls	r3, r3, #2
 8003f38:	4413      	add	r3, r2
 8003f3a:	881b      	ldrh	r3, [r3, #0]
 8003f3c:	b29b      	uxth	r3, r3
 8003f3e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f46:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8003f4a:	687a      	ldr	r2, [r7, #4]
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	781b      	ldrb	r3, [r3, #0]
 8003f50:	009b      	lsls	r3, r3, #2
 8003f52:	441a      	add	r2, r3
 8003f54:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003f58:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003f5c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003f60:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003f64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f68:	b29b      	uxth	r3, r3
 8003f6a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003f6c:	687a      	ldr	r2, [r7, #4]
 8003f6e:	683b      	ldr	r3, [r7, #0]
 8003f70:	781b      	ldrb	r3, [r3, #0]
 8003f72:	009b      	lsls	r3, r3, #2
 8003f74:	4413      	add	r3, r2
 8003f76:	881b      	ldrh	r3, [r3, #0]
 8003f78:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8003f7c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8003f80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d01d      	beq.n	8003fc4 <USB_ActivateEndpoint+0x600>
 8003f88:	687a      	ldr	r2, [r7, #4]
 8003f8a:	683b      	ldr	r3, [r7, #0]
 8003f8c:	781b      	ldrb	r3, [r3, #0]
 8003f8e:	009b      	lsls	r3, r3, #2
 8003f90:	4413      	add	r3, r2
 8003f92:	881b      	ldrh	r3, [r3, #0]
 8003f94:	b29b      	uxth	r3, r3
 8003f96:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f9e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8003fa2:	687a      	ldr	r2, [r7, #4]
 8003fa4:	683b      	ldr	r3, [r7, #0]
 8003fa6:	781b      	ldrb	r3, [r3, #0]
 8003fa8:	009b      	lsls	r3, r3, #2
 8003faa:	441a      	add	r2, r3
 8003fac:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8003fb0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003fb4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003fb8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003fbc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003fc0:	b29b      	uxth	r3, r3
 8003fc2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003fc4:	683b      	ldr	r3, [r7, #0]
 8003fc6:	78db      	ldrb	r3, [r3, #3]
 8003fc8:	2b01      	cmp	r3, #1
 8003fca:	d024      	beq.n	8004016 <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003fcc:	687a      	ldr	r2, [r7, #4]
 8003fce:	683b      	ldr	r3, [r7, #0]
 8003fd0:	781b      	ldrb	r3, [r3, #0]
 8003fd2:	009b      	lsls	r3, r3, #2
 8003fd4:	4413      	add	r3, r2
 8003fd6:	881b      	ldrh	r3, [r3, #0]
 8003fd8:	b29b      	uxth	r3, r3
 8003fda:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003fde:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003fe2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8003fe6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003fea:	f083 0320 	eor.w	r3, r3, #32
 8003fee:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8003ff2:	687a      	ldr	r2, [r7, #4]
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	781b      	ldrb	r3, [r3, #0]
 8003ff8:	009b      	lsls	r3, r3, #2
 8003ffa:	441a      	add	r2, r3
 8003ffc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004000:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004004:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004008:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800400c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004010:	b29b      	uxth	r3, r3
 8004012:	8013      	strh	r3, [r2, #0]
 8004014:	e01d      	b.n	8004052 <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004016:	687a      	ldr	r2, [r7, #4]
 8004018:	683b      	ldr	r3, [r7, #0]
 800401a:	781b      	ldrb	r3, [r3, #0]
 800401c:	009b      	lsls	r3, r3, #2
 800401e:	4413      	add	r3, r2
 8004020:	881b      	ldrh	r3, [r3, #0]
 8004022:	b29b      	uxth	r3, r3
 8004024:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004028:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800402c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8004030:	687a      	ldr	r2, [r7, #4]
 8004032:	683b      	ldr	r3, [r7, #0]
 8004034:	781b      	ldrb	r3, [r3, #0]
 8004036:	009b      	lsls	r3, r3, #2
 8004038:	441a      	add	r2, r3
 800403a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800403e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004042:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004046:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800404a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800404e:	b29b      	uxth	r3, r3
 8004050:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004052:	687a      	ldr	r2, [r7, #4]
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	781b      	ldrb	r3, [r3, #0]
 8004058:	009b      	lsls	r3, r3, #2
 800405a:	4413      	add	r3, r2
 800405c:	881b      	ldrh	r3, [r3, #0]
 800405e:	b29b      	uxth	r3, r3
 8004060:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004064:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004068:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800406a:	687a      	ldr	r2, [r7, #4]
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	781b      	ldrb	r3, [r3, #0]
 8004070:	009b      	lsls	r3, r3, #2
 8004072:	441a      	add	r2, r3
 8004074:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8004076:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800407a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800407e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004082:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004086:	b29b      	uxth	r3, r3
 8004088:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 800408a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800408e:	4618      	mov	r0, r3
 8004090:	376c      	adds	r7, #108	; 0x6c
 8004092:	46bd      	mov	sp, r7
 8004094:	bc80      	pop	{r7}
 8004096:	4770      	bx	lr

08004098 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004098:	b480      	push	{r7}
 800409a:	b08d      	sub	sp, #52	; 0x34
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
 80040a0:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	7b1b      	ldrb	r3, [r3, #12]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	f040 808e 	bne.w	80041c8 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	785b      	ldrb	r3, [r3, #1]
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d044      	beq.n	800413e <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80040b4:	687a      	ldr	r2, [r7, #4]
 80040b6:	683b      	ldr	r3, [r7, #0]
 80040b8:	781b      	ldrb	r3, [r3, #0]
 80040ba:	009b      	lsls	r3, r3, #2
 80040bc:	4413      	add	r3, r2
 80040be:	881b      	ldrh	r3, [r3, #0]
 80040c0:	81bb      	strh	r3, [r7, #12]
 80040c2:	89bb      	ldrh	r3, [r7, #12]
 80040c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d01b      	beq.n	8004104 <USB_DeactivateEndpoint+0x6c>
 80040cc:	687a      	ldr	r2, [r7, #4]
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	781b      	ldrb	r3, [r3, #0]
 80040d2:	009b      	lsls	r3, r3, #2
 80040d4:	4413      	add	r3, r2
 80040d6:	881b      	ldrh	r3, [r3, #0]
 80040d8:	b29b      	uxth	r3, r3
 80040da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80040de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040e2:	817b      	strh	r3, [r7, #10]
 80040e4:	687a      	ldr	r2, [r7, #4]
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	781b      	ldrb	r3, [r3, #0]
 80040ea:	009b      	lsls	r3, r3, #2
 80040ec:	441a      	add	r2, r3
 80040ee:	897b      	ldrh	r3, [r7, #10]
 80040f0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80040f4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80040f8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80040fc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004100:	b29b      	uxth	r3, r3
 8004102:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004104:	687a      	ldr	r2, [r7, #4]
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	781b      	ldrb	r3, [r3, #0]
 800410a:	009b      	lsls	r3, r3, #2
 800410c:	4413      	add	r3, r2
 800410e:	881b      	ldrh	r3, [r3, #0]
 8004110:	b29b      	uxth	r3, r3
 8004112:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004116:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800411a:	813b      	strh	r3, [r7, #8]
 800411c:	687a      	ldr	r2, [r7, #4]
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	781b      	ldrb	r3, [r3, #0]
 8004122:	009b      	lsls	r3, r3, #2
 8004124:	441a      	add	r2, r3
 8004126:	893b      	ldrh	r3, [r7, #8]
 8004128:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800412c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004130:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004134:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004138:	b29b      	uxth	r3, r3
 800413a:	8013      	strh	r3, [r2, #0]
 800413c:	e192      	b.n	8004464 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800413e:	687a      	ldr	r2, [r7, #4]
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	781b      	ldrb	r3, [r3, #0]
 8004144:	009b      	lsls	r3, r3, #2
 8004146:	4413      	add	r3, r2
 8004148:	881b      	ldrh	r3, [r3, #0]
 800414a:	827b      	strh	r3, [r7, #18]
 800414c:	8a7b      	ldrh	r3, [r7, #18]
 800414e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004152:	2b00      	cmp	r3, #0
 8004154:	d01b      	beq.n	800418e <USB_DeactivateEndpoint+0xf6>
 8004156:	687a      	ldr	r2, [r7, #4]
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	781b      	ldrb	r3, [r3, #0]
 800415c:	009b      	lsls	r3, r3, #2
 800415e:	4413      	add	r3, r2
 8004160:	881b      	ldrh	r3, [r3, #0]
 8004162:	b29b      	uxth	r3, r3
 8004164:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004168:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800416c:	823b      	strh	r3, [r7, #16]
 800416e:	687a      	ldr	r2, [r7, #4]
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	781b      	ldrb	r3, [r3, #0]
 8004174:	009b      	lsls	r3, r3, #2
 8004176:	441a      	add	r2, r3
 8004178:	8a3b      	ldrh	r3, [r7, #16]
 800417a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800417e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004182:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004186:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800418a:	b29b      	uxth	r3, r3
 800418c:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800418e:	687a      	ldr	r2, [r7, #4]
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	781b      	ldrb	r3, [r3, #0]
 8004194:	009b      	lsls	r3, r3, #2
 8004196:	4413      	add	r3, r2
 8004198:	881b      	ldrh	r3, [r3, #0]
 800419a:	b29b      	uxth	r3, r3
 800419c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80041a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041a4:	81fb      	strh	r3, [r7, #14]
 80041a6:	687a      	ldr	r2, [r7, #4]
 80041a8:	683b      	ldr	r3, [r7, #0]
 80041aa:	781b      	ldrb	r3, [r3, #0]
 80041ac:	009b      	lsls	r3, r3, #2
 80041ae:	441a      	add	r2, r3
 80041b0:	89fb      	ldrh	r3, [r7, #14]
 80041b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80041b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80041ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80041be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80041c2:	b29b      	uxth	r3, r3
 80041c4:	8013      	strh	r3, [r2, #0]
 80041c6:	e14d      	b.n	8004464 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 80041c8:	683b      	ldr	r3, [r7, #0]
 80041ca:	785b      	ldrb	r3, [r3, #1]
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	f040 80a5 	bne.w	800431c <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80041d2:	687a      	ldr	r2, [r7, #4]
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	781b      	ldrb	r3, [r3, #0]
 80041d8:	009b      	lsls	r3, r3, #2
 80041da:	4413      	add	r3, r2
 80041dc:	881b      	ldrh	r3, [r3, #0]
 80041de:	843b      	strh	r3, [r7, #32]
 80041e0:	8c3b      	ldrh	r3, [r7, #32]
 80041e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d01b      	beq.n	8004222 <USB_DeactivateEndpoint+0x18a>
 80041ea:	687a      	ldr	r2, [r7, #4]
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	781b      	ldrb	r3, [r3, #0]
 80041f0:	009b      	lsls	r3, r3, #2
 80041f2:	4413      	add	r3, r2
 80041f4:	881b      	ldrh	r3, [r3, #0]
 80041f6:	b29b      	uxth	r3, r3
 80041f8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80041fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004200:	83fb      	strh	r3, [r7, #30]
 8004202:	687a      	ldr	r2, [r7, #4]
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	781b      	ldrb	r3, [r3, #0]
 8004208:	009b      	lsls	r3, r3, #2
 800420a:	441a      	add	r2, r3
 800420c:	8bfb      	ldrh	r3, [r7, #30]
 800420e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004212:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004216:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800421a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800421e:	b29b      	uxth	r3, r3
 8004220:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004222:	687a      	ldr	r2, [r7, #4]
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	781b      	ldrb	r3, [r3, #0]
 8004228:	009b      	lsls	r3, r3, #2
 800422a:	4413      	add	r3, r2
 800422c:	881b      	ldrh	r3, [r3, #0]
 800422e:	83bb      	strh	r3, [r7, #28]
 8004230:	8bbb      	ldrh	r3, [r7, #28]
 8004232:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004236:	2b00      	cmp	r3, #0
 8004238:	d01b      	beq.n	8004272 <USB_DeactivateEndpoint+0x1da>
 800423a:	687a      	ldr	r2, [r7, #4]
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	781b      	ldrb	r3, [r3, #0]
 8004240:	009b      	lsls	r3, r3, #2
 8004242:	4413      	add	r3, r2
 8004244:	881b      	ldrh	r3, [r3, #0]
 8004246:	b29b      	uxth	r3, r3
 8004248:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800424c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004250:	837b      	strh	r3, [r7, #26]
 8004252:	687a      	ldr	r2, [r7, #4]
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	781b      	ldrb	r3, [r3, #0]
 8004258:	009b      	lsls	r3, r3, #2
 800425a:	441a      	add	r2, r3
 800425c:	8b7b      	ldrh	r3, [r7, #26]
 800425e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004262:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004266:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800426a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800426e:	b29b      	uxth	r3, r3
 8004270:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8004272:	687a      	ldr	r2, [r7, #4]
 8004274:	683b      	ldr	r3, [r7, #0]
 8004276:	781b      	ldrb	r3, [r3, #0]
 8004278:	009b      	lsls	r3, r3, #2
 800427a:	4413      	add	r3, r2
 800427c:	881b      	ldrh	r3, [r3, #0]
 800427e:	b29b      	uxth	r3, r3
 8004280:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004284:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004288:	833b      	strh	r3, [r7, #24]
 800428a:	687a      	ldr	r2, [r7, #4]
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	781b      	ldrb	r3, [r3, #0]
 8004290:	009b      	lsls	r3, r3, #2
 8004292:	441a      	add	r2, r3
 8004294:	8b3b      	ldrh	r3, [r7, #24]
 8004296:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800429a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800429e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80042a2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80042a6:	b29b      	uxth	r3, r3
 80042a8:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80042aa:	687a      	ldr	r2, [r7, #4]
 80042ac:	683b      	ldr	r3, [r7, #0]
 80042ae:	781b      	ldrb	r3, [r3, #0]
 80042b0:	009b      	lsls	r3, r3, #2
 80042b2:	4413      	add	r3, r2
 80042b4:	881b      	ldrh	r3, [r3, #0]
 80042b6:	b29b      	uxth	r3, r3
 80042b8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80042bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042c0:	82fb      	strh	r3, [r7, #22]
 80042c2:	687a      	ldr	r2, [r7, #4]
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	781b      	ldrb	r3, [r3, #0]
 80042c8:	009b      	lsls	r3, r3, #2
 80042ca:	441a      	add	r2, r3
 80042cc:	8afb      	ldrh	r3, [r7, #22]
 80042ce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80042d2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80042d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80042da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80042de:	b29b      	uxth	r3, r3
 80042e0:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80042e2:	687a      	ldr	r2, [r7, #4]
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	781b      	ldrb	r3, [r3, #0]
 80042e8:	009b      	lsls	r3, r3, #2
 80042ea:	4413      	add	r3, r2
 80042ec:	881b      	ldrh	r3, [r3, #0]
 80042ee:	b29b      	uxth	r3, r3
 80042f0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80042f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80042f8:	82bb      	strh	r3, [r7, #20]
 80042fa:	687a      	ldr	r2, [r7, #4]
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	781b      	ldrb	r3, [r3, #0]
 8004300:	009b      	lsls	r3, r3, #2
 8004302:	441a      	add	r2, r3
 8004304:	8abb      	ldrh	r3, [r7, #20]
 8004306:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800430a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800430e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004312:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004316:	b29b      	uxth	r3, r3
 8004318:	8013      	strh	r3, [r2, #0]
 800431a:	e0a3      	b.n	8004464 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800431c:	687a      	ldr	r2, [r7, #4]
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	781b      	ldrb	r3, [r3, #0]
 8004322:	009b      	lsls	r3, r3, #2
 8004324:	4413      	add	r3, r2
 8004326:	881b      	ldrh	r3, [r3, #0]
 8004328:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800432a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800432c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004330:	2b00      	cmp	r3, #0
 8004332:	d01b      	beq.n	800436c <USB_DeactivateEndpoint+0x2d4>
 8004334:	687a      	ldr	r2, [r7, #4]
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	781b      	ldrb	r3, [r3, #0]
 800433a:	009b      	lsls	r3, r3, #2
 800433c:	4413      	add	r3, r2
 800433e:	881b      	ldrh	r3, [r3, #0]
 8004340:	b29b      	uxth	r3, r3
 8004342:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004346:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800434a:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800434c:	687a      	ldr	r2, [r7, #4]
 800434e:	683b      	ldr	r3, [r7, #0]
 8004350:	781b      	ldrb	r3, [r3, #0]
 8004352:	009b      	lsls	r3, r3, #2
 8004354:	441a      	add	r2, r3
 8004356:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8004358:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800435c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004360:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004364:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004368:	b29b      	uxth	r3, r3
 800436a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800436c:	687a      	ldr	r2, [r7, #4]
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	781b      	ldrb	r3, [r3, #0]
 8004372:	009b      	lsls	r3, r3, #2
 8004374:	4413      	add	r3, r2
 8004376:	881b      	ldrh	r3, [r3, #0]
 8004378:	857b      	strh	r3, [r7, #42]	; 0x2a
 800437a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800437c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004380:	2b00      	cmp	r3, #0
 8004382:	d01b      	beq.n	80043bc <USB_DeactivateEndpoint+0x324>
 8004384:	687a      	ldr	r2, [r7, #4]
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	781b      	ldrb	r3, [r3, #0]
 800438a:	009b      	lsls	r3, r3, #2
 800438c:	4413      	add	r3, r2
 800438e:	881b      	ldrh	r3, [r3, #0]
 8004390:	b29b      	uxth	r3, r3
 8004392:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004396:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800439a:	853b      	strh	r3, [r7, #40]	; 0x28
 800439c:	687a      	ldr	r2, [r7, #4]
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	781b      	ldrb	r3, [r3, #0]
 80043a2:	009b      	lsls	r3, r3, #2
 80043a4:	441a      	add	r2, r3
 80043a6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80043a8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80043ac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80043b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80043b4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80043b8:	b29b      	uxth	r3, r3
 80043ba:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80043bc:	687a      	ldr	r2, [r7, #4]
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	781b      	ldrb	r3, [r3, #0]
 80043c2:	009b      	lsls	r3, r3, #2
 80043c4:	4413      	add	r3, r2
 80043c6:	881b      	ldrh	r3, [r3, #0]
 80043c8:	b29b      	uxth	r3, r3
 80043ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80043ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043d2:	84fb      	strh	r3, [r7, #38]	; 0x26
 80043d4:	687a      	ldr	r2, [r7, #4]
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	781b      	ldrb	r3, [r3, #0]
 80043da:	009b      	lsls	r3, r3, #2
 80043dc:	441a      	add	r2, r3
 80043de:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80043e0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80043e4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80043e8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80043ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80043f0:	b29b      	uxth	r3, r3
 80043f2:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80043f4:	687a      	ldr	r2, [r7, #4]
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	781b      	ldrb	r3, [r3, #0]
 80043fa:	009b      	lsls	r3, r3, #2
 80043fc:	4413      	add	r3, r2
 80043fe:	881b      	ldrh	r3, [r3, #0]
 8004400:	b29b      	uxth	r3, r3
 8004402:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004406:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800440a:	84bb      	strh	r3, [r7, #36]	; 0x24
 800440c:	687a      	ldr	r2, [r7, #4]
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	781b      	ldrb	r3, [r3, #0]
 8004412:	009b      	lsls	r3, r3, #2
 8004414:	441a      	add	r2, r3
 8004416:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004418:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800441c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004420:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004424:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004428:	b29b      	uxth	r3, r3
 800442a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800442c:	687a      	ldr	r2, [r7, #4]
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	781b      	ldrb	r3, [r3, #0]
 8004432:	009b      	lsls	r3, r3, #2
 8004434:	4413      	add	r3, r2
 8004436:	881b      	ldrh	r3, [r3, #0]
 8004438:	b29b      	uxth	r3, r3
 800443a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800443e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004442:	847b      	strh	r3, [r7, #34]	; 0x22
 8004444:	687a      	ldr	r2, [r7, #4]
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	781b      	ldrb	r3, [r3, #0]
 800444a:	009b      	lsls	r3, r3, #2
 800444c:	441a      	add	r2, r3
 800444e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004450:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004454:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004458:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800445c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004460:	b29b      	uxth	r3, r3
 8004462:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8004464:	2300      	movs	r3, #0
}
 8004466:	4618      	mov	r0, r3
 8004468:	3734      	adds	r7, #52	; 0x34
 800446a:	46bd      	mov	sp, r7
 800446c:	bc80      	pop	{r7}
 800446e:	4770      	bx	lr

08004470 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004470:	b580      	push	{r7, lr}
 8004472:	b0c4      	sub	sp, #272	; 0x110
 8004474:	af00      	add	r7, sp, #0
 8004476:	1d3b      	adds	r3, r7, #4
 8004478:	6018      	str	r0, [r3, #0]
 800447a:	463b      	mov	r3, r7
 800447c:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800447e:	463b      	mov	r3, r7
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	785b      	ldrb	r3, [r3, #1]
 8004484:	2b01      	cmp	r3, #1
 8004486:	f040 8557 	bne.w	8004f38 <USB_EPStartXfer+0xac8>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800448a:	463b      	mov	r3, r7
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	699a      	ldr	r2, [r3, #24]
 8004490:	463b      	mov	r3, r7
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	691b      	ldr	r3, [r3, #16]
 8004496:	429a      	cmp	r2, r3
 8004498:	d905      	bls.n	80044a6 <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 800449a:	463b      	mov	r3, r7
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	691b      	ldr	r3, [r3, #16]
 80044a0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80044a4:	e004      	b.n	80044b0 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 80044a6:	463b      	mov	r3, r7
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	699b      	ldr	r3, [r3, #24]
 80044ac:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80044b0:	463b      	mov	r3, r7
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	7b1b      	ldrb	r3, [r3, #12]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d12c      	bne.n	8004514 <USB_EPStartXfer+0xa4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80044ba:	463b      	mov	r3, r7
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	6959      	ldr	r1, [r3, #20]
 80044c0:	463b      	mov	r3, r7
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	88da      	ldrh	r2, [r3, #6]
 80044c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80044ca:	b29b      	uxth	r3, r3
 80044cc:	1d38      	adds	r0, r7, #4
 80044ce:	6800      	ldr	r0, [r0, #0]
 80044d0:	f001 fa2c 	bl	800592c <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80044d4:	1d3b      	adds	r3, r7, #4
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	617b      	str	r3, [r7, #20]
 80044da:	1d3b      	adds	r3, r7, #4
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80044e2:	b29b      	uxth	r3, r3
 80044e4:	461a      	mov	r2, r3
 80044e6:	697b      	ldr	r3, [r7, #20]
 80044e8:	4413      	add	r3, r2
 80044ea:	617b      	str	r3, [r7, #20]
 80044ec:	463b      	mov	r3, r7
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	781b      	ldrb	r3, [r3, #0]
 80044f2:	011a      	lsls	r2, r3, #4
 80044f4:	697b      	ldr	r3, [r7, #20]
 80044f6:	4413      	add	r3, r2
 80044f8:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80044fc:	f107 0310 	add.w	r3, r7, #16
 8004500:	601a      	str	r2, [r3, #0]
 8004502:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004506:	b29a      	uxth	r2, r3
 8004508:	f107 0310 	add.w	r3, r7, #16
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	801a      	strh	r2, [r3, #0]
 8004510:	f000 bcdd 	b.w	8004ece <USB_EPStartXfer+0xa5e>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8004514:	463b      	mov	r3, r7
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	78db      	ldrb	r3, [r3, #3]
 800451a:	2b02      	cmp	r3, #2
 800451c:	f040 8347 	bne.w	8004bae <USB_EPStartXfer+0x73e>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8004520:	463b      	mov	r3, r7
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	6a1a      	ldr	r2, [r3, #32]
 8004526:	463b      	mov	r3, r7
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	691b      	ldr	r3, [r3, #16]
 800452c:	429a      	cmp	r2, r3
 800452e:	f240 82eb 	bls.w	8004b08 <USB_EPStartXfer+0x698>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8004532:	1d3b      	adds	r3, r7, #4
 8004534:	681a      	ldr	r2, [r3, #0]
 8004536:	463b      	mov	r3, r7
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	781b      	ldrb	r3, [r3, #0]
 800453c:	009b      	lsls	r3, r3, #2
 800453e:	4413      	add	r3, r2
 8004540:	881b      	ldrh	r3, [r3, #0]
 8004542:	b29b      	uxth	r3, r3
 8004544:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004548:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800454c:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 8004550:	1d3b      	adds	r3, r7, #4
 8004552:	681a      	ldr	r2, [r3, #0]
 8004554:	463b      	mov	r3, r7
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	781b      	ldrb	r3, [r3, #0]
 800455a:	009b      	lsls	r3, r3, #2
 800455c:	441a      	add	r2, r3
 800455e:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8004562:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004566:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800456a:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800456e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004572:	b29b      	uxth	r3, r3
 8004574:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8004576:	463b      	mov	r3, r7
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	6a1a      	ldr	r2, [r3, #32]
 800457c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004580:	1ad2      	subs	r2, r2, r3
 8004582:	463b      	mov	r3, r7
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004588:	1d3b      	adds	r3, r7, #4
 800458a:	681a      	ldr	r2, [r3, #0]
 800458c:	463b      	mov	r3, r7
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	781b      	ldrb	r3, [r3, #0]
 8004592:	009b      	lsls	r3, r3, #2
 8004594:	4413      	add	r3, r2
 8004596:	881b      	ldrh	r3, [r3, #0]
 8004598:	b29b      	uxth	r3, r3
 800459a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800459e:	2b00      	cmp	r3, #0
 80045a0:	f000 8159 	beq.w	8004856 <USB_EPStartXfer+0x3e6>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80045a4:	1d3b      	adds	r3, r7, #4
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	637b      	str	r3, [r7, #52]	; 0x34
 80045aa:	463b      	mov	r3, r7
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	785b      	ldrb	r3, [r3, #1]
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d164      	bne.n	800467e <USB_EPStartXfer+0x20e>
 80045b4:	1d3b      	adds	r3, r7, #4
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80045ba:	1d3b      	adds	r3, r7, #4
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80045c2:	b29b      	uxth	r3, r3
 80045c4:	461a      	mov	r2, r3
 80045c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045c8:	4413      	add	r3, r2
 80045ca:	62fb      	str	r3, [r7, #44]	; 0x2c
 80045cc:	463b      	mov	r3, r7
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	781b      	ldrb	r3, [r3, #0]
 80045d2:	011a      	lsls	r2, r3, #4
 80045d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045d6:	4413      	add	r3, r2
 80045d8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80045dc:	62bb      	str	r3, [r7, #40]	; 0x28
 80045de:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d112      	bne.n	800460c <USB_EPStartXfer+0x19c>
 80045e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045e8:	881b      	ldrh	r3, [r3, #0]
 80045ea:	b29b      	uxth	r3, r3
 80045ec:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80045f0:	b29a      	uxth	r2, r3
 80045f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045f4:	801a      	strh	r2, [r3, #0]
 80045f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045f8:	881b      	ldrh	r3, [r3, #0]
 80045fa:	b29b      	uxth	r3, r3
 80045fc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004600:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004604:	b29a      	uxth	r2, r3
 8004606:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004608:	801a      	strh	r2, [r3, #0]
 800460a:	e054      	b.n	80046b6 <USB_EPStartXfer+0x246>
 800460c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004610:	2b3e      	cmp	r3, #62	; 0x3e
 8004612:	d817      	bhi.n	8004644 <USB_EPStartXfer+0x1d4>
 8004614:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004618:	085b      	lsrs	r3, r3, #1
 800461a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800461e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004622:	f003 0301 	and.w	r3, r3, #1
 8004626:	2b00      	cmp	r3, #0
 8004628:	d004      	beq.n	8004634 <USB_EPStartXfer+0x1c4>
 800462a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800462e:	3301      	adds	r3, #1
 8004630:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004634:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004638:	b29b      	uxth	r3, r3
 800463a:	029b      	lsls	r3, r3, #10
 800463c:	b29a      	uxth	r2, r3
 800463e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004640:	801a      	strh	r2, [r3, #0]
 8004642:	e038      	b.n	80046b6 <USB_EPStartXfer+0x246>
 8004644:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004648:	095b      	lsrs	r3, r3, #5
 800464a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800464e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004652:	f003 031f 	and.w	r3, r3, #31
 8004656:	2b00      	cmp	r3, #0
 8004658:	d104      	bne.n	8004664 <USB_EPStartXfer+0x1f4>
 800465a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800465e:	3b01      	subs	r3, #1
 8004660:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004664:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004668:	b29b      	uxth	r3, r3
 800466a:	029b      	lsls	r3, r3, #10
 800466c:	b29b      	uxth	r3, r3
 800466e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004672:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004676:	b29a      	uxth	r2, r3
 8004678:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800467a:	801a      	strh	r2, [r3, #0]
 800467c:	e01b      	b.n	80046b6 <USB_EPStartXfer+0x246>
 800467e:	463b      	mov	r3, r7
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	785b      	ldrb	r3, [r3, #1]
 8004684:	2b01      	cmp	r3, #1
 8004686:	d116      	bne.n	80046b6 <USB_EPStartXfer+0x246>
 8004688:	1d3b      	adds	r3, r7, #4
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004690:	b29b      	uxth	r3, r3
 8004692:	461a      	mov	r2, r3
 8004694:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004696:	4413      	add	r3, r2
 8004698:	637b      	str	r3, [r7, #52]	; 0x34
 800469a:	463b      	mov	r3, r7
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	781b      	ldrb	r3, [r3, #0]
 80046a0:	011a      	lsls	r2, r3, #4
 80046a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046a4:	4413      	add	r3, r2
 80046a6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80046aa:	633b      	str	r3, [r7, #48]	; 0x30
 80046ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80046b0:	b29a      	uxth	r2, r3
 80046b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046b4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80046b6:	463b      	mov	r3, r7
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	895b      	ldrh	r3, [r3, #10]
 80046bc:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80046c0:	463b      	mov	r3, r7
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	6959      	ldr	r1, [r3, #20]
 80046c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80046ca:	b29b      	uxth	r3, r3
 80046cc:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 80046d0:	1d38      	adds	r0, r7, #4
 80046d2:	6800      	ldr	r0, [r0, #0]
 80046d4:	f001 f92a 	bl	800592c <USB_WritePMA>
            ep->xfer_buff += len;
 80046d8:	463b      	mov	r3, r7
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	695a      	ldr	r2, [r3, #20]
 80046de:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80046e2:	441a      	add	r2, r3
 80046e4:	463b      	mov	r3, r7
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80046ea:	463b      	mov	r3, r7
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	6a1a      	ldr	r2, [r3, #32]
 80046f0:	463b      	mov	r3, r7
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	691b      	ldr	r3, [r3, #16]
 80046f6:	429a      	cmp	r2, r3
 80046f8:	d909      	bls.n	800470e <USB_EPStartXfer+0x29e>
            {
              ep->xfer_len_db -= len;
 80046fa:	463b      	mov	r3, r7
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	6a1a      	ldr	r2, [r3, #32]
 8004700:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004704:	1ad2      	subs	r2, r2, r3
 8004706:	463b      	mov	r3, r7
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	621a      	str	r2, [r3, #32]
 800470c:	e008      	b.n	8004720 <USB_EPStartXfer+0x2b0>
            }
            else
            {
              len = ep->xfer_len_db;
 800470e:	463b      	mov	r3, r7
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	6a1b      	ldr	r3, [r3, #32]
 8004714:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 8004718:	463b      	mov	r3, r7
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	2200      	movs	r2, #0
 800471e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004720:	463b      	mov	r3, r7
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	785b      	ldrb	r3, [r3, #1]
 8004726:	2b00      	cmp	r3, #0
 8004728:	d164      	bne.n	80047f4 <USB_EPStartXfer+0x384>
 800472a:	1d3b      	adds	r3, r7, #4
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	61fb      	str	r3, [r7, #28]
 8004730:	1d3b      	adds	r3, r7, #4
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004738:	b29b      	uxth	r3, r3
 800473a:	461a      	mov	r2, r3
 800473c:	69fb      	ldr	r3, [r7, #28]
 800473e:	4413      	add	r3, r2
 8004740:	61fb      	str	r3, [r7, #28]
 8004742:	463b      	mov	r3, r7
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	781b      	ldrb	r3, [r3, #0]
 8004748:	011a      	lsls	r2, r3, #4
 800474a:	69fb      	ldr	r3, [r7, #28]
 800474c:	4413      	add	r3, r2
 800474e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004752:	61bb      	str	r3, [r7, #24]
 8004754:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004758:	2b00      	cmp	r3, #0
 800475a:	d112      	bne.n	8004782 <USB_EPStartXfer+0x312>
 800475c:	69bb      	ldr	r3, [r7, #24]
 800475e:	881b      	ldrh	r3, [r3, #0]
 8004760:	b29b      	uxth	r3, r3
 8004762:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004766:	b29a      	uxth	r2, r3
 8004768:	69bb      	ldr	r3, [r7, #24]
 800476a:	801a      	strh	r2, [r3, #0]
 800476c:	69bb      	ldr	r3, [r7, #24]
 800476e:	881b      	ldrh	r3, [r3, #0]
 8004770:	b29b      	uxth	r3, r3
 8004772:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004776:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800477a:	b29a      	uxth	r2, r3
 800477c:	69bb      	ldr	r3, [r7, #24]
 800477e:	801a      	strh	r2, [r3, #0]
 8004780:	e057      	b.n	8004832 <USB_EPStartXfer+0x3c2>
 8004782:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004786:	2b3e      	cmp	r3, #62	; 0x3e
 8004788:	d817      	bhi.n	80047ba <USB_EPStartXfer+0x34a>
 800478a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800478e:	085b      	lsrs	r3, r3, #1
 8004790:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004794:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004798:	f003 0301 	and.w	r3, r3, #1
 800479c:	2b00      	cmp	r3, #0
 800479e:	d004      	beq.n	80047aa <USB_EPStartXfer+0x33a>
 80047a0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80047a4:	3301      	adds	r3, #1
 80047a6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80047aa:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80047ae:	b29b      	uxth	r3, r3
 80047b0:	029b      	lsls	r3, r3, #10
 80047b2:	b29a      	uxth	r2, r3
 80047b4:	69bb      	ldr	r3, [r7, #24]
 80047b6:	801a      	strh	r2, [r3, #0]
 80047b8:	e03b      	b.n	8004832 <USB_EPStartXfer+0x3c2>
 80047ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80047be:	095b      	lsrs	r3, r3, #5
 80047c0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80047c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80047c8:	f003 031f 	and.w	r3, r3, #31
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d104      	bne.n	80047da <USB_EPStartXfer+0x36a>
 80047d0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80047d4:	3b01      	subs	r3, #1
 80047d6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80047da:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80047de:	b29b      	uxth	r3, r3
 80047e0:	029b      	lsls	r3, r3, #10
 80047e2:	b29b      	uxth	r3, r3
 80047e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80047e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80047ec:	b29a      	uxth	r2, r3
 80047ee:	69bb      	ldr	r3, [r7, #24]
 80047f0:	801a      	strh	r2, [r3, #0]
 80047f2:	e01e      	b.n	8004832 <USB_EPStartXfer+0x3c2>
 80047f4:	463b      	mov	r3, r7
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	785b      	ldrb	r3, [r3, #1]
 80047fa:	2b01      	cmp	r3, #1
 80047fc:	d119      	bne.n	8004832 <USB_EPStartXfer+0x3c2>
 80047fe:	1d3b      	adds	r3, r7, #4
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	627b      	str	r3, [r7, #36]	; 0x24
 8004804:	1d3b      	adds	r3, r7, #4
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800480c:	b29b      	uxth	r3, r3
 800480e:	461a      	mov	r2, r3
 8004810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004812:	4413      	add	r3, r2
 8004814:	627b      	str	r3, [r7, #36]	; 0x24
 8004816:	463b      	mov	r3, r7
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	781b      	ldrb	r3, [r3, #0]
 800481c:	011a      	lsls	r2, r3, #4
 800481e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004820:	4413      	add	r3, r2
 8004822:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004826:	623b      	str	r3, [r7, #32]
 8004828:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800482c:	b29a      	uxth	r2, r3
 800482e:	6a3b      	ldr	r3, [r7, #32]
 8004830:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8004832:	463b      	mov	r3, r7
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	891b      	ldrh	r3, [r3, #8]
 8004838:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800483c:	463b      	mov	r3, r7
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	6959      	ldr	r1, [r3, #20]
 8004842:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004846:	b29b      	uxth	r3, r3
 8004848:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 800484c:	1d38      	adds	r0, r7, #4
 800484e:	6800      	ldr	r0, [r0, #0]
 8004850:	f001 f86c 	bl	800592c <USB_WritePMA>
 8004854:	e33b      	b.n	8004ece <USB_EPStartXfer+0xa5e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004856:	463b      	mov	r3, r7
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	785b      	ldrb	r3, [r3, #1]
 800485c:	2b00      	cmp	r3, #0
 800485e:	d164      	bne.n	800492a <USB_EPStartXfer+0x4ba>
 8004860:	1d3b      	adds	r3, r7, #4
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004866:	1d3b      	adds	r3, r7, #4
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800486e:	b29b      	uxth	r3, r3
 8004870:	461a      	mov	r2, r3
 8004872:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004874:	4413      	add	r3, r2
 8004876:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004878:	463b      	mov	r3, r7
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	781b      	ldrb	r3, [r3, #0]
 800487e:	011a      	lsls	r2, r3, #4
 8004880:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004882:	4413      	add	r3, r2
 8004884:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004888:	64bb      	str	r3, [r7, #72]	; 0x48
 800488a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800488e:	2b00      	cmp	r3, #0
 8004890:	d112      	bne.n	80048b8 <USB_EPStartXfer+0x448>
 8004892:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004894:	881b      	ldrh	r3, [r3, #0]
 8004896:	b29b      	uxth	r3, r3
 8004898:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800489c:	b29a      	uxth	r2, r3
 800489e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80048a0:	801a      	strh	r2, [r3, #0]
 80048a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80048a4:	881b      	ldrh	r3, [r3, #0]
 80048a6:	b29b      	uxth	r3, r3
 80048a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80048ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80048b0:	b29a      	uxth	r2, r3
 80048b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80048b4:	801a      	strh	r2, [r3, #0]
 80048b6:	e057      	b.n	8004968 <USB_EPStartXfer+0x4f8>
 80048b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80048bc:	2b3e      	cmp	r3, #62	; 0x3e
 80048be:	d817      	bhi.n	80048f0 <USB_EPStartXfer+0x480>
 80048c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80048c4:	085b      	lsrs	r3, r3, #1
 80048c6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80048ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80048ce:	f003 0301 	and.w	r3, r3, #1
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d004      	beq.n	80048e0 <USB_EPStartXfer+0x470>
 80048d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80048da:	3301      	adds	r3, #1
 80048dc:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80048e0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80048e4:	b29b      	uxth	r3, r3
 80048e6:	029b      	lsls	r3, r3, #10
 80048e8:	b29a      	uxth	r2, r3
 80048ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80048ec:	801a      	strh	r2, [r3, #0]
 80048ee:	e03b      	b.n	8004968 <USB_EPStartXfer+0x4f8>
 80048f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80048f4:	095b      	lsrs	r3, r3, #5
 80048f6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80048fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80048fe:	f003 031f 	and.w	r3, r3, #31
 8004902:	2b00      	cmp	r3, #0
 8004904:	d104      	bne.n	8004910 <USB_EPStartXfer+0x4a0>
 8004906:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800490a:	3b01      	subs	r3, #1
 800490c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004910:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004914:	b29b      	uxth	r3, r3
 8004916:	029b      	lsls	r3, r3, #10
 8004918:	b29b      	uxth	r3, r3
 800491a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800491e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004922:	b29a      	uxth	r2, r3
 8004924:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004926:	801a      	strh	r2, [r3, #0]
 8004928:	e01e      	b.n	8004968 <USB_EPStartXfer+0x4f8>
 800492a:	463b      	mov	r3, r7
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	785b      	ldrb	r3, [r3, #1]
 8004930:	2b01      	cmp	r3, #1
 8004932:	d119      	bne.n	8004968 <USB_EPStartXfer+0x4f8>
 8004934:	1d3b      	adds	r3, r7, #4
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	657b      	str	r3, [r7, #84]	; 0x54
 800493a:	1d3b      	adds	r3, r7, #4
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004942:	b29b      	uxth	r3, r3
 8004944:	461a      	mov	r2, r3
 8004946:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004948:	4413      	add	r3, r2
 800494a:	657b      	str	r3, [r7, #84]	; 0x54
 800494c:	463b      	mov	r3, r7
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	781b      	ldrb	r3, [r3, #0]
 8004952:	011a      	lsls	r2, r3, #4
 8004954:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004956:	4413      	add	r3, r2
 8004958:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800495c:	653b      	str	r3, [r7, #80]	; 0x50
 800495e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004962:	b29a      	uxth	r2, r3
 8004964:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004966:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8004968:	463b      	mov	r3, r7
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	891b      	ldrh	r3, [r3, #8]
 800496e:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004972:	463b      	mov	r3, r7
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	6959      	ldr	r1, [r3, #20]
 8004978:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800497c:	b29b      	uxth	r3, r3
 800497e:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8004982:	1d38      	adds	r0, r7, #4
 8004984:	6800      	ldr	r0, [r0, #0]
 8004986:	f000 ffd1 	bl	800592c <USB_WritePMA>
            ep->xfer_buff += len;
 800498a:	463b      	mov	r3, r7
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	695a      	ldr	r2, [r3, #20]
 8004990:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004994:	441a      	add	r2, r3
 8004996:	463b      	mov	r3, r7
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800499c:	463b      	mov	r3, r7
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	6a1a      	ldr	r2, [r3, #32]
 80049a2:	463b      	mov	r3, r7
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	691b      	ldr	r3, [r3, #16]
 80049a8:	429a      	cmp	r2, r3
 80049aa:	d909      	bls.n	80049c0 <USB_EPStartXfer+0x550>
            {
              ep->xfer_len_db -= len;
 80049ac:	463b      	mov	r3, r7
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	6a1a      	ldr	r2, [r3, #32]
 80049b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80049b6:	1ad2      	subs	r2, r2, r3
 80049b8:	463b      	mov	r3, r7
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	621a      	str	r2, [r3, #32]
 80049be:	e008      	b.n	80049d2 <USB_EPStartXfer+0x562>
            }
            else
            {
              len = ep->xfer_len_db;
 80049c0:	463b      	mov	r3, r7
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	6a1b      	ldr	r3, [r3, #32]
 80049c6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 80049ca:	463b      	mov	r3, r7
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	2200      	movs	r2, #0
 80049d0:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80049d2:	1d3b      	adds	r3, r7, #4
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	647b      	str	r3, [r7, #68]	; 0x44
 80049d8:	463b      	mov	r3, r7
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	785b      	ldrb	r3, [r3, #1]
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d164      	bne.n	8004aac <USB_EPStartXfer+0x63c>
 80049e2:	1d3b      	adds	r3, r7, #4
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80049e8:	1d3b      	adds	r3, r7, #4
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80049f0:	b29b      	uxth	r3, r3
 80049f2:	461a      	mov	r2, r3
 80049f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049f6:	4413      	add	r3, r2
 80049f8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80049fa:	463b      	mov	r3, r7
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	781b      	ldrb	r3, [r3, #0]
 8004a00:	011a      	lsls	r2, r3, #4
 8004a02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a04:	4413      	add	r3, r2
 8004a06:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004a0a:	63bb      	str	r3, [r7, #56]	; 0x38
 8004a0c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d112      	bne.n	8004a3a <USB_EPStartXfer+0x5ca>
 8004a14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a16:	881b      	ldrh	r3, [r3, #0]
 8004a18:	b29b      	uxth	r3, r3
 8004a1a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004a1e:	b29a      	uxth	r2, r3
 8004a20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a22:	801a      	strh	r2, [r3, #0]
 8004a24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a26:	881b      	ldrh	r3, [r3, #0]
 8004a28:	b29b      	uxth	r3, r3
 8004a2a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004a2e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004a32:	b29a      	uxth	r2, r3
 8004a34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a36:	801a      	strh	r2, [r3, #0]
 8004a38:	e054      	b.n	8004ae4 <USB_EPStartXfer+0x674>
 8004a3a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004a3e:	2b3e      	cmp	r3, #62	; 0x3e
 8004a40:	d817      	bhi.n	8004a72 <USB_EPStartXfer+0x602>
 8004a42:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004a46:	085b      	lsrs	r3, r3, #1
 8004a48:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004a4c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004a50:	f003 0301 	and.w	r3, r3, #1
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d004      	beq.n	8004a62 <USB_EPStartXfer+0x5f2>
 8004a58:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004a5c:	3301      	adds	r3, #1
 8004a5e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004a62:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004a66:	b29b      	uxth	r3, r3
 8004a68:	029b      	lsls	r3, r3, #10
 8004a6a:	b29a      	uxth	r2, r3
 8004a6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a6e:	801a      	strh	r2, [r3, #0]
 8004a70:	e038      	b.n	8004ae4 <USB_EPStartXfer+0x674>
 8004a72:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004a76:	095b      	lsrs	r3, r3, #5
 8004a78:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004a7c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004a80:	f003 031f 	and.w	r3, r3, #31
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d104      	bne.n	8004a92 <USB_EPStartXfer+0x622>
 8004a88:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004a8c:	3b01      	subs	r3, #1
 8004a8e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004a92:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004a96:	b29b      	uxth	r3, r3
 8004a98:	029b      	lsls	r3, r3, #10
 8004a9a:	b29b      	uxth	r3, r3
 8004a9c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004aa0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004aa4:	b29a      	uxth	r2, r3
 8004aa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004aa8:	801a      	strh	r2, [r3, #0]
 8004aaa:	e01b      	b.n	8004ae4 <USB_EPStartXfer+0x674>
 8004aac:	463b      	mov	r3, r7
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	785b      	ldrb	r3, [r3, #1]
 8004ab2:	2b01      	cmp	r3, #1
 8004ab4:	d116      	bne.n	8004ae4 <USB_EPStartXfer+0x674>
 8004ab6:	1d3b      	adds	r3, r7, #4
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004abe:	b29b      	uxth	r3, r3
 8004ac0:	461a      	mov	r2, r3
 8004ac2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004ac4:	4413      	add	r3, r2
 8004ac6:	647b      	str	r3, [r7, #68]	; 0x44
 8004ac8:	463b      	mov	r3, r7
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	781b      	ldrb	r3, [r3, #0]
 8004ace:	011a      	lsls	r2, r3, #4
 8004ad0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004ad2:	4413      	add	r3, r2
 8004ad4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004ad8:	643b      	str	r3, [r7, #64]	; 0x40
 8004ada:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004ade:	b29a      	uxth	r2, r3
 8004ae0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ae2:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8004ae4:	463b      	mov	r3, r7
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	895b      	ldrh	r3, [r3, #10]
 8004aea:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004aee:	463b      	mov	r3, r7
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	6959      	ldr	r1, [r3, #20]
 8004af4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004af8:	b29b      	uxth	r3, r3
 8004afa:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8004afe:	1d38      	adds	r0, r7, #4
 8004b00:	6800      	ldr	r0, [r0, #0]
 8004b02:	f000 ff13 	bl	800592c <USB_WritePMA>
 8004b06:	e1e2      	b.n	8004ece <USB_EPStartXfer+0xa5e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8004b08:	463b      	mov	r3, r7
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	6a1b      	ldr	r3, [r3, #32]
 8004b0e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8004b12:	1d3b      	adds	r3, r7, #4
 8004b14:	681a      	ldr	r2, [r3, #0]
 8004b16:	463b      	mov	r3, r7
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	781b      	ldrb	r3, [r3, #0]
 8004b1c:	009b      	lsls	r3, r3, #2
 8004b1e:	4413      	add	r3, r2
 8004b20:	881b      	ldrh	r3, [r3, #0]
 8004b22:	b29b      	uxth	r3, r3
 8004b24:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8004b28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b2c:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8004b30:	1d3b      	adds	r3, r7, #4
 8004b32:	681a      	ldr	r2, [r3, #0]
 8004b34:	463b      	mov	r3, r7
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	781b      	ldrb	r3, [r3, #0]
 8004b3a:	009b      	lsls	r3, r3, #2
 8004b3c:	441a      	add	r2, r3
 8004b3e:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8004b42:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b46:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b4a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b52:	b29b      	uxth	r3, r3
 8004b54:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004b56:	1d3b      	adds	r3, r7, #4
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	663b      	str	r3, [r7, #96]	; 0x60
 8004b5c:	1d3b      	adds	r3, r7, #4
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004b64:	b29b      	uxth	r3, r3
 8004b66:	461a      	mov	r2, r3
 8004b68:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004b6a:	4413      	add	r3, r2
 8004b6c:	663b      	str	r3, [r7, #96]	; 0x60
 8004b6e:	463b      	mov	r3, r7
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	781b      	ldrb	r3, [r3, #0]
 8004b74:	011a      	lsls	r2, r3, #4
 8004b76:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004b78:	4413      	add	r3, r2
 8004b7a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004b7e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004b80:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004b84:	b29a      	uxth	r2, r3
 8004b86:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004b88:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8004b8a:	463b      	mov	r3, r7
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	891b      	ldrh	r3, [r3, #8]
 8004b90:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004b94:	463b      	mov	r3, r7
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	6959      	ldr	r1, [r3, #20]
 8004b9a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004b9e:	b29b      	uxth	r3, r3
 8004ba0:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8004ba4:	1d38      	adds	r0, r7, #4
 8004ba6:	6800      	ldr	r0, [r0, #0]
 8004ba8:	f000 fec0 	bl	800592c <USB_WritePMA>
 8004bac:	e18f      	b.n	8004ece <USB_EPStartXfer+0xa5e>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* Write the data to the USB endpoint */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004bae:	1d3b      	adds	r3, r7, #4
 8004bb0:	681a      	ldr	r2, [r3, #0]
 8004bb2:	463b      	mov	r3, r7
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	781b      	ldrb	r3, [r3, #0]
 8004bb8:	009b      	lsls	r3, r3, #2
 8004bba:	4413      	add	r3, r2
 8004bbc:	881b      	ldrh	r3, [r3, #0]
 8004bbe:	b29b      	uxth	r3, r3
 8004bc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	f000 808f 	beq.w	8004ce8 <USB_EPStartXfer+0x878>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004bca:	1d3b      	adds	r3, r7, #4
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	67bb      	str	r3, [r7, #120]	; 0x78
 8004bd0:	463b      	mov	r3, r7
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	785b      	ldrb	r3, [r3, #1]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d164      	bne.n	8004ca4 <USB_EPStartXfer+0x834>
 8004bda:	1d3b      	adds	r3, r7, #4
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	673b      	str	r3, [r7, #112]	; 0x70
 8004be0:	1d3b      	adds	r3, r7, #4
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004be8:	b29b      	uxth	r3, r3
 8004bea:	461a      	mov	r2, r3
 8004bec:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004bee:	4413      	add	r3, r2
 8004bf0:	673b      	str	r3, [r7, #112]	; 0x70
 8004bf2:	463b      	mov	r3, r7
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	781b      	ldrb	r3, [r3, #0]
 8004bf8:	011a      	lsls	r2, r3, #4
 8004bfa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004bfc:	4413      	add	r3, r2
 8004bfe:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004c02:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004c04:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d112      	bne.n	8004c32 <USB_EPStartXfer+0x7c2>
 8004c0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c0e:	881b      	ldrh	r3, [r3, #0]
 8004c10:	b29b      	uxth	r3, r3
 8004c12:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004c16:	b29a      	uxth	r2, r3
 8004c18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c1a:	801a      	strh	r2, [r3, #0]
 8004c1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c1e:	881b      	ldrh	r3, [r3, #0]
 8004c20:	b29b      	uxth	r3, r3
 8004c22:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004c26:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004c2a:	b29a      	uxth	r2, r3
 8004c2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c2e:	801a      	strh	r2, [r3, #0]
 8004c30:	e054      	b.n	8004cdc <USB_EPStartXfer+0x86c>
 8004c32:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004c36:	2b3e      	cmp	r3, #62	; 0x3e
 8004c38:	d817      	bhi.n	8004c6a <USB_EPStartXfer+0x7fa>
 8004c3a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004c3e:	085b      	lsrs	r3, r3, #1
 8004c40:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8004c44:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004c48:	f003 0301 	and.w	r3, r3, #1
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d004      	beq.n	8004c5a <USB_EPStartXfer+0x7ea>
 8004c50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c54:	3301      	adds	r3, #1
 8004c56:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8004c5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c5e:	b29b      	uxth	r3, r3
 8004c60:	029b      	lsls	r3, r3, #10
 8004c62:	b29a      	uxth	r2, r3
 8004c64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c66:	801a      	strh	r2, [r3, #0]
 8004c68:	e038      	b.n	8004cdc <USB_EPStartXfer+0x86c>
 8004c6a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004c6e:	095b      	lsrs	r3, r3, #5
 8004c70:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8004c74:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004c78:	f003 031f 	and.w	r3, r3, #31
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d104      	bne.n	8004c8a <USB_EPStartXfer+0x81a>
 8004c80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c84:	3b01      	subs	r3, #1
 8004c86:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8004c8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c8e:	b29b      	uxth	r3, r3
 8004c90:	029b      	lsls	r3, r3, #10
 8004c92:	b29b      	uxth	r3, r3
 8004c94:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004c98:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004c9c:	b29a      	uxth	r2, r3
 8004c9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ca0:	801a      	strh	r2, [r3, #0]
 8004ca2:	e01b      	b.n	8004cdc <USB_EPStartXfer+0x86c>
 8004ca4:	463b      	mov	r3, r7
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	785b      	ldrb	r3, [r3, #1]
 8004caa:	2b01      	cmp	r3, #1
 8004cac:	d116      	bne.n	8004cdc <USB_EPStartXfer+0x86c>
 8004cae:	1d3b      	adds	r3, r7, #4
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004cb6:	b29b      	uxth	r3, r3
 8004cb8:	461a      	mov	r2, r3
 8004cba:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004cbc:	4413      	add	r3, r2
 8004cbe:	67bb      	str	r3, [r7, #120]	; 0x78
 8004cc0:	463b      	mov	r3, r7
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	781b      	ldrb	r3, [r3, #0]
 8004cc6:	011a      	lsls	r2, r3, #4
 8004cc8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004cca:	4413      	add	r3, r2
 8004ccc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004cd0:	677b      	str	r3, [r7, #116]	; 0x74
 8004cd2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004cd6:	b29a      	uxth	r2, r3
 8004cd8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004cda:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8004cdc:	463b      	mov	r3, r7
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	895b      	ldrh	r3, [r3, #10]
 8004ce2:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
 8004ce6:	e097      	b.n	8004e18 <USB_EPStartXfer+0x9a8>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004ce8:	463b      	mov	r3, r7
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	785b      	ldrb	r3, [r3, #1]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d168      	bne.n	8004dc4 <USB_EPStartXfer+0x954>
 8004cf2:	1d3b      	adds	r3, r7, #4
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004cfa:	1d3b      	adds	r3, r7, #4
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d02:	b29b      	uxth	r3, r3
 8004d04:	461a      	mov	r2, r3
 8004d06:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004d0a:	4413      	add	r3, r2
 8004d0c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004d10:	463b      	mov	r3, r7
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	781b      	ldrb	r3, [r3, #0]
 8004d16:	011a      	lsls	r2, r3, #4
 8004d18:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004d1c:	4413      	add	r3, r2
 8004d1e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004d22:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004d24:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d112      	bne.n	8004d52 <USB_EPStartXfer+0x8e2>
 8004d2c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004d2e:	881b      	ldrh	r3, [r3, #0]
 8004d30:	b29b      	uxth	r3, r3
 8004d32:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004d36:	b29a      	uxth	r2, r3
 8004d38:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004d3a:	801a      	strh	r2, [r3, #0]
 8004d3c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004d3e:	881b      	ldrh	r3, [r3, #0]
 8004d40:	b29b      	uxth	r3, r3
 8004d42:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004d46:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004d4a:	b29a      	uxth	r2, r3
 8004d4c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004d4e:	801a      	strh	r2, [r3, #0]
 8004d50:	e05d      	b.n	8004e0e <USB_EPStartXfer+0x99e>
 8004d52:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004d56:	2b3e      	cmp	r3, #62	; 0x3e
 8004d58:	d817      	bhi.n	8004d8a <USB_EPStartXfer+0x91a>
 8004d5a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004d5e:	085b      	lsrs	r3, r3, #1
 8004d60:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8004d64:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004d68:	f003 0301 	and.w	r3, r3, #1
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d004      	beq.n	8004d7a <USB_EPStartXfer+0x90a>
 8004d70:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004d74:	3301      	adds	r3, #1
 8004d76:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8004d7a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004d7e:	b29b      	uxth	r3, r3
 8004d80:	029b      	lsls	r3, r3, #10
 8004d82:	b29a      	uxth	r2, r3
 8004d84:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004d86:	801a      	strh	r2, [r3, #0]
 8004d88:	e041      	b.n	8004e0e <USB_EPStartXfer+0x99e>
 8004d8a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004d8e:	095b      	lsrs	r3, r3, #5
 8004d90:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8004d94:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004d98:	f003 031f 	and.w	r3, r3, #31
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d104      	bne.n	8004daa <USB_EPStartXfer+0x93a>
 8004da0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004da4:	3b01      	subs	r3, #1
 8004da6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8004daa:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004dae:	b29b      	uxth	r3, r3
 8004db0:	029b      	lsls	r3, r3, #10
 8004db2:	b29b      	uxth	r3, r3
 8004db4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004db8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004dbc:	b29a      	uxth	r2, r3
 8004dbe:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004dc0:	801a      	strh	r2, [r3, #0]
 8004dc2:	e024      	b.n	8004e0e <USB_EPStartXfer+0x99e>
 8004dc4:	463b      	mov	r3, r7
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	785b      	ldrb	r3, [r3, #1]
 8004dca:	2b01      	cmp	r3, #1
 8004dcc:	d11f      	bne.n	8004e0e <USB_EPStartXfer+0x99e>
 8004dce:	1d3b      	adds	r3, r7, #4
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004dd6:	1d3b      	adds	r3, r7, #4
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004dde:	b29b      	uxth	r3, r3
 8004de0:	461a      	mov	r2, r3
 8004de2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004de6:	4413      	add	r3, r2
 8004de8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004dec:	463b      	mov	r3, r7
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	781b      	ldrb	r3, [r3, #0]
 8004df2:	011a      	lsls	r2, r3, #4
 8004df4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004df8:	4413      	add	r3, r2
 8004dfa:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004dfe:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004e02:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004e06:	b29a      	uxth	r2, r3
 8004e08:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004e0c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8004e0e:	463b      	mov	r3, r7
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	891b      	ldrh	r3, [r3, #8]
 8004e14:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
        }

        USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004e18:	463b      	mov	r3, r7
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	6959      	ldr	r1, [r3, #20]
 8004e1e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004e22:	b29b      	uxth	r3, r3
 8004e24:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8004e28:	1d38      	adds	r0, r7, #4
 8004e2a:	6800      	ldr	r0, [r0, #0]
 8004e2c:	f000 fd7e 	bl	800592c <USB_WritePMA>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8004e30:	463b      	mov	r3, r7
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	785b      	ldrb	r3, [r3, #1]
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d122      	bne.n	8004e80 <USB_EPStartXfer+0xa10>
 8004e3a:	1d3b      	adds	r3, r7, #4
 8004e3c:	681a      	ldr	r2, [r3, #0]
 8004e3e:	463b      	mov	r3, r7
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	781b      	ldrb	r3, [r3, #0]
 8004e44:	009b      	lsls	r3, r3, #2
 8004e46:	4413      	add	r3, r2
 8004e48:	881b      	ldrh	r3, [r3, #0]
 8004e4a:	b29b      	uxth	r3, r3
 8004e4c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e54:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 8004e58:	1d3b      	adds	r3, r7, #4
 8004e5a:	681a      	ldr	r2, [r3, #0]
 8004e5c:	463b      	mov	r3, r7
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	781b      	ldrb	r3, [r3, #0]
 8004e62:	009b      	lsls	r3, r3, #2
 8004e64:	441a      	add	r2, r3
 8004e66:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8004e6a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e6e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e72:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e76:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004e7a:	b29b      	uxth	r3, r3
 8004e7c:	8013      	strh	r3, [r2, #0]
 8004e7e:	e026      	b.n	8004ece <USB_EPStartXfer+0xa5e>
 8004e80:	463b      	mov	r3, r7
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	785b      	ldrb	r3, [r3, #1]
 8004e86:	2b01      	cmp	r3, #1
 8004e88:	d121      	bne.n	8004ece <USB_EPStartXfer+0xa5e>
 8004e8a:	1d3b      	adds	r3, r7, #4
 8004e8c:	681a      	ldr	r2, [r3, #0]
 8004e8e:	463b      	mov	r3, r7
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	781b      	ldrb	r3, [r3, #0]
 8004e94:	009b      	lsls	r3, r3, #2
 8004e96:	4413      	add	r3, r2
 8004e98:	881b      	ldrh	r3, [r3, #0]
 8004e9a:	b29b      	uxth	r3, r3
 8004e9c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ea0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ea4:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 8004ea8:	1d3b      	adds	r3, r7, #4
 8004eaa:	681a      	ldr	r2, [r3, #0]
 8004eac:	463b      	mov	r3, r7
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	781b      	ldrb	r3, [r3, #0]
 8004eb2:	009b      	lsls	r3, r3, #2
 8004eb4:	441a      	add	r2, r3
 8004eb6:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8004eba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ebe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ec2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004ec6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004eca:	b29b      	uxth	r3, r3
 8004ecc:	8013      	strh	r3, [r2, #0]
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8004ece:	1d3b      	adds	r3, r7, #4
 8004ed0:	681a      	ldr	r2, [r3, #0]
 8004ed2:	463b      	mov	r3, r7
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	781b      	ldrb	r3, [r3, #0]
 8004ed8:	009b      	lsls	r3, r3, #2
 8004eda:	4413      	add	r3, r2
 8004edc:	881b      	ldrh	r3, [r3, #0]
 8004ede:	b29b      	uxth	r3, r3
 8004ee0:	f107 020e 	add.w	r2, r7, #14
 8004ee4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ee8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004eec:	8013      	strh	r3, [r2, #0]
 8004eee:	f107 030e 	add.w	r3, r7, #14
 8004ef2:	f107 020e 	add.w	r2, r7, #14
 8004ef6:	8812      	ldrh	r2, [r2, #0]
 8004ef8:	f082 0210 	eor.w	r2, r2, #16
 8004efc:	801a      	strh	r2, [r3, #0]
 8004efe:	f107 030e 	add.w	r3, r7, #14
 8004f02:	f107 020e 	add.w	r2, r7, #14
 8004f06:	8812      	ldrh	r2, [r2, #0]
 8004f08:	f082 0220 	eor.w	r2, r2, #32
 8004f0c:	801a      	strh	r2, [r3, #0]
 8004f0e:	1d3b      	adds	r3, r7, #4
 8004f10:	681a      	ldr	r2, [r3, #0]
 8004f12:	463b      	mov	r3, r7
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	781b      	ldrb	r3, [r3, #0]
 8004f18:	009b      	lsls	r3, r3, #2
 8004f1a:	441a      	add	r2, r3
 8004f1c:	f107 030e 	add.w	r3, r7, #14
 8004f20:	881b      	ldrh	r3, [r3, #0]
 8004f22:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f26:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f2a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f32:	b29b      	uxth	r3, r3
 8004f34:	8013      	strh	r3, [r2, #0]
 8004f36:	e3b5      	b.n	80056a4 <USB_EPStartXfer+0x1234>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8004f38:	463b      	mov	r3, r7
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	7b1b      	ldrb	r3, [r3, #12]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	f040 8090 	bne.w	8005064 <USB_EPStartXfer+0xbf4>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8004f44:	463b      	mov	r3, r7
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	699a      	ldr	r2, [r3, #24]
 8004f4a:	463b      	mov	r3, r7
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	691b      	ldr	r3, [r3, #16]
 8004f50:	429a      	cmp	r2, r3
 8004f52:	d90e      	bls.n	8004f72 <USB_EPStartXfer+0xb02>
      {
        len = ep->maxpacket;
 8004f54:	463b      	mov	r3, r7
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	691b      	ldr	r3, [r3, #16]
 8004f5a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len -= len;
 8004f5e:	463b      	mov	r3, r7
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	699a      	ldr	r2, [r3, #24]
 8004f64:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004f68:	1ad2      	subs	r2, r2, r3
 8004f6a:	463b      	mov	r3, r7
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	619a      	str	r2, [r3, #24]
 8004f70:	e008      	b.n	8004f84 <USB_EPStartXfer+0xb14>
      }
      else
      {
        len = ep->xfer_len;
 8004f72:	463b      	mov	r3, r7
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	699b      	ldr	r3, [r3, #24]
 8004f78:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len = 0U;
 8004f7c:	463b      	mov	r3, r7
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	2200      	movs	r2, #0
 8004f82:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8004f84:	1d3b      	adds	r3, r7, #4
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004f8c:	1d3b      	adds	r3, r7, #4
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f94:	b29b      	uxth	r3, r3
 8004f96:	461a      	mov	r2, r3
 8004f98:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004f9c:	4413      	add	r3, r2
 8004f9e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004fa2:	463b      	mov	r3, r7
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	781b      	ldrb	r3, [r3, #0]
 8004fa8:	011a      	lsls	r2, r3, #4
 8004faa:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004fae:	4413      	add	r3, r2
 8004fb0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004fb4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004fb8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d116      	bne.n	8004fee <USB_EPStartXfer+0xb7e>
 8004fc0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004fc4:	881b      	ldrh	r3, [r3, #0]
 8004fc6:	b29b      	uxth	r3, r3
 8004fc8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004fcc:	b29a      	uxth	r2, r3
 8004fce:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004fd2:	801a      	strh	r2, [r3, #0]
 8004fd4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004fd8:	881b      	ldrh	r3, [r3, #0]
 8004fda:	b29b      	uxth	r3, r3
 8004fdc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004fe0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004fe4:	b29a      	uxth	r2, r3
 8004fe6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004fea:	801a      	strh	r2, [r3, #0]
 8004fec:	e32c      	b.n	8005648 <USB_EPStartXfer+0x11d8>
 8004fee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004ff2:	2b3e      	cmp	r3, #62	; 0x3e
 8004ff4:	d818      	bhi.n	8005028 <USB_EPStartXfer+0xbb8>
 8004ff6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004ffa:	085b      	lsrs	r3, r3, #1
 8004ffc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005000:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005004:	f003 0301 	and.w	r3, r3, #1
 8005008:	2b00      	cmp	r3, #0
 800500a:	d004      	beq.n	8005016 <USB_EPStartXfer+0xba6>
 800500c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005010:	3301      	adds	r3, #1
 8005012:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005016:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800501a:	b29b      	uxth	r3, r3
 800501c:	029b      	lsls	r3, r3, #10
 800501e:	b29a      	uxth	r2, r3
 8005020:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005024:	801a      	strh	r2, [r3, #0]
 8005026:	e30f      	b.n	8005648 <USB_EPStartXfer+0x11d8>
 8005028:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800502c:	095b      	lsrs	r3, r3, #5
 800502e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005032:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005036:	f003 031f 	and.w	r3, r3, #31
 800503a:	2b00      	cmp	r3, #0
 800503c:	d104      	bne.n	8005048 <USB_EPStartXfer+0xbd8>
 800503e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005042:	3b01      	subs	r3, #1
 8005044:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005048:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800504c:	b29b      	uxth	r3, r3
 800504e:	029b      	lsls	r3, r3, #10
 8005050:	b29b      	uxth	r3, r3
 8005052:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005056:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800505a:	b29a      	uxth	r2, r3
 800505c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005060:	801a      	strh	r2, [r3, #0]
 8005062:	e2f1      	b.n	8005648 <USB_EPStartXfer+0x11d8>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8005064:	463b      	mov	r3, r7
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	78db      	ldrb	r3, [r3, #3]
 800506a:	2b02      	cmp	r3, #2
 800506c:	f040 818f 	bne.w	800538e <USB_EPStartXfer+0xf1e>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8005070:	463b      	mov	r3, r7
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	785b      	ldrb	r3, [r3, #1]
 8005076:	2b00      	cmp	r3, #0
 8005078:	d175      	bne.n	8005166 <USB_EPStartXfer+0xcf6>
 800507a:	1d3b      	adds	r3, r7, #4
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005082:	1d3b      	adds	r3, r7, #4
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800508a:	b29b      	uxth	r3, r3
 800508c:	461a      	mov	r2, r3
 800508e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005092:	4413      	add	r3, r2
 8005094:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005098:	463b      	mov	r3, r7
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	781b      	ldrb	r3, [r3, #0]
 800509e:	011a      	lsls	r2, r3, #4
 80050a0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80050a4:	4413      	add	r3, r2
 80050a6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80050aa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80050ae:	463b      	mov	r3, r7
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	691b      	ldr	r3, [r3, #16]
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d116      	bne.n	80050e6 <USB_EPStartXfer+0xc76>
 80050b8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80050bc:	881b      	ldrh	r3, [r3, #0]
 80050be:	b29b      	uxth	r3, r3
 80050c0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80050c4:	b29a      	uxth	r2, r3
 80050c6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80050ca:	801a      	strh	r2, [r3, #0]
 80050cc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80050d0:	881b      	ldrh	r3, [r3, #0]
 80050d2:	b29b      	uxth	r3, r3
 80050d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80050d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80050dc:	b29a      	uxth	r2, r3
 80050de:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80050e2:	801a      	strh	r2, [r3, #0]
 80050e4:	e065      	b.n	80051b2 <USB_EPStartXfer+0xd42>
 80050e6:	463b      	mov	r3, r7
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	691b      	ldr	r3, [r3, #16]
 80050ec:	2b3e      	cmp	r3, #62	; 0x3e
 80050ee:	d81a      	bhi.n	8005126 <USB_EPStartXfer+0xcb6>
 80050f0:	463b      	mov	r3, r7
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	691b      	ldr	r3, [r3, #16]
 80050f6:	085b      	lsrs	r3, r3, #1
 80050f8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80050fc:	463b      	mov	r3, r7
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	691b      	ldr	r3, [r3, #16]
 8005102:	f003 0301 	and.w	r3, r3, #1
 8005106:	2b00      	cmp	r3, #0
 8005108:	d004      	beq.n	8005114 <USB_EPStartXfer+0xca4>
 800510a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800510e:	3301      	adds	r3, #1
 8005110:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005114:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005118:	b29b      	uxth	r3, r3
 800511a:	029b      	lsls	r3, r3, #10
 800511c:	b29a      	uxth	r2, r3
 800511e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005122:	801a      	strh	r2, [r3, #0]
 8005124:	e045      	b.n	80051b2 <USB_EPStartXfer+0xd42>
 8005126:	463b      	mov	r3, r7
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	691b      	ldr	r3, [r3, #16]
 800512c:	095b      	lsrs	r3, r3, #5
 800512e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005132:	463b      	mov	r3, r7
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	691b      	ldr	r3, [r3, #16]
 8005138:	f003 031f 	and.w	r3, r3, #31
 800513c:	2b00      	cmp	r3, #0
 800513e:	d104      	bne.n	800514a <USB_EPStartXfer+0xcda>
 8005140:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005144:	3b01      	subs	r3, #1
 8005146:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800514a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800514e:	b29b      	uxth	r3, r3
 8005150:	029b      	lsls	r3, r3, #10
 8005152:	b29b      	uxth	r3, r3
 8005154:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005158:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800515c:	b29a      	uxth	r2, r3
 800515e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005162:	801a      	strh	r2, [r3, #0]
 8005164:	e025      	b.n	80051b2 <USB_EPStartXfer+0xd42>
 8005166:	463b      	mov	r3, r7
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	785b      	ldrb	r3, [r3, #1]
 800516c:	2b01      	cmp	r3, #1
 800516e:	d120      	bne.n	80051b2 <USB_EPStartXfer+0xd42>
 8005170:	1d3b      	adds	r3, r7, #4
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005178:	1d3b      	adds	r3, r7, #4
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005180:	b29b      	uxth	r3, r3
 8005182:	461a      	mov	r2, r3
 8005184:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005188:	4413      	add	r3, r2
 800518a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800518e:	463b      	mov	r3, r7
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	781b      	ldrb	r3, [r3, #0]
 8005194:	011a      	lsls	r2, r3, #4
 8005196:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800519a:	4413      	add	r3, r2
 800519c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80051a0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80051a4:	463b      	mov	r3, r7
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	691b      	ldr	r3, [r3, #16]
 80051aa:	b29a      	uxth	r2, r3
 80051ac:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80051b0:	801a      	strh	r2, [r3, #0]
 80051b2:	1d3b      	adds	r3, r7, #4
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80051ba:	463b      	mov	r3, r7
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	785b      	ldrb	r3, [r3, #1]
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d175      	bne.n	80052b0 <USB_EPStartXfer+0xe40>
 80051c4:	1d3b      	adds	r3, r7, #4
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80051cc:	1d3b      	adds	r3, r7, #4
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80051d4:	b29b      	uxth	r3, r3
 80051d6:	461a      	mov	r2, r3
 80051d8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80051dc:	4413      	add	r3, r2
 80051de:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80051e2:	463b      	mov	r3, r7
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	781b      	ldrb	r3, [r3, #0]
 80051e8:	011a      	lsls	r2, r3, #4
 80051ea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80051ee:	4413      	add	r3, r2
 80051f0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80051f4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80051f8:	463b      	mov	r3, r7
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	691b      	ldr	r3, [r3, #16]
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d116      	bne.n	8005230 <USB_EPStartXfer+0xdc0>
 8005202:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005206:	881b      	ldrh	r3, [r3, #0]
 8005208:	b29b      	uxth	r3, r3
 800520a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800520e:	b29a      	uxth	r2, r3
 8005210:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005214:	801a      	strh	r2, [r3, #0]
 8005216:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800521a:	881b      	ldrh	r3, [r3, #0]
 800521c:	b29b      	uxth	r3, r3
 800521e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005222:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005226:	b29a      	uxth	r2, r3
 8005228:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800522c:	801a      	strh	r2, [r3, #0]
 800522e:	e061      	b.n	80052f4 <USB_EPStartXfer+0xe84>
 8005230:	463b      	mov	r3, r7
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	691b      	ldr	r3, [r3, #16]
 8005236:	2b3e      	cmp	r3, #62	; 0x3e
 8005238:	d81a      	bhi.n	8005270 <USB_EPStartXfer+0xe00>
 800523a:	463b      	mov	r3, r7
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	691b      	ldr	r3, [r3, #16]
 8005240:	085b      	lsrs	r3, r3, #1
 8005242:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005246:	463b      	mov	r3, r7
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	691b      	ldr	r3, [r3, #16]
 800524c:	f003 0301 	and.w	r3, r3, #1
 8005250:	2b00      	cmp	r3, #0
 8005252:	d004      	beq.n	800525e <USB_EPStartXfer+0xdee>
 8005254:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005258:	3301      	adds	r3, #1
 800525a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800525e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005262:	b29b      	uxth	r3, r3
 8005264:	029b      	lsls	r3, r3, #10
 8005266:	b29a      	uxth	r2, r3
 8005268:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800526c:	801a      	strh	r2, [r3, #0]
 800526e:	e041      	b.n	80052f4 <USB_EPStartXfer+0xe84>
 8005270:	463b      	mov	r3, r7
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	691b      	ldr	r3, [r3, #16]
 8005276:	095b      	lsrs	r3, r3, #5
 8005278:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800527c:	463b      	mov	r3, r7
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	691b      	ldr	r3, [r3, #16]
 8005282:	f003 031f 	and.w	r3, r3, #31
 8005286:	2b00      	cmp	r3, #0
 8005288:	d104      	bne.n	8005294 <USB_EPStartXfer+0xe24>
 800528a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800528e:	3b01      	subs	r3, #1
 8005290:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005294:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005298:	b29b      	uxth	r3, r3
 800529a:	029b      	lsls	r3, r3, #10
 800529c:	b29b      	uxth	r3, r3
 800529e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80052a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80052a6:	b29a      	uxth	r2, r3
 80052a8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80052ac:	801a      	strh	r2, [r3, #0]
 80052ae:	e021      	b.n	80052f4 <USB_EPStartXfer+0xe84>
 80052b0:	463b      	mov	r3, r7
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	785b      	ldrb	r3, [r3, #1]
 80052b6:	2b01      	cmp	r3, #1
 80052b8:	d11c      	bne.n	80052f4 <USB_EPStartXfer+0xe84>
 80052ba:	1d3b      	adds	r3, r7, #4
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80052c2:	b29b      	uxth	r3, r3
 80052c4:	461a      	mov	r2, r3
 80052c6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80052ca:	4413      	add	r3, r2
 80052cc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80052d0:	463b      	mov	r3, r7
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	781b      	ldrb	r3, [r3, #0]
 80052d6:	011a      	lsls	r2, r3, #4
 80052d8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80052dc:	4413      	add	r3, r2
 80052de:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80052e2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80052e6:	463b      	mov	r3, r7
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	691b      	ldr	r3, [r3, #16]
 80052ec:	b29a      	uxth	r2, r3
 80052ee:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80052f2:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80052f4:	463b      	mov	r3, r7
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	69db      	ldr	r3, [r3, #28]
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	f000 81a4 	beq.w	8005648 <USB_EPStartXfer+0x11d8>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8005300:	1d3b      	adds	r3, r7, #4
 8005302:	681a      	ldr	r2, [r3, #0]
 8005304:	463b      	mov	r3, r7
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	781b      	ldrb	r3, [r3, #0]
 800530a:	009b      	lsls	r3, r3, #2
 800530c:	4413      	add	r3, r2
 800530e:	881b      	ldrh	r3, [r3, #0]
 8005310:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8005314:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8005318:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800531c:	2b00      	cmp	r3, #0
 800531e:	d005      	beq.n	800532c <USB_EPStartXfer+0xebc>
 8005320:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8005324:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005328:	2b00      	cmp	r3, #0
 800532a:	d10d      	bne.n	8005348 <USB_EPStartXfer+0xed8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800532c:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8005330:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8005334:	2b00      	cmp	r3, #0
 8005336:	f040 8187 	bne.w	8005648 <USB_EPStartXfer+0x11d8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800533a:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800533e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005342:	2b00      	cmp	r3, #0
 8005344:	f040 8180 	bne.w	8005648 <USB_EPStartXfer+0x11d8>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8005348:	1d3b      	adds	r3, r7, #4
 800534a:	681a      	ldr	r2, [r3, #0]
 800534c:	463b      	mov	r3, r7
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	781b      	ldrb	r3, [r3, #0]
 8005352:	009b      	lsls	r3, r3, #2
 8005354:	4413      	add	r3, r2
 8005356:	881b      	ldrh	r3, [r3, #0]
 8005358:	b29b      	uxth	r3, r3
 800535a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800535e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005362:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
 8005366:	1d3b      	adds	r3, r7, #4
 8005368:	681a      	ldr	r2, [r3, #0]
 800536a:	463b      	mov	r3, r7
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	781b      	ldrb	r3, [r3, #0]
 8005370:	009b      	lsls	r3, r3, #2
 8005372:	441a      	add	r2, r3
 8005374:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8005378:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800537c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005380:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005384:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005388:	b29b      	uxth	r3, r3
 800538a:	8013      	strh	r3, [r2, #0]
 800538c:	e15c      	b.n	8005648 <USB_EPStartXfer+0x11d8>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800538e:	463b      	mov	r3, r7
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	78db      	ldrb	r3, [r3, #3]
 8005394:	2b01      	cmp	r3, #1
 8005396:	f040 8155 	bne.w	8005644 <USB_EPStartXfer+0x11d4>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800539a:	463b      	mov	r3, r7
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	699a      	ldr	r2, [r3, #24]
 80053a0:	463b      	mov	r3, r7
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	691b      	ldr	r3, [r3, #16]
 80053a6:	429a      	cmp	r2, r3
 80053a8:	d90e      	bls.n	80053c8 <USB_EPStartXfer+0xf58>
        {
          len = ep->maxpacket;
 80053aa:	463b      	mov	r3, r7
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	691b      	ldr	r3, [r3, #16]
 80053b0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len -= len;
 80053b4:	463b      	mov	r3, r7
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	699a      	ldr	r2, [r3, #24]
 80053ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80053be:	1ad2      	subs	r2, r2, r3
 80053c0:	463b      	mov	r3, r7
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	619a      	str	r2, [r3, #24]
 80053c6:	e008      	b.n	80053da <USB_EPStartXfer+0xf6a>
        }
        else
        {
          len = ep->xfer_len;
 80053c8:	463b      	mov	r3, r7
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	699b      	ldr	r3, [r3, #24]
 80053ce:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len = 0U;
 80053d2:	463b      	mov	r3, r7
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	2200      	movs	r2, #0
 80053d8:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80053da:	463b      	mov	r3, r7
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	785b      	ldrb	r3, [r3, #1]
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d16f      	bne.n	80054c4 <USB_EPStartXfer+0x1054>
 80053e4:	1d3b      	adds	r3, r7, #4
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80053ec:	1d3b      	adds	r3, r7, #4
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80053f4:	b29b      	uxth	r3, r3
 80053f6:	461a      	mov	r2, r3
 80053f8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80053fc:	4413      	add	r3, r2
 80053fe:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005402:	463b      	mov	r3, r7
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	781b      	ldrb	r3, [r3, #0]
 8005408:	011a      	lsls	r2, r3, #4
 800540a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800540e:	4413      	add	r3, r2
 8005410:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005414:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005418:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800541c:	2b00      	cmp	r3, #0
 800541e:	d116      	bne.n	800544e <USB_EPStartXfer+0xfde>
 8005420:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005424:	881b      	ldrh	r3, [r3, #0]
 8005426:	b29b      	uxth	r3, r3
 8005428:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800542c:	b29a      	uxth	r2, r3
 800542e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005432:	801a      	strh	r2, [r3, #0]
 8005434:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005438:	881b      	ldrh	r3, [r3, #0]
 800543a:	b29b      	uxth	r3, r3
 800543c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005440:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005444:	b29a      	uxth	r2, r3
 8005446:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800544a:	801a      	strh	r2, [r3, #0]
 800544c:	e05f      	b.n	800550e <USB_EPStartXfer+0x109e>
 800544e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005452:	2b3e      	cmp	r3, #62	; 0x3e
 8005454:	d818      	bhi.n	8005488 <USB_EPStartXfer+0x1018>
 8005456:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800545a:	085b      	lsrs	r3, r3, #1
 800545c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005460:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005464:	f003 0301 	and.w	r3, r3, #1
 8005468:	2b00      	cmp	r3, #0
 800546a:	d004      	beq.n	8005476 <USB_EPStartXfer+0x1006>
 800546c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005470:	3301      	adds	r3, #1
 8005472:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005476:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800547a:	b29b      	uxth	r3, r3
 800547c:	029b      	lsls	r3, r3, #10
 800547e:	b29a      	uxth	r2, r3
 8005480:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005484:	801a      	strh	r2, [r3, #0]
 8005486:	e042      	b.n	800550e <USB_EPStartXfer+0x109e>
 8005488:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800548c:	095b      	lsrs	r3, r3, #5
 800548e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005492:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005496:	f003 031f 	and.w	r3, r3, #31
 800549a:	2b00      	cmp	r3, #0
 800549c:	d104      	bne.n	80054a8 <USB_EPStartXfer+0x1038>
 800549e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80054a2:	3b01      	subs	r3, #1
 80054a4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80054a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80054ac:	b29b      	uxth	r3, r3
 80054ae:	029b      	lsls	r3, r3, #10
 80054b0:	b29b      	uxth	r3, r3
 80054b2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80054b6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80054ba:	b29a      	uxth	r2, r3
 80054bc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80054c0:	801a      	strh	r2, [r3, #0]
 80054c2:	e024      	b.n	800550e <USB_EPStartXfer+0x109e>
 80054c4:	463b      	mov	r3, r7
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	785b      	ldrb	r3, [r3, #1]
 80054ca:	2b01      	cmp	r3, #1
 80054cc:	d11f      	bne.n	800550e <USB_EPStartXfer+0x109e>
 80054ce:	1d3b      	adds	r3, r7, #4
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80054d6:	1d3b      	adds	r3, r7, #4
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80054de:	b29b      	uxth	r3, r3
 80054e0:	461a      	mov	r2, r3
 80054e2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80054e6:	4413      	add	r3, r2
 80054e8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80054ec:	463b      	mov	r3, r7
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	781b      	ldrb	r3, [r3, #0]
 80054f2:	011a      	lsls	r2, r3, #4
 80054f4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80054f8:	4413      	add	r3, r2
 80054fa:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80054fe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8005502:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005506:	b29a      	uxth	r2, r3
 8005508:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800550c:	801a      	strh	r2, [r3, #0]
 800550e:	1d3b      	adds	r3, r7, #4
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005516:	463b      	mov	r3, r7
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	785b      	ldrb	r3, [r3, #1]
 800551c:	2b00      	cmp	r3, #0
 800551e:	d16f      	bne.n	8005600 <USB_EPStartXfer+0x1190>
 8005520:	1d3b      	adds	r3, r7, #4
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005528:	1d3b      	adds	r3, r7, #4
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005530:	b29b      	uxth	r3, r3
 8005532:	461a      	mov	r2, r3
 8005534:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005538:	4413      	add	r3, r2
 800553a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800553e:	463b      	mov	r3, r7
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	781b      	ldrb	r3, [r3, #0]
 8005544:	011a      	lsls	r2, r3, #4
 8005546:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800554a:	4413      	add	r3, r2
 800554c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005550:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8005554:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005558:	2b00      	cmp	r3, #0
 800555a:	d116      	bne.n	800558a <USB_EPStartXfer+0x111a>
 800555c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005560:	881b      	ldrh	r3, [r3, #0]
 8005562:	b29b      	uxth	r3, r3
 8005564:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005568:	b29a      	uxth	r2, r3
 800556a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800556e:	801a      	strh	r2, [r3, #0]
 8005570:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005574:	881b      	ldrh	r3, [r3, #0]
 8005576:	b29b      	uxth	r3, r3
 8005578:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800557c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005580:	b29a      	uxth	r2, r3
 8005582:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005586:	801a      	strh	r2, [r3, #0]
 8005588:	e05e      	b.n	8005648 <USB_EPStartXfer+0x11d8>
 800558a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800558e:	2b3e      	cmp	r3, #62	; 0x3e
 8005590:	d818      	bhi.n	80055c4 <USB_EPStartXfer+0x1154>
 8005592:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005596:	085b      	lsrs	r3, r3, #1
 8005598:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800559c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80055a0:	f003 0301 	and.w	r3, r3, #1
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d004      	beq.n	80055b2 <USB_EPStartXfer+0x1142>
 80055a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80055ac:	3301      	adds	r3, #1
 80055ae:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80055b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80055b6:	b29b      	uxth	r3, r3
 80055b8:	029b      	lsls	r3, r3, #10
 80055ba:	b29a      	uxth	r2, r3
 80055bc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80055c0:	801a      	strh	r2, [r3, #0]
 80055c2:	e041      	b.n	8005648 <USB_EPStartXfer+0x11d8>
 80055c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80055c8:	095b      	lsrs	r3, r3, #5
 80055ca:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80055ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80055d2:	f003 031f 	and.w	r3, r3, #31
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d104      	bne.n	80055e4 <USB_EPStartXfer+0x1174>
 80055da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80055de:	3b01      	subs	r3, #1
 80055e0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80055e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80055e8:	b29b      	uxth	r3, r3
 80055ea:	029b      	lsls	r3, r3, #10
 80055ec:	b29b      	uxth	r3, r3
 80055ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80055f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80055f6:	b29a      	uxth	r2, r3
 80055f8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80055fc:	801a      	strh	r2, [r3, #0]
 80055fe:	e023      	b.n	8005648 <USB_EPStartXfer+0x11d8>
 8005600:	463b      	mov	r3, r7
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	785b      	ldrb	r3, [r3, #1]
 8005606:	2b01      	cmp	r3, #1
 8005608:	d11e      	bne.n	8005648 <USB_EPStartXfer+0x11d8>
 800560a:	1d3b      	adds	r3, r7, #4
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005612:	b29b      	uxth	r3, r3
 8005614:	461a      	mov	r2, r3
 8005616:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800561a:	4413      	add	r3, r2
 800561c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005620:	463b      	mov	r3, r7
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	781b      	ldrb	r3, [r3, #0]
 8005626:	011a      	lsls	r2, r3, #4
 8005628:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800562c:	4413      	add	r3, r2
 800562e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005632:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005636:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800563a:	b29a      	uxth	r2, r3
 800563c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005640:	801a      	strh	r2, [r3, #0]
 8005642:	e001      	b.n	8005648 <USB_EPStartXfer+0x11d8>
      }
      else
      {
        return HAL_ERROR;
 8005644:	2301      	movs	r3, #1
 8005646:	e02e      	b.n	80056a6 <USB_EPStartXfer+0x1236>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005648:	1d3b      	adds	r3, r7, #4
 800564a:	681a      	ldr	r2, [r3, #0]
 800564c:	463b      	mov	r3, r7
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	781b      	ldrb	r3, [r3, #0]
 8005652:	009b      	lsls	r3, r3, #2
 8005654:	4413      	add	r3, r2
 8005656:	881b      	ldrh	r3, [r3, #0]
 8005658:	b29b      	uxth	r3, r3
 800565a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800565e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005662:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8005666:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800566a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800566e:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8005672:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8005676:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800567a:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 800567e:	1d3b      	adds	r3, r7, #4
 8005680:	681a      	ldr	r2, [r3, #0]
 8005682:	463b      	mov	r3, r7
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	781b      	ldrb	r3, [r3, #0]
 8005688:	009b      	lsls	r3, r3, #2
 800568a:	441a      	add	r2, r3
 800568c:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8005690:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005694:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005698:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800569c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80056a0:	b29b      	uxth	r3, r3
 80056a2:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80056a4:	2300      	movs	r3, #0
}
 80056a6:	4618      	mov	r0, r3
 80056a8:	f507 7788 	add.w	r7, r7, #272	; 0x110
 80056ac:	46bd      	mov	sp, r7
 80056ae:	bd80      	pop	{r7, pc}

080056b0 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80056b0:	b480      	push	{r7}
 80056b2:	b085      	sub	sp, #20
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	6078      	str	r0, [r7, #4]
 80056b8:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80056ba:	683b      	ldr	r3, [r7, #0]
 80056bc:	785b      	ldrb	r3, [r3, #1]
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d020      	beq.n	8005704 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80056c2:	687a      	ldr	r2, [r7, #4]
 80056c4:	683b      	ldr	r3, [r7, #0]
 80056c6:	781b      	ldrb	r3, [r3, #0]
 80056c8:	009b      	lsls	r3, r3, #2
 80056ca:	4413      	add	r3, r2
 80056cc:	881b      	ldrh	r3, [r3, #0]
 80056ce:	b29b      	uxth	r3, r3
 80056d0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80056d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80056d8:	81bb      	strh	r3, [r7, #12]
 80056da:	89bb      	ldrh	r3, [r7, #12]
 80056dc:	f083 0310 	eor.w	r3, r3, #16
 80056e0:	81bb      	strh	r3, [r7, #12]
 80056e2:	687a      	ldr	r2, [r7, #4]
 80056e4:	683b      	ldr	r3, [r7, #0]
 80056e6:	781b      	ldrb	r3, [r3, #0]
 80056e8:	009b      	lsls	r3, r3, #2
 80056ea:	441a      	add	r2, r3
 80056ec:	89bb      	ldrh	r3, [r7, #12]
 80056ee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80056f2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80056f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80056fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80056fe:	b29b      	uxth	r3, r3
 8005700:	8013      	strh	r3, [r2, #0]
 8005702:	e01f      	b.n	8005744 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8005704:	687a      	ldr	r2, [r7, #4]
 8005706:	683b      	ldr	r3, [r7, #0]
 8005708:	781b      	ldrb	r3, [r3, #0]
 800570a:	009b      	lsls	r3, r3, #2
 800570c:	4413      	add	r3, r2
 800570e:	881b      	ldrh	r3, [r3, #0]
 8005710:	b29b      	uxth	r3, r3
 8005712:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005716:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800571a:	81fb      	strh	r3, [r7, #14]
 800571c:	89fb      	ldrh	r3, [r7, #14]
 800571e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005722:	81fb      	strh	r3, [r7, #14]
 8005724:	687a      	ldr	r2, [r7, #4]
 8005726:	683b      	ldr	r3, [r7, #0]
 8005728:	781b      	ldrb	r3, [r3, #0]
 800572a:	009b      	lsls	r3, r3, #2
 800572c:	441a      	add	r2, r3
 800572e:	89fb      	ldrh	r3, [r7, #14]
 8005730:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005734:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005738:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800573c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005740:	b29b      	uxth	r3, r3
 8005742:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8005744:	2300      	movs	r3, #0
}
 8005746:	4618      	mov	r0, r3
 8005748:	3714      	adds	r7, #20
 800574a:	46bd      	mov	sp, r7
 800574c:	bc80      	pop	{r7}
 800574e:	4770      	bx	lr

08005750 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005750:	b480      	push	{r7}
 8005752:	b087      	sub	sp, #28
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]
 8005758:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800575a:	683b      	ldr	r3, [r7, #0]
 800575c:	7b1b      	ldrb	r3, [r3, #12]
 800575e:	2b00      	cmp	r3, #0
 8005760:	f040 809d 	bne.w	800589e <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8005764:	683b      	ldr	r3, [r7, #0]
 8005766:	785b      	ldrb	r3, [r3, #1]
 8005768:	2b00      	cmp	r3, #0
 800576a:	d04c      	beq.n	8005806 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800576c:	687a      	ldr	r2, [r7, #4]
 800576e:	683b      	ldr	r3, [r7, #0]
 8005770:	781b      	ldrb	r3, [r3, #0]
 8005772:	009b      	lsls	r3, r3, #2
 8005774:	4413      	add	r3, r2
 8005776:	881b      	ldrh	r3, [r3, #0]
 8005778:	823b      	strh	r3, [r7, #16]
 800577a:	8a3b      	ldrh	r3, [r7, #16]
 800577c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005780:	2b00      	cmp	r3, #0
 8005782:	d01b      	beq.n	80057bc <USB_EPClearStall+0x6c>
 8005784:	687a      	ldr	r2, [r7, #4]
 8005786:	683b      	ldr	r3, [r7, #0]
 8005788:	781b      	ldrb	r3, [r3, #0]
 800578a:	009b      	lsls	r3, r3, #2
 800578c:	4413      	add	r3, r2
 800578e:	881b      	ldrh	r3, [r3, #0]
 8005790:	b29b      	uxth	r3, r3
 8005792:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005796:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800579a:	81fb      	strh	r3, [r7, #14]
 800579c:	687a      	ldr	r2, [r7, #4]
 800579e:	683b      	ldr	r3, [r7, #0]
 80057a0:	781b      	ldrb	r3, [r3, #0]
 80057a2:	009b      	lsls	r3, r3, #2
 80057a4:	441a      	add	r2, r3
 80057a6:	89fb      	ldrh	r3, [r7, #14]
 80057a8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80057ac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80057b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80057b4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80057b8:	b29b      	uxth	r3, r3
 80057ba:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80057bc:	683b      	ldr	r3, [r7, #0]
 80057be:	78db      	ldrb	r3, [r3, #3]
 80057c0:	2b01      	cmp	r3, #1
 80057c2:	d06c      	beq.n	800589e <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80057c4:	687a      	ldr	r2, [r7, #4]
 80057c6:	683b      	ldr	r3, [r7, #0]
 80057c8:	781b      	ldrb	r3, [r3, #0]
 80057ca:	009b      	lsls	r3, r3, #2
 80057cc:	4413      	add	r3, r2
 80057ce:	881b      	ldrh	r3, [r3, #0]
 80057d0:	b29b      	uxth	r3, r3
 80057d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80057d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80057da:	81bb      	strh	r3, [r7, #12]
 80057dc:	89bb      	ldrh	r3, [r7, #12]
 80057de:	f083 0320 	eor.w	r3, r3, #32
 80057e2:	81bb      	strh	r3, [r7, #12]
 80057e4:	687a      	ldr	r2, [r7, #4]
 80057e6:	683b      	ldr	r3, [r7, #0]
 80057e8:	781b      	ldrb	r3, [r3, #0]
 80057ea:	009b      	lsls	r3, r3, #2
 80057ec:	441a      	add	r2, r3
 80057ee:	89bb      	ldrh	r3, [r7, #12]
 80057f0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80057f4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80057f8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80057fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005800:	b29b      	uxth	r3, r3
 8005802:	8013      	strh	r3, [r2, #0]
 8005804:	e04b      	b.n	800589e <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005806:	687a      	ldr	r2, [r7, #4]
 8005808:	683b      	ldr	r3, [r7, #0]
 800580a:	781b      	ldrb	r3, [r3, #0]
 800580c:	009b      	lsls	r3, r3, #2
 800580e:	4413      	add	r3, r2
 8005810:	881b      	ldrh	r3, [r3, #0]
 8005812:	82fb      	strh	r3, [r7, #22]
 8005814:	8afb      	ldrh	r3, [r7, #22]
 8005816:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800581a:	2b00      	cmp	r3, #0
 800581c:	d01b      	beq.n	8005856 <USB_EPClearStall+0x106>
 800581e:	687a      	ldr	r2, [r7, #4]
 8005820:	683b      	ldr	r3, [r7, #0]
 8005822:	781b      	ldrb	r3, [r3, #0]
 8005824:	009b      	lsls	r3, r3, #2
 8005826:	4413      	add	r3, r2
 8005828:	881b      	ldrh	r3, [r3, #0]
 800582a:	b29b      	uxth	r3, r3
 800582c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005830:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005834:	82bb      	strh	r3, [r7, #20]
 8005836:	687a      	ldr	r2, [r7, #4]
 8005838:	683b      	ldr	r3, [r7, #0]
 800583a:	781b      	ldrb	r3, [r3, #0]
 800583c:	009b      	lsls	r3, r3, #2
 800583e:	441a      	add	r2, r3
 8005840:	8abb      	ldrh	r3, [r7, #20]
 8005842:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005846:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800584a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800584e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005852:	b29b      	uxth	r3, r3
 8005854:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005856:	687a      	ldr	r2, [r7, #4]
 8005858:	683b      	ldr	r3, [r7, #0]
 800585a:	781b      	ldrb	r3, [r3, #0]
 800585c:	009b      	lsls	r3, r3, #2
 800585e:	4413      	add	r3, r2
 8005860:	881b      	ldrh	r3, [r3, #0]
 8005862:	b29b      	uxth	r3, r3
 8005864:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005868:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800586c:	827b      	strh	r3, [r7, #18]
 800586e:	8a7b      	ldrh	r3, [r7, #18]
 8005870:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005874:	827b      	strh	r3, [r7, #18]
 8005876:	8a7b      	ldrh	r3, [r7, #18]
 8005878:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800587c:	827b      	strh	r3, [r7, #18]
 800587e:	687a      	ldr	r2, [r7, #4]
 8005880:	683b      	ldr	r3, [r7, #0]
 8005882:	781b      	ldrb	r3, [r3, #0]
 8005884:	009b      	lsls	r3, r3, #2
 8005886:	441a      	add	r2, r3
 8005888:	8a7b      	ldrh	r3, [r7, #18]
 800588a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800588e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005892:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005896:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800589a:	b29b      	uxth	r3, r3
 800589c:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800589e:	2300      	movs	r3, #0
}
 80058a0:	4618      	mov	r0, r3
 80058a2:	371c      	adds	r7, #28
 80058a4:	46bd      	mov	sp, r7
 80058a6:	bc80      	pop	{r7}
 80058a8:	4770      	bx	lr

080058aa <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80058aa:	b480      	push	{r7}
 80058ac:	b083      	sub	sp, #12
 80058ae:	af00      	add	r7, sp, #0
 80058b0:	6078      	str	r0, [r7, #4]
 80058b2:	460b      	mov	r3, r1
 80058b4:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 80058b6:	78fb      	ldrb	r3, [r7, #3]
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d103      	bne.n	80058c4 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	2280      	movs	r2, #128	; 0x80
 80058c0:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80058c4:	2300      	movs	r3, #0
}
 80058c6:	4618      	mov	r0, r3
 80058c8:	370c      	adds	r7, #12
 80058ca:	46bd      	mov	sp, r7
 80058cc:	bc80      	pop	{r7}
 80058ce:	4770      	bx	lr

080058d0 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80058d0:	b480      	push	{r7}
 80058d2:	b083      	sub	sp, #12
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80058d8:	2300      	movs	r3, #0
}
 80058da:	4618      	mov	r0, r3
 80058dc:	370c      	adds	r7, #12
 80058de:	46bd      	mov	sp, r7
 80058e0:	bc80      	pop	{r7}
 80058e2:	4770      	bx	lr

080058e4 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 80058e4:	b480      	push	{r7}
 80058e6:	b083      	sub	sp, #12
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80058ec:	2300      	movs	r3, #0
}
 80058ee:	4618      	mov	r0, r3
 80058f0:	370c      	adds	r7, #12
 80058f2:	46bd      	mov	sp, r7
 80058f4:	bc80      	pop	{r7}
 80058f6:	4770      	bx	lr

080058f8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 80058f8:	b480      	push	{r7}
 80058fa:	b085      	sub	sp, #20
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005906:	b29b      	uxth	r3, r3
 8005908:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800590a:	68fb      	ldr	r3, [r7, #12]
}
 800590c:	4618      	mov	r0, r3
 800590e:	3714      	adds	r7, #20
 8005910:	46bd      	mov	sp, r7
 8005912:	bc80      	pop	{r7}
 8005914:	4770      	bx	lr

08005916 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8005916:	b480      	push	{r7}
 8005918:	b083      	sub	sp, #12
 800591a:	af00      	add	r7, sp, #0
 800591c:	6078      	str	r0, [r7, #4]
 800591e:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8005920:	2300      	movs	r3, #0
}
 8005922:	4618      	mov	r0, r3
 8005924:	370c      	adds	r7, #12
 8005926:	46bd      	mov	sp, r7
 8005928:	bc80      	pop	{r7}
 800592a:	4770      	bx	lr

0800592c <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800592c:	b480      	push	{r7}
 800592e:	b08d      	sub	sp, #52	; 0x34
 8005930:	af00      	add	r7, sp, #0
 8005932:	60f8      	str	r0, [r7, #12]
 8005934:	60b9      	str	r1, [r7, #8]
 8005936:	4611      	mov	r1, r2
 8005938:	461a      	mov	r2, r3
 800593a:	460b      	mov	r3, r1
 800593c:	80fb      	strh	r3, [r7, #6]
 800593e:	4613      	mov	r3, r2
 8005940:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8005942:	88bb      	ldrh	r3, [r7, #4]
 8005944:	3301      	adds	r3, #1
 8005946:	085b      	lsrs	r3, r3, #1
 8005948:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800594e:	68bb      	ldr	r3, [r7, #8]
 8005950:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005952:	88fb      	ldrh	r3, [r7, #6]
 8005954:	005a      	lsls	r2, r3, #1
 8005956:	69fb      	ldr	r3, [r7, #28]
 8005958:	4413      	add	r3, r2
 800595a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800595e:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8005960:	6a3b      	ldr	r3, [r7, #32]
 8005962:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005964:	e01e      	b.n	80059a4 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8005966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005968:	781b      	ldrb	r3, [r3, #0]
 800596a:	61bb      	str	r3, [r7, #24]
    pBuf++;
 800596c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800596e:	3301      	adds	r3, #1
 8005970:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8005972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005974:	781b      	ldrb	r3, [r3, #0]
 8005976:	b29b      	uxth	r3, r3
 8005978:	021b      	lsls	r3, r3, #8
 800597a:	b29b      	uxth	r3, r3
 800597c:	461a      	mov	r2, r3
 800597e:	69bb      	ldr	r3, [r7, #24]
 8005980:	4313      	orrs	r3, r2
 8005982:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8005984:	697b      	ldr	r3, [r7, #20]
 8005986:	b29a      	uxth	r2, r3
 8005988:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800598a:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800598c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800598e:	3302      	adds	r3, #2
 8005990:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8005992:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005994:	3302      	adds	r3, #2
 8005996:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8005998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800599a:	3301      	adds	r3, #1
 800599c:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 800599e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059a0:	3b01      	subs	r3, #1
 80059a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80059a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d1dd      	bne.n	8005966 <USB_WritePMA+0x3a>
  }
}
 80059aa:	bf00      	nop
 80059ac:	bf00      	nop
 80059ae:	3734      	adds	r7, #52	; 0x34
 80059b0:	46bd      	mov	sp, r7
 80059b2:	bc80      	pop	{r7}
 80059b4:	4770      	bx	lr

080059b6 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80059b6:	b480      	push	{r7}
 80059b8:	b08b      	sub	sp, #44	; 0x2c
 80059ba:	af00      	add	r7, sp, #0
 80059bc:	60f8      	str	r0, [r7, #12]
 80059be:	60b9      	str	r1, [r7, #8]
 80059c0:	4611      	mov	r1, r2
 80059c2:	461a      	mov	r2, r3
 80059c4:	460b      	mov	r3, r1
 80059c6:	80fb      	strh	r3, [r7, #6]
 80059c8:	4613      	mov	r3, r2
 80059ca:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80059cc:	88bb      	ldrh	r3, [r7, #4]
 80059ce:	085b      	lsrs	r3, r3, #1
 80059d0:	b29b      	uxth	r3, r3
 80059d2:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80059d8:	68bb      	ldr	r3, [r7, #8]
 80059da:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80059dc:	88fb      	ldrh	r3, [r7, #6]
 80059de:	005a      	lsls	r2, r3, #1
 80059e0:	697b      	ldr	r3, [r7, #20]
 80059e2:	4413      	add	r3, r2
 80059e4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80059e8:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 80059ea:	69bb      	ldr	r3, [r7, #24]
 80059ec:	627b      	str	r3, [r7, #36]	; 0x24
 80059ee:	e01b      	b.n	8005a28 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 80059f0:	6a3b      	ldr	r3, [r7, #32]
 80059f2:	881b      	ldrh	r3, [r3, #0]
 80059f4:	b29b      	uxth	r3, r3
 80059f6:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80059f8:	6a3b      	ldr	r3, [r7, #32]
 80059fa:	3302      	adds	r3, #2
 80059fc:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80059fe:	693b      	ldr	r3, [r7, #16]
 8005a00:	b2da      	uxtb	r2, r3
 8005a02:	69fb      	ldr	r3, [r7, #28]
 8005a04:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8005a06:	69fb      	ldr	r3, [r7, #28]
 8005a08:	3301      	adds	r3, #1
 8005a0a:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8005a0c:	693b      	ldr	r3, [r7, #16]
 8005a0e:	0a1b      	lsrs	r3, r3, #8
 8005a10:	b2da      	uxtb	r2, r3
 8005a12:	69fb      	ldr	r3, [r7, #28]
 8005a14:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8005a16:	69fb      	ldr	r3, [r7, #28]
 8005a18:	3301      	adds	r3, #1
 8005a1a:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8005a1c:	6a3b      	ldr	r3, [r7, #32]
 8005a1e:	3302      	adds	r3, #2
 8005a20:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8005a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a24:	3b01      	subs	r3, #1
 8005a26:	627b      	str	r3, [r7, #36]	; 0x24
 8005a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d1e0      	bne.n	80059f0 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8005a2e:	88bb      	ldrh	r3, [r7, #4]
 8005a30:	f003 0301 	and.w	r3, r3, #1
 8005a34:	b29b      	uxth	r3, r3
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d007      	beq.n	8005a4a <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8005a3a:	6a3b      	ldr	r3, [r7, #32]
 8005a3c:	881b      	ldrh	r3, [r3, #0]
 8005a3e:	b29b      	uxth	r3, r3
 8005a40:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8005a42:	693b      	ldr	r3, [r7, #16]
 8005a44:	b2da      	uxtb	r2, r3
 8005a46:	69fb      	ldr	r3, [r7, #28]
 8005a48:	701a      	strb	r2, [r3, #0]
  }
}
 8005a4a:	bf00      	nop
 8005a4c:	372c      	adds	r7, #44	; 0x2c
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	bc80      	pop	{r7}
 8005a52:	4770      	bx	lr

08005a54 <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005a54:	b580      	push	{r7, lr}
 8005a56:	b082      	sub	sp, #8
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	6078      	str	r0, [r7, #4]
 8005a5c:	460b      	mov	r3, r1
 8005a5e:	70fb      	strb	r3, [r7, #3]
  /* Open EP IN */
  USBD_LL_OpenEP(pdev, HID_EPIN_ADDR, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 8005a60:	2304      	movs	r3, #4
 8005a62:	2203      	movs	r2, #3
 8005a64:	2181      	movs	r1, #129	; 0x81
 8005a66:	6878      	ldr	r0, [r7, #4]
 8005a68:	f001 fc61 	bl	800732e <USBD_LL_OpenEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 1U;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2201      	movs	r2, #1
 8005a70:	62da      	str	r2, [r3, #44]	; 0x2c

  pdev->pClassData = USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 8005a72:	2010      	movs	r0, #16
 8005a74:	f001 fd70 	bl	8007558 <USBD_static_malloc>
 8005a78:	4602      	mov	r2, r0
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d101      	bne.n	8005a8e <USBD_HID_Init+0x3a>
  {
    return USBD_FAIL;
 8005a8a:	2302      	movs	r3, #2
 8005a8c:	e005      	b.n	8005a9a <USBD_HID_Init+0x46>
  }

  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005a94:	2200      	movs	r2, #0
 8005a96:	731a      	strb	r2, [r3, #12]

  return USBD_OK;
 8005a98:	2300      	movs	r3, #0
}
 8005a9a:	4618      	mov	r0, r3
 8005a9c:	3708      	adds	r7, #8
 8005a9e:	46bd      	mov	sp, r7
 8005aa0:	bd80      	pop	{r7, pc}

08005aa2 <USBD_HID_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_HID_DeInit(USBD_HandleTypeDef *pdev,
                                uint8_t cfgidx)
{
 8005aa2:	b580      	push	{r7, lr}
 8005aa4:	b082      	sub	sp, #8
 8005aa6:	af00      	add	r7, sp, #0
 8005aa8:	6078      	str	r0, [r7, #4]
 8005aaa:	460b      	mov	r3, r1
 8005aac:	70fb      	strb	r3, [r7, #3]
  /* Close HID EPs */
  USBD_LL_CloseEP(pdev, HID_EPIN_ADDR);
 8005aae:	2181      	movs	r1, #129	; 0x81
 8005ab0:	6878      	ldr	r0, [r7, #4]
 8005ab2:	f001 fc62 	bl	800737a <USBD_LL_CloseEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 0U;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	2200      	movs	r2, #0
 8005aba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* FRee allocated memory */
  if (pdev->pClassData != NULL)
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d009      	beq.n	8005ada <USBD_HID_DeInit+0x38>
  {
    USBD_free(pdev->pClassData);
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005acc:	4618      	mov	r0, r3
 8005ace:	f001 fd4f 	bl	8007570 <USBD_static_free>
    pdev->pClassData = NULL;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	2200      	movs	r2, #0
 8005ad6:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return USBD_OK;
 8005ada:	2300      	movs	r3, #0
}
 8005adc:	4618      	mov	r0, r3
 8005ade:	3708      	adds	r7, #8
 8005ae0:	46bd      	mov	sp, r7
 8005ae2:	bd80      	pop	{r7, pc}

08005ae4 <USBD_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_HID_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8005ae4:	b580      	push	{r7, lr}
 8005ae6:	b088      	sub	sp, #32
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	6078      	str	r0, [r7, #4]
 8005aec:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *) pdev->pClassData;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005af4:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 8005af6:	2300      	movs	r3, #0
 8005af8:	83fb      	strh	r3, [r7, #30]
  uint8_t *pbuf = NULL;
 8005afa:	2300      	movs	r3, #0
 8005afc:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 8005afe:	2300      	movs	r3, #0
 8005b00:	81fb      	strh	r3, [r7, #14]
  USBD_StatusTypeDef ret = USBD_OK;
 8005b02:	2300      	movs	r3, #0
 8005b04:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005b06:	683b      	ldr	r3, [r7, #0]
 8005b08:	781b      	ldrb	r3, [r3, #0]
 8005b0a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d045      	beq.n	8005b9e <USBD_HID_Setup+0xba>
 8005b12:	2b20      	cmp	r3, #32
 8005b14:	f040 80d3 	bne.w	8005cbe <USBD_HID_Setup+0x1da>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 8005b18:	683b      	ldr	r3, [r7, #0]
 8005b1a:	785b      	ldrb	r3, [r3, #1]
 8005b1c:	3b02      	subs	r3, #2
 8005b1e:	2b09      	cmp	r3, #9
 8005b20:	d835      	bhi.n	8005b8e <USBD_HID_Setup+0xaa>
 8005b22:	a201      	add	r2, pc, #4	; (adr r2, 8005b28 <USBD_HID_Setup+0x44>)
 8005b24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b28:	08005b7f 	.word	0x08005b7f
 8005b2c:	08005b5f 	.word	0x08005b5f
 8005b30:	08005b8f 	.word	0x08005b8f
 8005b34:	08005b8f 	.word	0x08005b8f
 8005b38:	08005b8f 	.word	0x08005b8f
 8005b3c:	08005b8f 	.word	0x08005b8f
 8005b40:	08005b8f 	.word	0x08005b8f
 8005b44:	08005b8f 	.word	0x08005b8f
 8005b48:	08005b6d 	.word	0x08005b6d
 8005b4c:	08005b51 	.word	0x08005b51
      {
        case HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8005b50:	683b      	ldr	r3, [r7, #0]
 8005b52:	885b      	ldrh	r3, [r3, #2]
 8005b54:	b2db      	uxtb	r3, r3
 8005b56:	461a      	mov	r2, r3
 8005b58:	693b      	ldr	r3, [r7, #16]
 8005b5a:	601a      	str	r2, [r3, #0]
          break;
 8005b5c:	e01e      	b.n	8005b9c <USBD_HID_Setup+0xb8>

        case HID_REQ_GET_PROTOCOL:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->Protocol, 1U);
 8005b5e:	693b      	ldr	r3, [r7, #16]
 8005b60:	2201      	movs	r2, #1
 8005b62:	4619      	mov	r1, r3
 8005b64:	6878      	ldr	r0, [r7, #4]
 8005b66:	f001 f922 	bl	8006dae <USBD_CtlSendData>
          break;
 8005b6a:	e017      	b.n	8005b9c <USBD_HID_Setup+0xb8>

        case HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8005b6c:	683b      	ldr	r3, [r7, #0]
 8005b6e:	885b      	ldrh	r3, [r3, #2]
 8005b70:	0a1b      	lsrs	r3, r3, #8
 8005b72:	b29b      	uxth	r3, r3
 8005b74:	b2db      	uxtb	r3, r3
 8005b76:	461a      	mov	r2, r3
 8005b78:	693b      	ldr	r3, [r7, #16]
 8005b7a:	605a      	str	r2, [r3, #4]
          break;
 8005b7c:	e00e      	b.n	8005b9c <USBD_HID_Setup+0xb8>

        case HID_REQ_GET_IDLE:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->IdleState, 1U);
 8005b7e:	693b      	ldr	r3, [r7, #16]
 8005b80:	3304      	adds	r3, #4
 8005b82:	2201      	movs	r2, #1
 8005b84:	4619      	mov	r1, r3
 8005b86:	6878      	ldr	r0, [r7, #4]
 8005b88:	f001 f911 	bl	8006dae <USBD_CtlSendData>
          break;
 8005b8c:	e006      	b.n	8005b9c <USBD_HID_Setup+0xb8>

        default:
          USBD_CtlError(pdev, req);
 8005b8e:	6839      	ldr	r1, [r7, #0]
 8005b90:	6878      	ldr	r0, [r7, #4]
 8005b92:	f001 f8a2 	bl	8006cda <USBD_CtlError>
          ret = USBD_FAIL;
 8005b96:	2302      	movs	r3, #2
 8005b98:	75fb      	strb	r3, [r7, #23]
          break;
 8005b9a:	bf00      	nop
      }
      break;
 8005b9c:	e096      	b.n	8005ccc <USBD_HID_Setup+0x1e8>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005b9e:	683b      	ldr	r3, [r7, #0]
 8005ba0:	785b      	ldrb	r3, [r3, #1]
 8005ba2:	2b0b      	cmp	r3, #11
 8005ba4:	f200 8083 	bhi.w	8005cae <USBD_HID_Setup+0x1ca>
 8005ba8:	a201      	add	r2, pc, #4	; (adr r2, 8005bb0 <USBD_HID_Setup+0xcc>)
 8005baa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bae:	bf00      	nop
 8005bb0:	08005be1 	.word	0x08005be1
 8005bb4:	08005caf 	.word	0x08005caf
 8005bb8:	08005caf 	.word	0x08005caf
 8005bbc:	08005caf 	.word	0x08005caf
 8005bc0:	08005caf 	.word	0x08005caf
 8005bc4:	08005caf 	.word	0x08005caf
 8005bc8:	08005c09 	.word	0x08005c09
 8005bcc:	08005caf 	.word	0x08005caf
 8005bd0:	08005caf 	.word	0x08005caf
 8005bd4:	08005caf 	.word	0x08005caf
 8005bd8:	08005c61 	.word	0x08005c61
 8005bdc:	08005c89 	.word	0x08005c89
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005be6:	2b03      	cmp	r3, #3
 8005be8:	d107      	bne.n	8005bfa <USBD_HID_Setup+0x116>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8005bea:	f107 030e 	add.w	r3, r7, #14
 8005bee:	2202      	movs	r2, #2
 8005bf0:	4619      	mov	r1, r3
 8005bf2:	6878      	ldr	r0, [r7, #4]
 8005bf4:	f001 f8db 	bl	8006dae <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005bf8:	e060      	b.n	8005cbc <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 8005bfa:	6839      	ldr	r1, [r7, #0]
 8005bfc:	6878      	ldr	r0, [r7, #4]
 8005bfe:	f001 f86c 	bl	8006cda <USBD_CtlError>
            ret = USBD_FAIL;
 8005c02:	2302      	movs	r3, #2
 8005c04:	75fb      	strb	r3, [r7, #23]
          break;
 8005c06:	e059      	b.n	8005cbc <USBD_HID_Setup+0x1d8>

        case USB_REQ_GET_DESCRIPTOR:
          if (req->wValue >> 8 == HID_REPORT_DESC)
 8005c08:	683b      	ldr	r3, [r7, #0]
 8005c0a:	885b      	ldrh	r3, [r3, #2]
 8005c0c:	0a1b      	lsrs	r3, r3, #8
 8005c0e:	b29b      	uxth	r3, r3
 8005c10:	2b22      	cmp	r3, #34	; 0x22
 8005c12:	d108      	bne.n	8005c26 <USBD_HID_Setup+0x142>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 8005c14:	683b      	ldr	r3, [r7, #0]
 8005c16:	88db      	ldrh	r3, [r3, #6]
 8005c18:	2b4a      	cmp	r3, #74	; 0x4a
 8005c1a:	bf28      	it	cs
 8005c1c:	234a      	movcs	r3, #74	; 0x4a
 8005c1e:	83fb      	strh	r3, [r7, #30]
            pbuf = HID_MOUSE_ReportDesc;
 8005c20:	4b2d      	ldr	r3, [pc, #180]	; (8005cd8 <USBD_HID_Setup+0x1f4>)
 8005c22:	61bb      	str	r3, [r7, #24]
 8005c24:	e015      	b.n	8005c52 <USBD_HID_Setup+0x16e>
          }
          else if (req->wValue >> 8 == HID_DESCRIPTOR_TYPE)
 8005c26:	683b      	ldr	r3, [r7, #0]
 8005c28:	885b      	ldrh	r3, [r3, #2]
 8005c2a:	0a1b      	lsrs	r3, r3, #8
 8005c2c:	b29b      	uxth	r3, r3
 8005c2e:	2b21      	cmp	r3, #33	; 0x21
 8005c30:	d108      	bne.n	8005c44 <USBD_HID_Setup+0x160>
          {
            pbuf = USBD_HID_Desc;
 8005c32:	4b2a      	ldr	r3, [pc, #168]	; (8005cdc <USBD_HID_Setup+0x1f8>)
 8005c34:	61bb      	str	r3, [r7, #24]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 8005c36:	683b      	ldr	r3, [r7, #0]
 8005c38:	88db      	ldrh	r3, [r3, #6]
 8005c3a:	2b09      	cmp	r3, #9
 8005c3c:	bf28      	it	cs
 8005c3e:	2309      	movcs	r3, #9
 8005c40:	83fb      	strh	r3, [r7, #30]
 8005c42:	e006      	b.n	8005c52 <USBD_HID_Setup+0x16e>
          }
          else
          {
            USBD_CtlError(pdev, req);
 8005c44:	6839      	ldr	r1, [r7, #0]
 8005c46:	6878      	ldr	r0, [r7, #4]
 8005c48:	f001 f847 	bl	8006cda <USBD_CtlError>
            ret = USBD_FAIL;
 8005c4c:	2302      	movs	r3, #2
 8005c4e:	75fb      	strb	r3, [r7, #23]
            break;
 8005c50:	e034      	b.n	8005cbc <USBD_HID_Setup+0x1d8>
          }
          USBD_CtlSendData(pdev, pbuf, len);
 8005c52:	8bfb      	ldrh	r3, [r7, #30]
 8005c54:	461a      	mov	r2, r3
 8005c56:	69b9      	ldr	r1, [r7, #24]
 8005c58:	6878      	ldr	r0, [r7, #4]
 8005c5a:	f001 f8a8 	bl	8006dae <USBD_CtlSendData>
          break;
 8005c5e:	e02d      	b.n	8005cbc <USBD_HID_Setup+0x1d8>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005c66:	2b03      	cmp	r3, #3
 8005c68:	d107      	bne.n	8005c7a <USBD_HID_Setup+0x196>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->AltSetting, 1U);
 8005c6a:	693b      	ldr	r3, [r7, #16]
 8005c6c:	3308      	adds	r3, #8
 8005c6e:	2201      	movs	r2, #1
 8005c70:	4619      	mov	r1, r3
 8005c72:	6878      	ldr	r0, [r7, #4]
 8005c74:	f001 f89b 	bl	8006dae <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005c78:	e020      	b.n	8005cbc <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 8005c7a:	6839      	ldr	r1, [r7, #0]
 8005c7c:	6878      	ldr	r0, [r7, #4]
 8005c7e:	f001 f82c 	bl	8006cda <USBD_CtlError>
            ret = USBD_FAIL;
 8005c82:	2302      	movs	r3, #2
 8005c84:	75fb      	strb	r3, [r7, #23]
          break;
 8005c86:	e019      	b.n	8005cbc <USBD_HID_Setup+0x1d8>

        case USB_REQ_SET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005c8e:	2b03      	cmp	r3, #3
 8005c90:	d106      	bne.n	8005ca0 <USBD_HID_Setup+0x1bc>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8005c92:	683b      	ldr	r3, [r7, #0]
 8005c94:	885b      	ldrh	r3, [r3, #2]
 8005c96:	b2db      	uxtb	r3, r3
 8005c98:	461a      	mov	r2, r3
 8005c9a:	693b      	ldr	r3, [r7, #16]
 8005c9c:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005c9e:	e00d      	b.n	8005cbc <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 8005ca0:	6839      	ldr	r1, [r7, #0]
 8005ca2:	6878      	ldr	r0, [r7, #4]
 8005ca4:	f001 f819 	bl	8006cda <USBD_CtlError>
            ret = USBD_FAIL;
 8005ca8:	2302      	movs	r3, #2
 8005caa:	75fb      	strb	r3, [r7, #23]
          break;
 8005cac:	e006      	b.n	8005cbc <USBD_HID_Setup+0x1d8>

        default:
          USBD_CtlError(pdev, req);
 8005cae:	6839      	ldr	r1, [r7, #0]
 8005cb0:	6878      	ldr	r0, [r7, #4]
 8005cb2:	f001 f812 	bl	8006cda <USBD_CtlError>
          ret = USBD_FAIL;
 8005cb6:	2302      	movs	r3, #2
 8005cb8:	75fb      	strb	r3, [r7, #23]
          break;
 8005cba:	bf00      	nop
      }
      break;
 8005cbc:	e006      	b.n	8005ccc <USBD_HID_Setup+0x1e8>

    default:
      USBD_CtlError(pdev, req);
 8005cbe:	6839      	ldr	r1, [r7, #0]
 8005cc0:	6878      	ldr	r0, [r7, #4]
 8005cc2:	f001 f80a 	bl	8006cda <USBD_CtlError>
      ret = USBD_FAIL;
 8005cc6:	2302      	movs	r3, #2
 8005cc8:	75fb      	strb	r3, [r7, #23]
      break;
 8005cca:	bf00      	nop
  }

  return ret;
 8005ccc:	7dfb      	ldrb	r3, [r7, #23]
}
 8005cce:	4618      	mov	r0, r3
 8005cd0:	3720      	adds	r7, #32
 8005cd2:	46bd      	mov	sp, r7
 8005cd4:	bd80      	pop	{r7, pc}
 8005cd6:	bf00      	nop
 8005cd8:	200000c8 	.word	0x200000c8
 8005cdc:	200000b0 	.word	0x200000b0

08005ce0 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 8005ce0:	b480      	push	{r7}
 8005ce2:	b083      	sub	sp, #12
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_CfgFSDesc);
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	2222      	movs	r2, #34	; 0x22
 8005cec:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgFSDesc;
 8005cee:	4b03      	ldr	r3, [pc, #12]	; (8005cfc <USBD_HID_GetFSCfgDesc+0x1c>)
}
 8005cf0:	4618      	mov	r0, r3
 8005cf2:	370c      	adds	r7, #12
 8005cf4:	46bd      	mov	sp, r7
 8005cf6:	bc80      	pop	{r7}
 8005cf8:	4770      	bx	lr
 8005cfa:	bf00      	nop
 8005cfc:	20000044 	.word	0x20000044

08005d00 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 8005d00:	b480      	push	{r7}
 8005d02:	b083      	sub	sp, #12
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_CfgHSDesc);
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	2222      	movs	r2, #34	; 0x22
 8005d0c:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgHSDesc;
 8005d0e:	4b03      	ldr	r3, [pc, #12]	; (8005d1c <USBD_HID_GetHSCfgDesc+0x1c>)
}
 8005d10:	4618      	mov	r0, r3
 8005d12:	370c      	adds	r7, #12
 8005d14:	46bd      	mov	sp, r7
 8005d16:	bc80      	pop	{r7}
 8005d18:	4770      	bx	lr
 8005d1a:	bf00      	nop
 8005d1c:	20000068 	.word	0x20000068

08005d20 <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005d20:	b480      	push	{r7}
 8005d22:	b083      	sub	sp, #12
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_OtherSpeedCfgDesc);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	2222      	movs	r2, #34	; 0x22
 8005d2c:	801a      	strh	r2, [r3, #0]
  return USBD_HID_OtherSpeedCfgDesc;
 8005d2e:	4b03      	ldr	r3, [pc, #12]	; (8005d3c <USBD_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 8005d30:	4618      	mov	r0, r3
 8005d32:	370c      	adds	r7, #12
 8005d34:	46bd      	mov	sp, r7
 8005d36:	bc80      	pop	{r7}
 8005d38:	4770      	bx	lr
 8005d3a:	bf00      	nop
 8005d3c:	2000008c 	.word	0x2000008c

08005d40 <USBD_HID_DataIn>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_HID_DataIn(USBD_HandleTypeDef *pdev,
                                uint8_t epnum)
{
 8005d40:	b480      	push	{r7}
 8005d42:	b083      	sub	sp, #12
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	6078      	str	r0, [r7, #4]
 8005d48:	460b      	mov	r3, r1
 8005d4a:	70fb      	strb	r3, [r7, #3]

  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d52:	2200      	movs	r2, #0
 8005d54:	731a      	strb	r2, [r3, #12]
  return USBD_OK;
 8005d56:	2300      	movs	r3, #0
}
 8005d58:	4618      	mov	r0, r3
 8005d5a:	370c      	adds	r7, #12
 8005d5c:	46bd      	mov	sp, r7
 8005d5e:	bc80      	pop	{r7}
 8005d60:	4770      	bx	lr
	...

08005d64 <USBD_HID_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8005d64:	b480      	push	{r7}
 8005d66:	b083      	sub	sp, #12
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_DeviceQualifierDesc);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	220a      	movs	r2, #10
 8005d70:	801a      	strh	r2, [r3, #0]
  return USBD_HID_DeviceQualifierDesc;
 8005d72:	4b03      	ldr	r3, [pc, #12]	; (8005d80 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 8005d74:	4618      	mov	r0, r3
 8005d76:	370c      	adds	r7, #12
 8005d78:	46bd      	mov	sp, r7
 8005d7a:	bc80      	pop	{r7}
 8005d7c:	4770      	bx	lr
 8005d7e:	bf00      	nop
 8005d80:	200000bc 	.word	0x200000bc

08005d84 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005d84:	b580      	push	{r7, lr}
 8005d86:	b084      	sub	sp, #16
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	60f8      	str	r0, [r7, #12]
 8005d8c:	60b9      	str	r1, [r7, #8]
 8005d8e:	4613      	mov	r3, r2
 8005d90:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d101      	bne.n	8005d9c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8005d98:	2302      	movs	r3, #2
 8005d9a:	e01a      	b.n	8005dd2 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d003      	beq.n	8005dae <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	2200      	movs	r2, #0
 8005daa:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005dae:	68bb      	ldr	r3, [r7, #8]
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d003      	beq.n	8005dbc <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	68ba      	ldr	r2, [r7, #8]
 8005db8:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	2201      	movs	r2, #1
 8005dc0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	79fa      	ldrb	r2, [r7, #7]
 8005dc8:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8005dca:	68f8      	ldr	r0, [r7, #12]
 8005dcc:	f001 fa4c 	bl	8007268 <USBD_LL_Init>

  return USBD_OK;
 8005dd0:	2300      	movs	r3, #0
}
 8005dd2:	4618      	mov	r0, r3
 8005dd4:	3710      	adds	r7, #16
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	bd80      	pop	{r7, pc}

08005dda <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005dda:	b480      	push	{r7}
 8005ddc:	b085      	sub	sp, #20
 8005dde:	af00      	add	r7, sp, #0
 8005de0:	6078      	str	r0, [r7, #4]
 8005de2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8005de4:	2300      	movs	r3, #0
 8005de6:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8005de8:	683b      	ldr	r3, [r7, #0]
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d006      	beq.n	8005dfc <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	683a      	ldr	r2, [r7, #0]
 8005df2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8005df6:	2300      	movs	r3, #0
 8005df8:	73fb      	strb	r3, [r7, #15]
 8005dfa:	e001      	b.n	8005e00 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8005dfc:	2302      	movs	r3, #2
 8005dfe:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8005e00:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e02:	4618      	mov	r0, r3
 8005e04:	3714      	adds	r7, #20
 8005e06:	46bd      	mov	sp, r7
 8005e08:	bc80      	pop	{r7}
 8005e0a:	4770      	bx	lr

08005e0c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005e0c:	b580      	push	{r7, lr}
 8005e0e:	b082      	sub	sp, #8
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8005e14:	6878      	ldr	r0, [r7, #4]
 8005e16:	f001 fa6f 	bl	80072f8 <USBD_LL_Start>

  return USBD_OK;
 8005e1a:	2300      	movs	r3, #0
}
 8005e1c:	4618      	mov	r0, r3
 8005e1e:	3708      	adds	r7, #8
 8005e20:	46bd      	mov	sp, r7
 8005e22:	bd80      	pop	{r7, pc}

08005e24 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8005e24:	b480      	push	{r7}
 8005e26:	b083      	sub	sp, #12
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005e2c:	2300      	movs	r3, #0
}
 8005e2e:	4618      	mov	r0, r3
 8005e30:	370c      	adds	r7, #12
 8005e32:	46bd      	mov	sp, r7
 8005e34:	bc80      	pop	{r7}
 8005e36:	4770      	bx	lr

08005e38 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8005e38:	b580      	push	{r7, lr}
 8005e3a:	b084      	sub	sp, #16
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	6078      	str	r0, [r7, #4]
 8005e40:	460b      	mov	r3, r1
 8005e42:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8005e44:	2302      	movs	r3, #2
 8005e46:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d00c      	beq.n	8005e6c <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	78fa      	ldrb	r2, [r7, #3]
 8005e5c:	4611      	mov	r1, r2
 8005e5e:	6878      	ldr	r0, [r7, #4]
 8005e60:	4798      	blx	r3
 8005e62:	4603      	mov	r3, r0
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d101      	bne.n	8005e6c <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8005e68:	2300      	movs	r3, #0
 8005e6a:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8005e6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e6e:	4618      	mov	r0, r3
 8005e70:	3710      	adds	r7, #16
 8005e72:	46bd      	mov	sp, r7
 8005e74:	bd80      	pop	{r7, pc}

08005e76 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8005e76:	b580      	push	{r7, lr}
 8005e78:	b082      	sub	sp, #8
 8005e7a:	af00      	add	r7, sp, #0
 8005e7c:	6078      	str	r0, [r7, #4]
 8005e7e:	460b      	mov	r3, r1
 8005e80:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005e88:	685b      	ldr	r3, [r3, #4]
 8005e8a:	78fa      	ldrb	r2, [r7, #3]
 8005e8c:	4611      	mov	r1, r2
 8005e8e:	6878      	ldr	r0, [r7, #4]
 8005e90:	4798      	blx	r3

  return USBD_OK;
 8005e92:	2300      	movs	r3, #0
}
 8005e94:	4618      	mov	r0, r3
 8005e96:	3708      	adds	r7, #8
 8005e98:	46bd      	mov	sp, r7
 8005e9a:	bd80      	pop	{r7, pc}

08005e9c <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005e9c:	b580      	push	{r7, lr}
 8005e9e:	b082      	sub	sp, #8
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	6078      	str	r0, [r7, #4]
 8005ea4:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8005eac:	6839      	ldr	r1, [r7, #0]
 8005eae:	4618      	mov	r0, r3
 8005eb0:	f000 fed7 	bl	8006c62 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	2201      	movs	r2, #1
 8005eb8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8005ec2:	461a      	mov	r2, r3
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8005ed0:	f003 031f 	and.w	r3, r3, #31
 8005ed4:	2b02      	cmp	r3, #2
 8005ed6:	d016      	beq.n	8005f06 <USBD_LL_SetupStage+0x6a>
 8005ed8:	2b02      	cmp	r3, #2
 8005eda:	d81c      	bhi.n	8005f16 <USBD_LL_SetupStage+0x7a>
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d002      	beq.n	8005ee6 <USBD_LL_SetupStage+0x4a>
 8005ee0:	2b01      	cmp	r3, #1
 8005ee2:	d008      	beq.n	8005ef6 <USBD_LL_SetupStage+0x5a>
 8005ee4:	e017      	b.n	8005f16 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8005eec:	4619      	mov	r1, r3
 8005eee:	6878      	ldr	r0, [r7, #4]
 8005ef0:	f000 f9ca 	bl	8006288 <USBD_StdDevReq>
      break;
 8005ef4:	e01a      	b.n	8005f2c <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8005efc:	4619      	mov	r1, r3
 8005efe:	6878      	ldr	r0, [r7, #4]
 8005f00:	f000 fa2c 	bl	800635c <USBD_StdItfReq>
      break;
 8005f04:	e012      	b.n	8005f2c <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8005f0c:	4619      	mov	r1, r3
 8005f0e:	6878      	ldr	r0, [r7, #4]
 8005f10:	f000 fa6c 	bl	80063ec <USBD_StdEPReq>
      break;
 8005f14:	e00a      	b.n	8005f2c <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8005f1c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005f20:	b2db      	uxtb	r3, r3
 8005f22:	4619      	mov	r1, r3
 8005f24:	6878      	ldr	r0, [r7, #4]
 8005f26:	f001 fa47 	bl	80073b8 <USBD_LL_StallEP>
      break;
 8005f2a:	bf00      	nop
  }

  return USBD_OK;
 8005f2c:	2300      	movs	r3, #0
}
 8005f2e:	4618      	mov	r0, r3
 8005f30:	3708      	adds	r7, #8
 8005f32:	46bd      	mov	sp, r7
 8005f34:	bd80      	pop	{r7, pc}

08005f36 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005f36:	b580      	push	{r7, lr}
 8005f38:	b086      	sub	sp, #24
 8005f3a:	af00      	add	r7, sp, #0
 8005f3c:	60f8      	str	r0, [r7, #12]
 8005f3e:	460b      	mov	r3, r1
 8005f40:	607a      	str	r2, [r7, #4]
 8005f42:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8005f44:	7afb      	ldrb	r3, [r7, #11]
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d14b      	bne.n	8005fe2 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8005f50:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005f58:	2b03      	cmp	r3, #3
 8005f5a:	d134      	bne.n	8005fc6 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8005f5c:	697b      	ldr	r3, [r7, #20]
 8005f5e:	68da      	ldr	r2, [r3, #12]
 8005f60:	697b      	ldr	r3, [r7, #20]
 8005f62:	691b      	ldr	r3, [r3, #16]
 8005f64:	429a      	cmp	r2, r3
 8005f66:	d919      	bls.n	8005f9c <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8005f68:	697b      	ldr	r3, [r7, #20]
 8005f6a:	68da      	ldr	r2, [r3, #12]
 8005f6c:	697b      	ldr	r3, [r7, #20]
 8005f6e:	691b      	ldr	r3, [r3, #16]
 8005f70:	1ad2      	subs	r2, r2, r3
 8005f72:	697b      	ldr	r3, [r7, #20]
 8005f74:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8005f76:	697b      	ldr	r3, [r7, #20]
 8005f78:	68da      	ldr	r2, [r3, #12]
 8005f7a:	697b      	ldr	r3, [r7, #20]
 8005f7c:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8005f7e:	429a      	cmp	r2, r3
 8005f80:	d203      	bcs.n	8005f8a <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8005f82:	697b      	ldr	r3, [r7, #20]
 8005f84:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8005f86:	b29b      	uxth	r3, r3
 8005f88:	e002      	b.n	8005f90 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8005f8a:	697b      	ldr	r3, [r7, #20]
 8005f8c:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8005f8e:	b29b      	uxth	r3, r3
 8005f90:	461a      	mov	r2, r3
 8005f92:	6879      	ldr	r1, [r7, #4]
 8005f94:	68f8      	ldr	r0, [r7, #12]
 8005f96:	f000 ff38 	bl	8006e0a <USBD_CtlContinueRx>
 8005f9a:	e038      	b.n	800600e <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005fa2:	691b      	ldr	r3, [r3, #16]
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d00a      	beq.n	8005fbe <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8005fae:	2b03      	cmp	r3, #3
 8005fb0:	d105      	bne.n	8005fbe <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005fb8:	691b      	ldr	r3, [r3, #16]
 8005fba:	68f8      	ldr	r0, [r7, #12]
 8005fbc:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8005fbe:	68f8      	ldr	r0, [r7, #12]
 8005fc0:	f000 ff35 	bl	8006e2e <USBD_CtlSendStatus>
 8005fc4:	e023      	b.n	800600e <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005fcc:	2b05      	cmp	r3, #5
 8005fce:	d11e      	bne.n	800600e <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	2200      	movs	r2, #0
 8005fd4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8005fd8:	2100      	movs	r1, #0
 8005fda:	68f8      	ldr	r0, [r7, #12]
 8005fdc:	f001 f9ec 	bl	80073b8 <USBD_LL_StallEP>
 8005fe0:	e015      	b.n	800600e <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005fe8:	699b      	ldr	r3, [r3, #24]
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d00d      	beq.n	800600a <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8005ff4:	2b03      	cmp	r3, #3
 8005ff6:	d108      	bne.n	800600a <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005ffe:	699b      	ldr	r3, [r3, #24]
 8006000:	7afa      	ldrb	r2, [r7, #11]
 8006002:	4611      	mov	r1, r2
 8006004:	68f8      	ldr	r0, [r7, #12]
 8006006:	4798      	blx	r3
 8006008:	e001      	b.n	800600e <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800600a:	2302      	movs	r3, #2
 800600c:	e000      	b.n	8006010 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800600e:	2300      	movs	r3, #0
}
 8006010:	4618      	mov	r0, r3
 8006012:	3718      	adds	r7, #24
 8006014:	46bd      	mov	sp, r7
 8006016:	bd80      	pop	{r7, pc}

08006018 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006018:	b580      	push	{r7, lr}
 800601a:	b086      	sub	sp, #24
 800601c:	af00      	add	r7, sp, #0
 800601e:	60f8      	str	r0, [r7, #12]
 8006020:	460b      	mov	r3, r1
 8006022:	607a      	str	r2, [r7, #4]
 8006024:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8006026:	7afb      	ldrb	r3, [r7, #11]
 8006028:	2b00      	cmp	r3, #0
 800602a:	d17f      	bne.n	800612c <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	3314      	adds	r3, #20
 8006030:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006038:	2b02      	cmp	r3, #2
 800603a:	d15c      	bne.n	80060f6 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800603c:	697b      	ldr	r3, [r7, #20]
 800603e:	68da      	ldr	r2, [r3, #12]
 8006040:	697b      	ldr	r3, [r7, #20]
 8006042:	691b      	ldr	r3, [r3, #16]
 8006044:	429a      	cmp	r2, r3
 8006046:	d915      	bls.n	8006074 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8006048:	697b      	ldr	r3, [r7, #20]
 800604a:	68da      	ldr	r2, [r3, #12]
 800604c:	697b      	ldr	r3, [r7, #20]
 800604e:	691b      	ldr	r3, [r3, #16]
 8006050:	1ad2      	subs	r2, r2, r3
 8006052:	697b      	ldr	r3, [r7, #20]
 8006054:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8006056:	697b      	ldr	r3, [r7, #20]
 8006058:	68db      	ldr	r3, [r3, #12]
 800605a:	b29b      	uxth	r3, r3
 800605c:	461a      	mov	r2, r3
 800605e:	6879      	ldr	r1, [r7, #4]
 8006060:	68f8      	ldr	r0, [r7, #12]
 8006062:	f000 fec0 	bl	8006de6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006066:	2300      	movs	r3, #0
 8006068:	2200      	movs	r2, #0
 800606a:	2100      	movs	r1, #0
 800606c:	68f8      	ldr	r0, [r7, #12]
 800606e:	f001 fa4f 	bl	8007510 <USBD_LL_PrepareReceive>
 8006072:	e04e      	b.n	8006112 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8006074:	697b      	ldr	r3, [r7, #20]
 8006076:	689b      	ldr	r3, [r3, #8]
 8006078:	697a      	ldr	r2, [r7, #20]
 800607a:	6912      	ldr	r2, [r2, #16]
 800607c:	fbb3 f1f2 	udiv	r1, r3, r2
 8006080:	fb02 f201 	mul.w	r2, r2, r1
 8006084:	1a9b      	subs	r3, r3, r2
 8006086:	2b00      	cmp	r3, #0
 8006088:	d11c      	bne.n	80060c4 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800608a:	697b      	ldr	r3, [r7, #20]
 800608c:	689a      	ldr	r2, [r3, #8]
 800608e:	697b      	ldr	r3, [r7, #20]
 8006090:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8006092:	429a      	cmp	r2, r3
 8006094:	d316      	bcc.n	80060c4 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8006096:	697b      	ldr	r3, [r7, #20]
 8006098:	689a      	ldr	r2, [r3, #8]
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80060a0:	429a      	cmp	r2, r3
 80060a2:	d20f      	bcs.n	80060c4 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80060a4:	2200      	movs	r2, #0
 80060a6:	2100      	movs	r1, #0
 80060a8:	68f8      	ldr	r0, [r7, #12]
 80060aa:	f000 fe9c 	bl	8006de6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	2200      	movs	r2, #0
 80060b2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80060b6:	2300      	movs	r3, #0
 80060b8:	2200      	movs	r2, #0
 80060ba:	2100      	movs	r1, #0
 80060bc:	68f8      	ldr	r0, [r7, #12]
 80060be:	f001 fa27 	bl	8007510 <USBD_LL_PrepareReceive>
 80060c2:	e026      	b.n	8006112 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80060ca:	68db      	ldr	r3, [r3, #12]
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d00a      	beq.n	80060e6 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80060d6:	2b03      	cmp	r3, #3
 80060d8:	d105      	bne.n	80060e6 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80060e0:	68db      	ldr	r3, [r3, #12]
 80060e2:	68f8      	ldr	r0, [r7, #12]
 80060e4:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80060e6:	2180      	movs	r1, #128	; 0x80
 80060e8:	68f8      	ldr	r0, [r7, #12]
 80060ea:	f001 f965 	bl	80073b8 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80060ee:	68f8      	ldr	r0, [r7, #12]
 80060f0:	f000 feb0 	bl	8006e54 <USBD_CtlReceiveStatus>
 80060f4:	e00d      	b.n	8006112 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80060fc:	2b04      	cmp	r3, #4
 80060fe:	d004      	beq.n	800610a <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006106:	2b00      	cmp	r3, #0
 8006108:	d103      	bne.n	8006112 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800610a:	2180      	movs	r1, #128	; 0x80
 800610c:	68f8      	ldr	r0, [r7, #12]
 800610e:	f001 f953 	bl	80073b8 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006118:	2b01      	cmp	r3, #1
 800611a:	d11d      	bne.n	8006158 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800611c:	68f8      	ldr	r0, [r7, #12]
 800611e:	f7ff fe81 	bl	8005e24 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	2200      	movs	r2, #0
 8006126:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800612a:	e015      	b.n	8006158 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006132:	695b      	ldr	r3, [r3, #20]
 8006134:	2b00      	cmp	r3, #0
 8006136:	d00d      	beq.n	8006154 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800613e:	2b03      	cmp	r3, #3
 8006140:	d108      	bne.n	8006154 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006148:	695b      	ldr	r3, [r3, #20]
 800614a:	7afa      	ldrb	r2, [r7, #11]
 800614c:	4611      	mov	r1, r2
 800614e:	68f8      	ldr	r0, [r7, #12]
 8006150:	4798      	blx	r3
 8006152:	e001      	b.n	8006158 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006154:	2302      	movs	r3, #2
 8006156:	e000      	b.n	800615a <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8006158:	2300      	movs	r3, #0
}
 800615a:	4618      	mov	r0, r3
 800615c:	3718      	adds	r7, #24
 800615e:	46bd      	mov	sp, r7
 8006160:	bd80      	pop	{r7, pc}

08006162 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006162:	b580      	push	{r7, lr}
 8006164:	b082      	sub	sp, #8
 8006166:	af00      	add	r7, sp, #0
 8006168:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800616a:	2340      	movs	r3, #64	; 0x40
 800616c:	2200      	movs	r2, #0
 800616e:	2100      	movs	r1, #0
 8006170:	6878      	ldr	r0, [r7, #4]
 8006172:	f001 f8dc 	bl	800732e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	2201      	movs	r2, #1
 800617a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	2240      	movs	r2, #64	; 0x40
 8006182:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006186:	2340      	movs	r3, #64	; 0x40
 8006188:	2200      	movs	r2, #0
 800618a:	2180      	movs	r1, #128	; 0x80
 800618c:	6878      	ldr	r0, [r7, #4]
 800618e:	f001 f8ce 	bl	800732e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	2201      	movs	r2, #1
 8006196:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	2240      	movs	r2, #64	; 0x40
 800619c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	2201      	movs	r2, #1
 80061a2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	2200      	movs	r2, #0
 80061aa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	2200      	movs	r2, #0
 80061b2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	2200      	movs	r2, #0
 80061b8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d009      	beq.n	80061da <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80061cc:	685b      	ldr	r3, [r3, #4]
 80061ce:	687a      	ldr	r2, [r7, #4]
 80061d0:	6852      	ldr	r2, [r2, #4]
 80061d2:	b2d2      	uxtb	r2, r2
 80061d4:	4611      	mov	r1, r2
 80061d6:	6878      	ldr	r0, [r7, #4]
 80061d8:	4798      	blx	r3
  }

  return USBD_OK;
 80061da:	2300      	movs	r3, #0
}
 80061dc:	4618      	mov	r0, r3
 80061de:	3708      	adds	r7, #8
 80061e0:	46bd      	mov	sp, r7
 80061e2:	bd80      	pop	{r7, pc}

080061e4 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80061e4:	b480      	push	{r7}
 80061e6:	b083      	sub	sp, #12
 80061e8:	af00      	add	r7, sp, #0
 80061ea:	6078      	str	r0, [r7, #4]
 80061ec:	460b      	mov	r3, r1
 80061ee:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	78fa      	ldrb	r2, [r7, #3]
 80061f4:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80061f6:	2300      	movs	r3, #0
}
 80061f8:	4618      	mov	r0, r3
 80061fa:	370c      	adds	r7, #12
 80061fc:	46bd      	mov	sp, r7
 80061fe:	bc80      	pop	{r7}
 8006200:	4770      	bx	lr

08006202 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006202:	b480      	push	{r7}
 8006204:	b083      	sub	sp, #12
 8006206:	af00      	add	r7, sp, #0
 8006208:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	2204      	movs	r2, #4
 800621a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800621e:	2300      	movs	r3, #0
}
 8006220:	4618      	mov	r0, r3
 8006222:	370c      	adds	r7, #12
 8006224:	46bd      	mov	sp, r7
 8006226:	bc80      	pop	{r7}
 8006228:	4770      	bx	lr

0800622a <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800622a:	b480      	push	{r7}
 800622c:	b083      	sub	sp, #12
 800622e:	af00      	add	r7, sp, #0
 8006230:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006238:	2b04      	cmp	r3, #4
 800623a:	d105      	bne.n	8006248 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006248:	2300      	movs	r3, #0
}
 800624a:	4618      	mov	r0, r3
 800624c:	370c      	adds	r7, #12
 800624e:	46bd      	mov	sp, r7
 8006250:	bc80      	pop	{r7}
 8006252:	4770      	bx	lr

08006254 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006254:	b580      	push	{r7, lr}
 8006256:	b082      	sub	sp, #8
 8006258:	af00      	add	r7, sp, #0
 800625a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006262:	2b03      	cmp	r3, #3
 8006264:	d10b      	bne.n	800627e <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800626c:	69db      	ldr	r3, [r3, #28]
 800626e:	2b00      	cmp	r3, #0
 8006270:	d005      	beq.n	800627e <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006278:	69db      	ldr	r3, [r3, #28]
 800627a:	6878      	ldr	r0, [r7, #4]
 800627c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800627e:	2300      	movs	r3, #0
}
 8006280:	4618      	mov	r0, r3
 8006282:	3708      	adds	r7, #8
 8006284:	46bd      	mov	sp, r7
 8006286:	bd80      	pop	{r7, pc}

08006288 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8006288:	b580      	push	{r7, lr}
 800628a:	b084      	sub	sp, #16
 800628c:	af00      	add	r7, sp, #0
 800628e:	6078      	str	r0, [r7, #4]
 8006290:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006292:	2300      	movs	r3, #0
 8006294:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006296:	683b      	ldr	r3, [r7, #0]
 8006298:	781b      	ldrb	r3, [r3, #0]
 800629a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800629e:	2b40      	cmp	r3, #64	; 0x40
 80062a0:	d005      	beq.n	80062ae <USBD_StdDevReq+0x26>
 80062a2:	2b40      	cmp	r3, #64	; 0x40
 80062a4:	d84f      	bhi.n	8006346 <USBD_StdDevReq+0xbe>
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d009      	beq.n	80062be <USBD_StdDevReq+0x36>
 80062aa:	2b20      	cmp	r3, #32
 80062ac:	d14b      	bne.n	8006346 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80062b4:	689b      	ldr	r3, [r3, #8]
 80062b6:	6839      	ldr	r1, [r7, #0]
 80062b8:	6878      	ldr	r0, [r7, #4]
 80062ba:	4798      	blx	r3
      break;
 80062bc:	e048      	b.n	8006350 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80062be:	683b      	ldr	r3, [r7, #0]
 80062c0:	785b      	ldrb	r3, [r3, #1]
 80062c2:	2b09      	cmp	r3, #9
 80062c4:	d839      	bhi.n	800633a <USBD_StdDevReq+0xb2>
 80062c6:	a201      	add	r2, pc, #4	; (adr r2, 80062cc <USBD_StdDevReq+0x44>)
 80062c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062cc:	0800631d 	.word	0x0800631d
 80062d0:	08006331 	.word	0x08006331
 80062d4:	0800633b 	.word	0x0800633b
 80062d8:	08006327 	.word	0x08006327
 80062dc:	0800633b 	.word	0x0800633b
 80062e0:	080062ff 	.word	0x080062ff
 80062e4:	080062f5 	.word	0x080062f5
 80062e8:	0800633b 	.word	0x0800633b
 80062ec:	08006313 	.word	0x08006313
 80062f0:	08006309 	.word	0x08006309
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80062f4:	6839      	ldr	r1, [r7, #0]
 80062f6:	6878      	ldr	r0, [r7, #4]
 80062f8:	f000 f9dc 	bl	80066b4 <USBD_GetDescriptor>
          break;
 80062fc:	e022      	b.n	8006344 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80062fe:	6839      	ldr	r1, [r7, #0]
 8006300:	6878      	ldr	r0, [r7, #4]
 8006302:	f000 fb3f 	bl	8006984 <USBD_SetAddress>
          break;
 8006306:	e01d      	b.n	8006344 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8006308:	6839      	ldr	r1, [r7, #0]
 800630a:	6878      	ldr	r0, [r7, #4]
 800630c:	f000 fb7e 	bl	8006a0c <USBD_SetConfig>
          break;
 8006310:	e018      	b.n	8006344 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006312:	6839      	ldr	r1, [r7, #0]
 8006314:	6878      	ldr	r0, [r7, #4]
 8006316:	f000 fc07 	bl	8006b28 <USBD_GetConfig>
          break;
 800631a:	e013      	b.n	8006344 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800631c:	6839      	ldr	r1, [r7, #0]
 800631e:	6878      	ldr	r0, [r7, #4]
 8006320:	f000 fc37 	bl	8006b92 <USBD_GetStatus>
          break;
 8006324:	e00e      	b.n	8006344 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006326:	6839      	ldr	r1, [r7, #0]
 8006328:	6878      	ldr	r0, [r7, #4]
 800632a:	f000 fc65 	bl	8006bf8 <USBD_SetFeature>
          break;
 800632e:	e009      	b.n	8006344 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006330:	6839      	ldr	r1, [r7, #0]
 8006332:	6878      	ldr	r0, [r7, #4]
 8006334:	f000 fc74 	bl	8006c20 <USBD_ClrFeature>
          break;
 8006338:	e004      	b.n	8006344 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800633a:	6839      	ldr	r1, [r7, #0]
 800633c:	6878      	ldr	r0, [r7, #4]
 800633e:	f000 fccc 	bl	8006cda <USBD_CtlError>
          break;
 8006342:	bf00      	nop
      }
      break;
 8006344:	e004      	b.n	8006350 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8006346:	6839      	ldr	r1, [r7, #0]
 8006348:	6878      	ldr	r0, [r7, #4]
 800634a:	f000 fcc6 	bl	8006cda <USBD_CtlError>
      break;
 800634e:	bf00      	nop
  }

  return ret;
 8006350:	7bfb      	ldrb	r3, [r7, #15]
}
 8006352:	4618      	mov	r0, r3
 8006354:	3710      	adds	r7, #16
 8006356:	46bd      	mov	sp, r7
 8006358:	bd80      	pop	{r7, pc}
 800635a:	bf00      	nop

0800635c <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800635c:	b580      	push	{r7, lr}
 800635e:	b084      	sub	sp, #16
 8006360:	af00      	add	r7, sp, #0
 8006362:	6078      	str	r0, [r7, #4]
 8006364:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006366:	2300      	movs	r3, #0
 8006368:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800636a:	683b      	ldr	r3, [r7, #0]
 800636c:	781b      	ldrb	r3, [r3, #0]
 800636e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006372:	2b40      	cmp	r3, #64	; 0x40
 8006374:	d005      	beq.n	8006382 <USBD_StdItfReq+0x26>
 8006376:	2b40      	cmp	r3, #64	; 0x40
 8006378:	d82e      	bhi.n	80063d8 <USBD_StdItfReq+0x7c>
 800637a:	2b00      	cmp	r3, #0
 800637c:	d001      	beq.n	8006382 <USBD_StdItfReq+0x26>
 800637e:	2b20      	cmp	r3, #32
 8006380:	d12a      	bne.n	80063d8 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006388:	3b01      	subs	r3, #1
 800638a:	2b02      	cmp	r3, #2
 800638c:	d81d      	bhi.n	80063ca <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800638e:	683b      	ldr	r3, [r7, #0]
 8006390:	889b      	ldrh	r3, [r3, #4]
 8006392:	b2db      	uxtb	r3, r3
 8006394:	2b01      	cmp	r3, #1
 8006396:	d813      	bhi.n	80063c0 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800639e:	689b      	ldr	r3, [r3, #8]
 80063a0:	6839      	ldr	r1, [r7, #0]
 80063a2:	6878      	ldr	r0, [r7, #4]
 80063a4:	4798      	blx	r3
 80063a6:	4603      	mov	r3, r0
 80063a8:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80063aa:	683b      	ldr	r3, [r7, #0]
 80063ac:	88db      	ldrh	r3, [r3, #6]
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d110      	bne.n	80063d4 <USBD_StdItfReq+0x78>
 80063b2:	7bfb      	ldrb	r3, [r7, #15]
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d10d      	bne.n	80063d4 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 80063b8:	6878      	ldr	r0, [r7, #4]
 80063ba:	f000 fd38 	bl	8006e2e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80063be:	e009      	b.n	80063d4 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 80063c0:	6839      	ldr	r1, [r7, #0]
 80063c2:	6878      	ldr	r0, [r7, #4]
 80063c4:	f000 fc89 	bl	8006cda <USBD_CtlError>
          break;
 80063c8:	e004      	b.n	80063d4 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 80063ca:	6839      	ldr	r1, [r7, #0]
 80063cc:	6878      	ldr	r0, [r7, #4]
 80063ce:	f000 fc84 	bl	8006cda <USBD_CtlError>
          break;
 80063d2:	e000      	b.n	80063d6 <USBD_StdItfReq+0x7a>
          break;
 80063d4:	bf00      	nop
      }
      break;
 80063d6:	e004      	b.n	80063e2 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 80063d8:	6839      	ldr	r1, [r7, #0]
 80063da:	6878      	ldr	r0, [r7, #4]
 80063dc:	f000 fc7d 	bl	8006cda <USBD_CtlError>
      break;
 80063e0:	bf00      	nop
  }

  return USBD_OK;
 80063e2:	2300      	movs	r3, #0
}
 80063e4:	4618      	mov	r0, r3
 80063e6:	3710      	adds	r7, #16
 80063e8:	46bd      	mov	sp, r7
 80063ea:	bd80      	pop	{r7, pc}

080063ec <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 80063ec:	b580      	push	{r7, lr}
 80063ee:	b084      	sub	sp, #16
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	6078      	str	r0, [r7, #4]
 80063f4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80063f6:	2300      	movs	r3, #0
 80063f8:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 80063fa:	683b      	ldr	r3, [r7, #0]
 80063fc:	889b      	ldrh	r3, [r3, #4]
 80063fe:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006400:	683b      	ldr	r3, [r7, #0]
 8006402:	781b      	ldrb	r3, [r3, #0]
 8006404:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006408:	2b40      	cmp	r3, #64	; 0x40
 800640a:	d007      	beq.n	800641c <USBD_StdEPReq+0x30>
 800640c:	2b40      	cmp	r3, #64	; 0x40
 800640e:	f200 8146 	bhi.w	800669e <USBD_StdEPReq+0x2b2>
 8006412:	2b00      	cmp	r3, #0
 8006414:	d00a      	beq.n	800642c <USBD_StdEPReq+0x40>
 8006416:	2b20      	cmp	r3, #32
 8006418:	f040 8141 	bne.w	800669e <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006422:	689b      	ldr	r3, [r3, #8]
 8006424:	6839      	ldr	r1, [r7, #0]
 8006426:	6878      	ldr	r0, [r7, #4]
 8006428:	4798      	blx	r3
      break;
 800642a:	e13d      	b.n	80066a8 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800642c:	683b      	ldr	r3, [r7, #0]
 800642e:	781b      	ldrb	r3, [r3, #0]
 8006430:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006434:	2b20      	cmp	r3, #32
 8006436:	d10a      	bne.n	800644e <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800643e:	689b      	ldr	r3, [r3, #8]
 8006440:	6839      	ldr	r1, [r7, #0]
 8006442:	6878      	ldr	r0, [r7, #4]
 8006444:	4798      	blx	r3
 8006446:	4603      	mov	r3, r0
 8006448:	73fb      	strb	r3, [r7, #15]

        return ret;
 800644a:	7bfb      	ldrb	r3, [r7, #15]
 800644c:	e12d      	b.n	80066aa <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 800644e:	683b      	ldr	r3, [r7, #0]
 8006450:	785b      	ldrb	r3, [r3, #1]
 8006452:	2b03      	cmp	r3, #3
 8006454:	d007      	beq.n	8006466 <USBD_StdEPReq+0x7a>
 8006456:	2b03      	cmp	r3, #3
 8006458:	f300 811b 	bgt.w	8006692 <USBD_StdEPReq+0x2a6>
 800645c:	2b00      	cmp	r3, #0
 800645e:	d072      	beq.n	8006546 <USBD_StdEPReq+0x15a>
 8006460:	2b01      	cmp	r3, #1
 8006462:	d03a      	beq.n	80064da <USBD_StdEPReq+0xee>
 8006464:	e115      	b.n	8006692 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800646c:	2b02      	cmp	r3, #2
 800646e:	d002      	beq.n	8006476 <USBD_StdEPReq+0x8a>
 8006470:	2b03      	cmp	r3, #3
 8006472:	d015      	beq.n	80064a0 <USBD_StdEPReq+0xb4>
 8006474:	e02b      	b.n	80064ce <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006476:	7bbb      	ldrb	r3, [r7, #14]
 8006478:	2b00      	cmp	r3, #0
 800647a:	d00c      	beq.n	8006496 <USBD_StdEPReq+0xaa>
 800647c:	7bbb      	ldrb	r3, [r7, #14]
 800647e:	2b80      	cmp	r3, #128	; 0x80
 8006480:	d009      	beq.n	8006496 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8006482:	7bbb      	ldrb	r3, [r7, #14]
 8006484:	4619      	mov	r1, r3
 8006486:	6878      	ldr	r0, [r7, #4]
 8006488:	f000 ff96 	bl	80073b8 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800648c:	2180      	movs	r1, #128	; 0x80
 800648e:	6878      	ldr	r0, [r7, #4]
 8006490:	f000 ff92 	bl	80073b8 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006494:	e020      	b.n	80064d8 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8006496:	6839      	ldr	r1, [r7, #0]
 8006498:	6878      	ldr	r0, [r7, #4]
 800649a:	f000 fc1e 	bl	8006cda <USBD_CtlError>
              break;
 800649e:	e01b      	b.n	80064d8 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80064a0:	683b      	ldr	r3, [r7, #0]
 80064a2:	885b      	ldrh	r3, [r3, #2]
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d10e      	bne.n	80064c6 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 80064a8:	7bbb      	ldrb	r3, [r7, #14]
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d00b      	beq.n	80064c6 <USBD_StdEPReq+0xda>
 80064ae:	7bbb      	ldrb	r3, [r7, #14]
 80064b0:	2b80      	cmp	r3, #128	; 0x80
 80064b2:	d008      	beq.n	80064c6 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80064b4:	683b      	ldr	r3, [r7, #0]
 80064b6:	88db      	ldrh	r3, [r3, #6]
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d104      	bne.n	80064c6 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 80064bc:	7bbb      	ldrb	r3, [r7, #14]
 80064be:	4619      	mov	r1, r3
 80064c0:	6878      	ldr	r0, [r7, #4]
 80064c2:	f000 ff79 	bl	80073b8 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 80064c6:	6878      	ldr	r0, [r7, #4]
 80064c8:	f000 fcb1 	bl	8006e2e <USBD_CtlSendStatus>

              break;
 80064cc:	e004      	b.n	80064d8 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 80064ce:	6839      	ldr	r1, [r7, #0]
 80064d0:	6878      	ldr	r0, [r7, #4]
 80064d2:	f000 fc02 	bl	8006cda <USBD_CtlError>
              break;
 80064d6:	bf00      	nop
          }
          break;
 80064d8:	e0e0      	b.n	800669c <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80064e0:	2b02      	cmp	r3, #2
 80064e2:	d002      	beq.n	80064ea <USBD_StdEPReq+0xfe>
 80064e4:	2b03      	cmp	r3, #3
 80064e6:	d015      	beq.n	8006514 <USBD_StdEPReq+0x128>
 80064e8:	e026      	b.n	8006538 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80064ea:	7bbb      	ldrb	r3, [r7, #14]
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d00c      	beq.n	800650a <USBD_StdEPReq+0x11e>
 80064f0:	7bbb      	ldrb	r3, [r7, #14]
 80064f2:	2b80      	cmp	r3, #128	; 0x80
 80064f4:	d009      	beq.n	800650a <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80064f6:	7bbb      	ldrb	r3, [r7, #14]
 80064f8:	4619      	mov	r1, r3
 80064fa:	6878      	ldr	r0, [r7, #4]
 80064fc:	f000 ff5c 	bl	80073b8 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8006500:	2180      	movs	r1, #128	; 0x80
 8006502:	6878      	ldr	r0, [r7, #4]
 8006504:	f000 ff58 	bl	80073b8 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006508:	e01c      	b.n	8006544 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800650a:	6839      	ldr	r1, [r7, #0]
 800650c:	6878      	ldr	r0, [r7, #4]
 800650e:	f000 fbe4 	bl	8006cda <USBD_CtlError>
              break;
 8006512:	e017      	b.n	8006544 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006514:	683b      	ldr	r3, [r7, #0]
 8006516:	885b      	ldrh	r3, [r3, #2]
 8006518:	2b00      	cmp	r3, #0
 800651a:	d112      	bne.n	8006542 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800651c:	7bbb      	ldrb	r3, [r7, #14]
 800651e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006522:	2b00      	cmp	r3, #0
 8006524:	d004      	beq.n	8006530 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8006526:	7bbb      	ldrb	r3, [r7, #14]
 8006528:	4619      	mov	r1, r3
 800652a:	6878      	ldr	r0, [r7, #4]
 800652c:	f000 ff63 	bl	80073f6 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8006530:	6878      	ldr	r0, [r7, #4]
 8006532:	f000 fc7c 	bl	8006e2e <USBD_CtlSendStatus>
              }
              break;
 8006536:	e004      	b.n	8006542 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8006538:	6839      	ldr	r1, [r7, #0]
 800653a:	6878      	ldr	r0, [r7, #4]
 800653c:	f000 fbcd 	bl	8006cda <USBD_CtlError>
              break;
 8006540:	e000      	b.n	8006544 <USBD_StdEPReq+0x158>
              break;
 8006542:	bf00      	nop
          }
          break;
 8006544:	e0aa      	b.n	800669c <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800654c:	2b02      	cmp	r3, #2
 800654e:	d002      	beq.n	8006556 <USBD_StdEPReq+0x16a>
 8006550:	2b03      	cmp	r3, #3
 8006552:	d032      	beq.n	80065ba <USBD_StdEPReq+0x1ce>
 8006554:	e097      	b.n	8006686 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006556:	7bbb      	ldrb	r3, [r7, #14]
 8006558:	2b00      	cmp	r3, #0
 800655a:	d007      	beq.n	800656c <USBD_StdEPReq+0x180>
 800655c:	7bbb      	ldrb	r3, [r7, #14]
 800655e:	2b80      	cmp	r3, #128	; 0x80
 8006560:	d004      	beq.n	800656c <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8006562:	6839      	ldr	r1, [r7, #0]
 8006564:	6878      	ldr	r0, [r7, #4]
 8006566:	f000 fbb8 	bl	8006cda <USBD_CtlError>
                break;
 800656a:	e091      	b.n	8006690 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800656c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006570:	2b00      	cmp	r3, #0
 8006572:	da0b      	bge.n	800658c <USBD_StdEPReq+0x1a0>
 8006574:	7bbb      	ldrb	r3, [r7, #14]
 8006576:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800657a:	4613      	mov	r3, r2
 800657c:	009b      	lsls	r3, r3, #2
 800657e:	4413      	add	r3, r2
 8006580:	009b      	lsls	r3, r3, #2
 8006582:	3310      	adds	r3, #16
 8006584:	687a      	ldr	r2, [r7, #4]
 8006586:	4413      	add	r3, r2
 8006588:	3304      	adds	r3, #4
 800658a:	e00b      	b.n	80065a4 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800658c:	7bbb      	ldrb	r3, [r7, #14]
 800658e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006592:	4613      	mov	r3, r2
 8006594:	009b      	lsls	r3, r3, #2
 8006596:	4413      	add	r3, r2
 8006598:	009b      	lsls	r3, r3, #2
 800659a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800659e:	687a      	ldr	r2, [r7, #4]
 80065a0:	4413      	add	r3, r2
 80065a2:	3304      	adds	r3, #4
 80065a4:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80065a6:	68bb      	ldr	r3, [r7, #8]
 80065a8:	2200      	movs	r2, #0
 80065aa:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80065ac:	68bb      	ldr	r3, [r7, #8]
 80065ae:	2202      	movs	r2, #2
 80065b0:	4619      	mov	r1, r3
 80065b2:	6878      	ldr	r0, [r7, #4]
 80065b4:	f000 fbfb 	bl	8006dae <USBD_CtlSendData>
              break;
 80065b8:	e06a      	b.n	8006690 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80065ba:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80065be:	2b00      	cmp	r3, #0
 80065c0:	da11      	bge.n	80065e6 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80065c2:	7bbb      	ldrb	r3, [r7, #14]
 80065c4:	f003 020f 	and.w	r2, r3, #15
 80065c8:	6879      	ldr	r1, [r7, #4]
 80065ca:	4613      	mov	r3, r2
 80065cc:	009b      	lsls	r3, r3, #2
 80065ce:	4413      	add	r3, r2
 80065d0:	009b      	lsls	r3, r3, #2
 80065d2:	440b      	add	r3, r1
 80065d4:	3318      	adds	r3, #24
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d117      	bne.n	800660c <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 80065dc:	6839      	ldr	r1, [r7, #0]
 80065de:	6878      	ldr	r0, [r7, #4]
 80065e0:	f000 fb7b 	bl	8006cda <USBD_CtlError>
                  break;
 80065e4:	e054      	b.n	8006690 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80065e6:	7bbb      	ldrb	r3, [r7, #14]
 80065e8:	f003 020f 	and.w	r2, r3, #15
 80065ec:	6879      	ldr	r1, [r7, #4]
 80065ee:	4613      	mov	r3, r2
 80065f0:	009b      	lsls	r3, r3, #2
 80065f2:	4413      	add	r3, r2
 80065f4:	009b      	lsls	r3, r3, #2
 80065f6:	440b      	add	r3, r1
 80065f8:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d104      	bne.n	800660c <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8006602:	6839      	ldr	r1, [r7, #0]
 8006604:	6878      	ldr	r0, [r7, #4]
 8006606:	f000 fb68 	bl	8006cda <USBD_CtlError>
                  break;
 800660a:	e041      	b.n	8006690 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800660c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006610:	2b00      	cmp	r3, #0
 8006612:	da0b      	bge.n	800662c <USBD_StdEPReq+0x240>
 8006614:	7bbb      	ldrb	r3, [r7, #14]
 8006616:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800661a:	4613      	mov	r3, r2
 800661c:	009b      	lsls	r3, r3, #2
 800661e:	4413      	add	r3, r2
 8006620:	009b      	lsls	r3, r3, #2
 8006622:	3310      	adds	r3, #16
 8006624:	687a      	ldr	r2, [r7, #4]
 8006626:	4413      	add	r3, r2
 8006628:	3304      	adds	r3, #4
 800662a:	e00b      	b.n	8006644 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800662c:	7bbb      	ldrb	r3, [r7, #14]
 800662e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006632:	4613      	mov	r3, r2
 8006634:	009b      	lsls	r3, r3, #2
 8006636:	4413      	add	r3, r2
 8006638:	009b      	lsls	r3, r3, #2
 800663a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800663e:	687a      	ldr	r2, [r7, #4]
 8006640:	4413      	add	r3, r2
 8006642:	3304      	adds	r3, #4
 8006644:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006646:	7bbb      	ldrb	r3, [r7, #14]
 8006648:	2b00      	cmp	r3, #0
 800664a:	d002      	beq.n	8006652 <USBD_StdEPReq+0x266>
 800664c:	7bbb      	ldrb	r3, [r7, #14]
 800664e:	2b80      	cmp	r3, #128	; 0x80
 8006650:	d103      	bne.n	800665a <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8006652:	68bb      	ldr	r3, [r7, #8]
 8006654:	2200      	movs	r2, #0
 8006656:	601a      	str	r2, [r3, #0]
 8006658:	e00e      	b.n	8006678 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800665a:	7bbb      	ldrb	r3, [r7, #14]
 800665c:	4619      	mov	r1, r3
 800665e:	6878      	ldr	r0, [r7, #4]
 8006660:	f000 fee8 	bl	8007434 <USBD_LL_IsStallEP>
 8006664:	4603      	mov	r3, r0
 8006666:	2b00      	cmp	r3, #0
 8006668:	d003      	beq.n	8006672 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800666a:	68bb      	ldr	r3, [r7, #8]
 800666c:	2201      	movs	r2, #1
 800666e:	601a      	str	r2, [r3, #0]
 8006670:	e002      	b.n	8006678 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8006672:	68bb      	ldr	r3, [r7, #8]
 8006674:	2200      	movs	r2, #0
 8006676:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8006678:	68bb      	ldr	r3, [r7, #8]
 800667a:	2202      	movs	r2, #2
 800667c:	4619      	mov	r1, r3
 800667e:	6878      	ldr	r0, [r7, #4]
 8006680:	f000 fb95 	bl	8006dae <USBD_CtlSendData>
              break;
 8006684:	e004      	b.n	8006690 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8006686:	6839      	ldr	r1, [r7, #0]
 8006688:	6878      	ldr	r0, [r7, #4]
 800668a:	f000 fb26 	bl	8006cda <USBD_CtlError>
              break;
 800668e:	bf00      	nop
          }
          break;
 8006690:	e004      	b.n	800669c <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8006692:	6839      	ldr	r1, [r7, #0]
 8006694:	6878      	ldr	r0, [r7, #4]
 8006696:	f000 fb20 	bl	8006cda <USBD_CtlError>
          break;
 800669a:	bf00      	nop
      }
      break;
 800669c:	e004      	b.n	80066a8 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 800669e:	6839      	ldr	r1, [r7, #0]
 80066a0:	6878      	ldr	r0, [r7, #4]
 80066a2:	f000 fb1a 	bl	8006cda <USBD_CtlError>
      break;
 80066a6:	bf00      	nop
  }

  return ret;
 80066a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80066aa:	4618      	mov	r0, r3
 80066ac:	3710      	adds	r7, #16
 80066ae:	46bd      	mov	sp, r7
 80066b0:	bd80      	pop	{r7, pc}
	...

080066b4 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80066b4:	b580      	push	{r7, lr}
 80066b6:	b084      	sub	sp, #16
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	6078      	str	r0, [r7, #4]
 80066bc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80066be:	2300      	movs	r3, #0
 80066c0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80066c2:	2300      	movs	r3, #0
 80066c4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80066c6:	2300      	movs	r3, #0
 80066c8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80066ca:	683b      	ldr	r3, [r7, #0]
 80066cc:	885b      	ldrh	r3, [r3, #2]
 80066ce:	0a1b      	lsrs	r3, r3, #8
 80066d0:	b29b      	uxth	r3, r3
 80066d2:	3b01      	subs	r3, #1
 80066d4:	2b06      	cmp	r3, #6
 80066d6:	f200 8128 	bhi.w	800692a <USBD_GetDescriptor+0x276>
 80066da:	a201      	add	r2, pc, #4	; (adr r2, 80066e0 <USBD_GetDescriptor+0x2c>)
 80066dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066e0:	080066fd 	.word	0x080066fd
 80066e4:	08006715 	.word	0x08006715
 80066e8:	08006755 	.word	0x08006755
 80066ec:	0800692b 	.word	0x0800692b
 80066f0:	0800692b 	.word	0x0800692b
 80066f4:	080068cb 	.word	0x080068cb
 80066f8:	080068f7 	.word	0x080068f7
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	687a      	ldr	r2, [r7, #4]
 8006706:	7c12      	ldrb	r2, [r2, #16]
 8006708:	f107 0108 	add.w	r1, r7, #8
 800670c:	4610      	mov	r0, r2
 800670e:	4798      	blx	r3
 8006710:	60f8      	str	r0, [r7, #12]
      break;
 8006712:	e112      	b.n	800693a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	7c1b      	ldrb	r3, [r3, #16]
 8006718:	2b00      	cmp	r3, #0
 800671a:	d10d      	bne.n	8006738 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006722:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006724:	f107 0208 	add.w	r2, r7, #8
 8006728:	4610      	mov	r0, r2
 800672a:	4798      	blx	r3
 800672c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	3301      	adds	r3, #1
 8006732:	2202      	movs	r2, #2
 8006734:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006736:	e100      	b.n	800693a <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800673e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006740:	f107 0208 	add.w	r2, r7, #8
 8006744:	4610      	mov	r0, r2
 8006746:	4798      	blx	r3
 8006748:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	3301      	adds	r3, #1
 800674e:	2202      	movs	r2, #2
 8006750:	701a      	strb	r2, [r3, #0]
      break;
 8006752:	e0f2      	b.n	800693a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006754:	683b      	ldr	r3, [r7, #0]
 8006756:	885b      	ldrh	r3, [r3, #2]
 8006758:	b2db      	uxtb	r3, r3
 800675a:	2b05      	cmp	r3, #5
 800675c:	f200 80ac 	bhi.w	80068b8 <USBD_GetDescriptor+0x204>
 8006760:	a201      	add	r2, pc, #4	; (adr r2, 8006768 <USBD_GetDescriptor+0xb4>)
 8006762:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006766:	bf00      	nop
 8006768:	08006781 	.word	0x08006781
 800676c:	080067b5 	.word	0x080067b5
 8006770:	080067e9 	.word	0x080067e9
 8006774:	0800681d 	.word	0x0800681d
 8006778:	08006851 	.word	0x08006851
 800677c:	08006885 	.word	0x08006885
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006786:	685b      	ldr	r3, [r3, #4]
 8006788:	2b00      	cmp	r3, #0
 800678a:	d00b      	beq.n	80067a4 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006792:	685b      	ldr	r3, [r3, #4]
 8006794:	687a      	ldr	r2, [r7, #4]
 8006796:	7c12      	ldrb	r2, [r2, #16]
 8006798:	f107 0108 	add.w	r1, r7, #8
 800679c:	4610      	mov	r0, r2
 800679e:	4798      	blx	r3
 80067a0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80067a2:	e091      	b.n	80068c8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80067a4:	6839      	ldr	r1, [r7, #0]
 80067a6:	6878      	ldr	r0, [r7, #4]
 80067a8:	f000 fa97 	bl	8006cda <USBD_CtlError>
            err++;
 80067ac:	7afb      	ldrb	r3, [r7, #11]
 80067ae:	3301      	adds	r3, #1
 80067b0:	72fb      	strb	r3, [r7, #11]
          break;
 80067b2:	e089      	b.n	80068c8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80067ba:	689b      	ldr	r3, [r3, #8]
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d00b      	beq.n	80067d8 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80067c6:	689b      	ldr	r3, [r3, #8]
 80067c8:	687a      	ldr	r2, [r7, #4]
 80067ca:	7c12      	ldrb	r2, [r2, #16]
 80067cc:	f107 0108 	add.w	r1, r7, #8
 80067d0:	4610      	mov	r0, r2
 80067d2:	4798      	blx	r3
 80067d4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80067d6:	e077      	b.n	80068c8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80067d8:	6839      	ldr	r1, [r7, #0]
 80067da:	6878      	ldr	r0, [r7, #4]
 80067dc:	f000 fa7d 	bl	8006cda <USBD_CtlError>
            err++;
 80067e0:	7afb      	ldrb	r3, [r7, #11]
 80067e2:	3301      	adds	r3, #1
 80067e4:	72fb      	strb	r3, [r7, #11]
          break;
 80067e6:	e06f      	b.n	80068c8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80067ee:	68db      	ldr	r3, [r3, #12]
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d00b      	beq.n	800680c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80067fa:	68db      	ldr	r3, [r3, #12]
 80067fc:	687a      	ldr	r2, [r7, #4]
 80067fe:	7c12      	ldrb	r2, [r2, #16]
 8006800:	f107 0108 	add.w	r1, r7, #8
 8006804:	4610      	mov	r0, r2
 8006806:	4798      	blx	r3
 8006808:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800680a:	e05d      	b.n	80068c8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800680c:	6839      	ldr	r1, [r7, #0]
 800680e:	6878      	ldr	r0, [r7, #4]
 8006810:	f000 fa63 	bl	8006cda <USBD_CtlError>
            err++;
 8006814:	7afb      	ldrb	r3, [r7, #11]
 8006816:	3301      	adds	r3, #1
 8006818:	72fb      	strb	r3, [r7, #11]
          break;
 800681a:	e055      	b.n	80068c8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006822:	691b      	ldr	r3, [r3, #16]
 8006824:	2b00      	cmp	r3, #0
 8006826:	d00b      	beq.n	8006840 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800682e:	691b      	ldr	r3, [r3, #16]
 8006830:	687a      	ldr	r2, [r7, #4]
 8006832:	7c12      	ldrb	r2, [r2, #16]
 8006834:	f107 0108 	add.w	r1, r7, #8
 8006838:	4610      	mov	r0, r2
 800683a:	4798      	blx	r3
 800683c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800683e:	e043      	b.n	80068c8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006840:	6839      	ldr	r1, [r7, #0]
 8006842:	6878      	ldr	r0, [r7, #4]
 8006844:	f000 fa49 	bl	8006cda <USBD_CtlError>
            err++;
 8006848:	7afb      	ldrb	r3, [r7, #11]
 800684a:	3301      	adds	r3, #1
 800684c:	72fb      	strb	r3, [r7, #11]
          break;
 800684e:	e03b      	b.n	80068c8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006856:	695b      	ldr	r3, [r3, #20]
 8006858:	2b00      	cmp	r3, #0
 800685a:	d00b      	beq.n	8006874 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006862:	695b      	ldr	r3, [r3, #20]
 8006864:	687a      	ldr	r2, [r7, #4]
 8006866:	7c12      	ldrb	r2, [r2, #16]
 8006868:	f107 0108 	add.w	r1, r7, #8
 800686c:	4610      	mov	r0, r2
 800686e:	4798      	blx	r3
 8006870:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006872:	e029      	b.n	80068c8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006874:	6839      	ldr	r1, [r7, #0]
 8006876:	6878      	ldr	r0, [r7, #4]
 8006878:	f000 fa2f 	bl	8006cda <USBD_CtlError>
            err++;
 800687c:	7afb      	ldrb	r3, [r7, #11]
 800687e:	3301      	adds	r3, #1
 8006880:	72fb      	strb	r3, [r7, #11]
          break;
 8006882:	e021      	b.n	80068c8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800688a:	699b      	ldr	r3, [r3, #24]
 800688c:	2b00      	cmp	r3, #0
 800688e:	d00b      	beq.n	80068a8 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006896:	699b      	ldr	r3, [r3, #24]
 8006898:	687a      	ldr	r2, [r7, #4]
 800689a:	7c12      	ldrb	r2, [r2, #16]
 800689c:	f107 0108 	add.w	r1, r7, #8
 80068a0:	4610      	mov	r0, r2
 80068a2:	4798      	blx	r3
 80068a4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80068a6:	e00f      	b.n	80068c8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80068a8:	6839      	ldr	r1, [r7, #0]
 80068aa:	6878      	ldr	r0, [r7, #4]
 80068ac:	f000 fa15 	bl	8006cda <USBD_CtlError>
            err++;
 80068b0:	7afb      	ldrb	r3, [r7, #11]
 80068b2:	3301      	adds	r3, #1
 80068b4:	72fb      	strb	r3, [r7, #11]
          break;
 80068b6:	e007      	b.n	80068c8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 80068b8:	6839      	ldr	r1, [r7, #0]
 80068ba:	6878      	ldr	r0, [r7, #4]
 80068bc:	f000 fa0d 	bl	8006cda <USBD_CtlError>
          err++;
 80068c0:	7afb      	ldrb	r3, [r7, #11]
 80068c2:	3301      	adds	r3, #1
 80068c4:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 80068c6:	e038      	b.n	800693a <USBD_GetDescriptor+0x286>
 80068c8:	e037      	b.n	800693a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	7c1b      	ldrb	r3, [r3, #16]
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d109      	bne.n	80068e6 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80068d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068da:	f107 0208 	add.w	r2, r7, #8
 80068de:	4610      	mov	r0, r2
 80068e0:	4798      	blx	r3
 80068e2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80068e4:	e029      	b.n	800693a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80068e6:	6839      	ldr	r1, [r7, #0]
 80068e8:	6878      	ldr	r0, [r7, #4]
 80068ea:	f000 f9f6 	bl	8006cda <USBD_CtlError>
        err++;
 80068ee:	7afb      	ldrb	r3, [r7, #11]
 80068f0:	3301      	adds	r3, #1
 80068f2:	72fb      	strb	r3, [r7, #11]
      break;
 80068f4:	e021      	b.n	800693a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	7c1b      	ldrb	r3, [r3, #16]
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d10d      	bne.n	800691a <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006906:	f107 0208 	add.w	r2, r7, #8
 800690a:	4610      	mov	r0, r2
 800690c:	4798      	blx	r3
 800690e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	3301      	adds	r3, #1
 8006914:	2207      	movs	r2, #7
 8006916:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006918:	e00f      	b.n	800693a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800691a:	6839      	ldr	r1, [r7, #0]
 800691c:	6878      	ldr	r0, [r7, #4]
 800691e:	f000 f9dc 	bl	8006cda <USBD_CtlError>
        err++;
 8006922:	7afb      	ldrb	r3, [r7, #11]
 8006924:	3301      	adds	r3, #1
 8006926:	72fb      	strb	r3, [r7, #11]
      break;
 8006928:	e007      	b.n	800693a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800692a:	6839      	ldr	r1, [r7, #0]
 800692c:	6878      	ldr	r0, [r7, #4]
 800692e:	f000 f9d4 	bl	8006cda <USBD_CtlError>
      err++;
 8006932:	7afb      	ldrb	r3, [r7, #11]
 8006934:	3301      	adds	r3, #1
 8006936:	72fb      	strb	r3, [r7, #11]
      break;
 8006938:	bf00      	nop
  }

  if (err != 0U)
 800693a:	7afb      	ldrb	r3, [r7, #11]
 800693c:	2b00      	cmp	r3, #0
 800693e:	d11c      	bne.n	800697a <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8006940:	893b      	ldrh	r3, [r7, #8]
 8006942:	2b00      	cmp	r3, #0
 8006944:	d011      	beq.n	800696a <USBD_GetDescriptor+0x2b6>
 8006946:	683b      	ldr	r3, [r7, #0]
 8006948:	88db      	ldrh	r3, [r3, #6]
 800694a:	2b00      	cmp	r3, #0
 800694c:	d00d      	beq.n	800696a <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800694e:	683b      	ldr	r3, [r7, #0]
 8006950:	88da      	ldrh	r2, [r3, #6]
 8006952:	893b      	ldrh	r3, [r7, #8]
 8006954:	4293      	cmp	r3, r2
 8006956:	bf28      	it	cs
 8006958:	4613      	movcs	r3, r2
 800695a:	b29b      	uxth	r3, r3
 800695c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800695e:	893b      	ldrh	r3, [r7, #8]
 8006960:	461a      	mov	r2, r3
 8006962:	68f9      	ldr	r1, [r7, #12]
 8006964:	6878      	ldr	r0, [r7, #4]
 8006966:	f000 fa22 	bl	8006dae <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800696a:	683b      	ldr	r3, [r7, #0]
 800696c:	88db      	ldrh	r3, [r3, #6]
 800696e:	2b00      	cmp	r3, #0
 8006970:	d104      	bne.n	800697c <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8006972:	6878      	ldr	r0, [r7, #4]
 8006974:	f000 fa5b 	bl	8006e2e <USBD_CtlSendStatus>
 8006978:	e000      	b.n	800697c <USBD_GetDescriptor+0x2c8>
    return;
 800697a:	bf00      	nop
    }
  }
}
 800697c:	3710      	adds	r7, #16
 800697e:	46bd      	mov	sp, r7
 8006980:	bd80      	pop	{r7, pc}
 8006982:	bf00      	nop

08006984 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8006984:	b580      	push	{r7, lr}
 8006986:	b084      	sub	sp, #16
 8006988:	af00      	add	r7, sp, #0
 800698a:	6078      	str	r0, [r7, #4]
 800698c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800698e:	683b      	ldr	r3, [r7, #0]
 8006990:	889b      	ldrh	r3, [r3, #4]
 8006992:	2b00      	cmp	r3, #0
 8006994:	d130      	bne.n	80069f8 <USBD_SetAddress+0x74>
 8006996:	683b      	ldr	r3, [r7, #0]
 8006998:	88db      	ldrh	r3, [r3, #6]
 800699a:	2b00      	cmp	r3, #0
 800699c:	d12c      	bne.n	80069f8 <USBD_SetAddress+0x74>
 800699e:	683b      	ldr	r3, [r7, #0]
 80069a0:	885b      	ldrh	r3, [r3, #2]
 80069a2:	2b7f      	cmp	r3, #127	; 0x7f
 80069a4:	d828      	bhi.n	80069f8 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80069a6:	683b      	ldr	r3, [r7, #0]
 80069a8:	885b      	ldrh	r3, [r3, #2]
 80069aa:	b2db      	uxtb	r3, r3
 80069ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80069b0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80069b8:	2b03      	cmp	r3, #3
 80069ba:	d104      	bne.n	80069c6 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 80069bc:	6839      	ldr	r1, [r7, #0]
 80069be:	6878      	ldr	r0, [r7, #4]
 80069c0:	f000 f98b 	bl	8006cda <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80069c4:	e01d      	b.n	8006a02 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	7bfa      	ldrb	r2, [r7, #15]
 80069ca:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 80069ce:	7bfb      	ldrb	r3, [r7, #15]
 80069d0:	4619      	mov	r1, r3
 80069d2:	6878      	ldr	r0, [r7, #4]
 80069d4:	f000 fd5a 	bl	800748c <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 80069d8:	6878      	ldr	r0, [r7, #4]
 80069da:	f000 fa28 	bl	8006e2e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80069de:	7bfb      	ldrb	r3, [r7, #15]
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d004      	beq.n	80069ee <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	2202      	movs	r2, #2
 80069e8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80069ec:	e009      	b.n	8006a02 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	2201      	movs	r2, #1
 80069f2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80069f6:	e004      	b.n	8006a02 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80069f8:	6839      	ldr	r1, [r7, #0]
 80069fa:	6878      	ldr	r0, [r7, #4]
 80069fc:	f000 f96d 	bl	8006cda <USBD_CtlError>
  }
}
 8006a00:	bf00      	nop
 8006a02:	bf00      	nop
 8006a04:	3710      	adds	r7, #16
 8006a06:	46bd      	mov	sp, r7
 8006a08:	bd80      	pop	{r7, pc}
	...

08006a0c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006a0c:	b580      	push	{r7, lr}
 8006a0e:	b082      	sub	sp, #8
 8006a10:	af00      	add	r7, sp, #0
 8006a12:	6078      	str	r0, [r7, #4]
 8006a14:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006a16:	683b      	ldr	r3, [r7, #0]
 8006a18:	885b      	ldrh	r3, [r3, #2]
 8006a1a:	b2da      	uxtb	r2, r3
 8006a1c:	4b41      	ldr	r3, [pc, #260]	; (8006b24 <USBD_SetConfig+0x118>)
 8006a1e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006a20:	4b40      	ldr	r3, [pc, #256]	; (8006b24 <USBD_SetConfig+0x118>)
 8006a22:	781b      	ldrb	r3, [r3, #0]
 8006a24:	2b01      	cmp	r3, #1
 8006a26:	d904      	bls.n	8006a32 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8006a28:	6839      	ldr	r1, [r7, #0]
 8006a2a:	6878      	ldr	r0, [r7, #4]
 8006a2c:	f000 f955 	bl	8006cda <USBD_CtlError>
 8006a30:	e075      	b.n	8006b1e <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a38:	2b02      	cmp	r3, #2
 8006a3a:	d002      	beq.n	8006a42 <USBD_SetConfig+0x36>
 8006a3c:	2b03      	cmp	r3, #3
 8006a3e:	d023      	beq.n	8006a88 <USBD_SetConfig+0x7c>
 8006a40:	e062      	b.n	8006b08 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8006a42:	4b38      	ldr	r3, [pc, #224]	; (8006b24 <USBD_SetConfig+0x118>)
 8006a44:	781b      	ldrb	r3, [r3, #0]
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d01a      	beq.n	8006a80 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8006a4a:	4b36      	ldr	r3, [pc, #216]	; (8006b24 <USBD_SetConfig+0x118>)
 8006a4c:	781b      	ldrb	r3, [r3, #0]
 8006a4e:	461a      	mov	r2, r3
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	2203      	movs	r2, #3
 8006a58:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8006a5c:	4b31      	ldr	r3, [pc, #196]	; (8006b24 <USBD_SetConfig+0x118>)
 8006a5e:	781b      	ldrb	r3, [r3, #0]
 8006a60:	4619      	mov	r1, r3
 8006a62:	6878      	ldr	r0, [r7, #4]
 8006a64:	f7ff f9e8 	bl	8005e38 <USBD_SetClassConfig>
 8006a68:	4603      	mov	r3, r0
 8006a6a:	2b02      	cmp	r3, #2
 8006a6c:	d104      	bne.n	8006a78 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8006a6e:	6839      	ldr	r1, [r7, #0]
 8006a70:	6878      	ldr	r0, [r7, #4]
 8006a72:	f000 f932 	bl	8006cda <USBD_CtlError>
            return;
 8006a76:	e052      	b.n	8006b1e <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8006a78:	6878      	ldr	r0, [r7, #4]
 8006a7a:	f000 f9d8 	bl	8006e2e <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8006a7e:	e04e      	b.n	8006b1e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8006a80:	6878      	ldr	r0, [r7, #4]
 8006a82:	f000 f9d4 	bl	8006e2e <USBD_CtlSendStatus>
        break;
 8006a86:	e04a      	b.n	8006b1e <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8006a88:	4b26      	ldr	r3, [pc, #152]	; (8006b24 <USBD_SetConfig+0x118>)
 8006a8a:	781b      	ldrb	r3, [r3, #0]
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d112      	bne.n	8006ab6 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	2202      	movs	r2, #2
 8006a94:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8006a98:	4b22      	ldr	r3, [pc, #136]	; (8006b24 <USBD_SetConfig+0x118>)
 8006a9a:	781b      	ldrb	r3, [r3, #0]
 8006a9c:	461a      	mov	r2, r3
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8006aa2:	4b20      	ldr	r3, [pc, #128]	; (8006b24 <USBD_SetConfig+0x118>)
 8006aa4:	781b      	ldrb	r3, [r3, #0]
 8006aa6:	4619      	mov	r1, r3
 8006aa8:	6878      	ldr	r0, [r7, #4]
 8006aaa:	f7ff f9e4 	bl	8005e76 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8006aae:	6878      	ldr	r0, [r7, #4]
 8006ab0:	f000 f9bd 	bl	8006e2e <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8006ab4:	e033      	b.n	8006b1e <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8006ab6:	4b1b      	ldr	r3, [pc, #108]	; (8006b24 <USBD_SetConfig+0x118>)
 8006ab8:	781b      	ldrb	r3, [r3, #0]
 8006aba:	461a      	mov	r2, r3
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	685b      	ldr	r3, [r3, #4]
 8006ac0:	429a      	cmp	r2, r3
 8006ac2:	d01d      	beq.n	8006b00 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	685b      	ldr	r3, [r3, #4]
 8006ac8:	b2db      	uxtb	r3, r3
 8006aca:	4619      	mov	r1, r3
 8006acc:	6878      	ldr	r0, [r7, #4]
 8006ace:	f7ff f9d2 	bl	8005e76 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8006ad2:	4b14      	ldr	r3, [pc, #80]	; (8006b24 <USBD_SetConfig+0x118>)
 8006ad4:	781b      	ldrb	r3, [r3, #0]
 8006ad6:	461a      	mov	r2, r3
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8006adc:	4b11      	ldr	r3, [pc, #68]	; (8006b24 <USBD_SetConfig+0x118>)
 8006ade:	781b      	ldrb	r3, [r3, #0]
 8006ae0:	4619      	mov	r1, r3
 8006ae2:	6878      	ldr	r0, [r7, #4]
 8006ae4:	f7ff f9a8 	bl	8005e38 <USBD_SetClassConfig>
 8006ae8:	4603      	mov	r3, r0
 8006aea:	2b02      	cmp	r3, #2
 8006aec:	d104      	bne.n	8006af8 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8006aee:	6839      	ldr	r1, [r7, #0]
 8006af0:	6878      	ldr	r0, [r7, #4]
 8006af2:	f000 f8f2 	bl	8006cda <USBD_CtlError>
            return;
 8006af6:	e012      	b.n	8006b1e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8006af8:	6878      	ldr	r0, [r7, #4]
 8006afa:	f000 f998 	bl	8006e2e <USBD_CtlSendStatus>
        break;
 8006afe:	e00e      	b.n	8006b1e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8006b00:	6878      	ldr	r0, [r7, #4]
 8006b02:	f000 f994 	bl	8006e2e <USBD_CtlSendStatus>
        break;
 8006b06:	e00a      	b.n	8006b1e <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8006b08:	6839      	ldr	r1, [r7, #0]
 8006b0a:	6878      	ldr	r0, [r7, #4]
 8006b0c:	f000 f8e5 	bl	8006cda <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8006b10:	4b04      	ldr	r3, [pc, #16]	; (8006b24 <USBD_SetConfig+0x118>)
 8006b12:	781b      	ldrb	r3, [r3, #0]
 8006b14:	4619      	mov	r1, r3
 8006b16:	6878      	ldr	r0, [r7, #4]
 8006b18:	f7ff f9ad 	bl	8005e76 <USBD_ClrClassConfig>
        break;
 8006b1c:	bf00      	nop
    }
  }
}
 8006b1e:	3708      	adds	r7, #8
 8006b20:	46bd      	mov	sp, r7
 8006b22:	bd80      	pop	{r7, pc}
 8006b24:	20000180 	.word	0x20000180

08006b28 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006b28:	b580      	push	{r7, lr}
 8006b2a:	b082      	sub	sp, #8
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	6078      	str	r0, [r7, #4]
 8006b30:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006b32:	683b      	ldr	r3, [r7, #0]
 8006b34:	88db      	ldrh	r3, [r3, #6]
 8006b36:	2b01      	cmp	r3, #1
 8006b38:	d004      	beq.n	8006b44 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006b3a:	6839      	ldr	r1, [r7, #0]
 8006b3c:	6878      	ldr	r0, [r7, #4]
 8006b3e:	f000 f8cc 	bl	8006cda <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8006b42:	e022      	b.n	8006b8a <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b4a:	2b02      	cmp	r3, #2
 8006b4c:	dc02      	bgt.n	8006b54 <USBD_GetConfig+0x2c>
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	dc03      	bgt.n	8006b5a <USBD_GetConfig+0x32>
 8006b52:	e015      	b.n	8006b80 <USBD_GetConfig+0x58>
 8006b54:	2b03      	cmp	r3, #3
 8006b56:	d00b      	beq.n	8006b70 <USBD_GetConfig+0x48>
 8006b58:	e012      	b.n	8006b80 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	2200      	movs	r2, #0
 8006b5e:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	3308      	adds	r3, #8
 8006b64:	2201      	movs	r2, #1
 8006b66:	4619      	mov	r1, r3
 8006b68:	6878      	ldr	r0, [r7, #4]
 8006b6a:	f000 f920 	bl	8006dae <USBD_CtlSendData>
        break;
 8006b6e:	e00c      	b.n	8006b8a <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	3304      	adds	r3, #4
 8006b74:	2201      	movs	r2, #1
 8006b76:	4619      	mov	r1, r3
 8006b78:	6878      	ldr	r0, [r7, #4]
 8006b7a:	f000 f918 	bl	8006dae <USBD_CtlSendData>
        break;
 8006b7e:	e004      	b.n	8006b8a <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8006b80:	6839      	ldr	r1, [r7, #0]
 8006b82:	6878      	ldr	r0, [r7, #4]
 8006b84:	f000 f8a9 	bl	8006cda <USBD_CtlError>
        break;
 8006b88:	bf00      	nop
}
 8006b8a:	bf00      	nop
 8006b8c:	3708      	adds	r7, #8
 8006b8e:	46bd      	mov	sp, r7
 8006b90:	bd80      	pop	{r7, pc}

08006b92 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006b92:	b580      	push	{r7, lr}
 8006b94:	b082      	sub	sp, #8
 8006b96:	af00      	add	r7, sp, #0
 8006b98:	6078      	str	r0, [r7, #4]
 8006b9a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ba2:	3b01      	subs	r3, #1
 8006ba4:	2b02      	cmp	r3, #2
 8006ba6:	d81e      	bhi.n	8006be6 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006ba8:	683b      	ldr	r3, [r7, #0]
 8006baa:	88db      	ldrh	r3, [r3, #6]
 8006bac:	2b02      	cmp	r3, #2
 8006bae:	d004      	beq.n	8006bba <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8006bb0:	6839      	ldr	r1, [r7, #0]
 8006bb2:	6878      	ldr	r0, [r7, #4]
 8006bb4:	f000 f891 	bl	8006cda <USBD_CtlError>
        break;
 8006bb8:	e01a      	b.n	8006bf0 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	2201      	movs	r2, #1
 8006bbe:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d005      	beq.n	8006bd6 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	68db      	ldr	r3, [r3, #12]
 8006bce:	f043 0202 	orr.w	r2, r3, #2
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	330c      	adds	r3, #12
 8006bda:	2202      	movs	r2, #2
 8006bdc:	4619      	mov	r1, r3
 8006bde:	6878      	ldr	r0, [r7, #4]
 8006be0:	f000 f8e5 	bl	8006dae <USBD_CtlSendData>
      break;
 8006be4:	e004      	b.n	8006bf0 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8006be6:	6839      	ldr	r1, [r7, #0]
 8006be8:	6878      	ldr	r0, [r7, #4]
 8006bea:	f000 f876 	bl	8006cda <USBD_CtlError>
      break;
 8006bee:	bf00      	nop
  }
}
 8006bf0:	bf00      	nop
 8006bf2:	3708      	adds	r7, #8
 8006bf4:	46bd      	mov	sp, r7
 8006bf6:	bd80      	pop	{r7, pc}

08006bf8 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8006bf8:	b580      	push	{r7, lr}
 8006bfa:	b082      	sub	sp, #8
 8006bfc:	af00      	add	r7, sp, #0
 8006bfe:	6078      	str	r0, [r7, #4]
 8006c00:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006c02:	683b      	ldr	r3, [r7, #0]
 8006c04:	885b      	ldrh	r3, [r3, #2]
 8006c06:	2b01      	cmp	r3, #1
 8006c08:	d106      	bne.n	8006c18 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	2201      	movs	r2, #1
 8006c0e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8006c12:	6878      	ldr	r0, [r7, #4]
 8006c14:	f000 f90b 	bl	8006e2e <USBD_CtlSendStatus>
  }
}
 8006c18:	bf00      	nop
 8006c1a:	3708      	adds	r7, #8
 8006c1c:	46bd      	mov	sp, r7
 8006c1e:	bd80      	pop	{r7, pc}

08006c20 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8006c20:	b580      	push	{r7, lr}
 8006c22:	b082      	sub	sp, #8
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	6078      	str	r0, [r7, #4]
 8006c28:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c30:	3b01      	subs	r3, #1
 8006c32:	2b02      	cmp	r3, #2
 8006c34:	d80b      	bhi.n	8006c4e <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006c36:	683b      	ldr	r3, [r7, #0]
 8006c38:	885b      	ldrh	r3, [r3, #2]
 8006c3a:	2b01      	cmp	r3, #1
 8006c3c:	d10c      	bne.n	8006c58 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	2200      	movs	r2, #0
 8006c42:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8006c46:	6878      	ldr	r0, [r7, #4]
 8006c48:	f000 f8f1 	bl	8006e2e <USBD_CtlSendStatus>
      }
      break;
 8006c4c:	e004      	b.n	8006c58 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8006c4e:	6839      	ldr	r1, [r7, #0]
 8006c50:	6878      	ldr	r0, [r7, #4]
 8006c52:	f000 f842 	bl	8006cda <USBD_CtlError>
      break;
 8006c56:	e000      	b.n	8006c5a <USBD_ClrFeature+0x3a>
      break;
 8006c58:	bf00      	nop
  }
}
 8006c5a:	bf00      	nop
 8006c5c:	3708      	adds	r7, #8
 8006c5e:	46bd      	mov	sp, r7
 8006c60:	bd80      	pop	{r7, pc}

08006c62 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006c62:	b480      	push	{r7}
 8006c64:	b083      	sub	sp, #12
 8006c66:	af00      	add	r7, sp, #0
 8006c68:	6078      	str	r0, [r7, #4]
 8006c6a:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8006c6c:	683b      	ldr	r3, [r7, #0]
 8006c6e:	781a      	ldrb	r2, [r3, #0]
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8006c74:	683b      	ldr	r3, [r7, #0]
 8006c76:	785a      	ldrb	r2, [r3, #1]
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8006c7c:	683b      	ldr	r3, [r7, #0]
 8006c7e:	3302      	adds	r3, #2
 8006c80:	781b      	ldrb	r3, [r3, #0]
 8006c82:	b29a      	uxth	r2, r3
 8006c84:	683b      	ldr	r3, [r7, #0]
 8006c86:	3303      	adds	r3, #3
 8006c88:	781b      	ldrb	r3, [r3, #0]
 8006c8a:	b29b      	uxth	r3, r3
 8006c8c:	021b      	lsls	r3, r3, #8
 8006c8e:	b29b      	uxth	r3, r3
 8006c90:	4413      	add	r3, r2
 8006c92:	b29a      	uxth	r2, r3
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8006c98:	683b      	ldr	r3, [r7, #0]
 8006c9a:	3304      	adds	r3, #4
 8006c9c:	781b      	ldrb	r3, [r3, #0]
 8006c9e:	b29a      	uxth	r2, r3
 8006ca0:	683b      	ldr	r3, [r7, #0]
 8006ca2:	3305      	adds	r3, #5
 8006ca4:	781b      	ldrb	r3, [r3, #0]
 8006ca6:	b29b      	uxth	r3, r3
 8006ca8:	021b      	lsls	r3, r3, #8
 8006caa:	b29b      	uxth	r3, r3
 8006cac:	4413      	add	r3, r2
 8006cae:	b29a      	uxth	r2, r3
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8006cb4:	683b      	ldr	r3, [r7, #0]
 8006cb6:	3306      	adds	r3, #6
 8006cb8:	781b      	ldrb	r3, [r3, #0]
 8006cba:	b29a      	uxth	r2, r3
 8006cbc:	683b      	ldr	r3, [r7, #0]
 8006cbe:	3307      	adds	r3, #7
 8006cc0:	781b      	ldrb	r3, [r3, #0]
 8006cc2:	b29b      	uxth	r3, r3
 8006cc4:	021b      	lsls	r3, r3, #8
 8006cc6:	b29b      	uxth	r3, r3
 8006cc8:	4413      	add	r3, r2
 8006cca:	b29a      	uxth	r2, r3
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	80da      	strh	r2, [r3, #6]

}
 8006cd0:	bf00      	nop
 8006cd2:	370c      	adds	r7, #12
 8006cd4:	46bd      	mov	sp, r7
 8006cd6:	bc80      	pop	{r7}
 8006cd8:	4770      	bx	lr

08006cda <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8006cda:	b580      	push	{r7, lr}
 8006cdc:	b082      	sub	sp, #8
 8006cde:	af00      	add	r7, sp, #0
 8006ce0:	6078      	str	r0, [r7, #4]
 8006ce2:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8006ce4:	2180      	movs	r1, #128	; 0x80
 8006ce6:	6878      	ldr	r0, [r7, #4]
 8006ce8:	f000 fb66 	bl	80073b8 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8006cec:	2100      	movs	r1, #0
 8006cee:	6878      	ldr	r0, [r7, #4]
 8006cf0:	f000 fb62 	bl	80073b8 <USBD_LL_StallEP>
}
 8006cf4:	bf00      	nop
 8006cf6:	3708      	adds	r7, #8
 8006cf8:	46bd      	mov	sp, r7
 8006cfa:	bd80      	pop	{r7, pc}

08006cfc <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006cfc:	b580      	push	{r7, lr}
 8006cfe:	b086      	sub	sp, #24
 8006d00:	af00      	add	r7, sp, #0
 8006d02:	60f8      	str	r0, [r7, #12]
 8006d04:	60b9      	str	r1, [r7, #8]
 8006d06:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006d08:	2300      	movs	r3, #0
 8006d0a:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d032      	beq.n	8006d78 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8006d12:	68f8      	ldr	r0, [r7, #12]
 8006d14:	f000 f834 	bl	8006d80 <USBD_GetLen>
 8006d18:	4603      	mov	r3, r0
 8006d1a:	3301      	adds	r3, #1
 8006d1c:	b29b      	uxth	r3, r3
 8006d1e:	005b      	lsls	r3, r3, #1
 8006d20:	b29a      	uxth	r2, r3
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8006d26:	7dfb      	ldrb	r3, [r7, #23]
 8006d28:	1c5a      	adds	r2, r3, #1
 8006d2a:	75fa      	strb	r2, [r7, #23]
 8006d2c:	461a      	mov	r2, r3
 8006d2e:	68bb      	ldr	r3, [r7, #8]
 8006d30:	4413      	add	r3, r2
 8006d32:	687a      	ldr	r2, [r7, #4]
 8006d34:	7812      	ldrb	r2, [r2, #0]
 8006d36:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8006d38:	7dfb      	ldrb	r3, [r7, #23]
 8006d3a:	1c5a      	adds	r2, r3, #1
 8006d3c:	75fa      	strb	r2, [r7, #23]
 8006d3e:	461a      	mov	r2, r3
 8006d40:	68bb      	ldr	r3, [r7, #8]
 8006d42:	4413      	add	r3, r2
 8006d44:	2203      	movs	r2, #3
 8006d46:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8006d48:	e012      	b.n	8006d70 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	1c5a      	adds	r2, r3, #1
 8006d4e:	60fa      	str	r2, [r7, #12]
 8006d50:	7dfa      	ldrb	r2, [r7, #23]
 8006d52:	1c51      	adds	r1, r2, #1
 8006d54:	75f9      	strb	r1, [r7, #23]
 8006d56:	4611      	mov	r1, r2
 8006d58:	68ba      	ldr	r2, [r7, #8]
 8006d5a:	440a      	add	r2, r1
 8006d5c:	781b      	ldrb	r3, [r3, #0]
 8006d5e:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8006d60:	7dfb      	ldrb	r3, [r7, #23]
 8006d62:	1c5a      	adds	r2, r3, #1
 8006d64:	75fa      	strb	r2, [r7, #23]
 8006d66:	461a      	mov	r2, r3
 8006d68:	68bb      	ldr	r3, [r7, #8]
 8006d6a:	4413      	add	r3, r2
 8006d6c:	2200      	movs	r2, #0
 8006d6e:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	781b      	ldrb	r3, [r3, #0]
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d1e8      	bne.n	8006d4a <USBD_GetString+0x4e>
    }
  }
}
 8006d78:	bf00      	nop
 8006d7a:	3718      	adds	r7, #24
 8006d7c:	46bd      	mov	sp, r7
 8006d7e:	bd80      	pop	{r7, pc}

08006d80 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006d80:	b480      	push	{r7}
 8006d82:	b085      	sub	sp, #20
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006d88:	2300      	movs	r3, #0
 8006d8a:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8006d8c:	e005      	b.n	8006d9a <USBD_GetLen+0x1a>
  {
    len++;
 8006d8e:	7bfb      	ldrb	r3, [r7, #15]
 8006d90:	3301      	adds	r3, #1
 8006d92:	73fb      	strb	r3, [r7, #15]
    buf++;
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	3301      	adds	r3, #1
 8006d98:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	781b      	ldrb	r3, [r3, #0]
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d1f5      	bne.n	8006d8e <USBD_GetLen+0xe>
  }

  return len;
 8006da2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006da4:	4618      	mov	r0, r3
 8006da6:	3714      	adds	r7, #20
 8006da8:	46bd      	mov	sp, r7
 8006daa:	bc80      	pop	{r7}
 8006dac:	4770      	bx	lr

08006dae <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8006dae:	b580      	push	{r7, lr}
 8006db0:	b084      	sub	sp, #16
 8006db2:	af00      	add	r7, sp, #0
 8006db4:	60f8      	str	r0, [r7, #12]
 8006db6:	60b9      	str	r1, [r7, #8]
 8006db8:	4613      	mov	r3, r2
 8006dba:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	2202      	movs	r2, #2
 8006dc0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8006dc4:	88fa      	ldrh	r2, [r7, #6]
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8006dca:	88fa      	ldrh	r2, [r7, #6]
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006dd0:	88fb      	ldrh	r3, [r7, #6]
 8006dd2:	68ba      	ldr	r2, [r7, #8]
 8006dd4:	2100      	movs	r1, #0
 8006dd6:	68f8      	ldr	r0, [r7, #12]
 8006dd8:	f000 fb77 	bl	80074ca <USBD_LL_Transmit>

  return USBD_OK;
 8006ddc:	2300      	movs	r3, #0
}
 8006dde:	4618      	mov	r0, r3
 8006de0:	3710      	adds	r7, #16
 8006de2:	46bd      	mov	sp, r7
 8006de4:	bd80      	pop	{r7, pc}

08006de6 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8006de6:	b580      	push	{r7, lr}
 8006de8:	b084      	sub	sp, #16
 8006dea:	af00      	add	r7, sp, #0
 8006dec:	60f8      	str	r0, [r7, #12]
 8006dee:	60b9      	str	r1, [r7, #8]
 8006df0:	4613      	mov	r3, r2
 8006df2:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006df4:	88fb      	ldrh	r3, [r7, #6]
 8006df6:	68ba      	ldr	r2, [r7, #8]
 8006df8:	2100      	movs	r1, #0
 8006dfa:	68f8      	ldr	r0, [r7, #12]
 8006dfc:	f000 fb65 	bl	80074ca <USBD_LL_Transmit>

  return USBD_OK;
 8006e00:	2300      	movs	r3, #0
}
 8006e02:	4618      	mov	r0, r3
 8006e04:	3710      	adds	r7, #16
 8006e06:	46bd      	mov	sp, r7
 8006e08:	bd80      	pop	{r7, pc}

08006e0a <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8006e0a:	b580      	push	{r7, lr}
 8006e0c:	b084      	sub	sp, #16
 8006e0e:	af00      	add	r7, sp, #0
 8006e10:	60f8      	str	r0, [r7, #12]
 8006e12:	60b9      	str	r1, [r7, #8]
 8006e14:	4613      	mov	r3, r2
 8006e16:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006e18:	88fb      	ldrh	r3, [r7, #6]
 8006e1a:	68ba      	ldr	r2, [r7, #8]
 8006e1c:	2100      	movs	r1, #0
 8006e1e:	68f8      	ldr	r0, [r7, #12]
 8006e20:	f000 fb76 	bl	8007510 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006e24:	2300      	movs	r3, #0
}
 8006e26:	4618      	mov	r0, r3
 8006e28:	3710      	adds	r7, #16
 8006e2a:	46bd      	mov	sp, r7
 8006e2c:	bd80      	pop	{r7, pc}

08006e2e <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006e2e:	b580      	push	{r7, lr}
 8006e30:	b082      	sub	sp, #8
 8006e32:	af00      	add	r7, sp, #0
 8006e34:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	2204      	movs	r2, #4
 8006e3a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006e3e:	2300      	movs	r3, #0
 8006e40:	2200      	movs	r2, #0
 8006e42:	2100      	movs	r1, #0
 8006e44:	6878      	ldr	r0, [r7, #4]
 8006e46:	f000 fb40 	bl	80074ca <USBD_LL_Transmit>

  return USBD_OK;
 8006e4a:	2300      	movs	r3, #0
}
 8006e4c:	4618      	mov	r0, r3
 8006e4e:	3708      	adds	r7, #8
 8006e50:	46bd      	mov	sp, r7
 8006e52:	bd80      	pop	{r7, pc}

08006e54 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006e54:	b580      	push	{r7, lr}
 8006e56:	b082      	sub	sp, #8
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	2205      	movs	r2, #5
 8006e60:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006e64:	2300      	movs	r3, #0
 8006e66:	2200      	movs	r2, #0
 8006e68:	2100      	movs	r1, #0
 8006e6a:	6878      	ldr	r0, [r7, #4]
 8006e6c:	f000 fb50 	bl	8007510 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006e70:	2300      	movs	r3, #0
}
 8006e72:	4618      	mov	r0, r3
 8006e74:	3708      	adds	r7, #8
 8006e76:	46bd      	mov	sp, r7
 8006e78:	bd80      	pop	{r7, pc}
	...

08006e7c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8006e7c:	b580      	push	{r7, lr}
 8006e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8006e80:	2200      	movs	r2, #0
 8006e82:	490e      	ldr	r1, [pc, #56]	; (8006ebc <MX_USB_DEVICE_Init+0x40>)
 8006e84:	480e      	ldr	r0, [pc, #56]	; (8006ec0 <MX_USB_DEVICE_Init+0x44>)
 8006e86:	f7fe ff7d 	bl	8005d84 <USBD_Init>
 8006e8a:	4603      	mov	r3, r0
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d001      	beq.n	8006e94 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8006e90:	f7f9 fb4a 	bl	8000528 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 8006e94:	490b      	ldr	r1, [pc, #44]	; (8006ec4 <MX_USB_DEVICE_Init+0x48>)
 8006e96:	480a      	ldr	r0, [pc, #40]	; (8006ec0 <MX_USB_DEVICE_Init+0x44>)
 8006e98:	f7fe ff9f 	bl	8005dda <USBD_RegisterClass>
 8006e9c:	4603      	mov	r3, r0
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d001      	beq.n	8006ea6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8006ea2:	f7f9 fb41 	bl	8000528 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8006ea6:	4806      	ldr	r0, [pc, #24]	; (8006ec0 <MX_USB_DEVICE_Init+0x44>)
 8006ea8:	f7fe ffb0 	bl	8005e0c <USBD_Start>
 8006eac:	4603      	mov	r3, r0
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d001      	beq.n	8006eb6 <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 8006eb2:	f7f9 fb39 	bl	8000528 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8006eb6:	bf00      	nop
 8006eb8:	bd80      	pop	{r7, pc}
 8006eba:	bf00      	nop
 8006ebc:	20000114 	.word	0x20000114
 8006ec0:	200001dc 	.word	0x200001dc
 8006ec4:	2000000c 	.word	0x2000000c

08006ec8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006ec8:	b480      	push	{r7}
 8006eca:	b083      	sub	sp, #12
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	4603      	mov	r3, r0
 8006ed0:	6039      	str	r1, [r7, #0]
 8006ed2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8006ed4:	683b      	ldr	r3, [r7, #0]
 8006ed6:	2212      	movs	r2, #18
 8006ed8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8006eda:	4b03      	ldr	r3, [pc, #12]	; (8006ee8 <USBD_FS_DeviceDescriptor+0x20>)
}
 8006edc:	4618      	mov	r0, r3
 8006ede:	370c      	adds	r7, #12
 8006ee0:	46bd      	mov	sp, r7
 8006ee2:	bc80      	pop	{r7}
 8006ee4:	4770      	bx	lr
 8006ee6:	bf00      	nop
 8006ee8:	20000130 	.word	0x20000130

08006eec <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006eec:	b480      	push	{r7}
 8006eee:	b083      	sub	sp, #12
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	4603      	mov	r3, r0
 8006ef4:	6039      	str	r1, [r7, #0]
 8006ef6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8006ef8:	683b      	ldr	r3, [r7, #0]
 8006efa:	2204      	movs	r2, #4
 8006efc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8006efe:	4b03      	ldr	r3, [pc, #12]	; (8006f0c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8006f00:	4618      	mov	r0, r3
 8006f02:	370c      	adds	r7, #12
 8006f04:	46bd      	mov	sp, r7
 8006f06:	bc80      	pop	{r7}
 8006f08:	4770      	bx	lr
 8006f0a:	bf00      	nop
 8006f0c:	20000144 	.word	0x20000144

08006f10 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006f10:	b580      	push	{r7, lr}
 8006f12:	b082      	sub	sp, #8
 8006f14:	af00      	add	r7, sp, #0
 8006f16:	4603      	mov	r3, r0
 8006f18:	6039      	str	r1, [r7, #0]
 8006f1a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006f1c:	79fb      	ldrb	r3, [r7, #7]
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d105      	bne.n	8006f2e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006f22:	683a      	ldr	r2, [r7, #0]
 8006f24:	4907      	ldr	r1, [pc, #28]	; (8006f44 <USBD_FS_ProductStrDescriptor+0x34>)
 8006f26:	4808      	ldr	r0, [pc, #32]	; (8006f48 <USBD_FS_ProductStrDescriptor+0x38>)
 8006f28:	f7ff fee8 	bl	8006cfc <USBD_GetString>
 8006f2c:	e004      	b.n	8006f38 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006f2e:	683a      	ldr	r2, [r7, #0]
 8006f30:	4904      	ldr	r1, [pc, #16]	; (8006f44 <USBD_FS_ProductStrDescriptor+0x34>)
 8006f32:	4805      	ldr	r0, [pc, #20]	; (8006f48 <USBD_FS_ProductStrDescriptor+0x38>)
 8006f34:	f7ff fee2 	bl	8006cfc <USBD_GetString>
  }
  return USBD_StrDesc;
 8006f38:	4b02      	ldr	r3, [pc, #8]	; (8006f44 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8006f3a:	4618      	mov	r0, r3
 8006f3c:	3708      	adds	r7, #8
 8006f3e:	46bd      	mov	sp, r7
 8006f40:	bd80      	pop	{r7, pc}
 8006f42:	bf00      	nop
 8006f44:	200004a0 	.word	0x200004a0
 8006f48:	08007680 	.word	0x08007680

08006f4c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006f4c:	b580      	push	{r7, lr}
 8006f4e:	b082      	sub	sp, #8
 8006f50:	af00      	add	r7, sp, #0
 8006f52:	4603      	mov	r3, r0
 8006f54:	6039      	str	r1, [r7, #0]
 8006f56:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8006f58:	683a      	ldr	r2, [r7, #0]
 8006f5a:	4904      	ldr	r1, [pc, #16]	; (8006f6c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8006f5c:	4804      	ldr	r0, [pc, #16]	; (8006f70 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8006f5e:	f7ff fecd 	bl	8006cfc <USBD_GetString>
  return USBD_StrDesc;
 8006f62:	4b02      	ldr	r3, [pc, #8]	; (8006f6c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8006f64:	4618      	mov	r0, r3
 8006f66:	3708      	adds	r7, #8
 8006f68:	46bd      	mov	sp, r7
 8006f6a:	bd80      	pop	{r7, pc}
 8006f6c:	200004a0 	.word	0x200004a0
 8006f70:	08007698 	.word	0x08007698

08006f74 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006f74:	b580      	push	{r7, lr}
 8006f76:	b082      	sub	sp, #8
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	4603      	mov	r3, r0
 8006f7c:	6039      	str	r1, [r7, #0]
 8006f7e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8006f80:	683b      	ldr	r3, [r7, #0]
 8006f82:	221a      	movs	r2, #26
 8006f84:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8006f86:	f000 f843 	bl	8007010 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8006f8a:	4b02      	ldr	r3, [pc, #8]	; (8006f94 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8006f8c:	4618      	mov	r0, r3
 8006f8e:	3708      	adds	r7, #8
 8006f90:	46bd      	mov	sp, r7
 8006f92:	bd80      	pop	{r7, pc}
 8006f94:	20000148 	.word	0x20000148

08006f98 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006f98:	b580      	push	{r7, lr}
 8006f9a:	b082      	sub	sp, #8
 8006f9c:	af00      	add	r7, sp, #0
 8006f9e:	4603      	mov	r3, r0
 8006fa0:	6039      	str	r1, [r7, #0]
 8006fa2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8006fa4:	79fb      	ldrb	r3, [r7, #7]
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d105      	bne.n	8006fb6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006faa:	683a      	ldr	r2, [r7, #0]
 8006fac:	4907      	ldr	r1, [pc, #28]	; (8006fcc <USBD_FS_ConfigStrDescriptor+0x34>)
 8006fae:	4808      	ldr	r0, [pc, #32]	; (8006fd0 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006fb0:	f7ff fea4 	bl	8006cfc <USBD_GetString>
 8006fb4:	e004      	b.n	8006fc0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006fb6:	683a      	ldr	r2, [r7, #0]
 8006fb8:	4904      	ldr	r1, [pc, #16]	; (8006fcc <USBD_FS_ConfigStrDescriptor+0x34>)
 8006fba:	4805      	ldr	r0, [pc, #20]	; (8006fd0 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006fbc:	f7ff fe9e 	bl	8006cfc <USBD_GetString>
  }
  return USBD_StrDesc;
 8006fc0:	4b02      	ldr	r3, [pc, #8]	; (8006fcc <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8006fc2:	4618      	mov	r0, r3
 8006fc4:	3708      	adds	r7, #8
 8006fc6:	46bd      	mov	sp, r7
 8006fc8:	bd80      	pop	{r7, pc}
 8006fca:	bf00      	nop
 8006fcc:	200004a0 	.word	0x200004a0
 8006fd0:	080076ac 	.word	0x080076ac

08006fd4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006fd4:	b580      	push	{r7, lr}
 8006fd6:	b082      	sub	sp, #8
 8006fd8:	af00      	add	r7, sp, #0
 8006fda:	4603      	mov	r3, r0
 8006fdc:	6039      	str	r1, [r7, #0]
 8006fde:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006fe0:	79fb      	ldrb	r3, [r7, #7]
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d105      	bne.n	8006ff2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006fe6:	683a      	ldr	r2, [r7, #0]
 8006fe8:	4907      	ldr	r1, [pc, #28]	; (8007008 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006fea:	4808      	ldr	r0, [pc, #32]	; (800700c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006fec:	f7ff fe86 	bl	8006cfc <USBD_GetString>
 8006ff0:	e004      	b.n	8006ffc <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006ff2:	683a      	ldr	r2, [r7, #0]
 8006ff4:	4904      	ldr	r1, [pc, #16]	; (8007008 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006ff6:	4805      	ldr	r0, [pc, #20]	; (800700c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006ff8:	f7ff fe80 	bl	8006cfc <USBD_GetString>
  }
  return USBD_StrDesc;
 8006ffc:	4b02      	ldr	r3, [pc, #8]	; (8007008 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8006ffe:	4618      	mov	r0, r3
 8007000:	3708      	adds	r7, #8
 8007002:	46bd      	mov	sp, r7
 8007004:	bd80      	pop	{r7, pc}
 8007006:	bf00      	nop
 8007008:	200004a0 	.word	0x200004a0
 800700c:	080076b8 	.word	0x080076b8

08007010 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007010:	b580      	push	{r7, lr}
 8007012:	b084      	sub	sp, #16
 8007014:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007016:	4b0f      	ldr	r3, [pc, #60]	; (8007054 <Get_SerialNum+0x44>)
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800701c:	4b0e      	ldr	r3, [pc, #56]	; (8007058 <Get_SerialNum+0x48>)
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007022:	4b0e      	ldr	r3, [pc, #56]	; (800705c <Get_SerialNum+0x4c>)
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007028:	68fa      	ldr	r2, [r7, #12]
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	4413      	add	r3, r2
 800702e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	2b00      	cmp	r3, #0
 8007034:	d009      	beq.n	800704a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007036:	2208      	movs	r2, #8
 8007038:	4909      	ldr	r1, [pc, #36]	; (8007060 <Get_SerialNum+0x50>)
 800703a:	68f8      	ldr	r0, [r7, #12]
 800703c:	f000 f814 	bl	8007068 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007040:	2204      	movs	r2, #4
 8007042:	4908      	ldr	r1, [pc, #32]	; (8007064 <Get_SerialNum+0x54>)
 8007044:	68b8      	ldr	r0, [r7, #8]
 8007046:	f000 f80f 	bl	8007068 <IntToUnicode>
  }
}
 800704a:	bf00      	nop
 800704c:	3710      	adds	r7, #16
 800704e:	46bd      	mov	sp, r7
 8007050:	bd80      	pop	{r7, pc}
 8007052:	bf00      	nop
 8007054:	1ffff7e8 	.word	0x1ffff7e8
 8007058:	1ffff7ec 	.word	0x1ffff7ec
 800705c:	1ffff7f0 	.word	0x1ffff7f0
 8007060:	2000014a 	.word	0x2000014a
 8007064:	2000015a 	.word	0x2000015a

08007068 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007068:	b480      	push	{r7}
 800706a:	b087      	sub	sp, #28
 800706c:	af00      	add	r7, sp, #0
 800706e:	60f8      	str	r0, [r7, #12]
 8007070:	60b9      	str	r1, [r7, #8]
 8007072:	4613      	mov	r3, r2
 8007074:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007076:	2300      	movs	r3, #0
 8007078:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800707a:	2300      	movs	r3, #0
 800707c:	75fb      	strb	r3, [r7, #23]
 800707e:	e027      	b.n	80070d0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	0f1b      	lsrs	r3, r3, #28
 8007084:	2b09      	cmp	r3, #9
 8007086:	d80b      	bhi.n	80070a0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	0f1b      	lsrs	r3, r3, #28
 800708c:	b2da      	uxtb	r2, r3
 800708e:	7dfb      	ldrb	r3, [r7, #23]
 8007090:	005b      	lsls	r3, r3, #1
 8007092:	4619      	mov	r1, r3
 8007094:	68bb      	ldr	r3, [r7, #8]
 8007096:	440b      	add	r3, r1
 8007098:	3230      	adds	r2, #48	; 0x30
 800709a:	b2d2      	uxtb	r2, r2
 800709c:	701a      	strb	r2, [r3, #0]
 800709e:	e00a      	b.n	80070b6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	0f1b      	lsrs	r3, r3, #28
 80070a4:	b2da      	uxtb	r2, r3
 80070a6:	7dfb      	ldrb	r3, [r7, #23]
 80070a8:	005b      	lsls	r3, r3, #1
 80070aa:	4619      	mov	r1, r3
 80070ac:	68bb      	ldr	r3, [r7, #8]
 80070ae:	440b      	add	r3, r1
 80070b0:	3237      	adds	r2, #55	; 0x37
 80070b2:	b2d2      	uxtb	r2, r2
 80070b4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	011b      	lsls	r3, r3, #4
 80070ba:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80070bc:	7dfb      	ldrb	r3, [r7, #23]
 80070be:	005b      	lsls	r3, r3, #1
 80070c0:	3301      	adds	r3, #1
 80070c2:	68ba      	ldr	r2, [r7, #8]
 80070c4:	4413      	add	r3, r2
 80070c6:	2200      	movs	r2, #0
 80070c8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80070ca:	7dfb      	ldrb	r3, [r7, #23]
 80070cc:	3301      	adds	r3, #1
 80070ce:	75fb      	strb	r3, [r7, #23]
 80070d0:	7dfa      	ldrb	r2, [r7, #23]
 80070d2:	79fb      	ldrb	r3, [r7, #7]
 80070d4:	429a      	cmp	r2, r3
 80070d6:	d3d3      	bcc.n	8007080 <IntToUnicode+0x18>
  }
}
 80070d8:	bf00      	nop
 80070da:	bf00      	nop
 80070dc:	371c      	adds	r7, #28
 80070de:	46bd      	mov	sp, r7
 80070e0:	bc80      	pop	{r7}
 80070e2:	4770      	bx	lr

080070e4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80070e4:	b580      	push	{r7, lr}
 80070e6:	b084      	sub	sp, #16
 80070e8:	af00      	add	r7, sp, #0
 80070ea:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	4a0d      	ldr	r2, [pc, #52]	; (8007128 <HAL_PCD_MspInit+0x44>)
 80070f2:	4293      	cmp	r3, r2
 80070f4:	d113      	bne.n	800711e <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80070f6:	4b0d      	ldr	r3, [pc, #52]	; (800712c <HAL_PCD_MspInit+0x48>)
 80070f8:	69db      	ldr	r3, [r3, #28]
 80070fa:	4a0c      	ldr	r2, [pc, #48]	; (800712c <HAL_PCD_MspInit+0x48>)
 80070fc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007100:	61d3      	str	r3, [r2, #28]
 8007102:	4b0a      	ldr	r3, [pc, #40]	; (800712c <HAL_PCD_MspInit+0x48>)
 8007104:	69db      	ldr	r3, [r3, #28]
 8007106:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800710a:	60fb      	str	r3, [r7, #12]
 800710c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800710e:	2200      	movs	r2, #0
 8007110:	2100      	movs	r1, #0
 8007112:	2014      	movs	r0, #20
 8007114:	f7fa f8ed 	bl	80012f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8007118:	2014      	movs	r0, #20
 800711a:	f7fa f906 	bl	800132a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800711e:	bf00      	nop
 8007120:	3710      	adds	r7, #16
 8007122:	46bd      	mov	sp, r7
 8007124:	bd80      	pop	{r7, pc}
 8007126:	bf00      	nop
 8007128:	40005c00 	.word	0x40005c00
 800712c:	40021000 	.word	0x40021000

08007130 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007130:	b580      	push	{r7, lr}
 8007132:	b082      	sub	sp, #8
 8007134:	af00      	add	r7, sp, #0
 8007136:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8007144:	4619      	mov	r1, r3
 8007146:	4610      	mov	r0, r2
 8007148:	f7fe fea8 	bl	8005e9c <USBD_LL_SetupStage>
}
 800714c:	bf00      	nop
 800714e:	3708      	adds	r7, #8
 8007150:	46bd      	mov	sp, r7
 8007152:	bd80      	pop	{r7, pc}

08007154 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007154:	b580      	push	{r7, lr}
 8007156:	b082      	sub	sp, #8
 8007158:	af00      	add	r7, sp, #0
 800715a:	6078      	str	r0, [r7, #4]
 800715c:	460b      	mov	r3, r1
 800715e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8007166:	78fa      	ldrb	r2, [r7, #3]
 8007168:	6879      	ldr	r1, [r7, #4]
 800716a:	4613      	mov	r3, r2
 800716c:	009b      	lsls	r3, r3, #2
 800716e:	4413      	add	r3, r2
 8007170:	00db      	lsls	r3, r3, #3
 8007172:	440b      	add	r3, r1
 8007174:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8007178:	681a      	ldr	r2, [r3, #0]
 800717a:	78fb      	ldrb	r3, [r7, #3]
 800717c:	4619      	mov	r1, r3
 800717e:	f7fe feda 	bl	8005f36 <USBD_LL_DataOutStage>
}
 8007182:	bf00      	nop
 8007184:	3708      	adds	r7, #8
 8007186:	46bd      	mov	sp, r7
 8007188:	bd80      	pop	{r7, pc}

0800718a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800718a:	b580      	push	{r7, lr}
 800718c:	b082      	sub	sp, #8
 800718e:	af00      	add	r7, sp, #0
 8007190:	6078      	str	r0, [r7, #4]
 8007192:	460b      	mov	r3, r1
 8007194:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800719c:	78fa      	ldrb	r2, [r7, #3]
 800719e:	6879      	ldr	r1, [r7, #4]
 80071a0:	4613      	mov	r3, r2
 80071a2:	009b      	lsls	r3, r3, #2
 80071a4:	4413      	add	r3, r2
 80071a6:	00db      	lsls	r3, r3, #3
 80071a8:	440b      	add	r3, r1
 80071aa:	333c      	adds	r3, #60	; 0x3c
 80071ac:	681a      	ldr	r2, [r3, #0]
 80071ae:	78fb      	ldrb	r3, [r7, #3]
 80071b0:	4619      	mov	r1, r3
 80071b2:	f7fe ff31 	bl	8006018 <USBD_LL_DataInStage>
}
 80071b6:	bf00      	nop
 80071b8:	3708      	adds	r7, #8
 80071ba:	46bd      	mov	sp, r7
 80071bc:	bd80      	pop	{r7, pc}

080071be <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80071be:	b580      	push	{r7, lr}
 80071c0:	b082      	sub	sp, #8
 80071c2:	af00      	add	r7, sp, #0
 80071c4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80071cc:	4618      	mov	r0, r3
 80071ce:	f7ff f841 	bl	8006254 <USBD_LL_SOF>
}
 80071d2:	bf00      	nop
 80071d4:	3708      	adds	r7, #8
 80071d6:	46bd      	mov	sp, r7
 80071d8:	bd80      	pop	{r7, pc}

080071da <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80071da:	b580      	push	{r7, lr}
 80071dc:	b084      	sub	sp, #16
 80071de:	af00      	add	r7, sp, #0
 80071e0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80071e2:	2301      	movs	r3, #1
 80071e4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	689b      	ldr	r3, [r3, #8]
 80071ea:	2b02      	cmp	r3, #2
 80071ec:	d001      	beq.n	80071f2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80071ee:	f7f9 f99b 	bl	8000528 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80071f8:	7bfa      	ldrb	r2, [r7, #15]
 80071fa:	4611      	mov	r1, r2
 80071fc:	4618      	mov	r0, r3
 80071fe:	f7fe fff1 	bl	80061e4 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007208:	4618      	mov	r0, r3
 800720a:	f7fe ffaa 	bl	8006162 <USBD_LL_Reset>
}
 800720e:	bf00      	nop
 8007210:	3710      	adds	r7, #16
 8007212:	46bd      	mov	sp, r7
 8007214:	bd80      	pop	{r7, pc}
	...

08007218 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007218:	b580      	push	{r7, lr}
 800721a:	b082      	sub	sp, #8
 800721c:	af00      	add	r7, sp, #0
 800721e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007226:	4618      	mov	r0, r3
 8007228:	f7fe ffeb 	bl	8006202 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	699b      	ldr	r3, [r3, #24]
 8007230:	2b00      	cmp	r3, #0
 8007232:	d005      	beq.n	8007240 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007234:	4b04      	ldr	r3, [pc, #16]	; (8007248 <HAL_PCD_SuspendCallback+0x30>)
 8007236:	691b      	ldr	r3, [r3, #16]
 8007238:	4a03      	ldr	r2, [pc, #12]	; (8007248 <HAL_PCD_SuspendCallback+0x30>)
 800723a:	f043 0306 	orr.w	r3, r3, #6
 800723e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007240:	bf00      	nop
 8007242:	3708      	adds	r7, #8
 8007244:	46bd      	mov	sp, r7
 8007246:	bd80      	pop	{r7, pc}
 8007248:	e000ed00 	.word	0xe000ed00

0800724c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800724c:	b580      	push	{r7, lr}
 800724e:	b082      	sub	sp, #8
 8007250:	af00      	add	r7, sp, #0
 8007252:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800725a:	4618      	mov	r0, r3
 800725c:	f7fe ffe5 	bl	800622a <USBD_LL_Resume>
}
 8007260:	bf00      	nop
 8007262:	3708      	adds	r7, #8
 8007264:	46bd      	mov	sp, r7
 8007266:	bd80      	pop	{r7, pc}

08007268 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007268:	b580      	push	{r7, lr}
 800726a:	b082      	sub	sp, #8
 800726c:	af00      	add	r7, sp, #0
 800726e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8007270:	4a1f      	ldr	r2, [pc, #124]	; (80072f0 <USBD_LL_Init+0x88>)
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	4a1d      	ldr	r2, [pc, #116]	; (80072f0 <USBD_LL_Init+0x88>)
 800727c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8007280:	4b1b      	ldr	r3, [pc, #108]	; (80072f0 <USBD_LL_Init+0x88>)
 8007282:	4a1c      	ldr	r2, [pc, #112]	; (80072f4 <USBD_LL_Init+0x8c>)
 8007284:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8007286:	4b1a      	ldr	r3, [pc, #104]	; (80072f0 <USBD_LL_Init+0x88>)
 8007288:	2208      	movs	r2, #8
 800728a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800728c:	4b18      	ldr	r3, [pc, #96]	; (80072f0 <USBD_LL_Init+0x88>)
 800728e:	2202      	movs	r2, #2
 8007290:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8007292:	4b17      	ldr	r3, [pc, #92]	; (80072f0 <USBD_LL_Init+0x88>)
 8007294:	2200      	movs	r2, #0
 8007296:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8007298:	4b15      	ldr	r3, [pc, #84]	; (80072f0 <USBD_LL_Init+0x88>)
 800729a:	2200      	movs	r2, #0
 800729c:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800729e:	4b14      	ldr	r3, [pc, #80]	; (80072f0 <USBD_LL_Init+0x88>)
 80072a0:	2200      	movs	r2, #0
 80072a2:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80072a4:	4812      	ldr	r0, [pc, #72]	; (80072f0 <USBD_LL_Init+0x88>)
 80072a6:	f7fa fa27 	bl	80016f8 <HAL_PCD_Init>
 80072aa:	4603      	mov	r3, r0
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d001      	beq.n	80072b4 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 80072b0:	f7f9 f93a 	bl	8000528 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80072ba:	2318      	movs	r3, #24
 80072bc:	2200      	movs	r2, #0
 80072be:	2100      	movs	r1, #0
 80072c0:	f7fb fd52 	bl	8002d68 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80072ca:	2358      	movs	r3, #88	; 0x58
 80072cc:	2200      	movs	r2, #0
 80072ce:	2180      	movs	r1, #128	; 0x80
 80072d0:	f7fb fd4a 	bl	8002d68 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_HID */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0x100);
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80072da:	f44f 7380 	mov.w	r3, #256	; 0x100
 80072de:	2200      	movs	r2, #0
 80072e0:	2181      	movs	r1, #129	; 0x81
 80072e2:	f7fb fd41 	bl	8002d68 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_HID */
  return USBD_OK;
 80072e6:	2300      	movs	r3, #0
}
 80072e8:	4618      	mov	r0, r3
 80072ea:	3708      	adds	r7, #8
 80072ec:	46bd      	mov	sp, r7
 80072ee:	bd80      	pop	{r7, pc}
 80072f0:	200006a0 	.word	0x200006a0
 80072f4:	40005c00 	.word	0x40005c00

080072f8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80072f8:	b580      	push	{r7, lr}
 80072fa:	b084      	sub	sp, #16
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007300:	2300      	movs	r3, #0
 8007302:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007304:	2300      	movs	r3, #0
 8007306:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800730e:	4618      	mov	r0, r3
 8007310:	f7fa fafd 	bl	800190e <HAL_PCD_Start>
 8007314:	4603      	mov	r3, r0
 8007316:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007318:	7bfb      	ldrb	r3, [r7, #15]
 800731a:	4618      	mov	r0, r3
 800731c:	f000 f93c 	bl	8007598 <USBD_Get_USB_Status>
 8007320:	4603      	mov	r3, r0
 8007322:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007324:	7bbb      	ldrb	r3, [r7, #14]
}
 8007326:	4618      	mov	r0, r3
 8007328:	3710      	adds	r7, #16
 800732a:	46bd      	mov	sp, r7
 800732c:	bd80      	pop	{r7, pc}

0800732e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800732e:	b580      	push	{r7, lr}
 8007330:	b084      	sub	sp, #16
 8007332:	af00      	add	r7, sp, #0
 8007334:	6078      	str	r0, [r7, #4]
 8007336:	4608      	mov	r0, r1
 8007338:	4611      	mov	r1, r2
 800733a:	461a      	mov	r2, r3
 800733c:	4603      	mov	r3, r0
 800733e:	70fb      	strb	r3, [r7, #3]
 8007340:	460b      	mov	r3, r1
 8007342:	70bb      	strb	r3, [r7, #2]
 8007344:	4613      	mov	r3, r2
 8007346:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007348:	2300      	movs	r3, #0
 800734a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800734c:	2300      	movs	r3, #0
 800734e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007356:	78bb      	ldrb	r3, [r7, #2]
 8007358:	883a      	ldrh	r2, [r7, #0]
 800735a:	78f9      	ldrb	r1, [r7, #3]
 800735c:	f7fa fc77 	bl	8001c4e <HAL_PCD_EP_Open>
 8007360:	4603      	mov	r3, r0
 8007362:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007364:	7bfb      	ldrb	r3, [r7, #15]
 8007366:	4618      	mov	r0, r3
 8007368:	f000 f916 	bl	8007598 <USBD_Get_USB_Status>
 800736c:	4603      	mov	r3, r0
 800736e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007370:	7bbb      	ldrb	r3, [r7, #14]
}
 8007372:	4618      	mov	r0, r3
 8007374:	3710      	adds	r7, #16
 8007376:	46bd      	mov	sp, r7
 8007378:	bd80      	pop	{r7, pc}

0800737a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800737a:	b580      	push	{r7, lr}
 800737c:	b084      	sub	sp, #16
 800737e:	af00      	add	r7, sp, #0
 8007380:	6078      	str	r0, [r7, #4]
 8007382:	460b      	mov	r3, r1
 8007384:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007386:	2300      	movs	r3, #0
 8007388:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800738a:	2300      	movs	r3, #0
 800738c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007394:	78fa      	ldrb	r2, [r7, #3]
 8007396:	4611      	mov	r1, r2
 8007398:	4618      	mov	r0, r3
 800739a:	f7fa fcbe 	bl	8001d1a <HAL_PCD_EP_Close>
 800739e:	4603      	mov	r3, r0
 80073a0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80073a2:	7bfb      	ldrb	r3, [r7, #15]
 80073a4:	4618      	mov	r0, r3
 80073a6:	f000 f8f7 	bl	8007598 <USBD_Get_USB_Status>
 80073aa:	4603      	mov	r3, r0
 80073ac:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80073ae:	7bbb      	ldrb	r3, [r7, #14]
}
 80073b0:	4618      	mov	r0, r3
 80073b2:	3710      	adds	r7, #16
 80073b4:	46bd      	mov	sp, r7
 80073b6:	bd80      	pop	{r7, pc}

080073b8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80073b8:	b580      	push	{r7, lr}
 80073ba:	b084      	sub	sp, #16
 80073bc:	af00      	add	r7, sp, #0
 80073be:	6078      	str	r0, [r7, #4]
 80073c0:	460b      	mov	r3, r1
 80073c2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80073c4:	2300      	movs	r3, #0
 80073c6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80073c8:	2300      	movs	r3, #0
 80073ca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80073d2:	78fa      	ldrb	r2, [r7, #3]
 80073d4:	4611      	mov	r1, r2
 80073d6:	4618      	mov	r0, r3
 80073d8:	f7fa fd67 	bl	8001eaa <HAL_PCD_EP_SetStall>
 80073dc:	4603      	mov	r3, r0
 80073de:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80073e0:	7bfb      	ldrb	r3, [r7, #15]
 80073e2:	4618      	mov	r0, r3
 80073e4:	f000 f8d8 	bl	8007598 <USBD_Get_USB_Status>
 80073e8:	4603      	mov	r3, r0
 80073ea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80073ec:	7bbb      	ldrb	r3, [r7, #14]
}
 80073ee:	4618      	mov	r0, r3
 80073f0:	3710      	adds	r7, #16
 80073f2:	46bd      	mov	sp, r7
 80073f4:	bd80      	pop	{r7, pc}

080073f6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80073f6:	b580      	push	{r7, lr}
 80073f8:	b084      	sub	sp, #16
 80073fa:	af00      	add	r7, sp, #0
 80073fc:	6078      	str	r0, [r7, #4]
 80073fe:	460b      	mov	r3, r1
 8007400:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007402:	2300      	movs	r3, #0
 8007404:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007406:	2300      	movs	r3, #0
 8007408:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007410:	78fa      	ldrb	r2, [r7, #3]
 8007412:	4611      	mov	r1, r2
 8007414:	4618      	mov	r0, r3
 8007416:	f7fa fda8 	bl	8001f6a <HAL_PCD_EP_ClrStall>
 800741a:	4603      	mov	r3, r0
 800741c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800741e:	7bfb      	ldrb	r3, [r7, #15]
 8007420:	4618      	mov	r0, r3
 8007422:	f000 f8b9 	bl	8007598 <USBD_Get_USB_Status>
 8007426:	4603      	mov	r3, r0
 8007428:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800742a:	7bbb      	ldrb	r3, [r7, #14]
}
 800742c:	4618      	mov	r0, r3
 800742e:	3710      	adds	r7, #16
 8007430:	46bd      	mov	sp, r7
 8007432:	bd80      	pop	{r7, pc}

08007434 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007434:	b480      	push	{r7}
 8007436:	b085      	sub	sp, #20
 8007438:	af00      	add	r7, sp, #0
 800743a:	6078      	str	r0, [r7, #4]
 800743c:	460b      	mov	r3, r1
 800743e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007446:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007448:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800744c:	2b00      	cmp	r3, #0
 800744e:	da0c      	bge.n	800746a <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007450:	78fb      	ldrb	r3, [r7, #3]
 8007452:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007456:	68f9      	ldr	r1, [r7, #12]
 8007458:	1c5a      	adds	r2, r3, #1
 800745a:	4613      	mov	r3, r2
 800745c:	009b      	lsls	r3, r3, #2
 800745e:	4413      	add	r3, r2
 8007460:	00db      	lsls	r3, r3, #3
 8007462:	440b      	add	r3, r1
 8007464:	3302      	adds	r3, #2
 8007466:	781b      	ldrb	r3, [r3, #0]
 8007468:	e00b      	b.n	8007482 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800746a:	78fb      	ldrb	r3, [r7, #3]
 800746c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007470:	68f9      	ldr	r1, [r7, #12]
 8007472:	4613      	mov	r3, r2
 8007474:	009b      	lsls	r3, r3, #2
 8007476:	4413      	add	r3, r2
 8007478:	00db      	lsls	r3, r3, #3
 800747a:	440b      	add	r3, r1
 800747c:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8007480:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007482:	4618      	mov	r0, r3
 8007484:	3714      	adds	r7, #20
 8007486:	46bd      	mov	sp, r7
 8007488:	bc80      	pop	{r7}
 800748a:	4770      	bx	lr

0800748c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800748c:	b580      	push	{r7, lr}
 800748e:	b084      	sub	sp, #16
 8007490:	af00      	add	r7, sp, #0
 8007492:	6078      	str	r0, [r7, #4]
 8007494:	460b      	mov	r3, r1
 8007496:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007498:	2300      	movs	r3, #0
 800749a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800749c:	2300      	movs	r3, #0
 800749e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80074a6:	78fa      	ldrb	r2, [r7, #3]
 80074a8:	4611      	mov	r1, r2
 80074aa:	4618      	mov	r0, r3
 80074ac:	f7fa fbaa 	bl	8001c04 <HAL_PCD_SetAddress>
 80074b0:	4603      	mov	r3, r0
 80074b2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80074b4:	7bfb      	ldrb	r3, [r7, #15]
 80074b6:	4618      	mov	r0, r3
 80074b8:	f000 f86e 	bl	8007598 <USBD_Get_USB_Status>
 80074bc:	4603      	mov	r3, r0
 80074be:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80074c0:	7bbb      	ldrb	r3, [r7, #14]
}
 80074c2:	4618      	mov	r0, r3
 80074c4:	3710      	adds	r7, #16
 80074c6:	46bd      	mov	sp, r7
 80074c8:	bd80      	pop	{r7, pc}

080074ca <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80074ca:	b580      	push	{r7, lr}
 80074cc:	b086      	sub	sp, #24
 80074ce:	af00      	add	r7, sp, #0
 80074d0:	60f8      	str	r0, [r7, #12]
 80074d2:	607a      	str	r2, [r7, #4]
 80074d4:	461a      	mov	r2, r3
 80074d6:	460b      	mov	r3, r1
 80074d8:	72fb      	strb	r3, [r7, #11]
 80074da:	4613      	mov	r3, r2
 80074dc:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80074de:	2300      	movs	r3, #0
 80074e0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80074e2:	2300      	movs	r3, #0
 80074e4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80074ec:	893b      	ldrh	r3, [r7, #8]
 80074ee:	7af9      	ldrb	r1, [r7, #11]
 80074f0:	687a      	ldr	r2, [r7, #4]
 80074f2:	f7fa fc97 	bl	8001e24 <HAL_PCD_EP_Transmit>
 80074f6:	4603      	mov	r3, r0
 80074f8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80074fa:	7dfb      	ldrb	r3, [r7, #23]
 80074fc:	4618      	mov	r0, r3
 80074fe:	f000 f84b 	bl	8007598 <USBD_Get_USB_Status>
 8007502:	4603      	mov	r3, r0
 8007504:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007506:	7dbb      	ldrb	r3, [r7, #22]
}
 8007508:	4618      	mov	r0, r3
 800750a:	3718      	adds	r7, #24
 800750c:	46bd      	mov	sp, r7
 800750e:	bd80      	pop	{r7, pc}

08007510 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8007510:	b580      	push	{r7, lr}
 8007512:	b086      	sub	sp, #24
 8007514:	af00      	add	r7, sp, #0
 8007516:	60f8      	str	r0, [r7, #12]
 8007518:	607a      	str	r2, [r7, #4]
 800751a:	461a      	mov	r2, r3
 800751c:	460b      	mov	r3, r1
 800751e:	72fb      	strb	r3, [r7, #11]
 8007520:	4613      	mov	r3, r2
 8007522:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007524:	2300      	movs	r3, #0
 8007526:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007528:	2300      	movs	r3, #0
 800752a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007532:	893b      	ldrh	r3, [r7, #8]
 8007534:	7af9      	ldrb	r1, [r7, #11]
 8007536:	687a      	ldr	r2, [r7, #4]
 8007538:	f7fa fc37 	bl	8001daa <HAL_PCD_EP_Receive>
 800753c:	4603      	mov	r3, r0
 800753e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007540:	7dfb      	ldrb	r3, [r7, #23]
 8007542:	4618      	mov	r0, r3
 8007544:	f000 f828 	bl	8007598 <USBD_Get_USB_Status>
 8007548:	4603      	mov	r3, r0
 800754a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800754c:	7dbb      	ldrb	r3, [r7, #22]
}
 800754e:	4618      	mov	r0, r3
 8007550:	3718      	adds	r7, #24
 8007552:	46bd      	mov	sp, r7
 8007554:	bd80      	pop	{r7, pc}
	...

08007558 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007558:	b480      	push	{r7}
 800755a:	b083      	sub	sp, #12
 800755c:	af00      	add	r7, sp, #0
 800755e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8007560:	4b02      	ldr	r3, [pc, #8]	; (800756c <USBD_static_malloc+0x14>)
}
 8007562:	4618      	mov	r0, r3
 8007564:	370c      	adds	r7, #12
 8007566:	46bd      	mov	sp, r7
 8007568:	bc80      	pop	{r7}
 800756a:	4770      	bx	lr
 800756c:	20000184 	.word	0x20000184

08007570 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007570:	b480      	push	{r7}
 8007572:	b083      	sub	sp, #12
 8007574:	af00      	add	r7, sp, #0
 8007576:	6078      	str	r0, [r7, #4]

}
 8007578:	bf00      	nop
 800757a:	370c      	adds	r7, #12
 800757c:	46bd      	mov	sp, r7
 800757e:	bc80      	pop	{r7}
 8007580:	4770      	bx	lr

08007582 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007582:	b480      	push	{r7}
 8007584:	b083      	sub	sp, #12
 8007586:	af00      	add	r7, sp, #0
 8007588:	6078      	str	r0, [r7, #4]
 800758a:	460b      	mov	r3, r1
 800758c:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800758e:	bf00      	nop
 8007590:	370c      	adds	r7, #12
 8007592:	46bd      	mov	sp, r7
 8007594:	bc80      	pop	{r7}
 8007596:	4770      	bx	lr

08007598 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007598:	b480      	push	{r7}
 800759a:	b085      	sub	sp, #20
 800759c:	af00      	add	r7, sp, #0
 800759e:	4603      	mov	r3, r0
 80075a0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80075a2:	2300      	movs	r3, #0
 80075a4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80075a6:	79fb      	ldrb	r3, [r7, #7]
 80075a8:	2b03      	cmp	r3, #3
 80075aa:	d817      	bhi.n	80075dc <USBD_Get_USB_Status+0x44>
 80075ac:	a201      	add	r2, pc, #4	; (adr r2, 80075b4 <USBD_Get_USB_Status+0x1c>)
 80075ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075b2:	bf00      	nop
 80075b4:	080075c5 	.word	0x080075c5
 80075b8:	080075cb 	.word	0x080075cb
 80075bc:	080075d1 	.word	0x080075d1
 80075c0:	080075d7 	.word	0x080075d7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80075c4:	2300      	movs	r3, #0
 80075c6:	73fb      	strb	r3, [r7, #15]
    break;
 80075c8:	e00b      	b.n	80075e2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80075ca:	2302      	movs	r3, #2
 80075cc:	73fb      	strb	r3, [r7, #15]
    break;
 80075ce:	e008      	b.n	80075e2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80075d0:	2301      	movs	r3, #1
 80075d2:	73fb      	strb	r3, [r7, #15]
    break;
 80075d4:	e005      	b.n	80075e2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80075d6:	2302      	movs	r3, #2
 80075d8:	73fb      	strb	r3, [r7, #15]
    break;
 80075da:	e002      	b.n	80075e2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80075dc:	2302      	movs	r3, #2
 80075de:	73fb      	strb	r3, [r7, #15]
    break;
 80075e0:	bf00      	nop
  }
  return usb_status;
 80075e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80075e4:	4618      	mov	r0, r3
 80075e6:	3714      	adds	r7, #20
 80075e8:	46bd      	mov	sp, r7
 80075ea:	bc80      	pop	{r7}
 80075ec:	4770      	bx	lr
 80075ee:	bf00      	nop

080075f0 <__libc_init_array>:
 80075f0:	b570      	push	{r4, r5, r6, lr}
 80075f2:	2600      	movs	r6, #0
 80075f4:	4d0c      	ldr	r5, [pc, #48]	; (8007628 <__libc_init_array+0x38>)
 80075f6:	4c0d      	ldr	r4, [pc, #52]	; (800762c <__libc_init_array+0x3c>)
 80075f8:	1b64      	subs	r4, r4, r5
 80075fa:	10a4      	asrs	r4, r4, #2
 80075fc:	42a6      	cmp	r6, r4
 80075fe:	d109      	bne.n	8007614 <__libc_init_array+0x24>
 8007600:	f000 f822 	bl	8007648 <_init>
 8007604:	2600      	movs	r6, #0
 8007606:	4d0a      	ldr	r5, [pc, #40]	; (8007630 <__libc_init_array+0x40>)
 8007608:	4c0a      	ldr	r4, [pc, #40]	; (8007634 <__libc_init_array+0x44>)
 800760a:	1b64      	subs	r4, r4, r5
 800760c:	10a4      	asrs	r4, r4, #2
 800760e:	42a6      	cmp	r6, r4
 8007610:	d105      	bne.n	800761e <__libc_init_array+0x2e>
 8007612:	bd70      	pop	{r4, r5, r6, pc}
 8007614:	f855 3b04 	ldr.w	r3, [r5], #4
 8007618:	4798      	blx	r3
 800761a:	3601      	adds	r6, #1
 800761c:	e7ee      	b.n	80075fc <__libc_init_array+0xc>
 800761e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007622:	4798      	blx	r3
 8007624:	3601      	adds	r6, #1
 8007626:	e7f2      	b.n	800760e <__libc_init_array+0x1e>
 8007628:	080076e0 	.word	0x080076e0
 800762c:	080076e0 	.word	0x080076e0
 8007630:	080076e0 	.word	0x080076e0
 8007634:	080076e4 	.word	0x080076e4

08007638 <memset>:
 8007638:	4603      	mov	r3, r0
 800763a:	4402      	add	r2, r0
 800763c:	4293      	cmp	r3, r2
 800763e:	d100      	bne.n	8007642 <memset+0xa>
 8007640:	4770      	bx	lr
 8007642:	f803 1b01 	strb.w	r1, [r3], #1
 8007646:	e7f9      	b.n	800763c <memset+0x4>

08007648 <_init>:
 8007648:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800764a:	bf00      	nop
 800764c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800764e:	bc08      	pop	{r3}
 8007650:	469e      	mov	lr, r3
 8007652:	4770      	bx	lr

08007654 <_fini>:
 8007654:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007656:	bf00      	nop
 8007658:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800765a:	bc08      	pop	{r3}
 800765c:	469e      	mov	lr, r3
 800765e:	4770      	bx	lr
