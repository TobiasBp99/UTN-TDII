
tp_joystick.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007410  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  0800751c  0800751c  0001751c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800759c  0800759c  0002014c  2**0
                  CONTENTS
  4 .ARM          00000000  0800759c  0800759c  0002014c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800759c  0800759c  0002014c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800759c  0800759c  0001759c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080075a0  080075a0  000175a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000014c  20000000  080075a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000081c  2000014c  080076f0  0002014c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000968  080076f0  00020968  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002014c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011797  00000000  00000000  00020175  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c6e  00000000  00000000  0003190c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b10  00000000  00000000  00034580  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009c8  00000000  00000000  00035090  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019bbd  00000000  00000000  00035a58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e615  00000000  00000000  0004f615  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00089613  00000000  00000000  0005dc2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e723d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002b00  00000000  00000000  000e7290  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000014c 	.word	0x2000014c
 8000128:	00000000 	.word	0x00000000
 800012c:	08007504 	.word	0x08007504

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000150 	.word	0x20000150
 8000148:	08007504 	.word	0x08007504

0800014c <ADC_Select_CH0>:
/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_ADC1_Init(void);
/* USER CODE BEGIN PFP */
void ADC_Select_CH0(void) {
 800014c:	b580      	push	{r7, lr}
 800014e:	b084      	sub	sp, #16
 8000150:	af00      	add	r7, sp, #0
	/** Configure Regular Channel
	 */
	ADC_ChannelConfTypeDef sConfig = { 0 };
 8000152:	1d3b      	adds	r3, r7, #4
 8000154:	2200      	movs	r2, #0
 8000156:	601a      	str	r2, [r3, #0]
 8000158:	605a      	str	r2, [r3, #4]
 800015a:	609a      	str	r2, [r3, #8]
	sConfig.Channel = ADC_CHANNEL_0;
 800015c:	2300      	movs	r3, #0
 800015e:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8000160:	2301      	movs	r3, #1
 8000162:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 8000164:	2301      	movs	r3, #1
 8000166:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8000168:	1d3b      	adds	r3, r7, #4
 800016a:	4619      	mov	r1, r3
 800016c:	4805      	ldr	r0, [pc, #20]	; (8000184 <ADC_Select_CH0+0x38>)
 800016e:	f000 fda1 	bl	8000cb4 <HAL_ADC_ConfigChannel>
 8000172:	4603      	mov	r3, r0
 8000174:	2b00      	cmp	r3, #0
 8000176:	d001      	beq.n	800017c <ADC_Select_CH0+0x30>
		Error_Handler();
 8000178:	f000 f9ae 	bl	80004d8 <Error_Handler>
	}
}
 800017c:	bf00      	nop
 800017e:	3710      	adds	r7, #16
 8000180:	46bd      	mov	sp, r7
 8000182:	bd80      	pop	{r7, pc}
 8000184:	20000184 	.word	0x20000184

08000188 <ADC_Select_CH1>:

void ADC_Select_CH1(void) {
 8000188:	b580      	push	{r7, lr}
 800018a:	b084      	sub	sp, #16
 800018c:	af00      	add	r7, sp, #0
	/** Configure Regular Channel
	 */
	ADC_ChannelConfTypeDef sConfig = { 0 };
 800018e:	1d3b      	adds	r3, r7, #4
 8000190:	2200      	movs	r2, #0
 8000192:	601a      	str	r2, [r3, #0]
 8000194:	605a      	str	r2, [r3, #4]
 8000196:	609a      	str	r2, [r3, #8]
	sConfig.Channel = ADC_CHANNEL_1;
 8000198:	2301      	movs	r3, #1
 800019a:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 800019c:	2301      	movs	r3, #1
 800019e:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 80001a0:	2301      	movs	r3, #1
 80001a2:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 80001a4:	1d3b      	adds	r3, r7, #4
 80001a6:	4619      	mov	r1, r3
 80001a8:	4805      	ldr	r0, [pc, #20]	; (80001c0 <ADC_Select_CH1+0x38>)
 80001aa:	f000 fd83 	bl	8000cb4 <HAL_ADC_ConfigChannel>
 80001ae:	4603      	mov	r3, r0
 80001b0:	2b00      	cmp	r3, #0
 80001b2:	d001      	beq.n	80001b8 <ADC_Select_CH1+0x30>
		Error_Handler();
 80001b4:	f000 f990 	bl	80004d8 <Error_Handler>
	}
}
 80001b8:	bf00      	nop
 80001ba:	3710      	adds	r7, #16
 80001bc:	46bd      	mov	sp, r7
 80001be:	bd80      	pop	{r7, pc}
 80001c0:	20000184 	.word	0x20000184

080001c4 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80001c4:	b580      	push	{r7, lr}
 80001c6:	b088      	sub	sp, #32
 80001c8:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 1 */
	uint32_t ticks_adc;
	uint16_t dato_ch0 = 0;
 80001ca:	2300      	movs	r3, #0
 80001cc:	837b      	strh	r3, [r7, #26]
	uint16_t dato_ch1 = 0;
 80001ce:	2300      	movs	r3, #0
 80001d0:	833b      	strh	r3, [r7, #24]
	uint8_t i = 0;
 80001d2:	2300      	movs	r3, #0
 80001d4:	75fb      	strb	r3, [r7, #23]
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80001d6:	f000 fa53 	bl	8000680 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80001da:	f000 f8a3 	bl	8000324 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80001de:	f000 f92f 	bl	8000440 <MX_GPIO_Init>
	MX_USB_DEVICE_Init();
 80001e2:	f006 fda9 	bl	8006d38 <MX_USB_DEVICE_Init>
	MX_ADC1_Init();
 80001e6:	f000 f8fb 	bl	80003e0 <MX_ADC1_Init>
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		if ((HAL_GetTick() - ticks_adc) >= TICKS_ADC_MS) {
 80001ea:	f000 faa1 	bl	8000730 <HAL_GetTick>
 80001ee:	4602      	mov	r2, r0
 80001f0:	69fb      	ldr	r3, [r7, #28]
 80001f2:	1ad3      	subs	r3, r2, r3
 80001f4:	2b31      	cmp	r3, #49	; 0x31
 80001f6:	d9f8      	bls.n	80001ea <main+0x26>
			ticks_adc = HAL_GetTick();
 80001f8:	f000 fa9a 	bl	8000730 <HAL_GetTick>
 80001fc:	61f8      	str	r0, [r7, #28]

			ADC_Select_CH0();
 80001fe:	f7ff ffa5 	bl	800014c <ADC_Select_CH0>
			HAL_ADC_Start(&hadc1);
 8000202:	4841      	ldr	r0, [pc, #260]	; (8000308 <main+0x144>)
 8000204:	f000 fb76 	bl	80008f4 <HAL_ADC_Start>
			HAL_ADC_PollForConversion(&hadc1, 100);
 8000208:	2164      	movs	r1, #100	; 0x64
 800020a:	483f      	ldr	r0, [pc, #252]	; (8000308 <main+0x144>)
 800020c:	f000 fc4c 	bl	8000aa8 <HAL_ADC_PollForConversion>
			demora_software(DELAY_ADC);
 8000210:	2300      	movs	r3, #0
 8000212:	613b      	str	r3, [r7, #16]
 8000214:	e002      	b.n	800021c <main+0x58>
 8000216:	693b      	ldr	r3, [r7, #16]
 8000218:	3301      	adds	r3, #1
 800021a:	613b      	str	r3, [r7, #16]
 800021c:	693b      	ldr	r3, [r7, #16]
 800021e:	2b3f      	cmp	r3, #63	; 0x3f
 8000220:	ddf9      	ble.n	8000216 <main+0x52>
			dato_ch0 += HAL_ADC_GetValue(&hadc1);
 8000222:	4839      	ldr	r0, [pc, #228]	; (8000308 <main+0x144>)
 8000224:	f000 fd3a 	bl	8000c9c <HAL_ADC_GetValue>
 8000228:	4603      	mov	r3, r0
 800022a:	b29a      	uxth	r2, r3
 800022c:	8b7b      	ldrh	r3, [r7, #26]
 800022e:	4413      	add	r3, r2
 8000230:	837b      	strh	r3, [r7, #26]
			HAL_ADC_Stop(&hadc1);
 8000232:	4835      	ldr	r0, [pc, #212]	; (8000308 <main+0x144>)
 8000234:	f000 fc0c 	bl	8000a50 <HAL_ADC_Stop>

			ADC_Select_CH1();
 8000238:	f7ff ffa6 	bl	8000188 <ADC_Select_CH1>
			HAL_ADC_Start(&hadc1);
 800023c:	4832      	ldr	r0, [pc, #200]	; (8000308 <main+0x144>)
 800023e:	f000 fb59 	bl	80008f4 <HAL_ADC_Start>
			HAL_ADC_PollForConversion(&hadc1, 100);
 8000242:	2164      	movs	r1, #100	; 0x64
 8000244:	4830      	ldr	r0, [pc, #192]	; (8000308 <main+0x144>)
 8000246:	f000 fc2f 	bl	8000aa8 <HAL_ADC_PollForConversion>
			demora_software(DELAY_ADC);
 800024a:	2300      	movs	r3, #0
 800024c:	60fb      	str	r3, [r7, #12]
 800024e:	e002      	b.n	8000256 <main+0x92>
 8000250:	68fb      	ldr	r3, [r7, #12]
 8000252:	3301      	adds	r3, #1
 8000254:	60fb      	str	r3, [r7, #12]
 8000256:	68fb      	ldr	r3, [r7, #12]
 8000258:	2b3f      	cmp	r3, #63	; 0x3f
 800025a:	ddf9      	ble.n	8000250 <main+0x8c>
			dato_ch1 += HAL_ADC_GetValue(&hadc1);
 800025c:	482a      	ldr	r0, [pc, #168]	; (8000308 <main+0x144>)
 800025e:	f000 fd1d 	bl	8000c9c <HAL_ADC_GetValue>
 8000262:	4603      	mov	r3, r0
 8000264:	b29a      	uxth	r2, r3
 8000266:	8b3b      	ldrh	r3, [r7, #24]
 8000268:	4413      	add	r3, r2
 800026a:	833b      	strh	r3, [r7, #24]
			HAL_ADC_Stop(&hadc1);
 800026c:	4826      	ldr	r0, [pc, #152]	; (8000308 <main+0x144>)
 800026e:	f000 fbef 	bl	8000a50 <HAL_ADC_Stop>

			HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000272:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000276:	4825      	ldr	r0, [pc, #148]	; (800030c <main+0x148>)
 8000278:	f001 f961 	bl	800153e <HAL_GPIO_TogglePin>
			i++;
 800027c:	7dfb      	ldrb	r3, [r7, #23]
 800027e:	3301      	adds	r3, #1
 8000280:	75fb      	strb	r3, [r7, #23]
			if (i == LEN_MUESTRAS) {
 8000282:	7dfb      	ldrb	r3, [r7, #23]
 8000284:	2b04      	cmp	r3, #4
 8000286:	d1b0      	bne.n	80001ea <main+0x26>
				prom_ry = dato_ch0 / LEN_MUESTRAS;
 8000288:	8b7b      	ldrh	r3, [r7, #26]
 800028a:	089b      	lsrs	r3, r3, #2
 800028c:	b29a      	uxth	r2, r3
 800028e:	4b20      	ldr	r3, [pc, #128]	; (8000310 <main+0x14c>)
 8000290:	801a      	strh	r2, [r3, #0]
				prom_rx = dato_ch1 / LEN_MUESTRAS;
 8000292:	8b3b      	ldrh	r3, [r7, #24]
 8000294:	089b      	lsrs	r3, r3, #2
 8000296:	b29a      	uxth	r2, r3
 8000298:	4b1e      	ldr	r3, [pc, #120]	; (8000314 <main+0x150>)
 800029a:	801a      	strh	r2, [r3, #0]
				dato_ch0 = 0;
 800029c:	2300      	movs	r3, #0
 800029e:	837b      	strh	r3, [r7, #26]
				dato_ch1 = 0;
 80002a0:	2300      	movs	r3, #0
 80002a2:	833b      	strh	r3, [r7, #24]

				ry = (prom_ry - 1970) * 62 / 1000; //Es el valor en reposo
 80002a4:	4b1a      	ldr	r3, [pc, #104]	; (8000310 <main+0x14c>)
 80002a6:	881b      	ldrh	r3, [r3, #0]
 80002a8:	f2a3 72b2 	subw	r2, r3, #1970	; 0x7b2
 80002ac:	4613      	mov	r3, r2
 80002ae:	015b      	lsls	r3, r3, #5
 80002b0:	1a9b      	subs	r3, r3, r2
 80002b2:	005b      	lsls	r3, r3, #1
 80002b4:	4a18      	ldr	r2, [pc, #96]	; (8000318 <main+0x154>)
 80002b6:	fb82 1203 	smull	r1, r2, r2, r3
 80002ba:	1192      	asrs	r2, r2, #6
 80002bc:	17db      	asrs	r3, r3, #31
 80002be:	1ad3      	subs	r3, r2, r3
 80002c0:	72fb      	strb	r3, [r7, #11]
				rx = (prom_rx - 1970) * 62 / 1000; //Es el valor en reposo
 80002c2:	4b14      	ldr	r3, [pc, #80]	; (8000314 <main+0x150>)
 80002c4:	881b      	ldrh	r3, [r3, #0]
 80002c6:	f2a3 72b2 	subw	r2, r3, #1970	; 0x7b2
 80002ca:	4613      	mov	r3, r2
 80002cc:	015b      	lsls	r3, r3, #5
 80002ce:	1a9b      	subs	r3, r3, r2
 80002d0:	005b      	lsls	r3, r3, #1
 80002d2:	4a11      	ldr	r2, [pc, #68]	; (8000318 <main+0x154>)
 80002d4:	fb82 1203 	smull	r1, r2, r2, r3
 80002d8:	1192      	asrs	r2, r2, #6
 80002da:	17db      	asrs	r3, r3, #31
 80002dc:	1ad3      	subs	r3, r2, r3
 80002de:	72bb      	strb	r3, [r7, #10]

				reporte[0] = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2);
 80002e0:	2104      	movs	r1, #4
 80002e2:	480e      	ldr	r0, [pc, #56]	; (800031c <main+0x158>)
 80002e4:	f001 f8fc 	bl	80014e0 <HAL_GPIO_ReadPin>
 80002e8:	4603      	mov	r3, r0
 80002ea:	b25b      	sxtb	r3, r3
 80002ec:	713b      	strb	r3, [r7, #4]
				reporte[1] = rx;
 80002ee:	7abb      	ldrb	r3, [r7, #10]
 80002f0:	717b      	strb	r3, [r7, #5]
				reporte[2] = ry;
 80002f2:	7afb      	ldrb	r3, [r7, #11]
 80002f4:	71bb      	strb	r3, [r7, #6]
				USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t*) reporte, 3);
 80002f6:	1d3b      	adds	r3, r7, #4
 80002f8:	2203      	movs	r2, #3
 80002fa:	4619      	mov	r1, r3
 80002fc:	4808      	ldr	r0, [pc, #32]	; (8000320 <main+0x15c>)
 80002fe:	f005 fc2b 	bl	8005b58 <USBD_HID_SendReport>
//				HAL_Delay(10);
//				reporte[0] = 0;
//				reporte[1] = rx;
//				reporte[2] = ry;
//				USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t*) reporte, 3);
				i = 0;
 8000302:	2300      	movs	r3, #0
 8000304:	75fb      	strb	r3, [r7, #23]
		if ((HAL_GetTick() - ticks_adc) >= TICKS_ADC_MS) {
 8000306:	e770      	b.n	80001ea <main+0x26>
 8000308:	20000184 	.word	0x20000184
 800030c:	40011000 	.word	0x40011000
 8000310:	20000168 	.word	0x20000168
 8000314:	2000016a 	.word	0x2000016a
 8000318:	10624dd3 	.word	0x10624dd3
 800031c:	40010800 	.word	0x40010800
 8000320:	200001b8 	.word	0x200001b8

08000324 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000324:	b580      	push	{r7, lr}
 8000326:	b094      	sub	sp, #80	; 0x50
 8000328:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800032a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800032e:	2228      	movs	r2, #40	; 0x28
 8000330:	2100      	movs	r1, #0
 8000332:	4618      	mov	r0, r3
 8000334:	f007 f8de 	bl	80074f4 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000338:	f107 0314 	add.w	r3, r7, #20
 800033c:	2200      	movs	r2, #0
 800033e:	601a      	str	r2, [r3, #0]
 8000340:	605a      	str	r2, [r3, #4]
 8000342:	609a      	str	r2, [r3, #8]
 8000344:	60da      	str	r2, [r3, #12]
 8000346:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 8000348:	1d3b      	adds	r3, r7, #4
 800034a:	2200      	movs	r2, #0
 800034c:	601a      	str	r2, [r3, #0]
 800034e:	605a      	str	r2, [r3, #4]
 8000350:	609a      	str	r2, [r3, #8]
 8000352:	60da      	str	r2, [r3, #12]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000354:	2301      	movs	r3, #1
 8000356:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000358:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800035c:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800035e:	2300      	movs	r3, #0
 8000360:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000362:	2301      	movs	r3, #1
 8000364:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000366:	2302      	movs	r3, #2
 8000368:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800036a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800036e:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000370:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000374:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000376:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800037a:	4618      	mov	r0, r3
 800037c:	f002 fc72 	bl	8002c64 <HAL_RCC_OscConfig>
 8000380:	4603      	mov	r3, r0
 8000382:	2b00      	cmp	r3, #0
 8000384:	d001      	beq.n	800038a <SystemClock_Config+0x66>
		Error_Handler();
 8000386:	f000 f8a7 	bl	80004d8 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800038a:	230f      	movs	r3, #15
 800038c:	617b      	str	r3, [r7, #20]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800038e:	2302      	movs	r3, #2
 8000390:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000392:	2300      	movs	r3, #0
 8000394:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000396:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800039a:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800039c:	2300      	movs	r3, #0
 800039e:	627b      	str	r3, [r7, #36]	; 0x24

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 80003a0:	f107 0314 	add.w	r3, r7, #20
 80003a4:	2102      	movs	r1, #2
 80003a6:	4618      	mov	r0, r3
 80003a8:	f002 fedc 	bl	8003164 <HAL_RCC_ClockConfig>
 80003ac:	4603      	mov	r3, r0
 80003ae:	2b00      	cmp	r3, #0
 80003b0:	d001      	beq.n	80003b6 <SystemClock_Config+0x92>
		Error_Handler();
 80003b2:	f000 f891 	bl	80004d8 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC | RCC_PERIPHCLK_USB;
 80003b6:	2312      	movs	r3, #18
 80003b8:	607b      	str	r3, [r7, #4]
	PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80003ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80003be:	60fb      	str	r3, [r7, #12]
	PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 80003c0:	2300      	movs	r3, #0
 80003c2:	613b      	str	r3, [r7, #16]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 80003c4:	1d3b      	adds	r3, r7, #4
 80003c6:	4618      	mov	r0, r3
 80003c8:	f003 f852 	bl	8003470 <HAL_RCCEx_PeriphCLKConfig>
 80003cc:	4603      	mov	r3, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d001      	beq.n	80003d6 <SystemClock_Config+0xb2>
		Error_Handler();
 80003d2:	f000 f881 	bl	80004d8 <Error_Handler>
	}
}
 80003d6:	bf00      	nop
 80003d8:	3750      	adds	r7, #80	; 0x50
 80003da:	46bd      	mov	sp, r7
 80003dc:	bd80      	pop	{r7, pc}
	...

080003e0 <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 80003e0:	b580      	push	{r7, lr}
 80003e2:	b084      	sub	sp, #16
 80003e4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 80003e6:	1d3b      	adds	r3, r7, #4
 80003e8:	2200      	movs	r2, #0
 80003ea:	601a      	str	r2, [r3, #0]
 80003ec:	605a      	str	r2, [r3, #4]
 80003ee:	609a      	str	r2, [r3, #8]
	/* USER CODE BEGIN ADC1_Init 1 */

	/* USER CODE END ADC1_Init 1 */
	/** Common config
	 */
	hadc1.Instance = ADC1;
 80003f0:	4b11      	ldr	r3, [pc, #68]	; (8000438 <MX_ADC1_Init+0x58>)
 80003f2:	4a12      	ldr	r2, [pc, #72]	; (800043c <MX_ADC1_Init+0x5c>)
 80003f4:	601a      	str	r2, [r3, #0]
	hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80003f6:	4b10      	ldr	r3, [pc, #64]	; (8000438 <MX_ADC1_Init+0x58>)
 80003f8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80003fc:	609a      	str	r2, [r3, #8]
	hadc1.Init.ContinuousConvMode = ENABLE;
 80003fe:	4b0e      	ldr	r3, [pc, #56]	; (8000438 <MX_ADC1_Init+0x58>)
 8000400:	2201      	movs	r2, #1
 8000402:	731a      	strb	r2, [r3, #12]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000404:	4b0c      	ldr	r3, [pc, #48]	; (8000438 <MX_ADC1_Init+0x58>)
 8000406:	2200      	movs	r2, #0
 8000408:	751a      	strb	r2, [r3, #20]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800040a:	4b0b      	ldr	r3, [pc, #44]	; (8000438 <MX_ADC1_Init+0x58>)
 800040c:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000410:	61da      	str	r2, [r3, #28]
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000412:	4b09      	ldr	r3, [pc, #36]	; (8000438 <MX_ADC1_Init+0x58>)
 8000414:	2200      	movs	r2, #0
 8000416:	605a      	str	r2, [r3, #4]
	hadc1.Init.NbrOfConversion = 2;
 8000418:	4b07      	ldr	r3, [pc, #28]	; (8000438 <MX_ADC1_Init+0x58>)
 800041a:	2202      	movs	r2, #2
 800041c:	611a      	str	r2, [r3, #16]
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 800041e:	4806      	ldr	r0, [pc, #24]	; (8000438 <MX_ADC1_Init+0x58>)
 8000420:	f000 f990 	bl	8000744 <HAL_ADC_Init>
 8000424:	4603      	mov	r3, r0
 8000426:	2b00      	cmp	r3, #0
 8000428:	d001      	beq.n	800042e <MX_ADC1_Init+0x4e>
		Error_Handler();
 800042a:	f000 f855 	bl	80004d8 <Error_Handler>
	 }*/
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 800042e:	bf00      	nop
 8000430:	3710      	adds	r7, #16
 8000432:	46bd      	mov	sp, r7
 8000434:	bd80      	pop	{r7, pc}
 8000436:	bf00      	nop
 8000438:	20000184 	.word	0x20000184
 800043c:	40012400 	.word	0x40012400

08000440 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000440:	b580      	push	{r7, lr}
 8000442:	b088      	sub	sp, #32
 8000444:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000446:	f107 0310 	add.w	r3, r7, #16
 800044a:	2200      	movs	r2, #0
 800044c:	601a      	str	r2, [r3, #0]
 800044e:	605a      	str	r2, [r3, #4]
 8000450:	609a      	str	r2, [r3, #8]
 8000452:	60da      	str	r2, [r3, #12]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000454:	4b1e      	ldr	r3, [pc, #120]	; (80004d0 <MX_GPIO_Init+0x90>)
 8000456:	699b      	ldr	r3, [r3, #24]
 8000458:	4a1d      	ldr	r2, [pc, #116]	; (80004d0 <MX_GPIO_Init+0x90>)
 800045a:	f043 0310 	orr.w	r3, r3, #16
 800045e:	6193      	str	r3, [r2, #24]
 8000460:	4b1b      	ldr	r3, [pc, #108]	; (80004d0 <MX_GPIO_Init+0x90>)
 8000462:	699b      	ldr	r3, [r3, #24]
 8000464:	f003 0310 	and.w	r3, r3, #16
 8000468:	60fb      	str	r3, [r7, #12]
 800046a:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 800046c:	4b18      	ldr	r3, [pc, #96]	; (80004d0 <MX_GPIO_Init+0x90>)
 800046e:	699b      	ldr	r3, [r3, #24]
 8000470:	4a17      	ldr	r2, [pc, #92]	; (80004d0 <MX_GPIO_Init+0x90>)
 8000472:	f043 0320 	orr.w	r3, r3, #32
 8000476:	6193      	str	r3, [r2, #24]
 8000478:	4b15      	ldr	r3, [pc, #84]	; (80004d0 <MX_GPIO_Init+0x90>)
 800047a:	699b      	ldr	r3, [r3, #24]
 800047c:	f003 0320 	and.w	r3, r3, #32
 8000480:	60bb      	str	r3, [r7, #8]
 8000482:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000484:	4b12      	ldr	r3, [pc, #72]	; (80004d0 <MX_GPIO_Init+0x90>)
 8000486:	699b      	ldr	r3, [r3, #24]
 8000488:	4a11      	ldr	r2, [pc, #68]	; (80004d0 <MX_GPIO_Init+0x90>)
 800048a:	f043 0304 	orr.w	r3, r3, #4
 800048e:	6193      	str	r3, [r2, #24]
 8000490:	4b0f      	ldr	r3, [pc, #60]	; (80004d0 <MX_GPIO_Init+0x90>)
 8000492:	699b      	ldr	r3, [r3, #24]
 8000494:	f003 0304 	and.w	r3, r3, #4
 8000498:	607b      	str	r3, [r7, #4]
 800049a:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800049c:	2200      	movs	r2, #0
 800049e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004a2:	480c      	ldr	r0, [pc, #48]	; (80004d4 <MX_GPIO_Init+0x94>)
 80004a4:	f001 f833 	bl	800150e <HAL_GPIO_WritePin>

	/*Configure GPIO pin : PC13 */
	GPIO_InitStruct.Pin = GPIO_PIN_13;
 80004a8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80004ac:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004ae:	2301      	movs	r3, #1
 80004b0:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004b2:	2300      	movs	r3, #0
 80004b4:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004b6:	2302      	movs	r3, #2
 80004b8:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80004ba:	f107 0310 	add.w	r3, r7, #16
 80004be:	4619      	mov	r1, r3
 80004c0:	4804      	ldr	r0, [pc, #16]	; (80004d4 <MX_GPIO_Init+0x94>)
 80004c2:	f000 fe89 	bl	80011d8 <HAL_GPIO_Init>

}
 80004c6:	bf00      	nop
 80004c8:	3720      	adds	r7, #32
 80004ca:	46bd      	mov	sp, r7
 80004cc:	bd80      	pop	{r7, pc}
 80004ce:	bf00      	nop
 80004d0:	40021000 	.word	0x40021000
 80004d4:	40011000 	.word	0x40011000

080004d8 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80004d8:	b480      	push	{r7}
 80004da:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 80004dc:	bf00      	nop
 80004de:	46bd      	mov	sp, r7
 80004e0:	bc80      	pop	{r7}
 80004e2:	4770      	bx	lr

080004e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004e4:	b480      	push	{r7}
 80004e6:	b085      	sub	sp, #20
 80004e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80004ea:	4b15      	ldr	r3, [pc, #84]	; (8000540 <HAL_MspInit+0x5c>)
 80004ec:	699b      	ldr	r3, [r3, #24]
 80004ee:	4a14      	ldr	r2, [pc, #80]	; (8000540 <HAL_MspInit+0x5c>)
 80004f0:	f043 0301 	orr.w	r3, r3, #1
 80004f4:	6193      	str	r3, [r2, #24]
 80004f6:	4b12      	ldr	r3, [pc, #72]	; (8000540 <HAL_MspInit+0x5c>)
 80004f8:	699b      	ldr	r3, [r3, #24]
 80004fa:	f003 0301 	and.w	r3, r3, #1
 80004fe:	60bb      	str	r3, [r7, #8]
 8000500:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000502:	4b0f      	ldr	r3, [pc, #60]	; (8000540 <HAL_MspInit+0x5c>)
 8000504:	69db      	ldr	r3, [r3, #28]
 8000506:	4a0e      	ldr	r2, [pc, #56]	; (8000540 <HAL_MspInit+0x5c>)
 8000508:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800050c:	61d3      	str	r3, [r2, #28]
 800050e:	4b0c      	ldr	r3, [pc, #48]	; (8000540 <HAL_MspInit+0x5c>)
 8000510:	69db      	ldr	r3, [r3, #28]
 8000512:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000516:	607b      	str	r3, [r7, #4]
 8000518:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800051a:	4b0a      	ldr	r3, [pc, #40]	; (8000544 <HAL_MspInit+0x60>)
 800051c:	685b      	ldr	r3, [r3, #4]
 800051e:	60fb      	str	r3, [r7, #12]
 8000520:	68fb      	ldr	r3, [r7, #12]
 8000522:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000526:	60fb      	str	r3, [r7, #12]
 8000528:	68fb      	ldr	r3, [r7, #12]
 800052a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800052e:	60fb      	str	r3, [r7, #12]
 8000530:	4a04      	ldr	r2, [pc, #16]	; (8000544 <HAL_MspInit+0x60>)
 8000532:	68fb      	ldr	r3, [r7, #12]
 8000534:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000536:	bf00      	nop
 8000538:	3714      	adds	r7, #20
 800053a:	46bd      	mov	sp, r7
 800053c:	bc80      	pop	{r7}
 800053e:	4770      	bx	lr
 8000540:	40021000 	.word	0x40021000
 8000544:	40010000 	.word	0x40010000

08000548 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b088      	sub	sp, #32
 800054c:	af00      	add	r7, sp, #0
 800054e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000550:	f107 0310 	add.w	r3, r7, #16
 8000554:	2200      	movs	r2, #0
 8000556:	601a      	str	r2, [r3, #0]
 8000558:	605a      	str	r2, [r3, #4]
 800055a:	609a      	str	r2, [r3, #8]
 800055c:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	681b      	ldr	r3, [r3, #0]
 8000562:	4a14      	ldr	r2, [pc, #80]	; (80005b4 <HAL_ADC_MspInit+0x6c>)
 8000564:	4293      	cmp	r3, r2
 8000566:	d121      	bne.n	80005ac <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000568:	4b13      	ldr	r3, [pc, #76]	; (80005b8 <HAL_ADC_MspInit+0x70>)
 800056a:	699b      	ldr	r3, [r3, #24]
 800056c:	4a12      	ldr	r2, [pc, #72]	; (80005b8 <HAL_ADC_MspInit+0x70>)
 800056e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000572:	6193      	str	r3, [r2, #24]
 8000574:	4b10      	ldr	r3, [pc, #64]	; (80005b8 <HAL_ADC_MspInit+0x70>)
 8000576:	699b      	ldr	r3, [r3, #24]
 8000578:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800057c:	60fb      	str	r3, [r7, #12]
 800057e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000580:	4b0d      	ldr	r3, [pc, #52]	; (80005b8 <HAL_ADC_MspInit+0x70>)
 8000582:	699b      	ldr	r3, [r3, #24]
 8000584:	4a0c      	ldr	r2, [pc, #48]	; (80005b8 <HAL_ADC_MspInit+0x70>)
 8000586:	f043 0304 	orr.w	r3, r3, #4
 800058a:	6193      	str	r3, [r2, #24]
 800058c:	4b0a      	ldr	r3, [pc, #40]	; (80005b8 <HAL_ADC_MspInit+0x70>)
 800058e:	699b      	ldr	r3, [r3, #24]
 8000590:	f003 0304 	and.w	r3, r3, #4
 8000594:	60bb      	str	r3, [r7, #8]
 8000596:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000598:	2303      	movs	r3, #3
 800059a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800059c:	2303      	movs	r3, #3
 800059e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005a0:	f107 0310 	add.w	r3, r7, #16
 80005a4:	4619      	mov	r1, r3
 80005a6:	4805      	ldr	r0, [pc, #20]	; (80005bc <HAL_ADC_MspInit+0x74>)
 80005a8:	f000 fe16 	bl	80011d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80005ac:	bf00      	nop
 80005ae:	3720      	adds	r7, #32
 80005b0:	46bd      	mov	sp, r7
 80005b2:	bd80      	pop	{r7, pc}
 80005b4:	40012400 	.word	0x40012400
 80005b8:	40021000 	.word	0x40021000
 80005bc:	40010800 	.word	0x40010800

080005c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005c0:	b480      	push	{r7}
 80005c2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80005c4:	bf00      	nop
 80005c6:	46bd      	mov	sp, r7
 80005c8:	bc80      	pop	{r7}
 80005ca:	4770      	bx	lr

080005cc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005cc:	b480      	push	{r7}
 80005ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005d0:	e7fe      	b.n	80005d0 <HardFault_Handler+0x4>

080005d2 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80005d2:	b480      	push	{r7}
 80005d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80005d6:	e7fe      	b.n	80005d6 <MemManage_Handler+0x4>

080005d8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80005d8:	b480      	push	{r7}
 80005da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80005dc:	e7fe      	b.n	80005dc <BusFault_Handler+0x4>

080005de <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80005de:	b480      	push	{r7}
 80005e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80005e2:	e7fe      	b.n	80005e2 <UsageFault_Handler+0x4>

080005e4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80005e4:	b480      	push	{r7}
 80005e6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80005e8:	bf00      	nop
 80005ea:	46bd      	mov	sp, r7
 80005ec:	bc80      	pop	{r7}
 80005ee:	4770      	bx	lr

080005f0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80005f0:	b480      	push	{r7}
 80005f2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80005f4:	bf00      	nop
 80005f6:	46bd      	mov	sp, r7
 80005f8:	bc80      	pop	{r7}
 80005fa:	4770      	bx	lr

080005fc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80005fc:	b480      	push	{r7}
 80005fe:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000600:	bf00      	nop
 8000602:	46bd      	mov	sp, r7
 8000604:	bc80      	pop	{r7}
 8000606:	4770      	bx	lr

08000608 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800060c:	f000 f87e 	bl	800070c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000610:	bf00      	nop
 8000612:	bd80      	pop	{r7, pc}

08000614 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000618:	4802      	ldr	r0, [pc, #8]	; (8000624 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 800061a:	f001 f8da 	bl	80017d2 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 800061e:	bf00      	nop
 8000620:	bd80      	pop	{r7, pc}
 8000622:	bf00      	nop
 8000624:	2000067c 	.word	0x2000067c

08000628 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000628:	b480      	push	{r7}
 800062a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800062c:	bf00      	nop
 800062e:	46bd      	mov	sp, r7
 8000630:	bc80      	pop	{r7}
 8000632:	4770      	bx	lr

08000634 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000634:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000636:	e003      	b.n	8000640 <LoopCopyDataInit>

08000638 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000638:	4b0b      	ldr	r3, [pc, #44]	; (8000668 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800063a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800063c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800063e:	3104      	adds	r1, #4

08000640 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000640:	480a      	ldr	r0, [pc, #40]	; (800066c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000642:	4b0b      	ldr	r3, [pc, #44]	; (8000670 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000644:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000646:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000648:	d3f6      	bcc.n	8000638 <CopyDataInit>
  ldr r2, =_sbss
 800064a:	4a0a      	ldr	r2, [pc, #40]	; (8000674 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 800064c:	e002      	b.n	8000654 <LoopFillZerobss>

0800064e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800064e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000650:	f842 3b04 	str.w	r3, [r2], #4

08000654 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000654:	4b08      	ldr	r3, [pc, #32]	; (8000678 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000656:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000658:	d3f9      	bcc.n	800064e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800065a:	f7ff ffe5 	bl	8000628 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800065e:	f006 ff25 	bl	80074ac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000662:	f7ff fdaf 	bl	80001c4 <main>
  bx lr
 8000666:	4770      	bx	lr
  ldr r3, =_sidata
 8000668:	080075a4 	.word	0x080075a4
  ldr r0, =_sdata
 800066c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000670:	2000014c 	.word	0x2000014c
  ldr r2, =_sbss
 8000674:	2000014c 	.word	0x2000014c
  ldr r3, = _ebss
 8000678:	20000968 	.word	0x20000968

0800067c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800067c:	e7fe      	b.n	800067c <ADC1_2_IRQHandler>
	...

08000680 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000684:	4b08      	ldr	r3, [pc, #32]	; (80006a8 <HAL_Init+0x28>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	4a07      	ldr	r2, [pc, #28]	; (80006a8 <HAL_Init+0x28>)
 800068a:	f043 0310 	orr.w	r3, r3, #16
 800068e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000690:	2003      	movs	r0, #3
 8000692:	f000 fd5f 	bl	8001154 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000696:	2000      	movs	r0, #0
 8000698:	f000 f808 	bl	80006ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800069c:	f7ff ff22 	bl	80004e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80006a0:	2300      	movs	r3, #0
}
 80006a2:	4618      	mov	r0, r3
 80006a4:	bd80      	pop	{r7, pc}
 80006a6:	bf00      	nop
 80006a8:	40022000 	.word	0x40022000

080006ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b082      	sub	sp, #8
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80006b4:	4b12      	ldr	r3, [pc, #72]	; (8000700 <HAL_InitTick+0x54>)
 80006b6:	681a      	ldr	r2, [r3, #0]
 80006b8:	4b12      	ldr	r3, [pc, #72]	; (8000704 <HAL_InitTick+0x58>)
 80006ba:	781b      	ldrb	r3, [r3, #0]
 80006bc:	4619      	mov	r1, r3
 80006be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80006c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80006ca:	4618      	mov	r0, r3
 80006cc:	f000 fd77 	bl	80011be <HAL_SYSTICK_Config>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d001      	beq.n	80006da <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80006d6:	2301      	movs	r3, #1
 80006d8:	e00e      	b.n	80006f8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	2b0f      	cmp	r3, #15
 80006de:	d80a      	bhi.n	80006f6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80006e0:	2200      	movs	r2, #0
 80006e2:	6879      	ldr	r1, [r7, #4]
 80006e4:	f04f 30ff 	mov.w	r0, #4294967295
 80006e8:	f000 fd3f 	bl	800116a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80006ec:	4a06      	ldr	r2, [pc, #24]	; (8000708 <HAL_InitTick+0x5c>)
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80006f2:	2300      	movs	r3, #0
 80006f4:	e000      	b.n	80006f8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80006f6:	2301      	movs	r3, #1
}
 80006f8:	4618      	mov	r0, r3
 80006fa:	3708      	adds	r7, #8
 80006fc:	46bd      	mov	sp, r7
 80006fe:	bd80      	pop	{r7, pc}
 8000700:	20000000 	.word	0x20000000
 8000704:	20000008 	.word	0x20000008
 8000708:	20000004 	.word	0x20000004

0800070c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800070c:	b480      	push	{r7}
 800070e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000710:	4b05      	ldr	r3, [pc, #20]	; (8000728 <HAL_IncTick+0x1c>)
 8000712:	781b      	ldrb	r3, [r3, #0]
 8000714:	461a      	mov	r2, r3
 8000716:	4b05      	ldr	r3, [pc, #20]	; (800072c <HAL_IncTick+0x20>)
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	4413      	add	r3, r2
 800071c:	4a03      	ldr	r2, [pc, #12]	; (800072c <HAL_IncTick+0x20>)
 800071e:	6013      	str	r3, [r2, #0]
}
 8000720:	bf00      	nop
 8000722:	46bd      	mov	sp, r7
 8000724:	bc80      	pop	{r7}
 8000726:	4770      	bx	lr
 8000728:	20000008 	.word	0x20000008
 800072c:	200001b4 	.word	0x200001b4

08000730 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000730:	b480      	push	{r7}
 8000732:	af00      	add	r7, sp, #0
  return uwTick;
 8000734:	4b02      	ldr	r3, [pc, #8]	; (8000740 <HAL_GetTick+0x10>)
 8000736:	681b      	ldr	r3, [r3, #0]
}
 8000738:	4618      	mov	r0, r3
 800073a:	46bd      	mov	sp, r7
 800073c:	bc80      	pop	{r7}
 800073e:	4770      	bx	lr
 8000740:	200001b4 	.word	0x200001b4

08000744 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b086      	sub	sp, #24
 8000748:	af00      	add	r7, sp, #0
 800074a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800074c:	2300      	movs	r3, #0
 800074e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000750:	2300      	movs	r3, #0
 8000752:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000754:	2300      	movs	r3, #0
 8000756:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000758:	2300      	movs	r3, #0
 800075a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	2b00      	cmp	r3, #0
 8000760:	d101      	bne.n	8000766 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000762:	2301      	movs	r3, #1
 8000764:	e0be      	b.n	80008e4 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	689b      	ldr	r3, [r3, #8]
 800076a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000770:	2b00      	cmp	r3, #0
 8000772:	d109      	bne.n	8000788 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	2200      	movs	r2, #0
 8000778:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	2200      	movs	r2, #0
 800077e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000782:	6878      	ldr	r0, [r7, #4]
 8000784:	f7ff fee0 	bl	8000548 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000788:	6878      	ldr	r0, [r7, #4]
 800078a:	f000 fbdd 	bl	8000f48 <ADC_ConversionStop_Disable>
 800078e:	4603      	mov	r3, r0
 8000790:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000796:	f003 0310 	and.w	r3, r3, #16
 800079a:	2b00      	cmp	r3, #0
 800079c:	f040 8099 	bne.w	80008d2 <HAL_ADC_Init+0x18e>
 80007a0:	7dfb      	ldrb	r3, [r7, #23]
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	f040 8095 	bne.w	80008d2 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80007ac:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80007b0:	f023 0302 	bic.w	r3, r3, #2
 80007b4:	f043 0202 	orr.w	r2, r3, #2
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80007c4:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	7b1b      	ldrb	r3, [r3, #12]
 80007ca:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80007cc:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80007ce:	68ba      	ldr	r2, [r7, #8]
 80007d0:	4313      	orrs	r3, r2
 80007d2:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	689b      	ldr	r3, [r3, #8]
 80007d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80007dc:	d003      	beq.n	80007e6 <HAL_ADC_Init+0xa2>
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	689b      	ldr	r3, [r3, #8]
 80007e2:	2b01      	cmp	r3, #1
 80007e4:	d102      	bne.n	80007ec <HAL_ADC_Init+0xa8>
 80007e6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80007ea:	e000      	b.n	80007ee <HAL_ADC_Init+0xaa>
 80007ec:	2300      	movs	r3, #0
 80007ee:	693a      	ldr	r2, [r7, #16]
 80007f0:	4313      	orrs	r3, r2
 80007f2:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	7d1b      	ldrb	r3, [r3, #20]
 80007f8:	2b01      	cmp	r3, #1
 80007fa:	d119      	bne.n	8000830 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	7b1b      	ldrb	r3, [r3, #12]
 8000800:	2b00      	cmp	r3, #0
 8000802:	d109      	bne.n	8000818 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	699b      	ldr	r3, [r3, #24]
 8000808:	3b01      	subs	r3, #1
 800080a:	035a      	lsls	r2, r3, #13
 800080c:	693b      	ldr	r3, [r7, #16]
 800080e:	4313      	orrs	r3, r2
 8000810:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000814:	613b      	str	r3, [r7, #16]
 8000816:	e00b      	b.n	8000830 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800081c:	f043 0220 	orr.w	r2, r3, #32
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000828:	f043 0201 	orr.w	r2, r3, #1
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	685b      	ldr	r3, [r3, #4]
 8000836:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	693a      	ldr	r2, [r7, #16]
 8000840:	430a      	orrs	r2, r1
 8000842:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	689a      	ldr	r2, [r3, #8]
 800084a:	4b28      	ldr	r3, [pc, #160]	; (80008ec <HAL_ADC_Init+0x1a8>)
 800084c:	4013      	ands	r3, r2
 800084e:	687a      	ldr	r2, [r7, #4]
 8000850:	6812      	ldr	r2, [r2, #0]
 8000852:	68b9      	ldr	r1, [r7, #8]
 8000854:	430b      	orrs	r3, r1
 8000856:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	689b      	ldr	r3, [r3, #8]
 800085c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000860:	d003      	beq.n	800086a <HAL_ADC_Init+0x126>
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	689b      	ldr	r3, [r3, #8]
 8000866:	2b01      	cmp	r3, #1
 8000868:	d104      	bne.n	8000874 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	691b      	ldr	r3, [r3, #16]
 800086e:	3b01      	subs	r3, #1
 8000870:	051b      	lsls	r3, r3, #20
 8000872:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800087a:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	68fa      	ldr	r2, [r7, #12]
 8000884:	430a      	orrs	r2, r1
 8000886:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	689a      	ldr	r2, [r3, #8]
 800088e:	4b18      	ldr	r3, [pc, #96]	; (80008f0 <HAL_ADC_Init+0x1ac>)
 8000890:	4013      	ands	r3, r2
 8000892:	68ba      	ldr	r2, [r7, #8]
 8000894:	429a      	cmp	r2, r3
 8000896:	d10b      	bne.n	80008b0 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	2200      	movs	r2, #0
 800089c:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80008a2:	f023 0303 	bic.w	r3, r3, #3
 80008a6:	f043 0201 	orr.w	r2, r3, #1
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80008ae:	e018      	b.n	80008e2 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80008b4:	f023 0312 	bic.w	r3, r3, #18
 80008b8:	f043 0210 	orr.w	r2, r3, #16
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008c4:	f043 0201 	orr.w	r2, r3, #1
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80008cc:	2301      	movs	r3, #1
 80008ce:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80008d0:	e007      	b.n	80008e2 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80008d6:	f043 0210 	orr.w	r2, r3, #16
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80008de:	2301      	movs	r3, #1
 80008e0:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80008e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80008e4:	4618      	mov	r0, r3
 80008e6:	3718      	adds	r7, #24
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bd80      	pop	{r7, pc}
 80008ec:	ffe1f7fd 	.word	0xffe1f7fd
 80008f0:	ff1f0efe 	.word	0xff1f0efe

080008f4 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b084      	sub	sp, #16
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80008fc:	2300      	movs	r3, #0
 80008fe:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000906:	2b01      	cmp	r3, #1
 8000908:	d101      	bne.n	800090e <HAL_ADC_Start+0x1a>
 800090a:	2302      	movs	r3, #2
 800090c:	e098      	b.n	8000a40 <HAL_ADC_Start+0x14c>
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	2201      	movs	r2, #1
 8000912:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8000916:	6878      	ldr	r0, [r7, #4]
 8000918:	f000 fac4 	bl	8000ea4 <ADC_Enable>
 800091c:	4603      	mov	r3, r0
 800091e:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8000920:	7bfb      	ldrb	r3, [r7, #15]
 8000922:	2b00      	cmp	r3, #0
 8000924:	f040 8087 	bne.w	8000a36 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800092c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000930:	f023 0301 	bic.w	r3, r3, #1
 8000934:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	4a41      	ldr	r2, [pc, #260]	; (8000a48 <HAL_ADC_Start+0x154>)
 8000942:	4293      	cmp	r3, r2
 8000944:	d105      	bne.n	8000952 <HAL_ADC_Start+0x5e>
 8000946:	4b41      	ldr	r3, [pc, #260]	; (8000a4c <HAL_ADC_Start+0x158>)
 8000948:	685b      	ldr	r3, [r3, #4]
 800094a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 800094e:	2b00      	cmp	r3, #0
 8000950:	d115      	bne.n	800097e <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000956:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	685b      	ldr	r3, [r3, #4]
 8000964:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000968:	2b00      	cmp	r3, #0
 800096a:	d026      	beq.n	80009ba <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000970:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000974:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800097c:	e01d      	b.n	80009ba <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000982:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	4a2f      	ldr	r2, [pc, #188]	; (8000a4c <HAL_ADC_Start+0x158>)
 8000990:	4293      	cmp	r3, r2
 8000992:	d004      	beq.n	800099e <HAL_ADC_Start+0xaa>
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	4a2b      	ldr	r2, [pc, #172]	; (8000a48 <HAL_ADC_Start+0x154>)
 800099a:	4293      	cmp	r3, r2
 800099c:	d10d      	bne.n	80009ba <HAL_ADC_Start+0xc6>
 800099e:	4b2b      	ldr	r3, [pc, #172]	; (8000a4c <HAL_ADC_Start+0x158>)
 80009a0:	685b      	ldr	r3, [r3, #4]
 80009a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d007      	beq.n	80009ba <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009ae:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80009b2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009be:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d006      	beq.n	80009d4 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009ca:	f023 0206 	bic.w	r2, r3, #6
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	62da      	str	r2, [r3, #44]	; 0x2c
 80009d2:	e002      	b.n	80009da <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	2200      	movs	r2, #0
 80009d8:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	2200      	movs	r2, #0
 80009de:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	f06f 0202 	mvn.w	r2, #2
 80009ea:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	689b      	ldr	r3, [r3, #8]
 80009f2:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80009f6:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80009fa:	d113      	bne.n	8000a24 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000a00:	4a11      	ldr	r2, [pc, #68]	; (8000a48 <HAL_ADC_Start+0x154>)
 8000a02:	4293      	cmp	r3, r2
 8000a04:	d105      	bne.n	8000a12 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000a06:	4b11      	ldr	r3, [pc, #68]	; (8000a4c <HAL_ADC_Start+0x158>)
 8000a08:	685b      	ldr	r3, [r3, #4]
 8000a0a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d108      	bne.n	8000a24 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	689a      	ldr	r2, [r3, #8]
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8000a20:	609a      	str	r2, [r3, #8]
 8000a22:	e00c      	b.n	8000a3e <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	689a      	ldr	r2, [r3, #8]
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8000a32:	609a      	str	r2, [r3, #8]
 8000a34:	e003      	b.n	8000a3e <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	2200      	movs	r2, #0
 8000a3a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8000a3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a40:	4618      	mov	r0, r3
 8000a42:	3710      	adds	r7, #16
 8000a44:	46bd      	mov	sp, r7
 8000a46:	bd80      	pop	{r7, pc}
 8000a48:	40012800 	.word	0x40012800
 8000a4c:	40012400 	.word	0x40012400

08000a50 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b084      	sub	sp, #16
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000a62:	2b01      	cmp	r3, #1
 8000a64:	d101      	bne.n	8000a6a <HAL_ADC_Stop+0x1a>
 8000a66:	2302      	movs	r3, #2
 8000a68:	e01a      	b.n	8000aa0 <HAL_ADC_Stop+0x50>
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	2201      	movs	r2, #1
 8000a6e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000a72:	6878      	ldr	r0, [r7, #4]
 8000a74:	f000 fa68 	bl	8000f48 <ADC_ConversionStop_Disable>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8000a7c:	7bfb      	ldrb	r3, [r7, #15]
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d109      	bne.n	8000a96 <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a86:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000a8a:	f023 0301 	bic.w	r3, r3, #1
 8000a8e:	f043 0201 	orr.w	r2, r3, #1
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	2200      	movs	r2, #0
 8000a9a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8000a9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	3710      	adds	r7, #16
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bd80      	pop	{r7, pc}

08000aa8 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8000aa8:	b590      	push	{r4, r7, lr}
 8000aaa:	b087      	sub	sp, #28
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
 8000ab0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8000aba:	2300      	movs	r3, #0
 8000abc:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8000abe:	f7ff fe37 	bl	8000730 <HAL_GetTick>
 8000ac2:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	689b      	ldr	r3, [r3, #8]
 8000aca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d00b      	beq.n	8000aea <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ad6:	f043 0220 	orr.w	r2, r3, #32
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 8000ae6:	2301      	movs	r3, #1
 8000ae8:	e0c8      	b.n	8000c7c <HAL_ADC_PollForConversion+0x1d4>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	685b      	ldr	r3, [r3, #4]
 8000af0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d12a      	bne.n	8000b4e <HAL_ADC_PollForConversion+0xa6>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000afe:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d123      	bne.n	8000b4e <HAL_ADC_PollForConversion+0xa6>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8000b06:	e01a      	b.n	8000b3e <HAL_ADC_PollForConversion+0x96>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8000b08:	683b      	ldr	r3, [r7, #0]
 8000b0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b0e:	d016      	beq.n	8000b3e <HAL_ADC_PollForConversion+0x96>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8000b10:	683b      	ldr	r3, [r7, #0]
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d007      	beq.n	8000b26 <HAL_ADC_PollForConversion+0x7e>
 8000b16:	f7ff fe0b 	bl	8000730 <HAL_GetTick>
 8000b1a:	4602      	mov	r2, r0
 8000b1c:	697b      	ldr	r3, [r7, #20]
 8000b1e:	1ad3      	subs	r3, r2, r3
 8000b20:	683a      	ldr	r2, [r7, #0]
 8000b22:	429a      	cmp	r2, r3
 8000b24:	d20b      	bcs.n	8000b3e <HAL_ADC_PollForConversion+0x96>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b2a:	f043 0204 	orr.w	r2, r3, #4
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	629a      	str	r2, [r3, #40]	; 0x28
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	2200      	movs	r2, #0
 8000b36:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          
          return HAL_TIMEOUT;
 8000b3a:	2303      	movs	r3, #3
 8000b3c:	e09e      	b.n	8000c7c <HAL_ADC_PollForConversion+0x1d4>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	f003 0302 	and.w	r3, r3, #2
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d0dd      	beq.n	8000b08 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000b4c:	e06c      	b.n	8000c28 <HAL_ADC_PollForConversion+0x180>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8000b4e:	4b4d      	ldr	r3, [pc, #308]	; (8000c84 <HAL_ADC_PollForConversion+0x1dc>)
 8000b50:	681c      	ldr	r4, [r3, #0]
 8000b52:	2002      	movs	r0, #2
 8000b54:	f002 fd42 	bl	80035dc <HAL_RCCEx_GetPeriphCLKFreq>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	6919      	ldr	r1, [r3, #16]
 8000b64:	4b48      	ldr	r3, [pc, #288]	; (8000c88 <HAL_ADC_PollForConversion+0x1e0>)
 8000b66:	400b      	ands	r3, r1
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d118      	bne.n	8000b9e <HAL_ADC_PollForConversion+0xf6>
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	68d9      	ldr	r1, [r3, #12]
 8000b72:	4b46      	ldr	r3, [pc, #280]	; (8000c8c <HAL_ADC_PollForConversion+0x1e4>)
 8000b74:	400b      	ands	r3, r1
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d111      	bne.n	8000b9e <HAL_ADC_PollForConversion+0xf6>
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	6919      	ldr	r1, [r3, #16]
 8000b80:	4b43      	ldr	r3, [pc, #268]	; (8000c90 <HAL_ADC_PollForConversion+0x1e8>)
 8000b82:	400b      	ands	r3, r1
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d108      	bne.n	8000b9a <HAL_ADC_PollForConversion+0xf2>
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	68d9      	ldr	r1, [r3, #12]
 8000b8e:	4b41      	ldr	r3, [pc, #260]	; (8000c94 <HAL_ADC_PollForConversion+0x1ec>)
 8000b90:	400b      	ands	r3, r1
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d101      	bne.n	8000b9a <HAL_ADC_PollForConversion+0xf2>
 8000b96:	2314      	movs	r3, #20
 8000b98:	e020      	b.n	8000bdc <HAL_ADC_PollForConversion+0x134>
 8000b9a:	2329      	movs	r3, #41	; 0x29
 8000b9c:	e01e      	b.n	8000bdc <HAL_ADC_PollForConversion+0x134>
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	6919      	ldr	r1, [r3, #16]
 8000ba4:	4b3a      	ldr	r3, [pc, #232]	; (8000c90 <HAL_ADC_PollForConversion+0x1e8>)
 8000ba6:	400b      	ands	r3, r1
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d106      	bne.n	8000bba <HAL_ADC_PollForConversion+0x112>
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	68d9      	ldr	r1, [r3, #12]
 8000bb2:	4b38      	ldr	r3, [pc, #224]	; (8000c94 <HAL_ADC_PollForConversion+0x1ec>)
 8000bb4:	400b      	ands	r3, r1
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d00d      	beq.n	8000bd6 <HAL_ADC_PollForConversion+0x12e>
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	6919      	ldr	r1, [r3, #16]
 8000bc0:	4b35      	ldr	r3, [pc, #212]	; (8000c98 <HAL_ADC_PollForConversion+0x1f0>)
 8000bc2:	400b      	ands	r3, r1
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d108      	bne.n	8000bda <HAL_ADC_PollForConversion+0x132>
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	68d9      	ldr	r1, [r3, #12]
 8000bce:	4b32      	ldr	r3, [pc, #200]	; (8000c98 <HAL_ADC_PollForConversion+0x1f0>)
 8000bd0:	400b      	ands	r3, r1
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d101      	bne.n	8000bda <HAL_ADC_PollForConversion+0x132>
 8000bd6:	2354      	movs	r3, #84	; 0x54
 8000bd8:	e000      	b.n	8000bdc <HAL_ADC_PollForConversion+0x134>
 8000bda:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8000bdc:	fb02 f303 	mul.w	r3, r2, r3
 8000be0:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8000be2:	e01d      	b.n	8000c20 <HAL_ADC_PollForConversion+0x178>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8000be4:	683b      	ldr	r3, [r7, #0]
 8000be6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000bea:	d016      	beq.n	8000c1a <HAL_ADC_PollForConversion+0x172>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8000bec:	683b      	ldr	r3, [r7, #0]
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d007      	beq.n	8000c02 <HAL_ADC_PollForConversion+0x15a>
 8000bf2:	f7ff fd9d 	bl	8000730 <HAL_GetTick>
 8000bf6:	4602      	mov	r2, r0
 8000bf8:	697b      	ldr	r3, [r7, #20]
 8000bfa:	1ad3      	subs	r3, r2, r3
 8000bfc:	683a      	ldr	r2, [r7, #0]
 8000bfe:	429a      	cmp	r2, r3
 8000c00:	d20b      	bcs.n	8000c1a <HAL_ADC_PollForConversion+0x172>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c06:	f043 0204 	orr.w	r2, r3, #4
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	629a      	str	r2, [r3, #40]	; 0x28
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	2200      	movs	r2, #0
 8000c12:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          
          return HAL_TIMEOUT;
 8000c16:	2303      	movs	r3, #3
 8000c18:	e030      	b.n	8000c7c <HAL_ADC_PollForConversion+0x1d4>
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8000c1a:	68fb      	ldr	r3, [r7, #12]
 8000c1c:	3301      	adds	r3, #1
 8000c1e:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8000c20:	68fb      	ldr	r3, [r7, #12]
 8000c22:	693a      	ldr	r2, [r7, #16]
 8000c24:	429a      	cmp	r2, r3
 8000c26:	d8dd      	bhi.n	8000be4 <HAL_ADC_PollForConversion+0x13c>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	f06f 0212 	mvn.w	r2, #18
 8000c30:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c36:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	689b      	ldr	r3, [r3, #8]
 8000c44:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000c48:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000c4c:	d115      	bne.n	8000c7a <HAL_ADC_PollForConversion+0x1d2>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d111      	bne.n	8000c7a <HAL_ADC_PollForConversion+0x1d2>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c5a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c66:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d105      	bne.n	8000c7a <HAL_ADC_PollForConversion+0x1d2>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c72:	f043 0201 	orr.w	r2, r3, #1
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8000c7a:	2300      	movs	r3, #0
}
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	371c      	adds	r7, #28
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bd90      	pop	{r4, r7, pc}
 8000c84:	20000000 	.word	0x20000000
 8000c88:	24924924 	.word	0x24924924
 8000c8c:	00924924 	.word	0x00924924
 8000c90:	12492492 	.word	0x12492492
 8000c94:	00492492 	.word	0x00492492
 8000c98:	00249249 	.word	0x00249249

08000c9c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	b083      	sub	sp, #12
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8000caa:	4618      	mov	r0, r3
 8000cac:	370c      	adds	r7, #12
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bc80      	pop	{r7}
 8000cb2:	4770      	bx	lr

08000cb4 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8000cb4:	b480      	push	{r7}
 8000cb6:	b085      	sub	sp, #20
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
 8000cbc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000ccc:	2b01      	cmp	r3, #1
 8000cce:	d101      	bne.n	8000cd4 <HAL_ADC_ConfigChannel+0x20>
 8000cd0:	2302      	movs	r3, #2
 8000cd2:	e0dc      	b.n	8000e8e <HAL_ADC_ConfigChannel+0x1da>
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	2201      	movs	r2, #1
 8000cd8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000cdc:	683b      	ldr	r3, [r7, #0]
 8000cde:	685b      	ldr	r3, [r3, #4]
 8000ce0:	2b06      	cmp	r3, #6
 8000ce2:	d81c      	bhi.n	8000d1e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000cea:	683b      	ldr	r3, [r7, #0]
 8000cec:	685a      	ldr	r2, [r3, #4]
 8000cee:	4613      	mov	r3, r2
 8000cf0:	009b      	lsls	r3, r3, #2
 8000cf2:	4413      	add	r3, r2
 8000cf4:	3b05      	subs	r3, #5
 8000cf6:	221f      	movs	r2, #31
 8000cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cfc:	43db      	mvns	r3, r3
 8000cfe:	4019      	ands	r1, r3
 8000d00:	683b      	ldr	r3, [r7, #0]
 8000d02:	6818      	ldr	r0, [r3, #0]
 8000d04:	683b      	ldr	r3, [r7, #0]
 8000d06:	685a      	ldr	r2, [r3, #4]
 8000d08:	4613      	mov	r3, r2
 8000d0a:	009b      	lsls	r3, r3, #2
 8000d0c:	4413      	add	r3, r2
 8000d0e:	3b05      	subs	r3, #5
 8000d10:	fa00 f203 	lsl.w	r2, r0, r3
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	430a      	orrs	r2, r1
 8000d1a:	635a      	str	r2, [r3, #52]	; 0x34
 8000d1c:	e03c      	b.n	8000d98 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000d1e:	683b      	ldr	r3, [r7, #0]
 8000d20:	685b      	ldr	r3, [r3, #4]
 8000d22:	2b0c      	cmp	r3, #12
 8000d24:	d81c      	bhi.n	8000d60 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000d2c:	683b      	ldr	r3, [r7, #0]
 8000d2e:	685a      	ldr	r2, [r3, #4]
 8000d30:	4613      	mov	r3, r2
 8000d32:	009b      	lsls	r3, r3, #2
 8000d34:	4413      	add	r3, r2
 8000d36:	3b23      	subs	r3, #35	; 0x23
 8000d38:	221f      	movs	r2, #31
 8000d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d3e:	43db      	mvns	r3, r3
 8000d40:	4019      	ands	r1, r3
 8000d42:	683b      	ldr	r3, [r7, #0]
 8000d44:	6818      	ldr	r0, [r3, #0]
 8000d46:	683b      	ldr	r3, [r7, #0]
 8000d48:	685a      	ldr	r2, [r3, #4]
 8000d4a:	4613      	mov	r3, r2
 8000d4c:	009b      	lsls	r3, r3, #2
 8000d4e:	4413      	add	r3, r2
 8000d50:	3b23      	subs	r3, #35	; 0x23
 8000d52:	fa00 f203 	lsl.w	r2, r0, r3
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	430a      	orrs	r2, r1
 8000d5c:	631a      	str	r2, [r3, #48]	; 0x30
 8000d5e:	e01b      	b.n	8000d98 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000d66:	683b      	ldr	r3, [r7, #0]
 8000d68:	685a      	ldr	r2, [r3, #4]
 8000d6a:	4613      	mov	r3, r2
 8000d6c:	009b      	lsls	r3, r3, #2
 8000d6e:	4413      	add	r3, r2
 8000d70:	3b41      	subs	r3, #65	; 0x41
 8000d72:	221f      	movs	r2, #31
 8000d74:	fa02 f303 	lsl.w	r3, r2, r3
 8000d78:	43db      	mvns	r3, r3
 8000d7a:	4019      	ands	r1, r3
 8000d7c:	683b      	ldr	r3, [r7, #0]
 8000d7e:	6818      	ldr	r0, [r3, #0]
 8000d80:	683b      	ldr	r3, [r7, #0]
 8000d82:	685a      	ldr	r2, [r3, #4]
 8000d84:	4613      	mov	r3, r2
 8000d86:	009b      	lsls	r3, r3, #2
 8000d88:	4413      	add	r3, r2
 8000d8a:	3b41      	subs	r3, #65	; 0x41
 8000d8c:	fa00 f203 	lsl.w	r2, r0, r3
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	430a      	orrs	r2, r1
 8000d96:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000d98:	683b      	ldr	r3, [r7, #0]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	2b09      	cmp	r3, #9
 8000d9e:	d91c      	bls.n	8000dda <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	68d9      	ldr	r1, [r3, #12]
 8000da6:	683b      	ldr	r3, [r7, #0]
 8000da8:	681a      	ldr	r2, [r3, #0]
 8000daa:	4613      	mov	r3, r2
 8000dac:	005b      	lsls	r3, r3, #1
 8000dae:	4413      	add	r3, r2
 8000db0:	3b1e      	subs	r3, #30
 8000db2:	2207      	movs	r2, #7
 8000db4:	fa02 f303 	lsl.w	r3, r2, r3
 8000db8:	43db      	mvns	r3, r3
 8000dba:	4019      	ands	r1, r3
 8000dbc:	683b      	ldr	r3, [r7, #0]
 8000dbe:	6898      	ldr	r0, [r3, #8]
 8000dc0:	683b      	ldr	r3, [r7, #0]
 8000dc2:	681a      	ldr	r2, [r3, #0]
 8000dc4:	4613      	mov	r3, r2
 8000dc6:	005b      	lsls	r3, r3, #1
 8000dc8:	4413      	add	r3, r2
 8000dca:	3b1e      	subs	r3, #30
 8000dcc:	fa00 f203 	lsl.w	r2, r0, r3
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	430a      	orrs	r2, r1
 8000dd6:	60da      	str	r2, [r3, #12]
 8000dd8:	e019      	b.n	8000e0e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	6919      	ldr	r1, [r3, #16]
 8000de0:	683b      	ldr	r3, [r7, #0]
 8000de2:	681a      	ldr	r2, [r3, #0]
 8000de4:	4613      	mov	r3, r2
 8000de6:	005b      	lsls	r3, r3, #1
 8000de8:	4413      	add	r3, r2
 8000dea:	2207      	movs	r2, #7
 8000dec:	fa02 f303 	lsl.w	r3, r2, r3
 8000df0:	43db      	mvns	r3, r3
 8000df2:	4019      	ands	r1, r3
 8000df4:	683b      	ldr	r3, [r7, #0]
 8000df6:	6898      	ldr	r0, [r3, #8]
 8000df8:	683b      	ldr	r3, [r7, #0]
 8000dfa:	681a      	ldr	r2, [r3, #0]
 8000dfc:	4613      	mov	r3, r2
 8000dfe:	005b      	lsls	r3, r3, #1
 8000e00:	4413      	add	r3, r2
 8000e02:	fa00 f203 	lsl.w	r2, r0, r3
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	430a      	orrs	r2, r1
 8000e0c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000e0e:	683b      	ldr	r3, [r7, #0]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	2b10      	cmp	r3, #16
 8000e14:	d003      	beq.n	8000e1e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8000e16:	683b      	ldr	r3, [r7, #0]
 8000e18:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000e1a:	2b11      	cmp	r3, #17
 8000e1c:	d132      	bne.n	8000e84 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	4a1d      	ldr	r2, [pc, #116]	; (8000e98 <HAL_ADC_ConfigChannel+0x1e4>)
 8000e24:	4293      	cmp	r3, r2
 8000e26:	d125      	bne.n	8000e74 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	689b      	ldr	r3, [r3, #8]
 8000e2e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d126      	bne.n	8000e84 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	689a      	ldr	r2, [r3, #8]
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8000e44:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8000e46:	683b      	ldr	r3, [r7, #0]
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	2b10      	cmp	r3, #16
 8000e4c:	d11a      	bne.n	8000e84 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000e4e:	4b13      	ldr	r3, [pc, #76]	; (8000e9c <HAL_ADC_ConfigChannel+0x1e8>)
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	4a13      	ldr	r2, [pc, #76]	; (8000ea0 <HAL_ADC_ConfigChannel+0x1ec>)
 8000e54:	fba2 2303 	umull	r2, r3, r2, r3
 8000e58:	0c9a      	lsrs	r2, r3, #18
 8000e5a:	4613      	mov	r3, r2
 8000e5c:	009b      	lsls	r3, r3, #2
 8000e5e:	4413      	add	r3, r2
 8000e60:	005b      	lsls	r3, r3, #1
 8000e62:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000e64:	e002      	b.n	8000e6c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8000e66:	68bb      	ldr	r3, [r7, #8]
 8000e68:	3b01      	subs	r3, #1
 8000e6a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000e6c:	68bb      	ldr	r3, [r7, #8]
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d1f9      	bne.n	8000e66 <HAL_ADC_ConfigChannel+0x1b2>
 8000e72:	e007      	b.n	8000e84 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e78:	f043 0220 	orr.w	r2, r3, #32
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8000e80:	2301      	movs	r3, #1
 8000e82:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	2200      	movs	r2, #0
 8000e88:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8000e8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e8e:	4618      	mov	r0, r3
 8000e90:	3714      	adds	r7, #20
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bc80      	pop	{r7}
 8000e96:	4770      	bx	lr
 8000e98:	40012400 	.word	0x40012400
 8000e9c:	20000000 	.word	0x20000000
 8000ea0:	431bde83 	.word	0x431bde83

08000ea4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b084      	sub	sp, #16
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000eac:	2300      	movs	r3, #0
 8000eae:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	689b      	ldr	r3, [r3, #8]
 8000eba:	f003 0301 	and.w	r3, r3, #1
 8000ebe:	2b01      	cmp	r3, #1
 8000ec0:	d039      	beq.n	8000f36 <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	689a      	ldr	r2, [r3, #8]
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	f042 0201 	orr.w	r2, r2, #1
 8000ed0:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000ed2:	4b1b      	ldr	r3, [pc, #108]	; (8000f40 <ADC_Enable+0x9c>)
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	4a1b      	ldr	r2, [pc, #108]	; (8000f44 <ADC_Enable+0xa0>)
 8000ed8:	fba2 2303 	umull	r2, r3, r2, r3
 8000edc:	0c9b      	lsrs	r3, r3, #18
 8000ede:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8000ee0:	e002      	b.n	8000ee8 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8000ee2:	68bb      	ldr	r3, [r7, #8]
 8000ee4:	3b01      	subs	r3, #1
 8000ee6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8000ee8:	68bb      	ldr	r3, [r7, #8]
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d1f9      	bne.n	8000ee2 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8000eee:	f7ff fc1f 	bl	8000730 <HAL_GetTick>
 8000ef2:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8000ef4:	e018      	b.n	8000f28 <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8000ef6:	f7ff fc1b 	bl	8000730 <HAL_GetTick>
 8000efa:	4602      	mov	r2, r0
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	1ad3      	subs	r3, r2, r3
 8000f00:	2b02      	cmp	r3, #2
 8000f02:	d911      	bls.n	8000f28 <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f08:	f043 0210 	orr.w	r2, r3, #16
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f14:	f043 0201 	orr.w	r2, r3, #1
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	2200      	movs	r2, #0
 8000f20:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 8000f24:	2301      	movs	r3, #1
 8000f26:	e007      	b.n	8000f38 <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	689b      	ldr	r3, [r3, #8]
 8000f2e:	f003 0301 	and.w	r3, r3, #1
 8000f32:	2b01      	cmp	r3, #1
 8000f34:	d1df      	bne.n	8000ef6 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8000f36:	2300      	movs	r3, #0
}
 8000f38:	4618      	mov	r0, r3
 8000f3a:	3710      	adds	r7, #16
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bd80      	pop	{r7, pc}
 8000f40:	20000000 	.word	0x20000000
 8000f44:	431bde83 	.word	0x431bde83

08000f48 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b084      	sub	sp, #16
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000f50:	2300      	movs	r3, #0
 8000f52:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	689b      	ldr	r3, [r3, #8]
 8000f5a:	f003 0301 	and.w	r3, r3, #1
 8000f5e:	2b01      	cmp	r3, #1
 8000f60:	d127      	bne.n	8000fb2 <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	689a      	ldr	r2, [r3, #8]
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	f022 0201 	bic.w	r2, r2, #1
 8000f70:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8000f72:	f7ff fbdd 	bl	8000730 <HAL_GetTick>
 8000f76:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000f78:	e014      	b.n	8000fa4 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8000f7a:	f7ff fbd9 	bl	8000730 <HAL_GetTick>
 8000f7e:	4602      	mov	r2, r0
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	1ad3      	subs	r3, r2, r3
 8000f84:	2b02      	cmp	r3, #2
 8000f86:	d90d      	bls.n	8000fa4 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f8c:	f043 0210 	orr.w	r2, r3, #16
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f98:	f043 0201 	orr.w	r2, r3, #1
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8000fa0:	2301      	movs	r3, #1
 8000fa2:	e007      	b.n	8000fb4 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	689b      	ldr	r3, [r3, #8]
 8000faa:	f003 0301 	and.w	r3, r3, #1
 8000fae:	2b01      	cmp	r3, #1
 8000fb0:	d0e3      	beq.n	8000f7a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8000fb2:	2300      	movs	r3, #0
}
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	3710      	adds	r7, #16
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bd80      	pop	{r7, pc}

08000fbc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	b085      	sub	sp, #20
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	f003 0307 	and.w	r3, r3, #7
 8000fca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fcc:	4b0c      	ldr	r3, [pc, #48]	; (8001000 <__NVIC_SetPriorityGrouping+0x44>)
 8000fce:	68db      	ldr	r3, [r3, #12]
 8000fd0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fd2:	68ba      	ldr	r2, [r7, #8]
 8000fd4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fd8:	4013      	ands	r3, r2
 8000fda:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fe0:	68bb      	ldr	r3, [r7, #8]
 8000fe2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fe4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000fe8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fee:	4a04      	ldr	r2, [pc, #16]	; (8001000 <__NVIC_SetPriorityGrouping+0x44>)
 8000ff0:	68bb      	ldr	r3, [r7, #8]
 8000ff2:	60d3      	str	r3, [r2, #12]
}
 8000ff4:	bf00      	nop
 8000ff6:	3714      	adds	r7, #20
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bc80      	pop	{r7}
 8000ffc:	4770      	bx	lr
 8000ffe:	bf00      	nop
 8001000:	e000ed00 	.word	0xe000ed00

08001004 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001004:	b480      	push	{r7}
 8001006:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001008:	4b04      	ldr	r3, [pc, #16]	; (800101c <__NVIC_GetPriorityGrouping+0x18>)
 800100a:	68db      	ldr	r3, [r3, #12]
 800100c:	0a1b      	lsrs	r3, r3, #8
 800100e:	f003 0307 	and.w	r3, r3, #7
}
 8001012:	4618      	mov	r0, r3
 8001014:	46bd      	mov	sp, r7
 8001016:	bc80      	pop	{r7}
 8001018:	4770      	bx	lr
 800101a:	bf00      	nop
 800101c:	e000ed00 	.word	0xe000ed00

08001020 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001020:	b480      	push	{r7}
 8001022:	b083      	sub	sp, #12
 8001024:	af00      	add	r7, sp, #0
 8001026:	4603      	mov	r3, r0
 8001028:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800102a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800102e:	2b00      	cmp	r3, #0
 8001030:	db0b      	blt.n	800104a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001032:	79fb      	ldrb	r3, [r7, #7]
 8001034:	f003 021f 	and.w	r2, r3, #31
 8001038:	4906      	ldr	r1, [pc, #24]	; (8001054 <__NVIC_EnableIRQ+0x34>)
 800103a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800103e:	095b      	lsrs	r3, r3, #5
 8001040:	2001      	movs	r0, #1
 8001042:	fa00 f202 	lsl.w	r2, r0, r2
 8001046:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800104a:	bf00      	nop
 800104c:	370c      	adds	r7, #12
 800104e:	46bd      	mov	sp, r7
 8001050:	bc80      	pop	{r7}
 8001052:	4770      	bx	lr
 8001054:	e000e100 	.word	0xe000e100

08001058 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001058:	b480      	push	{r7}
 800105a:	b083      	sub	sp, #12
 800105c:	af00      	add	r7, sp, #0
 800105e:	4603      	mov	r3, r0
 8001060:	6039      	str	r1, [r7, #0]
 8001062:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001064:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001068:	2b00      	cmp	r3, #0
 800106a:	db0a      	blt.n	8001082 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	b2da      	uxtb	r2, r3
 8001070:	490c      	ldr	r1, [pc, #48]	; (80010a4 <__NVIC_SetPriority+0x4c>)
 8001072:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001076:	0112      	lsls	r2, r2, #4
 8001078:	b2d2      	uxtb	r2, r2
 800107a:	440b      	add	r3, r1
 800107c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001080:	e00a      	b.n	8001098 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	b2da      	uxtb	r2, r3
 8001086:	4908      	ldr	r1, [pc, #32]	; (80010a8 <__NVIC_SetPriority+0x50>)
 8001088:	79fb      	ldrb	r3, [r7, #7]
 800108a:	f003 030f 	and.w	r3, r3, #15
 800108e:	3b04      	subs	r3, #4
 8001090:	0112      	lsls	r2, r2, #4
 8001092:	b2d2      	uxtb	r2, r2
 8001094:	440b      	add	r3, r1
 8001096:	761a      	strb	r2, [r3, #24]
}
 8001098:	bf00      	nop
 800109a:	370c      	adds	r7, #12
 800109c:	46bd      	mov	sp, r7
 800109e:	bc80      	pop	{r7}
 80010a0:	4770      	bx	lr
 80010a2:	bf00      	nop
 80010a4:	e000e100 	.word	0xe000e100
 80010a8:	e000ed00 	.word	0xe000ed00

080010ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010ac:	b480      	push	{r7}
 80010ae:	b089      	sub	sp, #36	; 0x24
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	60f8      	str	r0, [r7, #12]
 80010b4:	60b9      	str	r1, [r7, #8]
 80010b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	f003 0307 	and.w	r3, r3, #7
 80010be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010c0:	69fb      	ldr	r3, [r7, #28]
 80010c2:	f1c3 0307 	rsb	r3, r3, #7
 80010c6:	2b04      	cmp	r3, #4
 80010c8:	bf28      	it	cs
 80010ca:	2304      	movcs	r3, #4
 80010cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010ce:	69fb      	ldr	r3, [r7, #28]
 80010d0:	3304      	adds	r3, #4
 80010d2:	2b06      	cmp	r3, #6
 80010d4:	d902      	bls.n	80010dc <NVIC_EncodePriority+0x30>
 80010d6:	69fb      	ldr	r3, [r7, #28]
 80010d8:	3b03      	subs	r3, #3
 80010da:	e000      	b.n	80010de <NVIC_EncodePriority+0x32>
 80010dc:	2300      	movs	r3, #0
 80010de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010e0:	f04f 32ff 	mov.w	r2, #4294967295
 80010e4:	69bb      	ldr	r3, [r7, #24]
 80010e6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ea:	43da      	mvns	r2, r3
 80010ec:	68bb      	ldr	r3, [r7, #8]
 80010ee:	401a      	ands	r2, r3
 80010f0:	697b      	ldr	r3, [r7, #20]
 80010f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010f4:	f04f 31ff 	mov.w	r1, #4294967295
 80010f8:	697b      	ldr	r3, [r7, #20]
 80010fa:	fa01 f303 	lsl.w	r3, r1, r3
 80010fe:	43d9      	mvns	r1, r3
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001104:	4313      	orrs	r3, r2
         );
}
 8001106:	4618      	mov	r0, r3
 8001108:	3724      	adds	r7, #36	; 0x24
 800110a:	46bd      	mov	sp, r7
 800110c:	bc80      	pop	{r7}
 800110e:	4770      	bx	lr

08001110 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b082      	sub	sp, #8
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	3b01      	subs	r3, #1
 800111c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001120:	d301      	bcc.n	8001126 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001122:	2301      	movs	r3, #1
 8001124:	e00f      	b.n	8001146 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001126:	4a0a      	ldr	r2, [pc, #40]	; (8001150 <SysTick_Config+0x40>)
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	3b01      	subs	r3, #1
 800112c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800112e:	210f      	movs	r1, #15
 8001130:	f04f 30ff 	mov.w	r0, #4294967295
 8001134:	f7ff ff90 	bl	8001058 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001138:	4b05      	ldr	r3, [pc, #20]	; (8001150 <SysTick_Config+0x40>)
 800113a:	2200      	movs	r2, #0
 800113c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800113e:	4b04      	ldr	r3, [pc, #16]	; (8001150 <SysTick_Config+0x40>)
 8001140:	2207      	movs	r2, #7
 8001142:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001144:	2300      	movs	r3, #0
}
 8001146:	4618      	mov	r0, r3
 8001148:	3708      	adds	r7, #8
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	e000e010 	.word	0xe000e010

08001154 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b082      	sub	sp, #8
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800115c:	6878      	ldr	r0, [r7, #4]
 800115e:	f7ff ff2d 	bl	8000fbc <__NVIC_SetPriorityGrouping>
}
 8001162:	bf00      	nop
 8001164:	3708      	adds	r7, #8
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}

0800116a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800116a:	b580      	push	{r7, lr}
 800116c:	b086      	sub	sp, #24
 800116e:	af00      	add	r7, sp, #0
 8001170:	4603      	mov	r3, r0
 8001172:	60b9      	str	r1, [r7, #8]
 8001174:	607a      	str	r2, [r7, #4]
 8001176:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001178:	2300      	movs	r3, #0
 800117a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800117c:	f7ff ff42 	bl	8001004 <__NVIC_GetPriorityGrouping>
 8001180:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001182:	687a      	ldr	r2, [r7, #4]
 8001184:	68b9      	ldr	r1, [r7, #8]
 8001186:	6978      	ldr	r0, [r7, #20]
 8001188:	f7ff ff90 	bl	80010ac <NVIC_EncodePriority>
 800118c:	4602      	mov	r2, r0
 800118e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001192:	4611      	mov	r1, r2
 8001194:	4618      	mov	r0, r3
 8001196:	f7ff ff5f 	bl	8001058 <__NVIC_SetPriority>
}
 800119a:	bf00      	nop
 800119c:	3718      	adds	r7, #24
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}

080011a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011a2:	b580      	push	{r7, lr}
 80011a4:	b082      	sub	sp, #8
 80011a6:	af00      	add	r7, sp, #0
 80011a8:	4603      	mov	r3, r0
 80011aa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011b0:	4618      	mov	r0, r3
 80011b2:	f7ff ff35 	bl	8001020 <__NVIC_EnableIRQ>
}
 80011b6:	bf00      	nop
 80011b8:	3708      	adds	r7, #8
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}

080011be <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011be:	b580      	push	{r7, lr}
 80011c0:	b082      	sub	sp, #8
 80011c2:	af00      	add	r7, sp, #0
 80011c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011c6:	6878      	ldr	r0, [r7, #4]
 80011c8:	f7ff ffa2 	bl	8001110 <SysTick_Config>
 80011cc:	4603      	mov	r3, r0
}
 80011ce:	4618      	mov	r0, r3
 80011d0:	3708      	adds	r7, #8
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}
	...

080011d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011d8:	b480      	push	{r7}
 80011da:	b08b      	sub	sp, #44	; 0x2c
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
 80011e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80011e2:	2300      	movs	r3, #0
 80011e4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80011e6:	2300      	movs	r3, #0
 80011e8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011ea:	e169      	b.n	80014c0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80011ec:	2201      	movs	r2, #1
 80011ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011f0:	fa02 f303 	lsl.w	r3, r2, r3
 80011f4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	69fa      	ldr	r2, [r7, #28]
 80011fc:	4013      	ands	r3, r2
 80011fe:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001200:	69ba      	ldr	r2, [r7, #24]
 8001202:	69fb      	ldr	r3, [r7, #28]
 8001204:	429a      	cmp	r2, r3
 8001206:	f040 8158 	bne.w	80014ba <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800120a:	683b      	ldr	r3, [r7, #0]
 800120c:	685b      	ldr	r3, [r3, #4]
 800120e:	4a9a      	ldr	r2, [pc, #616]	; (8001478 <HAL_GPIO_Init+0x2a0>)
 8001210:	4293      	cmp	r3, r2
 8001212:	d05e      	beq.n	80012d2 <HAL_GPIO_Init+0xfa>
 8001214:	4a98      	ldr	r2, [pc, #608]	; (8001478 <HAL_GPIO_Init+0x2a0>)
 8001216:	4293      	cmp	r3, r2
 8001218:	d875      	bhi.n	8001306 <HAL_GPIO_Init+0x12e>
 800121a:	4a98      	ldr	r2, [pc, #608]	; (800147c <HAL_GPIO_Init+0x2a4>)
 800121c:	4293      	cmp	r3, r2
 800121e:	d058      	beq.n	80012d2 <HAL_GPIO_Init+0xfa>
 8001220:	4a96      	ldr	r2, [pc, #600]	; (800147c <HAL_GPIO_Init+0x2a4>)
 8001222:	4293      	cmp	r3, r2
 8001224:	d86f      	bhi.n	8001306 <HAL_GPIO_Init+0x12e>
 8001226:	4a96      	ldr	r2, [pc, #600]	; (8001480 <HAL_GPIO_Init+0x2a8>)
 8001228:	4293      	cmp	r3, r2
 800122a:	d052      	beq.n	80012d2 <HAL_GPIO_Init+0xfa>
 800122c:	4a94      	ldr	r2, [pc, #592]	; (8001480 <HAL_GPIO_Init+0x2a8>)
 800122e:	4293      	cmp	r3, r2
 8001230:	d869      	bhi.n	8001306 <HAL_GPIO_Init+0x12e>
 8001232:	4a94      	ldr	r2, [pc, #592]	; (8001484 <HAL_GPIO_Init+0x2ac>)
 8001234:	4293      	cmp	r3, r2
 8001236:	d04c      	beq.n	80012d2 <HAL_GPIO_Init+0xfa>
 8001238:	4a92      	ldr	r2, [pc, #584]	; (8001484 <HAL_GPIO_Init+0x2ac>)
 800123a:	4293      	cmp	r3, r2
 800123c:	d863      	bhi.n	8001306 <HAL_GPIO_Init+0x12e>
 800123e:	4a92      	ldr	r2, [pc, #584]	; (8001488 <HAL_GPIO_Init+0x2b0>)
 8001240:	4293      	cmp	r3, r2
 8001242:	d046      	beq.n	80012d2 <HAL_GPIO_Init+0xfa>
 8001244:	4a90      	ldr	r2, [pc, #576]	; (8001488 <HAL_GPIO_Init+0x2b0>)
 8001246:	4293      	cmp	r3, r2
 8001248:	d85d      	bhi.n	8001306 <HAL_GPIO_Init+0x12e>
 800124a:	2b12      	cmp	r3, #18
 800124c:	d82a      	bhi.n	80012a4 <HAL_GPIO_Init+0xcc>
 800124e:	2b12      	cmp	r3, #18
 8001250:	d859      	bhi.n	8001306 <HAL_GPIO_Init+0x12e>
 8001252:	a201      	add	r2, pc, #4	; (adr r2, 8001258 <HAL_GPIO_Init+0x80>)
 8001254:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001258:	080012d3 	.word	0x080012d3
 800125c:	080012ad 	.word	0x080012ad
 8001260:	080012bf 	.word	0x080012bf
 8001264:	08001301 	.word	0x08001301
 8001268:	08001307 	.word	0x08001307
 800126c:	08001307 	.word	0x08001307
 8001270:	08001307 	.word	0x08001307
 8001274:	08001307 	.word	0x08001307
 8001278:	08001307 	.word	0x08001307
 800127c:	08001307 	.word	0x08001307
 8001280:	08001307 	.word	0x08001307
 8001284:	08001307 	.word	0x08001307
 8001288:	08001307 	.word	0x08001307
 800128c:	08001307 	.word	0x08001307
 8001290:	08001307 	.word	0x08001307
 8001294:	08001307 	.word	0x08001307
 8001298:	08001307 	.word	0x08001307
 800129c:	080012b5 	.word	0x080012b5
 80012a0:	080012c9 	.word	0x080012c9
 80012a4:	4a79      	ldr	r2, [pc, #484]	; (800148c <HAL_GPIO_Init+0x2b4>)
 80012a6:	4293      	cmp	r3, r2
 80012a8:	d013      	beq.n	80012d2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80012aa:	e02c      	b.n	8001306 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	68db      	ldr	r3, [r3, #12]
 80012b0:	623b      	str	r3, [r7, #32]
          break;
 80012b2:	e029      	b.n	8001308 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	68db      	ldr	r3, [r3, #12]
 80012b8:	3304      	adds	r3, #4
 80012ba:	623b      	str	r3, [r7, #32]
          break;
 80012bc:	e024      	b.n	8001308 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	68db      	ldr	r3, [r3, #12]
 80012c2:	3308      	adds	r3, #8
 80012c4:	623b      	str	r3, [r7, #32]
          break;
 80012c6:	e01f      	b.n	8001308 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	68db      	ldr	r3, [r3, #12]
 80012cc:	330c      	adds	r3, #12
 80012ce:	623b      	str	r3, [r7, #32]
          break;
 80012d0:	e01a      	b.n	8001308 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80012d2:	683b      	ldr	r3, [r7, #0]
 80012d4:	689b      	ldr	r3, [r3, #8]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d102      	bne.n	80012e0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80012da:	2304      	movs	r3, #4
 80012dc:	623b      	str	r3, [r7, #32]
          break;
 80012de:	e013      	b.n	8001308 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	689b      	ldr	r3, [r3, #8]
 80012e4:	2b01      	cmp	r3, #1
 80012e6:	d105      	bne.n	80012f4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80012e8:	2308      	movs	r3, #8
 80012ea:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	69fa      	ldr	r2, [r7, #28]
 80012f0:	611a      	str	r2, [r3, #16]
          break;
 80012f2:	e009      	b.n	8001308 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80012f4:	2308      	movs	r3, #8
 80012f6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	69fa      	ldr	r2, [r7, #28]
 80012fc:	615a      	str	r2, [r3, #20]
          break;
 80012fe:	e003      	b.n	8001308 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001300:	2300      	movs	r3, #0
 8001302:	623b      	str	r3, [r7, #32]
          break;
 8001304:	e000      	b.n	8001308 <HAL_GPIO_Init+0x130>
          break;
 8001306:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001308:	69bb      	ldr	r3, [r7, #24]
 800130a:	2bff      	cmp	r3, #255	; 0xff
 800130c:	d801      	bhi.n	8001312 <HAL_GPIO_Init+0x13a>
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	e001      	b.n	8001316 <HAL_GPIO_Init+0x13e>
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	3304      	adds	r3, #4
 8001316:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001318:	69bb      	ldr	r3, [r7, #24]
 800131a:	2bff      	cmp	r3, #255	; 0xff
 800131c:	d802      	bhi.n	8001324 <HAL_GPIO_Init+0x14c>
 800131e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001320:	009b      	lsls	r3, r3, #2
 8001322:	e002      	b.n	800132a <HAL_GPIO_Init+0x152>
 8001324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001326:	3b08      	subs	r3, #8
 8001328:	009b      	lsls	r3, r3, #2
 800132a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800132c:	697b      	ldr	r3, [r7, #20]
 800132e:	681a      	ldr	r2, [r3, #0]
 8001330:	210f      	movs	r1, #15
 8001332:	693b      	ldr	r3, [r7, #16]
 8001334:	fa01 f303 	lsl.w	r3, r1, r3
 8001338:	43db      	mvns	r3, r3
 800133a:	401a      	ands	r2, r3
 800133c:	6a39      	ldr	r1, [r7, #32]
 800133e:	693b      	ldr	r3, [r7, #16]
 8001340:	fa01 f303 	lsl.w	r3, r1, r3
 8001344:	431a      	orrs	r2, r3
 8001346:	697b      	ldr	r3, [r7, #20]
 8001348:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	685b      	ldr	r3, [r3, #4]
 800134e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001352:	2b00      	cmp	r3, #0
 8001354:	f000 80b1 	beq.w	80014ba <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001358:	4b4d      	ldr	r3, [pc, #308]	; (8001490 <HAL_GPIO_Init+0x2b8>)
 800135a:	699b      	ldr	r3, [r3, #24]
 800135c:	4a4c      	ldr	r2, [pc, #304]	; (8001490 <HAL_GPIO_Init+0x2b8>)
 800135e:	f043 0301 	orr.w	r3, r3, #1
 8001362:	6193      	str	r3, [r2, #24]
 8001364:	4b4a      	ldr	r3, [pc, #296]	; (8001490 <HAL_GPIO_Init+0x2b8>)
 8001366:	699b      	ldr	r3, [r3, #24]
 8001368:	f003 0301 	and.w	r3, r3, #1
 800136c:	60bb      	str	r3, [r7, #8]
 800136e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001370:	4a48      	ldr	r2, [pc, #288]	; (8001494 <HAL_GPIO_Init+0x2bc>)
 8001372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001374:	089b      	lsrs	r3, r3, #2
 8001376:	3302      	adds	r3, #2
 8001378:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800137c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800137e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001380:	f003 0303 	and.w	r3, r3, #3
 8001384:	009b      	lsls	r3, r3, #2
 8001386:	220f      	movs	r2, #15
 8001388:	fa02 f303 	lsl.w	r3, r2, r3
 800138c:	43db      	mvns	r3, r3
 800138e:	68fa      	ldr	r2, [r7, #12]
 8001390:	4013      	ands	r3, r2
 8001392:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	4a40      	ldr	r2, [pc, #256]	; (8001498 <HAL_GPIO_Init+0x2c0>)
 8001398:	4293      	cmp	r3, r2
 800139a:	d013      	beq.n	80013c4 <HAL_GPIO_Init+0x1ec>
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	4a3f      	ldr	r2, [pc, #252]	; (800149c <HAL_GPIO_Init+0x2c4>)
 80013a0:	4293      	cmp	r3, r2
 80013a2:	d00d      	beq.n	80013c0 <HAL_GPIO_Init+0x1e8>
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	4a3e      	ldr	r2, [pc, #248]	; (80014a0 <HAL_GPIO_Init+0x2c8>)
 80013a8:	4293      	cmp	r3, r2
 80013aa:	d007      	beq.n	80013bc <HAL_GPIO_Init+0x1e4>
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	4a3d      	ldr	r2, [pc, #244]	; (80014a4 <HAL_GPIO_Init+0x2cc>)
 80013b0:	4293      	cmp	r3, r2
 80013b2:	d101      	bne.n	80013b8 <HAL_GPIO_Init+0x1e0>
 80013b4:	2303      	movs	r3, #3
 80013b6:	e006      	b.n	80013c6 <HAL_GPIO_Init+0x1ee>
 80013b8:	2304      	movs	r3, #4
 80013ba:	e004      	b.n	80013c6 <HAL_GPIO_Init+0x1ee>
 80013bc:	2302      	movs	r3, #2
 80013be:	e002      	b.n	80013c6 <HAL_GPIO_Init+0x1ee>
 80013c0:	2301      	movs	r3, #1
 80013c2:	e000      	b.n	80013c6 <HAL_GPIO_Init+0x1ee>
 80013c4:	2300      	movs	r3, #0
 80013c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013c8:	f002 0203 	and.w	r2, r2, #3
 80013cc:	0092      	lsls	r2, r2, #2
 80013ce:	4093      	lsls	r3, r2
 80013d0:	68fa      	ldr	r2, [r7, #12]
 80013d2:	4313      	orrs	r3, r2
 80013d4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80013d6:	492f      	ldr	r1, [pc, #188]	; (8001494 <HAL_GPIO_Init+0x2bc>)
 80013d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013da:	089b      	lsrs	r3, r3, #2
 80013dc:	3302      	adds	r3, #2
 80013de:	68fa      	ldr	r2, [r7, #12]
 80013e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	685b      	ldr	r3, [r3, #4]
 80013e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d006      	beq.n	80013fe <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80013f0:	4b2d      	ldr	r3, [pc, #180]	; (80014a8 <HAL_GPIO_Init+0x2d0>)
 80013f2:	681a      	ldr	r2, [r3, #0]
 80013f4:	492c      	ldr	r1, [pc, #176]	; (80014a8 <HAL_GPIO_Init+0x2d0>)
 80013f6:	69bb      	ldr	r3, [r7, #24]
 80013f8:	4313      	orrs	r3, r2
 80013fa:	600b      	str	r3, [r1, #0]
 80013fc:	e006      	b.n	800140c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80013fe:	4b2a      	ldr	r3, [pc, #168]	; (80014a8 <HAL_GPIO_Init+0x2d0>)
 8001400:	681a      	ldr	r2, [r3, #0]
 8001402:	69bb      	ldr	r3, [r7, #24]
 8001404:	43db      	mvns	r3, r3
 8001406:	4928      	ldr	r1, [pc, #160]	; (80014a8 <HAL_GPIO_Init+0x2d0>)
 8001408:	4013      	ands	r3, r2
 800140a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	685b      	ldr	r3, [r3, #4]
 8001410:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001414:	2b00      	cmp	r3, #0
 8001416:	d006      	beq.n	8001426 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001418:	4b23      	ldr	r3, [pc, #140]	; (80014a8 <HAL_GPIO_Init+0x2d0>)
 800141a:	685a      	ldr	r2, [r3, #4]
 800141c:	4922      	ldr	r1, [pc, #136]	; (80014a8 <HAL_GPIO_Init+0x2d0>)
 800141e:	69bb      	ldr	r3, [r7, #24]
 8001420:	4313      	orrs	r3, r2
 8001422:	604b      	str	r3, [r1, #4]
 8001424:	e006      	b.n	8001434 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001426:	4b20      	ldr	r3, [pc, #128]	; (80014a8 <HAL_GPIO_Init+0x2d0>)
 8001428:	685a      	ldr	r2, [r3, #4]
 800142a:	69bb      	ldr	r3, [r7, #24]
 800142c:	43db      	mvns	r3, r3
 800142e:	491e      	ldr	r1, [pc, #120]	; (80014a8 <HAL_GPIO_Init+0x2d0>)
 8001430:	4013      	ands	r3, r2
 8001432:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	685b      	ldr	r3, [r3, #4]
 8001438:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800143c:	2b00      	cmp	r3, #0
 800143e:	d006      	beq.n	800144e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001440:	4b19      	ldr	r3, [pc, #100]	; (80014a8 <HAL_GPIO_Init+0x2d0>)
 8001442:	689a      	ldr	r2, [r3, #8]
 8001444:	4918      	ldr	r1, [pc, #96]	; (80014a8 <HAL_GPIO_Init+0x2d0>)
 8001446:	69bb      	ldr	r3, [r7, #24]
 8001448:	4313      	orrs	r3, r2
 800144a:	608b      	str	r3, [r1, #8]
 800144c:	e006      	b.n	800145c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800144e:	4b16      	ldr	r3, [pc, #88]	; (80014a8 <HAL_GPIO_Init+0x2d0>)
 8001450:	689a      	ldr	r2, [r3, #8]
 8001452:	69bb      	ldr	r3, [r7, #24]
 8001454:	43db      	mvns	r3, r3
 8001456:	4914      	ldr	r1, [pc, #80]	; (80014a8 <HAL_GPIO_Init+0x2d0>)
 8001458:	4013      	ands	r3, r2
 800145a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	685b      	ldr	r3, [r3, #4]
 8001460:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001464:	2b00      	cmp	r3, #0
 8001466:	d021      	beq.n	80014ac <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001468:	4b0f      	ldr	r3, [pc, #60]	; (80014a8 <HAL_GPIO_Init+0x2d0>)
 800146a:	68da      	ldr	r2, [r3, #12]
 800146c:	490e      	ldr	r1, [pc, #56]	; (80014a8 <HAL_GPIO_Init+0x2d0>)
 800146e:	69bb      	ldr	r3, [r7, #24]
 8001470:	4313      	orrs	r3, r2
 8001472:	60cb      	str	r3, [r1, #12]
 8001474:	e021      	b.n	80014ba <HAL_GPIO_Init+0x2e2>
 8001476:	bf00      	nop
 8001478:	10320000 	.word	0x10320000
 800147c:	10310000 	.word	0x10310000
 8001480:	10220000 	.word	0x10220000
 8001484:	10210000 	.word	0x10210000
 8001488:	10120000 	.word	0x10120000
 800148c:	10110000 	.word	0x10110000
 8001490:	40021000 	.word	0x40021000
 8001494:	40010000 	.word	0x40010000
 8001498:	40010800 	.word	0x40010800
 800149c:	40010c00 	.word	0x40010c00
 80014a0:	40011000 	.word	0x40011000
 80014a4:	40011400 	.word	0x40011400
 80014a8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80014ac:	4b0b      	ldr	r3, [pc, #44]	; (80014dc <HAL_GPIO_Init+0x304>)
 80014ae:	68da      	ldr	r2, [r3, #12]
 80014b0:	69bb      	ldr	r3, [r7, #24]
 80014b2:	43db      	mvns	r3, r3
 80014b4:	4909      	ldr	r1, [pc, #36]	; (80014dc <HAL_GPIO_Init+0x304>)
 80014b6:	4013      	ands	r3, r2
 80014b8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80014ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014bc:	3301      	adds	r3, #1
 80014be:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	681a      	ldr	r2, [r3, #0]
 80014c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014c6:	fa22 f303 	lsr.w	r3, r2, r3
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	f47f ae8e 	bne.w	80011ec <HAL_GPIO_Init+0x14>
  }
}
 80014d0:	bf00      	nop
 80014d2:	bf00      	nop
 80014d4:	372c      	adds	r7, #44	; 0x2c
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bc80      	pop	{r7}
 80014da:	4770      	bx	lr
 80014dc:	40010400 	.word	0x40010400

080014e0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80014e0:	b480      	push	{r7}
 80014e2:	b085      	sub	sp, #20
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
 80014e8:	460b      	mov	r3, r1
 80014ea:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	689a      	ldr	r2, [r3, #8]
 80014f0:	887b      	ldrh	r3, [r7, #2]
 80014f2:	4013      	ands	r3, r2
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d002      	beq.n	80014fe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80014f8:	2301      	movs	r3, #1
 80014fa:	73fb      	strb	r3, [r7, #15]
 80014fc:	e001      	b.n	8001502 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80014fe:	2300      	movs	r3, #0
 8001500:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001502:	7bfb      	ldrb	r3, [r7, #15]
}
 8001504:	4618      	mov	r0, r3
 8001506:	3714      	adds	r7, #20
 8001508:	46bd      	mov	sp, r7
 800150a:	bc80      	pop	{r7}
 800150c:	4770      	bx	lr

0800150e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800150e:	b480      	push	{r7}
 8001510:	b083      	sub	sp, #12
 8001512:	af00      	add	r7, sp, #0
 8001514:	6078      	str	r0, [r7, #4]
 8001516:	460b      	mov	r3, r1
 8001518:	807b      	strh	r3, [r7, #2]
 800151a:	4613      	mov	r3, r2
 800151c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800151e:	787b      	ldrb	r3, [r7, #1]
 8001520:	2b00      	cmp	r3, #0
 8001522:	d003      	beq.n	800152c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001524:	887a      	ldrh	r2, [r7, #2]
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800152a:	e003      	b.n	8001534 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800152c:	887b      	ldrh	r3, [r7, #2]
 800152e:	041a      	lsls	r2, r3, #16
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	611a      	str	r2, [r3, #16]
}
 8001534:	bf00      	nop
 8001536:	370c      	adds	r7, #12
 8001538:	46bd      	mov	sp, r7
 800153a:	bc80      	pop	{r7}
 800153c:	4770      	bx	lr

0800153e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800153e:	b480      	push	{r7}
 8001540:	b085      	sub	sp, #20
 8001542:	af00      	add	r7, sp, #0
 8001544:	6078      	str	r0, [r7, #4]
 8001546:	460b      	mov	r3, r1
 8001548:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	68db      	ldr	r3, [r3, #12]
 800154e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001550:	887a      	ldrh	r2, [r7, #2]
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	4013      	ands	r3, r2
 8001556:	041a      	lsls	r2, r3, #16
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	43d9      	mvns	r1, r3
 800155c:	887b      	ldrh	r3, [r7, #2]
 800155e:	400b      	ands	r3, r1
 8001560:	431a      	orrs	r2, r3
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	611a      	str	r2, [r3, #16]
}
 8001566:	bf00      	nop
 8001568:	3714      	adds	r7, #20
 800156a:	46bd      	mov	sp, r7
 800156c:	bc80      	pop	{r7}
 800156e:	4770      	bx	lr

08001570 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001570:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001572:	b08b      	sub	sp, #44	; 0x2c
 8001574:	af06      	add	r7, sp, #24
 8001576:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	2b00      	cmp	r3, #0
 800157c:	d101      	bne.n	8001582 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800157e:	2301      	movs	r3, #1
 8001580:	e0fd      	b.n	800177e <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8001588:	b2db      	uxtb	r3, r3
 800158a:	2b00      	cmp	r3, #0
 800158c:	d106      	bne.n	800159c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	2200      	movs	r2, #0
 8001592:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001596:	6878      	ldr	r0, [r7, #4]
 8001598:	f005 fd02 	bl	8006fa0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	2203      	movs	r2, #3
 80015a0:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	4618      	mov	r0, r3
 80015aa:	f002 f901 	bl	80037b0 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	603b      	str	r3, [r7, #0]
 80015b4:	687e      	ldr	r6, [r7, #4]
 80015b6:	466d      	mov	r5, sp
 80015b8:	f106 0410 	add.w	r4, r6, #16
 80015bc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80015be:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80015c0:	6823      	ldr	r3, [r4, #0]
 80015c2:	602b      	str	r3, [r5, #0]
 80015c4:	1d33      	adds	r3, r6, #4
 80015c6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80015c8:	6838      	ldr	r0, [r7, #0]
 80015ca:	f002 f8cb 	bl	8003764 <USB_CoreInit>
 80015ce:	4603      	mov	r3, r0
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d005      	beq.n	80015e0 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	2202      	movs	r2, #2
 80015d8:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 80015dc:	2301      	movs	r3, #1
 80015de:	e0ce      	b.n	800177e <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	2100      	movs	r1, #0
 80015e6:	4618      	mov	r0, r3
 80015e8:	f002 f8fc 	bl	80037e4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80015ec:	2300      	movs	r3, #0
 80015ee:	73fb      	strb	r3, [r7, #15]
 80015f0:	e04c      	b.n	800168c <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80015f2:	7bfb      	ldrb	r3, [r7, #15]
 80015f4:	6879      	ldr	r1, [r7, #4]
 80015f6:	1c5a      	adds	r2, r3, #1
 80015f8:	4613      	mov	r3, r2
 80015fa:	009b      	lsls	r3, r3, #2
 80015fc:	4413      	add	r3, r2
 80015fe:	00db      	lsls	r3, r3, #3
 8001600:	440b      	add	r3, r1
 8001602:	3301      	adds	r3, #1
 8001604:	2201      	movs	r2, #1
 8001606:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001608:	7bfb      	ldrb	r3, [r7, #15]
 800160a:	6879      	ldr	r1, [r7, #4]
 800160c:	1c5a      	adds	r2, r3, #1
 800160e:	4613      	mov	r3, r2
 8001610:	009b      	lsls	r3, r3, #2
 8001612:	4413      	add	r3, r2
 8001614:	00db      	lsls	r3, r3, #3
 8001616:	440b      	add	r3, r1
 8001618:	7bfa      	ldrb	r2, [r7, #15]
 800161a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800161c:	7bfa      	ldrb	r2, [r7, #15]
 800161e:	7bfb      	ldrb	r3, [r7, #15]
 8001620:	b298      	uxth	r0, r3
 8001622:	6879      	ldr	r1, [r7, #4]
 8001624:	4613      	mov	r3, r2
 8001626:	009b      	lsls	r3, r3, #2
 8001628:	4413      	add	r3, r2
 800162a:	00db      	lsls	r3, r3, #3
 800162c:	440b      	add	r3, r1
 800162e:	3336      	adds	r3, #54	; 0x36
 8001630:	4602      	mov	r2, r0
 8001632:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001634:	7bfb      	ldrb	r3, [r7, #15]
 8001636:	6879      	ldr	r1, [r7, #4]
 8001638:	1c5a      	adds	r2, r3, #1
 800163a:	4613      	mov	r3, r2
 800163c:	009b      	lsls	r3, r3, #2
 800163e:	4413      	add	r3, r2
 8001640:	00db      	lsls	r3, r3, #3
 8001642:	440b      	add	r3, r1
 8001644:	3303      	adds	r3, #3
 8001646:	2200      	movs	r2, #0
 8001648:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800164a:	7bfa      	ldrb	r2, [r7, #15]
 800164c:	6879      	ldr	r1, [r7, #4]
 800164e:	4613      	mov	r3, r2
 8001650:	009b      	lsls	r3, r3, #2
 8001652:	4413      	add	r3, r2
 8001654:	00db      	lsls	r3, r3, #3
 8001656:	440b      	add	r3, r1
 8001658:	3338      	adds	r3, #56	; 0x38
 800165a:	2200      	movs	r2, #0
 800165c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800165e:	7bfa      	ldrb	r2, [r7, #15]
 8001660:	6879      	ldr	r1, [r7, #4]
 8001662:	4613      	mov	r3, r2
 8001664:	009b      	lsls	r3, r3, #2
 8001666:	4413      	add	r3, r2
 8001668:	00db      	lsls	r3, r3, #3
 800166a:	440b      	add	r3, r1
 800166c:	333c      	adds	r3, #60	; 0x3c
 800166e:	2200      	movs	r2, #0
 8001670:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001672:	7bfa      	ldrb	r2, [r7, #15]
 8001674:	6879      	ldr	r1, [r7, #4]
 8001676:	4613      	mov	r3, r2
 8001678:	009b      	lsls	r3, r3, #2
 800167a:	4413      	add	r3, r2
 800167c:	00db      	lsls	r3, r3, #3
 800167e:	440b      	add	r3, r1
 8001680:	3340      	adds	r3, #64	; 0x40
 8001682:	2200      	movs	r2, #0
 8001684:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001686:	7bfb      	ldrb	r3, [r7, #15]
 8001688:	3301      	adds	r3, #1
 800168a:	73fb      	strb	r3, [r7, #15]
 800168c:	7bfa      	ldrb	r2, [r7, #15]
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	685b      	ldr	r3, [r3, #4]
 8001692:	429a      	cmp	r2, r3
 8001694:	d3ad      	bcc.n	80015f2 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001696:	2300      	movs	r3, #0
 8001698:	73fb      	strb	r3, [r7, #15]
 800169a:	e044      	b.n	8001726 <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800169c:	7bfa      	ldrb	r2, [r7, #15]
 800169e:	6879      	ldr	r1, [r7, #4]
 80016a0:	4613      	mov	r3, r2
 80016a2:	009b      	lsls	r3, r3, #2
 80016a4:	4413      	add	r3, r2
 80016a6:	00db      	lsls	r3, r3, #3
 80016a8:	440b      	add	r3, r1
 80016aa:	f203 1369 	addw	r3, r3, #361	; 0x169
 80016ae:	2200      	movs	r2, #0
 80016b0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80016b2:	7bfa      	ldrb	r2, [r7, #15]
 80016b4:	6879      	ldr	r1, [r7, #4]
 80016b6:	4613      	mov	r3, r2
 80016b8:	009b      	lsls	r3, r3, #2
 80016ba:	4413      	add	r3, r2
 80016bc:	00db      	lsls	r3, r3, #3
 80016be:	440b      	add	r3, r1
 80016c0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80016c4:	7bfa      	ldrb	r2, [r7, #15]
 80016c6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80016c8:	7bfa      	ldrb	r2, [r7, #15]
 80016ca:	6879      	ldr	r1, [r7, #4]
 80016cc:	4613      	mov	r3, r2
 80016ce:	009b      	lsls	r3, r3, #2
 80016d0:	4413      	add	r3, r2
 80016d2:	00db      	lsls	r3, r3, #3
 80016d4:	440b      	add	r3, r1
 80016d6:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80016da:	2200      	movs	r2, #0
 80016dc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80016de:	7bfa      	ldrb	r2, [r7, #15]
 80016e0:	6879      	ldr	r1, [r7, #4]
 80016e2:	4613      	mov	r3, r2
 80016e4:	009b      	lsls	r3, r3, #2
 80016e6:	4413      	add	r3, r2
 80016e8:	00db      	lsls	r3, r3, #3
 80016ea:	440b      	add	r3, r1
 80016ec:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80016f0:	2200      	movs	r2, #0
 80016f2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80016f4:	7bfa      	ldrb	r2, [r7, #15]
 80016f6:	6879      	ldr	r1, [r7, #4]
 80016f8:	4613      	mov	r3, r2
 80016fa:	009b      	lsls	r3, r3, #2
 80016fc:	4413      	add	r3, r2
 80016fe:	00db      	lsls	r3, r3, #3
 8001700:	440b      	add	r3, r1
 8001702:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001706:	2200      	movs	r2, #0
 8001708:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800170a:	7bfa      	ldrb	r2, [r7, #15]
 800170c:	6879      	ldr	r1, [r7, #4]
 800170e:	4613      	mov	r3, r2
 8001710:	009b      	lsls	r3, r3, #2
 8001712:	4413      	add	r3, r2
 8001714:	00db      	lsls	r3, r3, #3
 8001716:	440b      	add	r3, r1
 8001718:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800171c:	2200      	movs	r2, #0
 800171e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001720:	7bfb      	ldrb	r3, [r7, #15]
 8001722:	3301      	adds	r3, #1
 8001724:	73fb      	strb	r3, [r7, #15]
 8001726:	7bfa      	ldrb	r2, [r7, #15]
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	685b      	ldr	r3, [r3, #4]
 800172c:	429a      	cmp	r2, r3
 800172e:	d3b5      	bcc.n	800169c <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	603b      	str	r3, [r7, #0]
 8001736:	687e      	ldr	r6, [r7, #4]
 8001738:	466d      	mov	r5, sp
 800173a:	f106 0410 	add.w	r4, r6, #16
 800173e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001740:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001742:	6823      	ldr	r3, [r4, #0]
 8001744:	602b      	str	r3, [r5, #0]
 8001746:	1d33      	adds	r3, r6, #4
 8001748:	cb0e      	ldmia	r3, {r1, r2, r3}
 800174a:	6838      	ldr	r0, [r7, #0]
 800174c:	f002 f856 	bl	80037fc <USB_DevInit>
 8001750:	4603      	mov	r3, r0
 8001752:	2b00      	cmp	r3, #0
 8001754:	d005      	beq.n	8001762 <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	2202      	movs	r2, #2
 800175a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 800175e:	2301      	movs	r3, #1
 8001760:	e00d      	b.n	800177e <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	2200      	movs	r2, #0
 8001766:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	2201      	movs	r2, #1
 800176e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	4618      	mov	r0, r3
 8001778:	f003 fff0 	bl	800575c <USB_DevDisconnect>

  return HAL_OK;
 800177c:	2300      	movs	r3, #0
}
 800177e:	4618      	mov	r0, r3
 8001780:	3714      	adds	r7, #20
 8001782:	46bd      	mov	sp, r7
 8001784:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001786 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001786:	b580      	push	{r7, lr}
 8001788:	b082      	sub	sp, #8
 800178a:	af00      	add	r7, sp, #0
 800178c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001794:	2b01      	cmp	r3, #1
 8001796:	d101      	bne.n	800179c <HAL_PCD_Start+0x16>
 8001798:	2302      	movs	r3, #2
 800179a:	e016      	b.n	80017ca <HAL_PCD_Start+0x44>
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	2201      	movs	r2, #1
 80017a0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	4618      	mov	r0, r3
 80017aa:	f001 ffeb 	bl	8003784 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 80017ae:	2101      	movs	r1, #1
 80017b0:	6878      	ldr	r0, [r7, #4]
 80017b2:	f005 fe44 	bl	800743e <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	4618      	mov	r0, r3
 80017bc:	f003 ffc4 	bl	8005748 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	2200      	movs	r2, #0
 80017c4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80017c8:	2300      	movs	r3, #0
}
 80017ca:	4618      	mov	r0, r3
 80017cc:	3708      	adds	r7, #8
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}

080017d2 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80017d2:	b580      	push	{r7, lr}
 80017d4:	b088      	sub	sp, #32
 80017d6:	af00      	add	r7, sp, #0
 80017d8:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	4618      	mov	r0, r3
 80017e0:	f003 ffc6 	bl	8005770 <USB_ReadInterrupts>
 80017e4:	4603      	mov	r3, r0
 80017e6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80017ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80017ee:	d102      	bne.n	80017f6 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80017f0:	6878      	ldr	r0, [r7, #4]
 80017f2:	f000 fb4a 	bl	8001e8a <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	4618      	mov	r0, r3
 80017fc:	f003 ffb8 	bl	8005770 <USB_ReadInterrupts>
 8001800:	4603      	mov	r3, r0
 8001802:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001806:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800180a:	d112      	bne.n	8001832 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001814:	b29a      	uxth	r2, r3
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800181e:	b292      	uxth	r2, r2
 8001820:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001824:	6878      	ldr	r0, [r7, #4]
 8001826:	f005 fc36 	bl	8007096 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800182a:	2100      	movs	r1, #0
 800182c:	6878      	ldr	r0, [r7, #4]
 800182e:	f000 f925 	bl	8001a7c <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	4618      	mov	r0, r3
 8001838:	f003 ff9a 	bl	8005770 <USB_ReadInterrupts>
 800183c:	4603      	mov	r3, r0
 800183e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001842:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001846:	d10b      	bne.n	8001860 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001850:	b29a      	uxth	r2, r3
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800185a:	b292      	uxth	r2, r2
 800185c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	4618      	mov	r0, r3
 8001866:	f003 ff83 	bl	8005770 <USB_ReadInterrupts>
 800186a:	4603      	mov	r3, r0
 800186c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001870:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001874:	d10b      	bne.n	800188e <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800187e:	b29a      	uxth	r2, r3
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001888:	b292      	uxth	r2, r2
 800188a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	4618      	mov	r0, r3
 8001894:	f003 ff6c 	bl	8005770 <USB_ReadInterrupts>
 8001898:	4603      	mov	r3, r0
 800189a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800189e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80018a2:	d126      	bne.n	80018f2 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80018ac:	b29a      	uxth	r2, r3
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f022 0204 	bic.w	r2, r2, #4
 80018b6:	b292      	uxth	r2, r2
 80018b8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80018c4:	b29a      	uxth	r2, r3
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f022 0208 	bic.w	r2, r2, #8
 80018ce:	b292      	uxth	r2, r2
 80018d0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80018d4:	6878      	ldr	r0, [r7, #4]
 80018d6:	f005 fc17 	bl	8007108 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80018e2:	b29a      	uxth	r2, r3
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80018ec:	b292      	uxth	r2, r2
 80018ee:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	4618      	mov	r0, r3
 80018f8:	f003 ff3a 	bl	8005770 <USB_ReadInterrupts>
 80018fc:	4603      	mov	r3, r0
 80018fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001902:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001906:	f040 8084 	bne.w	8001a12 <HAL_PCD_IRQHandler+0x240>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 800190a:	2300      	movs	r3, #0
 800190c:	77fb      	strb	r3, [r7, #31]
 800190e:	e011      	b.n	8001934 <HAL_PCD_IRQHandler+0x162>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	461a      	mov	r2, r3
 8001916:	7ffb      	ldrb	r3, [r7, #31]
 8001918:	009b      	lsls	r3, r3, #2
 800191a:	441a      	add	r2, r3
 800191c:	7ffb      	ldrb	r3, [r7, #31]
 800191e:	8812      	ldrh	r2, [r2, #0]
 8001920:	b292      	uxth	r2, r2
 8001922:	005b      	lsls	r3, r3, #1
 8001924:	f107 0120 	add.w	r1, r7, #32
 8001928:	440b      	add	r3, r1
 800192a:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 800192e:	7ffb      	ldrb	r3, [r7, #31]
 8001930:	3301      	adds	r3, #1
 8001932:	77fb      	strb	r3, [r7, #31]
 8001934:	7ffb      	ldrb	r3, [r7, #31]
 8001936:	2b07      	cmp	r3, #7
 8001938:	d9ea      	bls.n	8001910 <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001942:	b29a      	uxth	r2, r3
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f042 0201 	orr.w	r2, r2, #1
 800194c:	b292      	uxth	r2, r2
 800194e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800195a:	b29a      	uxth	r2, r3
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f022 0201 	bic.w	r2, r2, #1
 8001964:	b292      	uxth	r2, r2
 8001966:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 800196a:	bf00      	nop
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001974:	b29b      	uxth	r3, r3
 8001976:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800197a:	2b00      	cmp	r3, #0
 800197c:	d0f6      	beq.n	800196c <HAL_PCD_IRQHandler+0x19a>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001986:	b29a      	uxth	r2, r3
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001990:	b292      	uxth	r2, r2
 8001992:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8001996:	2300      	movs	r3, #0
 8001998:	77fb      	strb	r3, [r7, #31]
 800199a:	e010      	b.n	80019be <HAL_PCD_IRQHandler+0x1ec>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 800199c:	7ffb      	ldrb	r3, [r7, #31]
 800199e:	687a      	ldr	r2, [r7, #4]
 80019a0:	6812      	ldr	r2, [r2, #0]
 80019a2:	4611      	mov	r1, r2
 80019a4:	7ffa      	ldrb	r2, [r7, #31]
 80019a6:	0092      	lsls	r2, r2, #2
 80019a8:	440a      	add	r2, r1
 80019aa:	005b      	lsls	r3, r3, #1
 80019ac:	f107 0120 	add.w	r1, r7, #32
 80019b0:	440b      	add	r3, r1
 80019b2:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 80019b6:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 80019b8:	7ffb      	ldrb	r3, [r7, #31]
 80019ba:	3301      	adds	r3, #1
 80019bc:	77fb      	strb	r3, [r7, #31]
 80019be:	7ffb      	ldrb	r3, [r7, #31]
 80019c0:	2b07      	cmp	r3, #7
 80019c2:	d9eb      	bls.n	800199c <HAL_PCD_IRQHandler+0x1ca>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80019cc:	b29a      	uxth	r2, r3
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f042 0208 	orr.w	r2, r2, #8
 80019d6:	b292      	uxth	r2, r2
 80019d8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80019e4:	b29a      	uxth	r2, r3
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80019ee:	b292      	uxth	r2, r2
 80019f0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80019fc:	b29a      	uxth	r2, r3
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f042 0204 	orr.w	r2, r2, #4
 8001a06:	b292      	uxth	r2, r2
 8001a08:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001a0c:	6878      	ldr	r0, [r7, #4]
 8001a0e:	f005 fb61 	bl	80070d4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	4618      	mov	r0, r3
 8001a18:	f003 feaa 	bl	8005770 <USB_ReadInterrupts>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001a22:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001a26:	d10e      	bne.n	8001a46 <HAL_PCD_IRQHandler+0x274>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001a30:	b29a      	uxth	r2, r3
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001a3a:	b292      	uxth	r2, r2
 8001a3c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001a40:	6878      	ldr	r0, [r7, #4]
 8001a42:	f005 fb1a 	bl	800707a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	f003 fe90 	bl	8005770 <USB_ReadInterrupts>
 8001a50:	4603      	mov	r3, r0
 8001a52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a56:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001a5a:	d10b      	bne.n	8001a74 <HAL_PCD_IRQHandler+0x2a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001a64:	b29a      	uxth	r2, r3
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001a6e:	b292      	uxth	r2, r2
 8001a70:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8001a74:	bf00      	nop
 8001a76:	3720      	adds	r7, #32
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bd80      	pop	{r7, pc}

08001a7c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b082      	sub	sp, #8
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
 8001a84:	460b      	mov	r3, r1
 8001a86:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001a8e:	2b01      	cmp	r3, #1
 8001a90:	d101      	bne.n	8001a96 <HAL_PCD_SetAddress+0x1a>
 8001a92:	2302      	movs	r3, #2
 8001a94:	e013      	b.n	8001abe <HAL_PCD_SetAddress+0x42>
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	2201      	movs	r2, #1
 8001a9a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	78fa      	ldrb	r2, [r7, #3]
 8001aa2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	78fa      	ldrb	r2, [r7, #3]
 8001aac:	4611      	mov	r1, r2
 8001aae:	4618      	mov	r0, r3
 8001ab0:	f003 fe37 	bl	8005722 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001abc:	2300      	movs	r3, #0
}
 8001abe:	4618      	mov	r0, r3
 8001ac0:	3708      	adds	r7, #8
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd80      	pop	{r7, pc}

08001ac6 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001ac6:	b580      	push	{r7, lr}
 8001ac8:	b084      	sub	sp, #16
 8001aca:	af00      	add	r7, sp, #0
 8001acc:	6078      	str	r0, [r7, #4]
 8001ace:	4608      	mov	r0, r1
 8001ad0:	4611      	mov	r1, r2
 8001ad2:	461a      	mov	r2, r3
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	70fb      	strb	r3, [r7, #3]
 8001ad8:	460b      	mov	r3, r1
 8001ada:	803b      	strh	r3, [r7, #0]
 8001adc:	4613      	mov	r3, r2
 8001ade:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001ae4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	da0e      	bge.n	8001b0a <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001aec:	78fb      	ldrb	r3, [r7, #3]
 8001aee:	f003 0307 	and.w	r3, r3, #7
 8001af2:	1c5a      	adds	r2, r3, #1
 8001af4:	4613      	mov	r3, r2
 8001af6:	009b      	lsls	r3, r3, #2
 8001af8:	4413      	add	r3, r2
 8001afa:	00db      	lsls	r3, r3, #3
 8001afc:	687a      	ldr	r2, [r7, #4]
 8001afe:	4413      	add	r3, r2
 8001b00:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	2201      	movs	r2, #1
 8001b06:	705a      	strb	r2, [r3, #1]
 8001b08:	e00e      	b.n	8001b28 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001b0a:	78fb      	ldrb	r3, [r7, #3]
 8001b0c:	f003 0207 	and.w	r2, r3, #7
 8001b10:	4613      	mov	r3, r2
 8001b12:	009b      	lsls	r3, r3, #2
 8001b14:	4413      	add	r3, r2
 8001b16:	00db      	lsls	r3, r3, #3
 8001b18:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001b1c:	687a      	ldr	r2, [r7, #4]
 8001b1e:	4413      	add	r3, r2
 8001b20:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	2200      	movs	r2, #0
 8001b26:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001b28:	78fb      	ldrb	r3, [r7, #3]
 8001b2a:	f003 0307 	and.w	r3, r3, #7
 8001b2e:	b2da      	uxtb	r2, r3
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001b34:	883a      	ldrh	r2, [r7, #0]
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	78ba      	ldrb	r2, [r7, #2]
 8001b3e:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	785b      	ldrb	r3, [r3, #1]
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d004      	beq.n	8001b52 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	781b      	ldrb	r3, [r3, #0]
 8001b4c:	b29a      	uxth	r2, r3
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001b52:	78bb      	ldrb	r3, [r7, #2]
 8001b54:	2b02      	cmp	r3, #2
 8001b56:	d102      	bne.n	8001b5e <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001b64:	2b01      	cmp	r3, #1
 8001b66:	d101      	bne.n	8001b6c <HAL_PCD_EP_Open+0xa6>
 8001b68:	2302      	movs	r3, #2
 8001b6a:	e00e      	b.n	8001b8a <HAL_PCD_EP_Open+0xc4>
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	2201      	movs	r2, #1
 8001b70:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	68f9      	ldr	r1, [r7, #12]
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	f001 fe5e 	bl	800383c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	2200      	movs	r2, #0
 8001b84:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8001b88:	7afb      	ldrb	r3, [r7, #11]
}
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	3710      	adds	r7, #16
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}

08001b92 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001b92:	b580      	push	{r7, lr}
 8001b94:	b084      	sub	sp, #16
 8001b96:	af00      	add	r7, sp, #0
 8001b98:	6078      	str	r0, [r7, #4]
 8001b9a:	460b      	mov	r3, r1
 8001b9c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001b9e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	da0e      	bge.n	8001bc4 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ba6:	78fb      	ldrb	r3, [r7, #3]
 8001ba8:	f003 0307 	and.w	r3, r3, #7
 8001bac:	1c5a      	adds	r2, r3, #1
 8001bae:	4613      	mov	r3, r2
 8001bb0:	009b      	lsls	r3, r3, #2
 8001bb2:	4413      	add	r3, r2
 8001bb4:	00db      	lsls	r3, r3, #3
 8001bb6:	687a      	ldr	r2, [r7, #4]
 8001bb8:	4413      	add	r3, r2
 8001bba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	2201      	movs	r2, #1
 8001bc0:	705a      	strb	r2, [r3, #1]
 8001bc2:	e00e      	b.n	8001be2 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001bc4:	78fb      	ldrb	r3, [r7, #3]
 8001bc6:	f003 0207 	and.w	r2, r3, #7
 8001bca:	4613      	mov	r3, r2
 8001bcc:	009b      	lsls	r3, r3, #2
 8001bce:	4413      	add	r3, r2
 8001bd0:	00db      	lsls	r3, r3, #3
 8001bd2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001bd6:	687a      	ldr	r2, [r7, #4]
 8001bd8:	4413      	add	r3, r2
 8001bda:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	2200      	movs	r2, #0
 8001be0:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001be2:	78fb      	ldrb	r3, [r7, #3]
 8001be4:	f003 0307 	and.w	r3, r3, #7
 8001be8:	b2da      	uxtb	r2, r3
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001bf4:	2b01      	cmp	r3, #1
 8001bf6:	d101      	bne.n	8001bfc <HAL_PCD_EP_Close+0x6a>
 8001bf8:	2302      	movs	r3, #2
 8001bfa:	e00e      	b.n	8001c1a <HAL_PCD_EP_Close+0x88>
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2201      	movs	r2, #1
 8001c00:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	68f9      	ldr	r1, [r7, #12]
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	f002 f980 	bl	8003f10 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2200      	movs	r2, #0
 8001c14:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8001c18:	2300      	movs	r3, #0
}
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	3710      	adds	r7, #16
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}

08001c22 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001c22:	b580      	push	{r7, lr}
 8001c24:	b086      	sub	sp, #24
 8001c26:	af00      	add	r7, sp, #0
 8001c28:	60f8      	str	r0, [r7, #12]
 8001c2a:	607a      	str	r2, [r7, #4]
 8001c2c:	603b      	str	r3, [r7, #0]
 8001c2e:	460b      	mov	r3, r1
 8001c30:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001c32:	7afb      	ldrb	r3, [r7, #11]
 8001c34:	f003 0207 	and.w	r2, r3, #7
 8001c38:	4613      	mov	r3, r2
 8001c3a:	009b      	lsls	r3, r3, #2
 8001c3c:	4413      	add	r3, r2
 8001c3e:	00db      	lsls	r3, r3, #3
 8001c40:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001c44:	68fa      	ldr	r2, [r7, #12]
 8001c46:	4413      	add	r3, r2
 8001c48:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001c4a:	697b      	ldr	r3, [r7, #20]
 8001c4c:	687a      	ldr	r2, [r7, #4]
 8001c4e:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001c50:	697b      	ldr	r3, [r7, #20]
 8001c52:	683a      	ldr	r2, [r7, #0]
 8001c54:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001c56:	697b      	ldr	r3, [r7, #20]
 8001c58:	2200      	movs	r2, #0
 8001c5a:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001c5c:	697b      	ldr	r3, [r7, #20]
 8001c5e:	2200      	movs	r2, #0
 8001c60:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001c62:	7afb      	ldrb	r3, [r7, #11]
 8001c64:	f003 0307 	and.w	r3, r3, #7
 8001c68:	b2da      	uxtb	r2, r3
 8001c6a:	697b      	ldr	r3, [r7, #20]
 8001c6c:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001c6e:	7afb      	ldrb	r3, [r7, #11]
 8001c70:	f003 0307 	and.w	r3, r3, #7
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d106      	bne.n	8001c86 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	6979      	ldr	r1, [r7, #20]
 8001c7e:	4618      	mov	r0, r3
 8001c80:	f002 fb32 	bl	80042e8 <USB_EPStartXfer>
 8001c84:	e005      	b.n	8001c92 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	6979      	ldr	r1, [r7, #20]
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	f002 fb2b 	bl	80042e8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001c92:	2300      	movs	r3, #0
}
 8001c94:	4618      	mov	r0, r3
 8001c96:	3718      	adds	r7, #24
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	bd80      	pop	{r7, pc}

08001c9c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b086      	sub	sp, #24
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	60f8      	str	r0, [r7, #12]
 8001ca4:	607a      	str	r2, [r7, #4]
 8001ca6:	603b      	str	r3, [r7, #0]
 8001ca8:	460b      	mov	r3, r1
 8001caa:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001cac:	7afb      	ldrb	r3, [r7, #11]
 8001cae:	f003 0307 	and.w	r3, r3, #7
 8001cb2:	1c5a      	adds	r2, r3, #1
 8001cb4:	4613      	mov	r3, r2
 8001cb6:	009b      	lsls	r3, r3, #2
 8001cb8:	4413      	add	r3, r2
 8001cba:	00db      	lsls	r3, r3, #3
 8001cbc:	68fa      	ldr	r2, [r7, #12]
 8001cbe:	4413      	add	r3, r2
 8001cc0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001cc2:	697b      	ldr	r3, [r7, #20]
 8001cc4:	687a      	ldr	r2, [r7, #4]
 8001cc6:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001cc8:	697b      	ldr	r3, [r7, #20]
 8001cca:	683a      	ldr	r2, [r7, #0]
 8001ccc:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8001cce:	697b      	ldr	r3, [r7, #20]
 8001cd0:	2201      	movs	r2, #1
 8001cd2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8001cd6:	697b      	ldr	r3, [r7, #20]
 8001cd8:	683a      	ldr	r2, [r7, #0]
 8001cda:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8001cdc:	697b      	ldr	r3, [r7, #20]
 8001cde:	2200      	movs	r2, #0
 8001ce0:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001ce2:	697b      	ldr	r3, [r7, #20]
 8001ce4:	2201      	movs	r2, #1
 8001ce6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001ce8:	7afb      	ldrb	r3, [r7, #11]
 8001cea:	f003 0307 	and.w	r3, r3, #7
 8001cee:	b2da      	uxtb	r2, r3
 8001cf0:	697b      	ldr	r3, [r7, #20]
 8001cf2:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001cf4:	7afb      	ldrb	r3, [r7, #11]
 8001cf6:	f003 0307 	and.w	r3, r3, #7
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d106      	bne.n	8001d0c <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	6979      	ldr	r1, [r7, #20]
 8001d04:	4618      	mov	r0, r3
 8001d06:	f002 faef 	bl	80042e8 <USB_EPStartXfer>
 8001d0a:	e005      	b.n	8001d18 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	6979      	ldr	r1, [r7, #20]
 8001d12:	4618      	mov	r0, r3
 8001d14:	f002 fae8 	bl	80042e8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001d18:	2300      	movs	r3, #0
}
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	3718      	adds	r7, #24
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd80      	pop	{r7, pc}

08001d22 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001d22:	b580      	push	{r7, lr}
 8001d24:	b084      	sub	sp, #16
 8001d26:	af00      	add	r7, sp, #0
 8001d28:	6078      	str	r0, [r7, #4]
 8001d2a:	460b      	mov	r3, r1
 8001d2c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001d2e:	78fb      	ldrb	r3, [r7, #3]
 8001d30:	f003 0207 	and.w	r2, r3, #7
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	685b      	ldr	r3, [r3, #4]
 8001d38:	429a      	cmp	r2, r3
 8001d3a:	d901      	bls.n	8001d40 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001d3c:	2301      	movs	r3, #1
 8001d3e:	e04c      	b.n	8001dda <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001d40:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	da0e      	bge.n	8001d66 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d48:	78fb      	ldrb	r3, [r7, #3]
 8001d4a:	f003 0307 	and.w	r3, r3, #7
 8001d4e:	1c5a      	adds	r2, r3, #1
 8001d50:	4613      	mov	r3, r2
 8001d52:	009b      	lsls	r3, r3, #2
 8001d54:	4413      	add	r3, r2
 8001d56:	00db      	lsls	r3, r3, #3
 8001d58:	687a      	ldr	r2, [r7, #4]
 8001d5a:	4413      	add	r3, r2
 8001d5c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	2201      	movs	r2, #1
 8001d62:	705a      	strb	r2, [r3, #1]
 8001d64:	e00c      	b.n	8001d80 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001d66:	78fa      	ldrb	r2, [r7, #3]
 8001d68:	4613      	mov	r3, r2
 8001d6a:	009b      	lsls	r3, r3, #2
 8001d6c:	4413      	add	r3, r2
 8001d6e:	00db      	lsls	r3, r3, #3
 8001d70:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001d74:	687a      	ldr	r2, [r7, #4]
 8001d76:	4413      	add	r3, r2
 8001d78:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	2201      	movs	r2, #1
 8001d84:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001d86:	78fb      	ldrb	r3, [r7, #3]
 8001d88:	f003 0307 	and.w	r3, r3, #7
 8001d8c:	b2da      	uxtb	r2, r3
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001d98:	2b01      	cmp	r3, #1
 8001d9a:	d101      	bne.n	8001da0 <HAL_PCD_EP_SetStall+0x7e>
 8001d9c:	2302      	movs	r3, #2
 8001d9e:	e01c      	b.n	8001dda <HAL_PCD_EP_SetStall+0xb8>
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2201      	movs	r2, #1
 8001da4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	68f9      	ldr	r1, [r7, #12]
 8001dae:	4618      	mov	r0, r3
 8001db0:	f003 fbba 	bl	8005528 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001db4:	78fb      	ldrb	r3, [r7, #3]
 8001db6:	f003 0307 	and.w	r3, r3, #7
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d108      	bne.n	8001dd0 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681a      	ldr	r2, [r3, #0]
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8001dc8:	4619      	mov	r1, r3
 8001dca:	4610      	mov	r0, r2
 8001dcc:	f003 fcdf 	bl	800578e <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001dd8:	2300      	movs	r3, #0
}
 8001dda:	4618      	mov	r0, r3
 8001ddc:	3710      	adds	r7, #16
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}

08001de2 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001de2:	b580      	push	{r7, lr}
 8001de4:	b084      	sub	sp, #16
 8001de6:	af00      	add	r7, sp, #0
 8001de8:	6078      	str	r0, [r7, #4]
 8001dea:	460b      	mov	r3, r1
 8001dec:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001dee:	78fb      	ldrb	r3, [r7, #3]
 8001df0:	f003 020f 	and.w	r2, r3, #15
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	429a      	cmp	r2, r3
 8001dfa:	d901      	bls.n	8001e00 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001dfc:	2301      	movs	r3, #1
 8001dfe:	e040      	b.n	8001e82 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001e00:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	da0e      	bge.n	8001e26 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e08:	78fb      	ldrb	r3, [r7, #3]
 8001e0a:	f003 0307 	and.w	r3, r3, #7
 8001e0e:	1c5a      	adds	r2, r3, #1
 8001e10:	4613      	mov	r3, r2
 8001e12:	009b      	lsls	r3, r3, #2
 8001e14:	4413      	add	r3, r2
 8001e16:	00db      	lsls	r3, r3, #3
 8001e18:	687a      	ldr	r2, [r7, #4]
 8001e1a:	4413      	add	r3, r2
 8001e1c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	2201      	movs	r2, #1
 8001e22:	705a      	strb	r2, [r3, #1]
 8001e24:	e00e      	b.n	8001e44 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001e26:	78fb      	ldrb	r3, [r7, #3]
 8001e28:	f003 0207 	and.w	r2, r3, #7
 8001e2c:	4613      	mov	r3, r2
 8001e2e:	009b      	lsls	r3, r3, #2
 8001e30:	4413      	add	r3, r2
 8001e32:	00db      	lsls	r3, r3, #3
 8001e34:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001e38:	687a      	ldr	r2, [r7, #4]
 8001e3a:	4413      	add	r3, r2
 8001e3c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	2200      	movs	r2, #0
 8001e42:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	2200      	movs	r2, #0
 8001e48:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001e4a:	78fb      	ldrb	r3, [r7, #3]
 8001e4c:	f003 0307 	and.w	r3, r3, #7
 8001e50:	b2da      	uxtb	r2, r3
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001e5c:	2b01      	cmp	r3, #1
 8001e5e:	d101      	bne.n	8001e64 <HAL_PCD_EP_ClrStall+0x82>
 8001e60:	2302      	movs	r3, #2
 8001e62:	e00e      	b.n	8001e82 <HAL_PCD_EP_ClrStall+0xa0>
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	2201      	movs	r2, #1
 8001e68:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	68f9      	ldr	r1, [r7, #12]
 8001e72:	4618      	mov	r0, r3
 8001e74:	f003 fba8 	bl	80055c8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001e80:	2300      	movs	r3, #0
}
 8001e82:	4618      	mov	r0, r3
 8001e84:	3710      	adds	r7, #16
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd80      	pop	{r7, pc}

08001e8a <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001e8a:	b580      	push	{r7, lr}
 8001e8c:	b08e      	sub	sp, #56	; 0x38
 8001e8e:	af00      	add	r7, sp, #0
 8001e90:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001e92:	e2df      	b.n	8002454 <PCD_EP_ISR_Handler+0x5ca>
  {
    wIstr = hpcd->Instance->ISTR;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001e9c:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001e9e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001ea0:	b2db      	uxtb	r3, r3
 8001ea2:	f003 030f 	and.w	r3, r3, #15
 8001ea6:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8001eaa:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	f040 8158 	bne.w	8002164 <PCD_EP_ISR_Handler+0x2da>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001eb4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001eb6:	f003 0310 	and.w	r3, r3, #16
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d152      	bne.n	8001f64 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	881b      	ldrh	r3, [r3, #0]
 8001ec4:	b29b      	uxth	r3, r3
 8001ec6:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001eca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ece:	81fb      	strh	r3, [r7, #14]
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681a      	ldr	r2, [r3, #0]
 8001ed4:	89fb      	ldrh	r3, [r7, #14]
 8001ed6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001eda:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001ede:	b29b      	uxth	r3, r3
 8001ee0:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	3328      	adds	r3, #40	; 0x28
 8001ee6:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001ef0:	b29b      	uxth	r3, r3
 8001ef2:	461a      	mov	r2, r3
 8001ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ef6:	781b      	ldrb	r3, [r3, #0]
 8001ef8:	00db      	lsls	r3, r3, #3
 8001efa:	4413      	add	r3, r2
 8001efc:	3302      	adds	r3, #2
 8001efe:	005b      	lsls	r3, r3, #1
 8001f00:	687a      	ldr	r2, [r7, #4]
 8001f02:	6812      	ldr	r2, [r2, #0]
 8001f04:	4413      	add	r3, r2
 8001f06:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001f0a:	881b      	ldrh	r3, [r3, #0]
 8001f0c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f12:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f16:	695a      	ldr	r2, [r3, #20]
 8001f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f1a:	69db      	ldr	r3, [r3, #28]
 8001f1c:	441a      	add	r2, r3
 8001f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f20:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001f22:	2100      	movs	r1, #0
 8001f24:	6878      	ldr	r0, [r7, #4]
 8001f26:	f005 f88e 	bl	8007046 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001f30:	b2db      	uxtb	r3, r3
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	f000 828e 	beq.w	8002454 <PCD_EP_ISR_Handler+0x5ca>
 8001f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f3a:	699b      	ldr	r3, [r3, #24]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	f040 8289 	bne.w	8002454 <PCD_EP_ISR_Handler+0x5ca>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001f48:	b2db      	uxtb	r3, r3
 8001f4a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001f4e:	b2da      	uxtb	r2, r3
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	b292      	uxth	r2, r2
 8001f56:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001f62:	e277      	b.n	8002454 <PCD_EP_ISR_Handler+0x5ca>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001f6a:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	881b      	ldrh	r3, [r3, #0]
 8001f72:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001f74:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001f76:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d034      	beq.n	8001fe8 <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001f86:	b29b      	uxth	r3, r3
 8001f88:	461a      	mov	r2, r3
 8001f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f8c:	781b      	ldrb	r3, [r3, #0]
 8001f8e:	00db      	lsls	r3, r3, #3
 8001f90:	4413      	add	r3, r2
 8001f92:	3306      	adds	r3, #6
 8001f94:	005b      	lsls	r3, r3, #1
 8001f96:	687a      	ldr	r2, [r7, #4]
 8001f98:	6812      	ldr	r2, [r2, #0]
 8001f9a:	4413      	add	r3, r2
 8001f9c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001fa0:	881b      	ldrh	r3, [r3, #0]
 8001fa2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fa8:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6818      	ldr	r0, [r3, #0]
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8001fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fb6:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fba:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001fbc:	b29b      	uxth	r3, r3
 8001fbe:	f003 fc36 	bl	800582e <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	881b      	ldrh	r3, [r3, #0]
 8001fc8:	b29a      	uxth	r2, r3
 8001fca:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001fce:	4013      	ands	r3, r2
 8001fd0:	823b      	strh	r3, [r7, #16]
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	8a3a      	ldrh	r2, [r7, #16]
 8001fd8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001fdc:	b292      	uxth	r2, r2
 8001fde:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8001fe0:	6878      	ldr	r0, [r7, #4]
 8001fe2:	f005 f803 	bl	8006fec <HAL_PCD_SetupStageCallback>
 8001fe6:	e235      	b.n	8002454 <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001fe8:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	f280 8231 	bge.w	8002454 <PCD_EP_ISR_Handler+0x5ca>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	881b      	ldrh	r3, [r3, #0]
 8001ff8:	b29a      	uxth	r2, r3
 8001ffa:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001ffe:	4013      	ands	r3, r2
 8002000:	83bb      	strh	r3, [r7, #28]
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	8bba      	ldrh	r2, [r7, #28]
 8002008:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800200c:	b292      	uxth	r2, r2
 800200e:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002018:	b29b      	uxth	r3, r3
 800201a:	461a      	mov	r2, r3
 800201c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800201e:	781b      	ldrb	r3, [r3, #0]
 8002020:	00db      	lsls	r3, r3, #3
 8002022:	4413      	add	r3, r2
 8002024:	3306      	adds	r3, #6
 8002026:	005b      	lsls	r3, r3, #1
 8002028:	687a      	ldr	r2, [r7, #4]
 800202a:	6812      	ldr	r2, [r2, #0]
 800202c:	4413      	add	r3, r2
 800202e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002032:	881b      	ldrh	r3, [r3, #0]
 8002034:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800203a:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800203c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800203e:	69db      	ldr	r3, [r3, #28]
 8002040:	2b00      	cmp	r3, #0
 8002042:	d019      	beq.n	8002078 <PCD_EP_ISR_Handler+0x1ee>
 8002044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002046:	695b      	ldr	r3, [r3, #20]
 8002048:	2b00      	cmp	r3, #0
 800204a:	d015      	beq.n	8002078 <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	6818      	ldr	r0, [r3, #0]
 8002050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002052:	6959      	ldr	r1, [r3, #20]
 8002054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002056:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8002058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800205a:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800205c:	b29b      	uxth	r3, r3
 800205e:	f003 fbe6 	bl	800582e <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8002062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002064:	695a      	ldr	r2, [r3, #20]
 8002066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002068:	69db      	ldr	r3, [r3, #28]
 800206a:	441a      	add	r2, r3
 800206c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800206e:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002070:	2100      	movs	r1, #0
 8002072:	6878      	ldr	r0, [r7, #4]
 8002074:	f004 ffcc 	bl	8007010 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	61bb      	str	r3, [r7, #24]
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002086:	b29b      	uxth	r3, r3
 8002088:	461a      	mov	r2, r3
 800208a:	69bb      	ldr	r3, [r7, #24]
 800208c:	4413      	add	r3, r2
 800208e:	61bb      	str	r3, [r7, #24]
 8002090:	69bb      	ldr	r3, [r7, #24]
 8002092:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002096:	617b      	str	r3, [r7, #20]
 8002098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800209a:	691b      	ldr	r3, [r3, #16]
 800209c:	2b00      	cmp	r3, #0
 800209e:	d112      	bne.n	80020c6 <PCD_EP_ISR_Handler+0x23c>
 80020a0:	697b      	ldr	r3, [r7, #20]
 80020a2:	881b      	ldrh	r3, [r3, #0]
 80020a4:	b29b      	uxth	r3, r3
 80020a6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80020aa:	b29a      	uxth	r2, r3
 80020ac:	697b      	ldr	r3, [r7, #20]
 80020ae:	801a      	strh	r2, [r3, #0]
 80020b0:	697b      	ldr	r3, [r7, #20]
 80020b2:	881b      	ldrh	r3, [r3, #0]
 80020b4:	b29b      	uxth	r3, r3
 80020b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80020ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80020be:	b29a      	uxth	r2, r3
 80020c0:	697b      	ldr	r3, [r7, #20]
 80020c2:	801a      	strh	r2, [r3, #0]
 80020c4:	e02f      	b.n	8002126 <PCD_EP_ISR_Handler+0x29c>
 80020c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020c8:	691b      	ldr	r3, [r3, #16]
 80020ca:	2b3e      	cmp	r3, #62	; 0x3e
 80020cc:	d813      	bhi.n	80020f6 <PCD_EP_ISR_Handler+0x26c>
 80020ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020d0:	691b      	ldr	r3, [r3, #16]
 80020d2:	085b      	lsrs	r3, r3, #1
 80020d4:	633b      	str	r3, [r7, #48]	; 0x30
 80020d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020d8:	691b      	ldr	r3, [r3, #16]
 80020da:	f003 0301 	and.w	r3, r3, #1
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d002      	beq.n	80020e8 <PCD_EP_ISR_Handler+0x25e>
 80020e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020e4:	3301      	adds	r3, #1
 80020e6:	633b      	str	r3, [r7, #48]	; 0x30
 80020e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020ea:	b29b      	uxth	r3, r3
 80020ec:	029b      	lsls	r3, r3, #10
 80020ee:	b29a      	uxth	r2, r3
 80020f0:	697b      	ldr	r3, [r7, #20]
 80020f2:	801a      	strh	r2, [r3, #0]
 80020f4:	e017      	b.n	8002126 <PCD_EP_ISR_Handler+0x29c>
 80020f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020f8:	691b      	ldr	r3, [r3, #16]
 80020fa:	095b      	lsrs	r3, r3, #5
 80020fc:	633b      	str	r3, [r7, #48]	; 0x30
 80020fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002100:	691b      	ldr	r3, [r3, #16]
 8002102:	f003 031f 	and.w	r3, r3, #31
 8002106:	2b00      	cmp	r3, #0
 8002108:	d102      	bne.n	8002110 <PCD_EP_ISR_Handler+0x286>
 800210a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800210c:	3b01      	subs	r3, #1
 800210e:	633b      	str	r3, [r7, #48]	; 0x30
 8002110:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002112:	b29b      	uxth	r3, r3
 8002114:	029b      	lsls	r3, r3, #10
 8002116:	b29b      	uxth	r3, r3
 8002118:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800211c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002120:	b29a      	uxth	r2, r3
 8002122:	697b      	ldr	r3, [r7, #20]
 8002124:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	881b      	ldrh	r3, [r3, #0]
 800212c:	b29b      	uxth	r3, r3
 800212e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002132:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002136:	827b      	strh	r3, [r7, #18]
 8002138:	8a7b      	ldrh	r3, [r7, #18]
 800213a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800213e:	827b      	strh	r3, [r7, #18]
 8002140:	8a7b      	ldrh	r3, [r7, #18]
 8002142:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002146:	827b      	strh	r3, [r7, #18]
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681a      	ldr	r2, [r3, #0]
 800214c:	8a7b      	ldrh	r3, [r7, #18]
 800214e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002152:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002156:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800215a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800215e:	b29b      	uxth	r3, r3
 8002160:	8013      	strh	r3, [r2, #0]
 8002162:	e177      	b.n	8002454 <PCD_EP_ISR_Handler+0x5ca>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	461a      	mov	r2, r3
 800216a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800216e:	009b      	lsls	r3, r3, #2
 8002170:	4413      	add	r3, r2
 8002172:	881b      	ldrh	r3, [r3, #0]
 8002174:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002176:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800217a:	2b00      	cmp	r3, #0
 800217c:	f280 80ea 	bge.w	8002354 <PCD_EP_ISR_Handler+0x4ca>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	461a      	mov	r2, r3
 8002186:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800218a:	009b      	lsls	r3, r3, #2
 800218c:	4413      	add	r3, r2
 800218e:	881b      	ldrh	r3, [r3, #0]
 8002190:	b29a      	uxth	r2, r3
 8002192:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002196:	4013      	ands	r3, r2
 8002198:	853b      	strh	r3, [r7, #40]	; 0x28
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	461a      	mov	r2, r3
 80021a0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80021a4:	009b      	lsls	r3, r3, #2
 80021a6:	4413      	add	r3, r2
 80021a8:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80021aa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80021ae:	b292      	uxth	r2, r2
 80021b0:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80021b2:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80021b6:	4613      	mov	r3, r2
 80021b8:	009b      	lsls	r3, r3, #2
 80021ba:	4413      	add	r3, r2
 80021bc:	00db      	lsls	r3, r3, #3
 80021be:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80021c2:	687a      	ldr	r2, [r7, #4]
 80021c4:	4413      	add	r3, r2
 80021c6:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80021c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ca:	7b1b      	ldrb	r3, [r3, #12]
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d122      	bne.n	8002216 <PCD_EP_ISR_Handler+0x38c>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80021d8:	b29b      	uxth	r3, r3
 80021da:	461a      	mov	r2, r3
 80021dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021de:	781b      	ldrb	r3, [r3, #0]
 80021e0:	00db      	lsls	r3, r3, #3
 80021e2:	4413      	add	r3, r2
 80021e4:	3306      	adds	r3, #6
 80021e6:	005b      	lsls	r3, r3, #1
 80021e8:	687a      	ldr	r2, [r7, #4]
 80021ea:	6812      	ldr	r2, [r2, #0]
 80021ec:	4413      	add	r3, r2
 80021ee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80021f2:	881b      	ldrh	r3, [r3, #0]
 80021f4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80021f8:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 80021fa:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	f000 8087 	beq.w	8002310 <PCD_EP_ISR_Handler+0x486>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6818      	ldr	r0, [r3, #0]
 8002206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002208:	6959      	ldr	r1, [r3, #20]
 800220a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800220c:	88da      	ldrh	r2, [r3, #6]
 800220e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002210:	f003 fb0d 	bl	800582e <USB_ReadPMA>
 8002214:	e07c      	b.n	8002310 <PCD_EP_ISR_Handler+0x486>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8002216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002218:	78db      	ldrb	r3, [r3, #3]
 800221a:	2b02      	cmp	r3, #2
 800221c:	d108      	bne.n	8002230 <PCD_EP_ISR_Handler+0x3a6>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800221e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002220:	461a      	mov	r2, r3
 8002222:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002224:	6878      	ldr	r0, [r7, #4]
 8002226:	f000 f923 	bl	8002470 <HAL_PCD_EP_DB_Receive>
 800222a:	4603      	mov	r3, r0
 800222c:	86fb      	strh	r3, [r7, #54]	; 0x36
 800222e:	e06f      	b.n	8002310 <PCD_EP_ISR_Handler+0x486>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	461a      	mov	r2, r3
 8002236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002238:	781b      	ldrb	r3, [r3, #0]
 800223a:	009b      	lsls	r3, r3, #2
 800223c:	4413      	add	r3, r2
 800223e:	881b      	ldrh	r3, [r3, #0]
 8002240:	b29b      	uxth	r3, r3
 8002242:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002246:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800224a:	847b      	strh	r3, [r7, #34]	; 0x22
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	461a      	mov	r2, r3
 8002252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002254:	781b      	ldrb	r3, [r3, #0]
 8002256:	009b      	lsls	r3, r3, #2
 8002258:	441a      	add	r2, r3
 800225a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800225c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002260:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002264:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002268:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800226c:	b29b      	uxth	r3, r3
 800226e:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	461a      	mov	r2, r3
 8002276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002278:	781b      	ldrb	r3, [r3, #0]
 800227a:	009b      	lsls	r3, r3, #2
 800227c:	4413      	add	r3, r2
 800227e:	881b      	ldrh	r3, [r3, #0]
 8002280:	b29b      	uxth	r3, r3
 8002282:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002286:	2b00      	cmp	r3, #0
 8002288:	d021      	beq.n	80022ce <PCD_EP_ISR_Handler+0x444>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002292:	b29b      	uxth	r3, r3
 8002294:	461a      	mov	r2, r3
 8002296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002298:	781b      	ldrb	r3, [r3, #0]
 800229a:	00db      	lsls	r3, r3, #3
 800229c:	4413      	add	r3, r2
 800229e:	3302      	adds	r3, #2
 80022a0:	005b      	lsls	r3, r3, #1
 80022a2:	687a      	ldr	r2, [r7, #4]
 80022a4:	6812      	ldr	r2, [r2, #0]
 80022a6:	4413      	add	r3, r2
 80022a8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80022ac:	881b      	ldrh	r3, [r3, #0]
 80022ae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80022b2:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 80022b4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d02a      	beq.n	8002310 <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6818      	ldr	r0, [r3, #0]
 80022be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022c0:	6959      	ldr	r1, [r3, #20]
 80022c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022c4:	891a      	ldrh	r2, [r3, #8]
 80022c6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80022c8:	f003 fab1 	bl	800582e <USB_ReadPMA>
 80022cc:	e020      	b.n	8002310 <PCD_EP_ISR_Handler+0x486>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80022d6:	b29b      	uxth	r3, r3
 80022d8:	461a      	mov	r2, r3
 80022da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022dc:	781b      	ldrb	r3, [r3, #0]
 80022de:	00db      	lsls	r3, r3, #3
 80022e0:	4413      	add	r3, r2
 80022e2:	3306      	adds	r3, #6
 80022e4:	005b      	lsls	r3, r3, #1
 80022e6:	687a      	ldr	r2, [r7, #4]
 80022e8:	6812      	ldr	r2, [r2, #0]
 80022ea:	4413      	add	r3, r2
 80022ec:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80022f0:	881b      	ldrh	r3, [r3, #0]
 80022f2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80022f6:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 80022f8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d008      	beq.n	8002310 <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6818      	ldr	r0, [r3, #0]
 8002302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002304:	6959      	ldr	r1, [r3, #20]
 8002306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002308:	895a      	ldrh	r2, [r3, #10]
 800230a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800230c:	f003 fa8f 	bl	800582e <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8002310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002312:	69da      	ldr	r2, [r3, #28]
 8002314:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002316:	441a      	add	r2, r3
 8002318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800231a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800231c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800231e:	695a      	ldr	r2, [r3, #20]
 8002320:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002322:	441a      	add	r2, r3
 8002324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002326:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800232a:	699b      	ldr	r3, [r3, #24]
 800232c:	2b00      	cmp	r3, #0
 800232e:	d004      	beq.n	800233a <PCD_EP_ISR_Handler+0x4b0>
 8002330:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8002332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002334:	691b      	ldr	r3, [r3, #16]
 8002336:	429a      	cmp	r2, r3
 8002338:	d206      	bcs.n	8002348 <PCD_EP_ISR_Handler+0x4be>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800233a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800233c:	781b      	ldrb	r3, [r3, #0]
 800233e:	4619      	mov	r1, r3
 8002340:	6878      	ldr	r0, [r7, #4]
 8002342:	f004 fe65 	bl	8007010 <HAL_PCD_DataOutStageCallback>
 8002346:	e005      	b.n	8002354 <PCD_EP_ISR_Handler+0x4ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800234e:	4618      	mov	r0, r3
 8002350:	f001 ffca 	bl	80042e8 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002354:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002356:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800235a:	2b00      	cmp	r3, #0
 800235c:	d07a      	beq.n	8002454 <PCD_EP_ISR_Handler+0x5ca>
      {
        ep = &hpcd->IN_ep[epindex];
 800235e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002362:	1c5a      	adds	r2, r3, #1
 8002364:	4613      	mov	r3, r2
 8002366:	009b      	lsls	r3, r3, #2
 8002368:	4413      	add	r3, r2
 800236a:	00db      	lsls	r3, r3, #3
 800236c:	687a      	ldr	r2, [r7, #4]
 800236e:	4413      	add	r3, r2
 8002370:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	461a      	mov	r2, r3
 8002378:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800237c:	009b      	lsls	r3, r3, #2
 800237e:	4413      	add	r3, r2
 8002380:	881b      	ldrh	r3, [r3, #0]
 8002382:	b29b      	uxth	r3, r3
 8002384:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002388:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800238c:	843b      	strh	r3, [r7, #32]
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	461a      	mov	r2, r3
 8002394:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002398:	009b      	lsls	r3, r3, #2
 800239a:	441a      	add	r2, r3
 800239c:	8c3b      	ldrh	r3, [r7, #32]
 800239e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80023a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80023a6:	b29b      	uxth	r3, r3
 80023a8:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk transaction or Bulk Single Buffer Transaction */
        if ((ep->type != EP_TYPE_BULK) ||
 80023aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ac:	78db      	ldrb	r3, [r3, #3]
 80023ae:	2b02      	cmp	r3, #2
 80023b0:	d108      	bne.n	80023c4 <PCD_EP_ISR_Handler+0x53a>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 80023b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023b4:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type != EP_TYPE_BULK) ||
 80023b6:	2b02      	cmp	r3, #2
 80023b8:	d146      	bne.n	8002448 <PCD_EP_ISR_Handler+0x5be>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 80023ba:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80023bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d141      	bne.n	8002448 <PCD_EP_ISR_Handler+0x5be>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80023cc:	b29b      	uxth	r3, r3
 80023ce:	461a      	mov	r2, r3
 80023d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023d2:	781b      	ldrb	r3, [r3, #0]
 80023d4:	00db      	lsls	r3, r3, #3
 80023d6:	4413      	add	r3, r2
 80023d8:	3302      	adds	r3, #2
 80023da:	005b      	lsls	r3, r3, #1
 80023dc:	687a      	ldr	r2, [r7, #4]
 80023de:	6812      	ldr	r2, [r2, #0]
 80023e0:	4413      	add	r3, r2
 80023e2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80023e6:	881b      	ldrh	r3, [r3, #0]
 80023e8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80023ec:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 80023ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023f0:	699a      	ldr	r2, [r3, #24]
 80023f2:	8bfb      	ldrh	r3, [r7, #30]
 80023f4:	429a      	cmp	r2, r3
 80023f6:	d906      	bls.n	8002406 <PCD_EP_ISR_Handler+0x57c>
          {
            ep->xfer_len -= TxByteNbre;
 80023f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023fa:	699a      	ldr	r2, [r3, #24]
 80023fc:	8bfb      	ldrh	r3, [r7, #30]
 80023fe:	1ad2      	subs	r2, r2, r3
 8002400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002402:	619a      	str	r2, [r3, #24]
 8002404:	e002      	b.n	800240c <PCD_EP_ISR_Handler+0x582>
          }
          else
          {
            ep->xfer_len = 0U;
 8002406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002408:	2200      	movs	r2, #0
 800240a:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 800240c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800240e:	699b      	ldr	r3, [r3, #24]
 8002410:	2b00      	cmp	r3, #0
 8002412:	d106      	bne.n	8002422 <PCD_EP_ISR_Handler+0x598>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002416:	781b      	ldrb	r3, [r3, #0]
 8002418:	4619      	mov	r1, r3
 800241a:	6878      	ldr	r0, [r7, #4]
 800241c:	f004 fe13 	bl	8007046 <HAL_PCD_DataInStageCallback>
 8002420:	e018      	b.n	8002454 <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8002422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002424:	695a      	ldr	r2, [r3, #20]
 8002426:	8bfb      	ldrh	r3, [r7, #30]
 8002428:	441a      	add	r2, r3
 800242a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800242c:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 800242e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002430:	69da      	ldr	r2, [r3, #28]
 8002432:	8bfb      	ldrh	r3, [r7, #30]
 8002434:	441a      	add	r2, r3
 8002436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002438:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002440:	4618      	mov	r0, r3
 8002442:	f001 ff51 	bl	80042e8 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8002446:	e005      	b.n	8002454 <PCD_EP_ISR_Handler+0x5ca>
          }
        }
        /* bulk in double buffer enable in case of transferLen> Ep_Mps */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8002448:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800244a:	461a      	mov	r2, r3
 800244c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800244e:	6878      	ldr	r0, [r7, #4]
 8002450:	f000 f91b 	bl	800268a <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800245c:	b29b      	uxth	r3, r3
 800245e:	b21b      	sxth	r3, r3
 8002460:	2b00      	cmp	r3, #0
 8002462:	f6ff ad17 	blt.w	8001e94 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8002466:	2300      	movs	r3, #0
}
 8002468:	4618      	mov	r0, r3
 800246a:	3738      	adds	r7, #56	; 0x38
 800246c:	46bd      	mov	sp, r7
 800246e:	bd80      	pop	{r7, pc}

08002470 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b088      	sub	sp, #32
 8002474:	af00      	add	r7, sp, #0
 8002476:	60f8      	str	r0, [r7, #12]
 8002478:	60b9      	str	r1, [r7, #8]
 800247a:	4613      	mov	r3, r2
 800247c:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800247e:	88fb      	ldrh	r3, [r7, #6]
 8002480:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002484:	2b00      	cmp	r3, #0
 8002486:	d07e      	beq.n	8002586 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002490:	b29b      	uxth	r3, r3
 8002492:	461a      	mov	r2, r3
 8002494:	68bb      	ldr	r3, [r7, #8]
 8002496:	781b      	ldrb	r3, [r3, #0]
 8002498:	00db      	lsls	r3, r3, #3
 800249a:	4413      	add	r3, r2
 800249c:	3302      	adds	r3, #2
 800249e:	005b      	lsls	r3, r3, #1
 80024a0:	68fa      	ldr	r2, [r7, #12]
 80024a2:	6812      	ldr	r2, [r2, #0]
 80024a4:	4413      	add	r3, r2
 80024a6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80024aa:	881b      	ldrh	r3, [r3, #0]
 80024ac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80024b0:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80024b2:	68bb      	ldr	r3, [r7, #8]
 80024b4:	699a      	ldr	r2, [r3, #24]
 80024b6:	8b7b      	ldrh	r3, [r7, #26]
 80024b8:	429a      	cmp	r2, r3
 80024ba:	d306      	bcc.n	80024ca <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 80024bc:	68bb      	ldr	r3, [r7, #8]
 80024be:	699a      	ldr	r2, [r3, #24]
 80024c0:	8b7b      	ldrh	r3, [r7, #26]
 80024c2:	1ad2      	subs	r2, r2, r3
 80024c4:	68bb      	ldr	r3, [r7, #8]
 80024c6:	619a      	str	r2, [r3, #24]
 80024c8:	e002      	b.n	80024d0 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 80024ca:	68bb      	ldr	r3, [r7, #8]
 80024cc:	2200      	movs	r2, #0
 80024ce:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80024d0:	68bb      	ldr	r3, [r7, #8]
 80024d2:	699b      	ldr	r3, [r3, #24]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d123      	bne.n	8002520 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	461a      	mov	r2, r3
 80024de:	68bb      	ldr	r3, [r7, #8]
 80024e0:	781b      	ldrb	r3, [r3, #0]
 80024e2:	009b      	lsls	r3, r3, #2
 80024e4:	4413      	add	r3, r2
 80024e6:	881b      	ldrh	r3, [r3, #0]
 80024e8:	b29b      	uxth	r3, r3
 80024ea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80024ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024f2:	833b      	strh	r3, [r7, #24]
 80024f4:	8b3b      	ldrh	r3, [r7, #24]
 80024f6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80024fa:	833b      	strh	r3, [r7, #24]
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	461a      	mov	r2, r3
 8002502:	68bb      	ldr	r3, [r7, #8]
 8002504:	781b      	ldrb	r3, [r3, #0]
 8002506:	009b      	lsls	r3, r3, #2
 8002508:	441a      	add	r2, r3
 800250a:	8b3b      	ldrh	r3, [r7, #24]
 800250c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002510:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002514:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002518:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800251c:	b29b      	uxth	r3, r3
 800251e:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002520:	88fb      	ldrh	r3, [r7, #6]
 8002522:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002526:	2b00      	cmp	r3, #0
 8002528:	d01f      	beq.n	800256a <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	461a      	mov	r2, r3
 8002530:	68bb      	ldr	r3, [r7, #8]
 8002532:	781b      	ldrb	r3, [r3, #0]
 8002534:	009b      	lsls	r3, r3, #2
 8002536:	4413      	add	r3, r2
 8002538:	881b      	ldrh	r3, [r3, #0]
 800253a:	b29b      	uxth	r3, r3
 800253c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002540:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002544:	82fb      	strh	r3, [r7, #22]
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	461a      	mov	r2, r3
 800254c:	68bb      	ldr	r3, [r7, #8]
 800254e:	781b      	ldrb	r3, [r3, #0]
 8002550:	009b      	lsls	r3, r3, #2
 8002552:	441a      	add	r2, r3
 8002554:	8afb      	ldrh	r3, [r7, #22]
 8002556:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800255a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800255e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002562:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002566:	b29b      	uxth	r3, r3
 8002568:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800256a:	8b7b      	ldrh	r3, [r7, #26]
 800256c:	2b00      	cmp	r3, #0
 800256e:	f000 8087 	beq.w	8002680 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	6818      	ldr	r0, [r3, #0]
 8002576:	68bb      	ldr	r3, [r7, #8]
 8002578:	6959      	ldr	r1, [r3, #20]
 800257a:	68bb      	ldr	r3, [r7, #8]
 800257c:	891a      	ldrh	r2, [r3, #8]
 800257e:	8b7b      	ldrh	r3, [r7, #26]
 8002580:	f003 f955 	bl	800582e <USB_ReadPMA>
 8002584:	e07c      	b.n	8002680 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800258e:	b29b      	uxth	r3, r3
 8002590:	461a      	mov	r2, r3
 8002592:	68bb      	ldr	r3, [r7, #8]
 8002594:	781b      	ldrb	r3, [r3, #0]
 8002596:	00db      	lsls	r3, r3, #3
 8002598:	4413      	add	r3, r2
 800259a:	3306      	adds	r3, #6
 800259c:	005b      	lsls	r3, r3, #1
 800259e:	68fa      	ldr	r2, [r7, #12]
 80025a0:	6812      	ldr	r2, [r2, #0]
 80025a2:	4413      	add	r3, r2
 80025a4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80025a8:	881b      	ldrh	r3, [r3, #0]
 80025aa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80025ae:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80025b0:	68bb      	ldr	r3, [r7, #8]
 80025b2:	699a      	ldr	r2, [r3, #24]
 80025b4:	8b7b      	ldrh	r3, [r7, #26]
 80025b6:	429a      	cmp	r2, r3
 80025b8:	d306      	bcc.n	80025c8 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 80025ba:	68bb      	ldr	r3, [r7, #8]
 80025bc:	699a      	ldr	r2, [r3, #24]
 80025be:	8b7b      	ldrh	r3, [r7, #26]
 80025c0:	1ad2      	subs	r2, r2, r3
 80025c2:	68bb      	ldr	r3, [r7, #8]
 80025c4:	619a      	str	r2, [r3, #24]
 80025c6:	e002      	b.n	80025ce <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 80025c8:	68bb      	ldr	r3, [r7, #8]
 80025ca:	2200      	movs	r2, #0
 80025cc:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80025ce:	68bb      	ldr	r3, [r7, #8]
 80025d0:	699b      	ldr	r3, [r3, #24]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d123      	bne.n	800261e <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	461a      	mov	r2, r3
 80025dc:	68bb      	ldr	r3, [r7, #8]
 80025de:	781b      	ldrb	r3, [r3, #0]
 80025e0:	009b      	lsls	r3, r3, #2
 80025e2:	4413      	add	r3, r2
 80025e4:	881b      	ldrh	r3, [r3, #0]
 80025e6:	b29b      	uxth	r3, r3
 80025e8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80025ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025f0:	83fb      	strh	r3, [r7, #30]
 80025f2:	8bfb      	ldrh	r3, [r7, #30]
 80025f4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80025f8:	83fb      	strh	r3, [r7, #30]
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	461a      	mov	r2, r3
 8002600:	68bb      	ldr	r3, [r7, #8]
 8002602:	781b      	ldrb	r3, [r3, #0]
 8002604:	009b      	lsls	r3, r3, #2
 8002606:	441a      	add	r2, r3
 8002608:	8bfb      	ldrh	r3, [r7, #30]
 800260a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800260e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002612:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002616:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800261a:	b29b      	uxth	r3, r3
 800261c:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800261e:	88fb      	ldrh	r3, [r7, #6]
 8002620:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002624:	2b00      	cmp	r3, #0
 8002626:	d11f      	bne.n	8002668 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	461a      	mov	r2, r3
 800262e:	68bb      	ldr	r3, [r7, #8]
 8002630:	781b      	ldrb	r3, [r3, #0]
 8002632:	009b      	lsls	r3, r3, #2
 8002634:	4413      	add	r3, r2
 8002636:	881b      	ldrh	r3, [r3, #0]
 8002638:	b29b      	uxth	r3, r3
 800263a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800263e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002642:	83bb      	strh	r3, [r7, #28]
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	461a      	mov	r2, r3
 800264a:	68bb      	ldr	r3, [r7, #8]
 800264c:	781b      	ldrb	r3, [r3, #0]
 800264e:	009b      	lsls	r3, r3, #2
 8002650:	441a      	add	r2, r3
 8002652:	8bbb      	ldrh	r3, [r7, #28]
 8002654:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002658:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800265c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002660:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002664:	b29b      	uxth	r3, r3
 8002666:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002668:	8b7b      	ldrh	r3, [r7, #26]
 800266a:	2b00      	cmp	r3, #0
 800266c:	d008      	beq.n	8002680 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	6818      	ldr	r0, [r3, #0]
 8002672:	68bb      	ldr	r3, [r7, #8]
 8002674:	6959      	ldr	r1, [r3, #20]
 8002676:	68bb      	ldr	r3, [r7, #8]
 8002678:	895a      	ldrh	r2, [r3, #10]
 800267a:	8b7b      	ldrh	r3, [r7, #26]
 800267c:	f003 f8d7 	bl	800582e <USB_ReadPMA>
    }
  }

  return count;
 8002680:	8b7b      	ldrh	r3, [r7, #26]
}
 8002682:	4618      	mov	r0, r3
 8002684:	3720      	adds	r7, #32
 8002686:	46bd      	mov	sp, r7
 8002688:	bd80      	pop	{r7, pc}

0800268a <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800268a:	b580      	push	{r7, lr}
 800268c:	b094      	sub	sp, #80	; 0x50
 800268e:	af00      	add	r7, sp, #0
 8002690:	60f8      	str	r0, [r7, #12]
 8002692:	60b9      	str	r1, [r7, #8]
 8002694:	4613      	mov	r3, r2
 8002696:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002698:	88fb      	ldrh	r3, [r7, #6]
 800269a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800269e:	2b00      	cmp	r3, #0
 80026a0:	f000 8138 	beq.w	8002914 <HAL_PCD_EP_DB_Transmit+0x28a>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80026ac:	b29b      	uxth	r3, r3
 80026ae:	461a      	mov	r2, r3
 80026b0:	68bb      	ldr	r3, [r7, #8]
 80026b2:	781b      	ldrb	r3, [r3, #0]
 80026b4:	00db      	lsls	r3, r3, #3
 80026b6:	4413      	add	r3, r2
 80026b8:	3302      	adds	r3, #2
 80026ba:	005b      	lsls	r3, r3, #1
 80026bc:	68fa      	ldr	r2, [r7, #12]
 80026be:	6812      	ldr	r2, [r2, #0]
 80026c0:	4413      	add	r3, r2
 80026c2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80026c6:	881b      	ldrh	r3, [r3, #0]
 80026c8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80026cc:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

    if (ep->xfer_len > TxByteNbre)
 80026d0:	68bb      	ldr	r3, [r7, #8]
 80026d2:	699a      	ldr	r2, [r3, #24]
 80026d4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80026d8:	429a      	cmp	r2, r3
 80026da:	d907      	bls.n	80026ec <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 80026dc:	68bb      	ldr	r3, [r7, #8]
 80026de:	699a      	ldr	r2, [r3, #24]
 80026e0:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80026e4:	1ad2      	subs	r2, r2, r3
 80026e6:	68bb      	ldr	r3, [r7, #8]
 80026e8:	619a      	str	r2, [r3, #24]
 80026ea:	e002      	b.n	80026f2 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 80026ec:	68bb      	ldr	r3, [r7, #8]
 80026ee:	2200      	movs	r2, #0
 80026f0:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80026f2:	68bb      	ldr	r3, [r7, #8]
 80026f4:	699b      	ldr	r3, [r3, #24]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d12c      	bne.n	8002754 <HAL_PCD_EP_DB_Transmit+0xca>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80026fa:	68bb      	ldr	r3, [r7, #8]
 80026fc:	781b      	ldrb	r3, [r3, #0]
 80026fe:	4619      	mov	r1, r3
 8002700:	68f8      	ldr	r0, [r7, #12]
 8002702:	f004 fca0 	bl	8007046 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002706:	88fb      	ldrh	r3, [r7, #6]
 8002708:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800270c:	2b00      	cmp	r3, #0
 800270e:	f000 823a 	beq.w	8002b86 <HAL_PCD_EP_DB_Transmit+0x4fc>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	461a      	mov	r2, r3
 8002718:	68bb      	ldr	r3, [r7, #8]
 800271a:	781b      	ldrb	r3, [r3, #0]
 800271c:	009b      	lsls	r3, r3, #2
 800271e:	4413      	add	r3, r2
 8002720:	881b      	ldrh	r3, [r3, #0]
 8002722:	b29b      	uxth	r3, r3
 8002724:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002728:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800272c:	82fb      	strh	r3, [r7, #22]
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	461a      	mov	r2, r3
 8002734:	68bb      	ldr	r3, [r7, #8]
 8002736:	781b      	ldrb	r3, [r3, #0]
 8002738:	009b      	lsls	r3, r3, #2
 800273a:	441a      	add	r2, r3
 800273c:	8afb      	ldrh	r3, [r7, #22]
 800273e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002742:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002746:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800274a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800274e:	b29b      	uxth	r3, r3
 8002750:	8013      	strh	r3, [r2, #0]
 8002752:	e218      	b.n	8002b86 <HAL_PCD_EP_DB_Transmit+0x4fc>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002754:	88fb      	ldrh	r3, [r7, #6]
 8002756:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800275a:	2b00      	cmp	r3, #0
 800275c:	d01f      	beq.n	800279e <HAL_PCD_EP_DB_Transmit+0x114>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	461a      	mov	r2, r3
 8002764:	68bb      	ldr	r3, [r7, #8]
 8002766:	781b      	ldrb	r3, [r3, #0]
 8002768:	009b      	lsls	r3, r3, #2
 800276a:	4413      	add	r3, r2
 800276c:	881b      	ldrh	r3, [r3, #0]
 800276e:	b29b      	uxth	r3, r3
 8002770:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002774:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002778:	857b      	strh	r3, [r7, #42]	; 0x2a
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	461a      	mov	r2, r3
 8002780:	68bb      	ldr	r3, [r7, #8]
 8002782:	781b      	ldrb	r3, [r3, #0]
 8002784:	009b      	lsls	r3, r3, #2
 8002786:	441a      	add	r2, r3
 8002788:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800278a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800278e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002792:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002796:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800279a:	b29b      	uxth	r3, r3
 800279c:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800279e:	68bb      	ldr	r3, [r7, #8]
 80027a0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80027a4:	2b01      	cmp	r3, #1
 80027a6:	f040 81ee 	bne.w	8002b86 <HAL_PCD_EP_DB_Transmit+0x4fc>
      {
        ep->xfer_buff += TxByteNbre;
 80027aa:	68bb      	ldr	r3, [r7, #8]
 80027ac:	695a      	ldr	r2, [r3, #20]
 80027ae:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80027b2:	441a      	add	r2, r3
 80027b4:	68bb      	ldr	r3, [r7, #8]
 80027b6:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 80027b8:	68bb      	ldr	r3, [r7, #8]
 80027ba:	69da      	ldr	r2, [r3, #28]
 80027bc:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80027c0:	441a      	add	r2, r3
 80027c2:	68bb      	ldr	r3, [r7, #8]
 80027c4:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80027c6:	68bb      	ldr	r3, [r7, #8]
 80027c8:	6a1a      	ldr	r2, [r3, #32]
 80027ca:	68bb      	ldr	r3, [r7, #8]
 80027cc:	691b      	ldr	r3, [r3, #16]
 80027ce:	429a      	cmp	r2, r3
 80027d0:	d309      	bcc.n	80027e6 <HAL_PCD_EP_DB_Transmit+0x15c>
        {
          len = ep->maxpacket;
 80027d2:	68bb      	ldr	r3, [r7, #8]
 80027d4:	691b      	ldr	r3, [r3, #16]
 80027d6:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db -= len;
 80027d8:	68bb      	ldr	r3, [r7, #8]
 80027da:	6a1a      	ldr	r2, [r3, #32]
 80027dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80027de:	1ad2      	subs	r2, r2, r3
 80027e0:	68bb      	ldr	r3, [r7, #8]
 80027e2:	621a      	str	r2, [r3, #32]
 80027e4:	e015      	b.n	8002812 <HAL_PCD_EP_DB_Transmit+0x188>
        }
        else if (ep->xfer_len_db == 0U)
 80027e6:	68bb      	ldr	r3, [r7, #8]
 80027e8:	6a1b      	ldr	r3, [r3, #32]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d107      	bne.n	80027fe <HAL_PCD_EP_DB_Transmit+0x174>
        {
          len = TxByteNbre;
 80027ee:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80027f2:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_fill_db = 0U;
 80027f4:	68bb      	ldr	r3, [r7, #8]
 80027f6:	2200      	movs	r2, #0
 80027f8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80027fc:	e009      	b.n	8002812 <HAL_PCD_EP_DB_Transmit+0x188>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80027fe:	68bb      	ldr	r3, [r7, #8]
 8002800:	2200      	movs	r2, #0
 8002802:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8002806:	68bb      	ldr	r3, [r7, #8]
 8002808:	6a1b      	ldr	r3, [r3, #32]
 800280a:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db = 0U;
 800280c:	68bb      	ldr	r3, [r7, #8]
 800280e:	2200      	movs	r2, #0
 8002810:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002812:	68bb      	ldr	r3, [r7, #8]
 8002814:	785b      	ldrb	r3, [r3, #1]
 8002816:	2b00      	cmp	r3, #0
 8002818:	d155      	bne.n	80028c6 <HAL_PCD_EP_DB_Transmit+0x23c>
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	61fb      	str	r3, [r7, #28]
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002828:	b29b      	uxth	r3, r3
 800282a:	461a      	mov	r2, r3
 800282c:	69fb      	ldr	r3, [r7, #28]
 800282e:	4413      	add	r3, r2
 8002830:	61fb      	str	r3, [r7, #28]
 8002832:	68bb      	ldr	r3, [r7, #8]
 8002834:	781b      	ldrb	r3, [r3, #0]
 8002836:	011a      	lsls	r2, r3, #4
 8002838:	69fb      	ldr	r3, [r7, #28]
 800283a:	4413      	add	r3, r2
 800283c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002840:	61bb      	str	r3, [r7, #24]
 8002842:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002844:	2b00      	cmp	r3, #0
 8002846:	d112      	bne.n	800286e <HAL_PCD_EP_DB_Transmit+0x1e4>
 8002848:	69bb      	ldr	r3, [r7, #24]
 800284a:	881b      	ldrh	r3, [r3, #0]
 800284c:	b29b      	uxth	r3, r3
 800284e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002852:	b29a      	uxth	r2, r3
 8002854:	69bb      	ldr	r3, [r7, #24]
 8002856:	801a      	strh	r2, [r3, #0]
 8002858:	69bb      	ldr	r3, [r7, #24]
 800285a:	881b      	ldrh	r3, [r3, #0]
 800285c:	b29b      	uxth	r3, r3
 800285e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002862:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002866:	b29a      	uxth	r2, r3
 8002868:	69bb      	ldr	r3, [r7, #24]
 800286a:	801a      	strh	r2, [r3, #0]
 800286c:	e047      	b.n	80028fe <HAL_PCD_EP_DB_Transmit+0x274>
 800286e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002870:	2b3e      	cmp	r3, #62	; 0x3e
 8002872:	d811      	bhi.n	8002898 <HAL_PCD_EP_DB_Transmit+0x20e>
 8002874:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002876:	085b      	lsrs	r3, r3, #1
 8002878:	62fb      	str	r3, [r7, #44]	; 0x2c
 800287a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800287c:	f003 0301 	and.w	r3, r3, #1
 8002880:	2b00      	cmp	r3, #0
 8002882:	d002      	beq.n	800288a <HAL_PCD_EP_DB_Transmit+0x200>
 8002884:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002886:	3301      	adds	r3, #1
 8002888:	62fb      	str	r3, [r7, #44]	; 0x2c
 800288a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800288c:	b29b      	uxth	r3, r3
 800288e:	029b      	lsls	r3, r3, #10
 8002890:	b29a      	uxth	r2, r3
 8002892:	69bb      	ldr	r3, [r7, #24]
 8002894:	801a      	strh	r2, [r3, #0]
 8002896:	e032      	b.n	80028fe <HAL_PCD_EP_DB_Transmit+0x274>
 8002898:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800289a:	095b      	lsrs	r3, r3, #5
 800289c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800289e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80028a0:	f003 031f 	and.w	r3, r3, #31
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d102      	bne.n	80028ae <HAL_PCD_EP_DB_Transmit+0x224>
 80028a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028aa:	3b01      	subs	r3, #1
 80028ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80028ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028b0:	b29b      	uxth	r3, r3
 80028b2:	029b      	lsls	r3, r3, #10
 80028b4:	b29b      	uxth	r3, r3
 80028b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80028ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80028be:	b29a      	uxth	r2, r3
 80028c0:	69bb      	ldr	r3, [r7, #24]
 80028c2:	801a      	strh	r2, [r3, #0]
 80028c4:	e01b      	b.n	80028fe <HAL_PCD_EP_DB_Transmit+0x274>
 80028c6:	68bb      	ldr	r3, [r7, #8]
 80028c8:	785b      	ldrb	r3, [r3, #1]
 80028ca:	2b01      	cmp	r3, #1
 80028cc:	d117      	bne.n	80028fe <HAL_PCD_EP_DB_Transmit+0x274>
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	627b      	str	r3, [r7, #36]	; 0x24
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80028dc:	b29b      	uxth	r3, r3
 80028de:	461a      	mov	r2, r3
 80028e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028e2:	4413      	add	r3, r2
 80028e4:	627b      	str	r3, [r7, #36]	; 0x24
 80028e6:	68bb      	ldr	r3, [r7, #8]
 80028e8:	781b      	ldrb	r3, [r3, #0]
 80028ea:	011a      	lsls	r2, r3, #4
 80028ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ee:	4413      	add	r3, r2
 80028f0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80028f4:	623b      	str	r3, [r7, #32]
 80028f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80028f8:	b29a      	uxth	r2, r3
 80028fa:	6a3b      	ldr	r3, [r7, #32]
 80028fc:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	6818      	ldr	r0, [r3, #0]
 8002902:	68bb      	ldr	r3, [r7, #8]
 8002904:	6959      	ldr	r1, [r3, #20]
 8002906:	68bb      	ldr	r3, [r7, #8]
 8002908:	891a      	ldrh	r2, [r3, #8]
 800290a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800290c:	b29b      	uxth	r3, r3
 800290e:	f002 ff49 	bl	80057a4 <USB_WritePMA>
 8002912:	e138      	b.n	8002b86 <HAL_PCD_EP_DB_Transmit+0x4fc>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800291c:	b29b      	uxth	r3, r3
 800291e:	461a      	mov	r2, r3
 8002920:	68bb      	ldr	r3, [r7, #8]
 8002922:	781b      	ldrb	r3, [r3, #0]
 8002924:	00db      	lsls	r3, r3, #3
 8002926:	4413      	add	r3, r2
 8002928:	3306      	adds	r3, #6
 800292a:	005b      	lsls	r3, r3, #1
 800292c:	68fa      	ldr	r2, [r7, #12]
 800292e:	6812      	ldr	r2, [r2, #0]
 8002930:	4413      	add	r3, r2
 8002932:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002936:	881b      	ldrh	r3, [r3, #0]
 8002938:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800293c:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

    if (ep->xfer_len >= TxByteNbre)
 8002940:	68bb      	ldr	r3, [r7, #8]
 8002942:	699a      	ldr	r2, [r3, #24]
 8002944:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002948:	429a      	cmp	r2, r3
 800294a:	d307      	bcc.n	800295c <HAL_PCD_EP_DB_Transmit+0x2d2>
    {
      ep->xfer_len -= TxByteNbre;
 800294c:	68bb      	ldr	r3, [r7, #8]
 800294e:	699a      	ldr	r2, [r3, #24]
 8002950:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002954:	1ad2      	subs	r2, r2, r3
 8002956:	68bb      	ldr	r3, [r7, #8]
 8002958:	619a      	str	r2, [r3, #24]
 800295a:	e002      	b.n	8002962 <HAL_PCD_EP_DB_Transmit+0x2d8>
    }
    else
    {
      ep->xfer_len = 0U;
 800295c:	68bb      	ldr	r3, [r7, #8]
 800295e:	2200      	movs	r2, #0
 8002960:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002962:	68bb      	ldr	r3, [r7, #8]
 8002964:	699b      	ldr	r3, [r3, #24]
 8002966:	2b00      	cmp	r3, #0
 8002968:	d12e      	bne.n	80029c8 <HAL_PCD_EP_DB_Transmit+0x33e>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800296a:	68bb      	ldr	r3, [r7, #8]
 800296c:	781b      	ldrb	r3, [r3, #0]
 800296e:	4619      	mov	r1, r3
 8002970:	68f8      	ldr	r0, [r7, #12]
 8002972:	f004 fb68 	bl	8007046 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /*need to Free USB Buff*/
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002976:	88fb      	ldrh	r3, [r7, #6]
 8002978:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800297c:	2b00      	cmp	r3, #0
 800297e:	f040 8102 	bne.w	8002b86 <HAL_PCD_EP_DB_Transmit+0x4fc>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	461a      	mov	r2, r3
 8002988:	68bb      	ldr	r3, [r7, #8]
 800298a:	781b      	ldrb	r3, [r3, #0]
 800298c:	009b      	lsls	r3, r3, #2
 800298e:	4413      	add	r3, r2
 8002990:	881b      	ldrh	r3, [r3, #0]
 8002992:	b29b      	uxth	r3, r3
 8002994:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002998:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800299c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	461a      	mov	r2, r3
 80029a6:	68bb      	ldr	r3, [r7, #8]
 80029a8:	781b      	ldrb	r3, [r3, #0]
 80029aa:	009b      	lsls	r3, r3, #2
 80029ac:	441a      	add	r2, r3
 80029ae:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80029b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80029b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80029ba:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80029be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80029c2:	b29b      	uxth	r3, r3
 80029c4:	8013      	strh	r3, [r2, #0]
 80029c6:	e0de      	b.n	8002b86 <HAL_PCD_EP_DB_Transmit+0x4fc>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80029c8:	88fb      	ldrh	r3, [r7, #6]
 80029ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d11f      	bne.n	8002a12 <HAL_PCD_EP_DB_Transmit+0x388>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	461a      	mov	r2, r3
 80029d8:	68bb      	ldr	r3, [r7, #8]
 80029da:	781b      	ldrb	r3, [r3, #0]
 80029dc:	009b      	lsls	r3, r3, #2
 80029de:	4413      	add	r3, r2
 80029e0:	881b      	ldrh	r3, [r3, #0]
 80029e2:	b29b      	uxth	r3, r3
 80029e4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80029e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029ec:	867b      	strh	r3, [r7, #50]	; 0x32
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	461a      	mov	r2, r3
 80029f4:	68bb      	ldr	r3, [r7, #8]
 80029f6:	781b      	ldrb	r3, [r3, #0]
 80029f8:	009b      	lsls	r3, r3, #2
 80029fa:	441a      	add	r2, r3
 80029fc:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80029fe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002a02:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002a06:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002a0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a0e:	b29b      	uxth	r3, r3
 8002a10:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002a12:	68bb      	ldr	r3, [r7, #8]
 8002a14:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002a18:	2b01      	cmp	r3, #1
 8002a1a:	f040 80b4 	bne.w	8002b86 <HAL_PCD_EP_DB_Transmit+0x4fc>
      {
        ep->xfer_buff += TxByteNbre;
 8002a1e:	68bb      	ldr	r3, [r7, #8]
 8002a20:	695a      	ldr	r2, [r3, #20]
 8002a22:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002a26:	441a      	add	r2, r3
 8002a28:	68bb      	ldr	r3, [r7, #8]
 8002a2a:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002a2c:	68bb      	ldr	r3, [r7, #8]
 8002a2e:	69da      	ldr	r2, [r3, #28]
 8002a30:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002a34:	441a      	add	r2, r3
 8002a36:	68bb      	ldr	r3, [r7, #8]
 8002a38:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002a3a:	68bb      	ldr	r3, [r7, #8]
 8002a3c:	6a1a      	ldr	r2, [r3, #32]
 8002a3e:	68bb      	ldr	r3, [r7, #8]
 8002a40:	691b      	ldr	r3, [r3, #16]
 8002a42:	429a      	cmp	r2, r3
 8002a44:	d309      	bcc.n	8002a5a <HAL_PCD_EP_DB_Transmit+0x3d0>
        {
          len = ep->maxpacket;
 8002a46:	68bb      	ldr	r3, [r7, #8]
 8002a48:	691b      	ldr	r3, [r3, #16]
 8002a4a:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db -= len;
 8002a4c:	68bb      	ldr	r3, [r7, #8]
 8002a4e:	6a1a      	ldr	r2, [r3, #32]
 8002a50:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a52:	1ad2      	subs	r2, r2, r3
 8002a54:	68bb      	ldr	r3, [r7, #8]
 8002a56:	621a      	str	r2, [r3, #32]
 8002a58:	e015      	b.n	8002a86 <HAL_PCD_EP_DB_Transmit+0x3fc>
        }
        else if (ep->xfer_len_db == 0U)
 8002a5a:	68bb      	ldr	r3, [r7, #8]
 8002a5c:	6a1b      	ldr	r3, [r3, #32]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d107      	bne.n	8002a72 <HAL_PCD_EP_DB_Transmit+0x3e8>
        {
          len = TxByteNbre;
 8002a62:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002a66:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_fill_db = 0U;
 8002a68:	68bb      	ldr	r3, [r7, #8]
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002a70:	e009      	b.n	8002a86 <HAL_PCD_EP_DB_Transmit+0x3fc>
        }
        else
        {
          len = ep->xfer_len_db;
 8002a72:	68bb      	ldr	r3, [r7, #8]
 8002a74:	6a1b      	ldr	r3, [r3, #32]
 8002a76:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db = 0U;
 8002a78:	68bb      	ldr	r3, [r7, #8]
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8002a7e:	68bb      	ldr	r3, [r7, #8]
 8002a80:	2200      	movs	r2, #0
 8002a82:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	643b      	str	r3, [r7, #64]	; 0x40
 8002a8c:	68bb      	ldr	r3, [r7, #8]
 8002a8e:	785b      	ldrb	r3, [r3, #1]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d155      	bne.n	8002b40 <HAL_PCD_EP_DB_Transmit+0x4b6>
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	63bb      	str	r3, [r7, #56]	; 0x38
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002aa2:	b29b      	uxth	r3, r3
 8002aa4:	461a      	mov	r2, r3
 8002aa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002aa8:	4413      	add	r3, r2
 8002aaa:	63bb      	str	r3, [r7, #56]	; 0x38
 8002aac:	68bb      	ldr	r3, [r7, #8]
 8002aae:	781b      	ldrb	r3, [r3, #0]
 8002ab0:	011a      	lsls	r2, r3, #4
 8002ab2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ab4:	4413      	add	r3, r2
 8002ab6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002aba:	637b      	str	r3, [r7, #52]	; 0x34
 8002abc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d112      	bne.n	8002ae8 <HAL_PCD_EP_DB_Transmit+0x45e>
 8002ac2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ac4:	881b      	ldrh	r3, [r3, #0]
 8002ac6:	b29b      	uxth	r3, r3
 8002ac8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002acc:	b29a      	uxth	r2, r3
 8002ace:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ad0:	801a      	strh	r2, [r3, #0]
 8002ad2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ad4:	881b      	ldrh	r3, [r3, #0]
 8002ad6:	b29b      	uxth	r3, r3
 8002ad8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002adc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002ae0:	b29a      	uxth	r2, r3
 8002ae2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ae4:	801a      	strh	r2, [r3, #0]
 8002ae6:	e044      	b.n	8002b72 <HAL_PCD_EP_DB_Transmit+0x4e8>
 8002ae8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002aea:	2b3e      	cmp	r3, #62	; 0x3e
 8002aec:	d811      	bhi.n	8002b12 <HAL_PCD_EP_DB_Transmit+0x488>
 8002aee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002af0:	085b      	lsrs	r3, r3, #1
 8002af2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002af4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002af6:	f003 0301 	and.w	r3, r3, #1
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d002      	beq.n	8002b04 <HAL_PCD_EP_DB_Transmit+0x47a>
 8002afe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b00:	3301      	adds	r3, #1
 8002b02:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002b04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b06:	b29b      	uxth	r3, r3
 8002b08:	029b      	lsls	r3, r3, #10
 8002b0a:	b29a      	uxth	r2, r3
 8002b0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b0e:	801a      	strh	r2, [r3, #0]
 8002b10:	e02f      	b.n	8002b72 <HAL_PCD_EP_DB_Transmit+0x4e8>
 8002b12:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b14:	095b      	lsrs	r3, r3, #5
 8002b16:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002b18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b1a:	f003 031f 	and.w	r3, r3, #31
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d102      	bne.n	8002b28 <HAL_PCD_EP_DB_Transmit+0x49e>
 8002b22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b24:	3b01      	subs	r3, #1
 8002b26:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002b28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b2a:	b29b      	uxth	r3, r3
 8002b2c:	029b      	lsls	r3, r3, #10
 8002b2e:	b29b      	uxth	r3, r3
 8002b30:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002b34:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002b38:	b29a      	uxth	r2, r3
 8002b3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b3c:	801a      	strh	r2, [r3, #0]
 8002b3e:	e018      	b.n	8002b72 <HAL_PCD_EP_DB_Transmit+0x4e8>
 8002b40:	68bb      	ldr	r3, [r7, #8]
 8002b42:	785b      	ldrb	r3, [r3, #1]
 8002b44:	2b01      	cmp	r3, #1
 8002b46:	d114      	bne.n	8002b72 <HAL_PCD_EP_DB_Transmit+0x4e8>
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b50:	b29b      	uxth	r3, r3
 8002b52:	461a      	mov	r2, r3
 8002b54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b56:	4413      	add	r3, r2
 8002b58:	643b      	str	r3, [r7, #64]	; 0x40
 8002b5a:	68bb      	ldr	r3, [r7, #8]
 8002b5c:	781b      	ldrb	r3, [r3, #0]
 8002b5e:	011a      	lsls	r2, r3, #4
 8002b60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b62:	4413      	add	r3, r2
 8002b64:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002b68:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002b6a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b6c:	b29a      	uxth	r2, r3
 8002b6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b70:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	6818      	ldr	r0, [r3, #0]
 8002b76:	68bb      	ldr	r3, [r7, #8]
 8002b78:	6959      	ldr	r1, [r3, #20]
 8002b7a:	68bb      	ldr	r3, [r7, #8]
 8002b7c:	895a      	ldrh	r2, [r3, #10]
 8002b7e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b80:	b29b      	uxth	r3, r3
 8002b82:	f002 fe0f 	bl	80057a4 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	461a      	mov	r2, r3
 8002b8c:	68bb      	ldr	r3, [r7, #8]
 8002b8e:	781b      	ldrb	r3, [r3, #0]
 8002b90:	009b      	lsls	r3, r3, #2
 8002b92:	4413      	add	r3, r2
 8002b94:	881b      	ldrh	r3, [r3, #0]
 8002b96:	b29b      	uxth	r3, r3
 8002b98:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002b9c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002ba0:	82bb      	strh	r3, [r7, #20]
 8002ba2:	8abb      	ldrh	r3, [r7, #20]
 8002ba4:	f083 0310 	eor.w	r3, r3, #16
 8002ba8:	82bb      	strh	r3, [r7, #20]
 8002baa:	8abb      	ldrh	r3, [r7, #20]
 8002bac:	f083 0320 	eor.w	r3, r3, #32
 8002bb0:	82bb      	strh	r3, [r7, #20]
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	461a      	mov	r2, r3
 8002bb8:	68bb      	ldr	r3, [r7, #8]
 8002bba:	781b      	ldrb	r3, [r3, #0]
 8002bbc:	009b      	lsls	r3, r3, #2
 8002bbe:	441a      	add	r2, r3
 8002bc0:	8abb      	ldrh	r3, [r7, #20]
 8002bc2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002bc6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002bca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002bce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002bd2:	b29b      	uxth	r3, r3
 8002bd4:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8002bd6:	2300      	movs	r3, #0
}
 8002bd8:	4618      	mov	r0, r3
 8002bda:	3750      	adds	r7, #80	; 0x50
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	bd80      	pop	{r7, pc}

08002be0 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8002be0:	b480      	push	{r7}
 8002be2:	b087      	sub	sp, #28
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	60f8      	str	r0, [r7, #12]
 8002be8:	607b      	str	r3, [r7, #4]
 8002bea:	460b      	mov	r3, r1
 8002bec:	817b      	strh	r3, [r7, #10]
 8002bee:	4613      	mov	r3, r2
 8002bf0:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002bf2:	897b      	ldrh	r3, [r7, #10]
 8002bf4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bf8:	b29b      	uxth	r3, r3
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d00b      	beq.n	8002c16 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002bfe:	897b      	ldrh	r3, [r7, #10]
 8002c00:	f003 0307 	and.w	r3, r3, #7
 8002c04:	1c5a      	adds	r2, r3, #1
 8002c06:	4613      	mov	r3, r2
 8002c08:	009b      	lsls	r3, r3, #2
 8002c0a:	4413      	add	r3, r2
 8002c0c:	00db      	lsls	r3, r3, #3
 8002c0e:	68fa      	ldr	r2, [r7, #12]
 8002c10:	4413      	add	r3, r2
 8002c12:	617b      	str	r3, [r7, #20]
 8002c14:	e009      	b.n	8002c2a <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002c16:	897a      	ldrh	r2, [r7, #10]
 8002c18:	4613      	mov	r3, r2
 8002c1a:	009b      	lsls	r3, r3, #2
 8002c1c:	4413      	add	r3, r2
 8002c1e:	00db      	lsls	r3, r3, #3
 8002c20:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002c24:	68fa      	ldr	r2, [r7, #12]
 8002c26:	4413      	add	r3, r2
 8002c28:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002c2a:	893b      	ldrh	r3, [r7, #8]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d107      	bne.n	8002c40 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002c30:	697b      	ldr	r3, [r7, #20]
 8002c32:	2200      	movs	r2, #0
 8002c34:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	b29a      	uxth	r2, r3
 8002c3a:	697b      	ldr	r3, [r7, #20]
 8002c3c:	80da      	strh	r2, [r3, #6]
 8002c3e:	e00b      	b.n	8002c58 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002c40:	697b      	ldr	r3, [r7, #20]
 8002c42:	2201      	movs	r2, #1
 8002c44:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	b29a      	uxth	r2, r3
 8002c4a:	697b      	ldr	r3, [r7, #20]
 8002c4c:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	0c1b      	lsrs	r3, r3, #16
 8002c52:	b29a      	uxth	r2, r3
 8002c54:	697b      	ldr	r3, [r7, #20]
 8002c56:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8002c58:	2300      	movs	r3, #0
}
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	371c      	adds	r7, #28
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	bc80      	pop	{r7}
 8002c62:	4770      	bx	lr

08002c64 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b086      	sub	sp, #24
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d101      	bne.n	8002c76 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002c72:	2301      	movs	r3, #1
 8002c74:	e26c      	b.n	8003150 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f003 0301 	and.w	r3, r3, #1
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	f000 8087 	beq.w	8002d92 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002c84:	4b92      	ldr	r3, [pc, #584]	; (8002ed0 <HAL_RCC_OscConfig+0x26c>)
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	f003 030c 	and.w	r3, r3, #12
 8002c8c:	2b04      	cmp	r3, #4
 8002c8e:	d00c      	beq.n	8002caa <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002c90:	4b8f      	ldr	r3, [pc, #572]	; (8002ed0 <HAL_RCC_OscConfig+0x26c>)
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	f003 030c 	and.w	r3, r3, #12
 8002c98:	2b08      	cmp	r3, #8
 8002c9a:	d112      	bne.n	8002cc2 <HAL_RCC_OscConfig+0x5e>
 8002c9c:	4b8c      	ldr	r3, [pc, #560]	; (8002ed0 <HAL_RCC_OscConfig+0x26c>)
 8002c9e:	685b      	ldr	r3, [r3, #4]
 8002ca0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ca4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ca8:	d10b      	bne.n	8002cc2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002caa:	4b89      	ldr	r3, [pc, #548]	; (8002ed0 <HAL_RCC_OscConfig+0x26c>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d06c      	beq.n	8002d90 <HAL_RCC_OscConfig+0x12c>
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	685b      	ldr	r3, [r3, #4]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d168      	bne.n	8002d90 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	e246      	b.n	8003150 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	685b      	ldr	r3, [r3, #4]
 8002cc6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002cca:	d106      	bne.n	8002cda <HAL_RCC_OscConfig+0x76>
 8002ccc:	4b80      	ldr	r3, [pc, #512]	; (8002ed0 <HAL_RCC_OscConfig+0x26c>)
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	4a7f      	ldr	r2, [pc, #508]	; (8002ed0 <HAL_RCC_OscConfig+0x26c>)
 8002cd2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cd6:	6013      	str	r3, [r2, #0]
 8002cd8:	e02e      	b.n	8002d38 <HAL_RCC_OscConfig+0xd4>
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	685b      	ldr	r3, [r3, #4]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d10c      	bne.n	8002cfc <HAL_RCC_OscConfig+0x98>
 8002ce2:	4b7b      	ldr	r3, [pc, #492]	; (8002ed0 <HAL_RCC_OscConfig+0x26c>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	4a7a      	ldr	r2, [pc, #488]	; (8002ed0 <HAL_RCC_OscConfig+0x26c>)
 8002ce8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002cec:	6013      	str	r3, [r2, #0]
 8002cee:	4b78      	ldr	r3, [pc, #480]	; (8002ed0 <HAL_RCC_OscConfig+0x26c>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	4a77      	ldr	r2, [pc, #476]	; (8002ed0 <HAL_RCC_OscConfig+0x26c>)
 8002cf4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002cf8:	6013      	str	r3, [r2, #0]
 8002cfa:	e01d      	b.n	8002d38 <HAL_RCC_OscConfig+0xd4>
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	685b      	ldr	r3, [r3, #4]
 8002d00:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d04:	d10c      	bne.n	8002d20 <HAL_RCC_OscConfig+0xbc>
 8002d06:	4b72      	ldr	r3, [pc, #456]	; (8002ed0 <HAL_RCC_OscConfig+0x26c>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	4a71      	ldr	r2, [pc, #452]	; (8002ed0 <HAL_RCC_OscConfig+0x26c>)
 8002d0c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d10:	6013      	str	r3, [r2, #0]
 8002d12:	4b6f      	ldr	r3, [pc, #444]	; (8002ed0 <HAL_RCC_OscConfig+0x26c>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	4a6e      	ldr	r2, [pc, #440]	; (8002ed0 <HAL_RCC_OscConfig+0x26c>)
 8002d18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d1c:	6013      	str	r3, [r2, #0]
 8002d1e:	e00b      	b.n	8002d38 <HAL_RCC_OscConfig+0xd4>
 8002d20:	4b6b      	ldr	r3, [pc, #428]	; (8002ed0 <HAL_RCC_OscConfig+0x26c>)
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	4a6a      	ldr	r2, [pc, #424]	; (8002ed0 <HAL_RCC_OscConfig+0x26c>)
 8002d26:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d2a:	6013      	str	r3, [r2, #0]
 8002d2c:	4b68      	ldr	r3, [pc, #416]	; (8002ed0 <HAL_RCC_OscConfig+0x26c>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4a67      	ldr	r2, [pc, #412]	; (8002ed0 <HAL_RCC_OscConfig+0x26c>)
 8002d32:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d36:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	685b      	ldr	r3, [r3, #4]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d013      	beq.n	8002d68 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d40:	f7fd fcf6 	bl	8000730 <HAL_GetTick>
 8002d44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d46:	e008      	b.n	8002d5a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d48:	f7fd fcf2 	bl	8000730 <HAL_GetTick>
 8002d4c:	4602      	mov	r2, r0
 8002d4e:	693b      	ldr	r3, [r7, #16]
 8002d50:	1ad3      	subs	r3, r2, r3
 8002d52:	2b64      	cmp	r3, #100	; 0x64
 8002d54:	d901      	bls.n	8002d5a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002d56:	2303      	movs	r3, #3
 8002d58:	e1fa      	b.n	8003150 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d5a:	4b5d      	ldr	r3, [pc, #372]	; (8002ed0 <HAL_RCC_OscConfig+0x26c>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d0f0      	beq.n	8002d48 <HAL_RCC_OscConfig+0xe4>
 8002d66:	e014      	b.n	8002d92 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d68:	f7fd fce2 	bl	8000730 <HAL_GetTick>
 8002d6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d6e:	e008      	b.n	8002d82 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d70:	f7fd fcde 	bl	8000730 <HAL_GetTick>
 8002d74:	4602      	mov	r2, r0
 8002d76:	693b      	ldr	r3, [r7, #16]
 8002d78:	1ad3      	subs	r3, r2, r3
 8002d7a:	2b64      	cmp	r3, #100	; 0x64
 8002d7c:	d901      	bls.n	8002d82 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002d7e:	2303      	movs	r3, #3
 8002d80:	e1e6      	b.n	8003150 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d82:	4b53      	ldr	r3, [pc, #332]	; (8002ed0 <HAL_RCC_OscConfig+0x26c>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d1f0      	bne.n	8002d70 <HAL_RCC_OscConfig+0x10c>
 8002d8e:	e000      	b.n	8002d92 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d90:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f003 0302 	and.w	r3, r3, #2
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d063      	beq.n	8002e66 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002d9e:	4b4c      	ldr	r3, [pc, #304]	; (8002ed0 <HAL_RCC_OscConfig+0x26c>)
 8002da0:	685b      	ldr	r3, [r3, #4]
 8002da2:	f003 030c 	and.w	r3, r3, #12
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d00b      	beq.n	8002dc2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002daa:	4b49      	ldr	r3, [pc, #292]	; (8002ed0 <HAL_RCC_OscConfig+0x26c>)
 8002dac:	685b      	ldr	r3, [r3, #4]
 8002dae:	f003 030c 	and.w	r3, r3, #12
 8002db2:	2b08      	cmp	r3, #8
 8002db4:	d11c      	bne.n	8002df0 <HAL_RCC_OscConfig+0x18c>
 8002db6:	4b46      	ldr	r3, [pc, #280]	; (8002ed0 <HAL_RCC_OscConfig+0x26c>)
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d116      	bne.n	8002df0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002dc2:	4b43      	ldr	r3, [pc, #268]	; (8002ed0 <HAL_RCC_OscConfig+0x26c>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f003 0302 	and.w	r3, r3, #2
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d005      	beq.n	8002dda <HAL_RCC_OscConfig+0x176>
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	691b      	ldr	r3, [r3, #16]
 8002dd2:	2b01      	cmp	r3, #1
 8002dd4:	d001      	beq.n	8002dda <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	e1ba      	b.n	8003150 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002dda:	4b3d      	ldr	r3, [pc, #244]	; (8002ed0 <HAL_RCC_OscConfig+0x26c>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	695b      	ldr	r3, [r3, #20]
 8002de6:	00db      	lsls	r3, r3, #3
 8002de8:	4939      	ldr	r1, [pc, #228]	; (8002ed0 <HAL_RCC_OscConfig+0x26c>)
 8002dea:	4313      	orrs	r3, r2
 8002dec:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002dee:	e03a      	b.n	8002e66 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	691b      	ldr	r3, [r3, #16]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d020      	beq.n	8002e3a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002df8:	4b36      	ldr	r3, [pc, #216]	; (8002ed4 <HAL_RCC_OscConfig+0x270>)
 8002dfa:	2201      	movs	r2, #1
 8002dfc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dfe:	f7fd fc97 	bl	8000730 <HAL_GetTick>
 8002e02:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e04:	e008      	b.n	8002e18 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e06:	f7fd fc93 	bl	8000730 <HAL_GetTick>
 8002e0a:	4602      	mov	r2, r0
 8002e0c:	693b      	ldr	r3, [r7, #16]
 8002e0e:	1ad3      	subs	r3, r2, r3
 8002e10:	2b02      	cmp	r3, #2
 8002e12:	d901      	bls.n	8002e18 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002e14:	2303      	movs	r3, #3
 8002e16:	e19b      	b.n	8003150 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e18:	4b2d      	ldr	r3, [pc, #180]	; (8002ed0 <HAL_RCC_OscConfig+0x26c>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f003 0302 	and.w	r3, r3, #2
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d0f0      	beq.n	8002e06 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e24:	4b2a      	ldr	r3, [pc, #168]	; (8002ed0 <HAL_RCC_OscConfig+0x26c>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	695b      	ldr	r3, [r3, #20]
 8002e30:	00db      	lsls	r3, r3, #3
 8002e32:	4927      	ldr	r1, [pc, #156]	; (8002ed0 <HAL_RCC_OscConfig+0x26c>)
 8002e34:	4313      	orrs	r3, r2
 8002e36:	600b      	str	r3, [r1, #0]
 8002e38:	e015      	b.n	8002e66 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e3a:	4b26      	ldr	r3, [pc, #152]	; (8002ed4 <HAL_RCC_OscConfig+0x270>)
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e40:	f7fd fc76 	bl	8000730 <HAL_GetTick>
 8002e44:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e46:	e008      	b.n	8002e5a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e48:	f7fd fc72 	bl	8000730 <HAL_GetTick>
 8002e4c:	4602      	mov	r2, r0
 8002e4e:	693b      	ldr	r3, [r7, #16]
 8002e50:	1ad3      	subs	r3, r2, r3
 8002e52:	2b02      	cmp	r3, #2
 8002e54:	d901      	bls.n	8002e5a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002e56:	2303      	movs	r3, #3
 8002e58:	e17a      	b.n	8003150 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e5a:	4b1d      	ldr	r3, [pc, #116]	; (8002ed0 <HAL_RCC_OscConfig+0x26c>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f003 0302 	and.w	r3, r3, #2
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d1f0      	bne.n	8002e48 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f003 0308 	and.w	r3, r3, #8
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d03a      	beq.n	8002ee8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	699b      	ldr	r3, [r3, #24]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d019      	beq.n	8002eae <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e7a:	4b17      	ldr	r3, [pc, #92]	; (8002ed8 <HAL_RCC_OscConfig+0x274>)
 8002e7c:	2201      	movs	r2, #1
 8002e7e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e80:	f7fd fc56 	bl	8000730 <HAL_GetTick>
 8002e84:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e86:	e008      	b.n	8002e9a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e88:	f7fd fc52 	bl	8000730 <HAL_GetTick>
 8002e8c:	4602      	mov	r2, r0
 8002e8e:	693b      	ldr	r3, [r7, #16]
 8002e90:	1ad3      	subs	r3, r2, r3
 8002e92:	2b02      	cmp	r3, #2
 8002e94:	d901      	bls.n	8002e9a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002e96:	2303      	movs	r3, #3
 8002e98:	e15a      	b.n	8003150 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e9a:	4b0d      	ldr	r3, [pc, #52]	; (8002ed0 <HAL_RCC_OscConfig+0x26c>)
 8002e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e9e:	f003 0302 	and.w	r3, r3, #2
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d0f0      	beq.n	8002e88 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002ea6:	2001      	movs	r0, #1
 8002ea8:	f000 fac4 	bl	8003434 <RCC_Delay>
 8002eac:	e01c      	b.n	8002ee8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002eae:	4b0a      	ldr	r3, [pc, #40]	; (8002ed8 <HAL_RCC_OscConfig+0x274>)
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002eb4:	f7fd fc3c 	bl	8000730 <HAL_GetTick>
 8002eb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002eba:	e00f      	b.n	8002edc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ebc:	f7fd fc38 	bl	8000730 <HAL_GetTick>
 8002ec0:	4602      	mov	r2, r0
 8002ec2:	693b      	ldr	r3, [r7, #16]
 8002ec4:	1ad3      	subs	r3, r2, r3
 8002ec6:	2b02      	cmp	r3, #2
 8002ec8:	d908      	bls.n	8002edc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002eca:	2303      	movs	r3, #3
 8002ecc:	e140      	b.n	8003150 <HAL_RCC_OscConfig+0x4ec>
 8002ece:	bf00      	nop
 8002ed0:	40021000 	.word	0x40021000
 8002ed4:	42420000 	.word	0x42420000
 8002ed8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002edc:	4b9e      	ldr	r3, [pc, #632]	; (8003158 <HAL_RCC_OscConfig+0x4f4>)
 8002ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ee0:	f003 0302 	and.w	r3, r3, #2
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d1e9      	bne.n	8002ebc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f003 0304 	and.w	r3, r3, #4
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	f000 80a6 	beq.w	8003042 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002efa:	4b97      	ldr	r3, [pc, #604]	; (8003158 <HAL_RCC_OscConfig+0x4f4>)
 8002efc:	69db      	ldr	r3, [r3, #28]
 8002efe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d10d      	bne.n	8002f22 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f06:	4b94      	ldr	r3, [pc, #592]	; (8003158 <HAL_RCC_OscConfig+0x4f4>)
 8002f08:	69db      	ldr	r3, [r3, #28]
 8002f0a:	4a93      	ldr	r2, [pc, #588]	; (8003158 <HAL_RCC_OscConfig+0x4f4>)
 8002f0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f10:	61d3      	str	r3, [r2, #28]
 8002f12:	4b91      	ldr	r3, [pc, #580]	; (8003158 <HAL_RCC_OscConfig+0x4f4>)
 8002f14:	69db      	ldr	r3, [r3, #28]
 8002f16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f1a:	60bb      	str	r3, [r7, #8]
 8002f1c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f1e:	2301      	movs	r3, #1
 8002f20:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f22:	4b8e      	ldr	r3, [pc, #568]	; (800315c <HAL_RCC_OscConfig+0x4f8>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d118      	bne.n	8002f60 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f2e:	4b8b      	ldr	r3, [pc, #556]	; (800315c <HAL_RCC_OscConfig+0x4f8>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4a8a      	ldr	r2, [pc, #552]	; (800315c <HAL_RCC_OscConfig+0x4f8>)
 8002f34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f38:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f3a:	f7fd fbf9 	bl	8000730 <HAL_GetTick>
 8002f3e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f40:	e008      	b.n	8002f54 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f42:	f7fd fbf5 	bl	8000730 <HAL_GetTick>
 8002f46:	4602      	mov	r2, r0
 8002f48:	693b      	ldr	r3, [r7, #16]
 8002f4a:	1ad3      	subs	r3, r2, r3
 8002f4c:	2b64      	cmp	r3, #100	; 0x64
 8002f4e:	d901      	bls.n	8002f54 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002f50:	2303      	movs	r3, #3
 8002f52:	e0fd      	b.n	8003150 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f54:	4b81      	ldr	r3, [pc, #516]	; (800315c <HAL_RCC_OscConfig+0x4f8>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d0f0      	beq.n	8002f42 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	68db      	ldr	r3, [r3, #12]
 8002f64:	2b01      	cmp	r3, #1
 8002f66:	d106      	bne.n	8002f76 <HAL_RCC_OscConfig+0x312>
 8002f68:	4b7b      	ldr	r3, [pc, #492]	; (8003158 <HAL_RCC_OscConfig+0x4f4>)
 8002f6a:	6a1b      	ldr	r3, [r3, #32]
 8002f6c:	4a7a      	ldr	r2, [pc, #488]	; (8003158 <HAL_RCC_OscConfig+0x4f4>)
 8002f6e:	f043 0301 	orr.w	r3, r3, #1
 8002f72:	6213      	str	r3, [r2, #32]
 8002f74:	e02d      	b.n	8002fd2 <HAL_RCC_OscConfig+0x36e>
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	68db      	ldr	r3, [r3, #12]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d10c      	bne.n	8002f98 <HAL_RCC_OscConfig+0x334>
 8002f7e:	4b76      	ldr	r3, [pc, #472]	; (8003158 <HAL_RCC_OscConfig+0x4f4>)
 8002f80:	6a1b      	ldr	r3, [r3, #32]
 8002f82:	4a75      	ldr	r2, [pc, #468]	; (8003158 <HAL_RCC_OscConfig+0x4f4>)
 8002f84:	f023 0301 	bic.w	r3, r3, #1
 8002f88:	6213      	str	r3, [r2, #32]
 8002f8a:	4b73      	ldr	r3, [pc, #460]	; (8003158 <HAL_RCC_OscConfig+0x4f4>)
 8002f8c:	6a1b      	ldr	r3, [r3, #32]
 8002f8e:	4a72      	ldr	r2, [pc, #456]	; (8003158 <HAL_RCC_OscConfig+0x4f4>)
 8002f90:	f023 0304 	bic.w	r3, r3, #4
 8002f94:	6213      	str	r3, [r2, #32]
 8002f96:	e01c      	b.n	8002fd2 <HAL_RCC_OscConfig+0x36e>
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	68db      	ldr	r3, [r3, #12]
 8002f9c:	2b05      	cmp	r3, #5
 8002f9e:	d10c      	bne.n	8002fba <HAL_RCC_OscConfig+0x356>
 8002fa0:	4b6d      	ldr	r3, [pc, #436]	; (8003158 <HAL_RCC_OscConfig+0x4f4>)
 8002fa2:	6a1b      	ldr	r3, [r3, #32]
 8002fa4:	4a6c      	ldr	r2, [pc, #432]	; (8003158 <HAL_RCC_OscConfig+0x4f4>)
 8002fa6:	f043 0304 	orr.w	r3, r3, #4
 8002faa:	6213      	str	r3, [r2, #32]
 8002fac:	4b6a      	ldr	r3, [pc, #424]	; (8003158 <HAL_RCC_OscConfig+0x4f4>)
 8002fae:	6a1b      	ldr	r3, [r3, #32]
 8002fb0:	4a69      	ldr	r2, [pc, #420]	; (8003158 <HAL_RCC_OscConfig+0x4f4>)
 8002fb2:	f043 0301 	orr.w	r3, r3, #1
 8002fb6:	6213      	str	r3, [r2, #32]
 8002fb8:	e00b      	b.n	8002fd2 <HAL_RCC_OscConfig+0x36e>
 8002fba:	4b67      	ldr	r3, [pc, #412]	; (8003158 <HAL_RCC_OscConfig+0x4f4>)
 8002fbc:	6a1b      	ldr	r3, [r3, #32]
 8002fbe:	4a66      	ldr	r2, [pc, #408]	; (8003158 <HAL_RCC_OscConfig+0x4f4>)
 8002fc0:	f023 0301 	bic.w	r3, r3, #1
 8002fc4:	6213      	str	r3, [r2, #32]
 8002fc6:	4b64      	ldr	r3, [pc, #400]	; (8003158 <HAL_RCC_OscConfig+0x4f4>)
 8002fc8:	6a1b      	ldr	r3, [r3, #32]
 8002fca:	4a63      	ldr	r2, [pc, #396]	; (8003158 <HAL_RCC_OscConfig+0x4f4>)
 8002fcc:	f023 0304 	bic.w	r3, r3, #4
 8002fd0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	68db      	ldr	r3, [r3, #12]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d015      	beq.n	8003006 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fda:	f7fd fba9 	bl	8000730 <HAL_GetTick>
 8002fde:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fe0:	e00a      	b.n	8002ff8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fe2:	f7fd fba5 	bl	8000730 <HAL_GetTick>
 8002fe6:	4602      	mov	r2, r0
 8002fe8:	693b      	ldr	r3, [r7, #16]
 8002fea:	1ad3      	subs	r3, r2, r3
 8002fec:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ff0:	4293      	cmp	r3, r2
 8002ff2:	d901      	bls.n	8002ff8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002ff4:	2303      	movs	r3, #3
 8002ff6:	e0ab      	b.n	8003150 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ff8:	4b57      	ldr	r3, [pc, #348]	; (8003158 <HAL_RCC_OscConfig+0x4f4>)
 8002ffa:	6a1b      	ldr	r3, [r3, #32]
 8002ffc:	f003 0302 	and.w	r3, r3, #2
 8003000:	2b00      	cmp	r3, #0
 8003002:	d0ee      	beq.n	8002fe2 <HAL_RCC_OscConfig+0x37e>
 8003004:	e014      	b.n	8003030 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003006:	f7fd fb93 	bl	8000730 <HAL_GetTick>
 800300a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800300c:	e00a      	b.n	8003024 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800300e:	f7fd fb8f 	bl	8000730 <HAL_GetTick>
 8003012:	4602      	mov	r2, r0
 8003014:	693b      	ldr	r3, [r7, #16]
 8003016:	1ad3      	subs	r3, r2, r3
 8003018:	f241 3288 	movw	r2, #5000	; 0x1388
 800301c:	4293      	cmp	r3, r2
 800301e:	d901      	bls.n	8003024 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003020:	2303      	movs	r3, #3
 8003022:	e095      	b.n	8003150 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003024:	4b4c      	ldr	r3, [pc, #304]	; (8003158 <HAL_RCC_OscConfig+0x4f4>)
 8003026:	6a1b      	ldr	r3, [r3, #32]
 8003028:	f003 0302 	and.w	r3, r3, #2
 800302c:	2b00      	cmp	r3, #0
 800302e:	d1ee      	bne.n	800300e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003030:	7dfb      	ldrb	r3, [r7, #23]
 8003032:	2b01      	cmp	r3, #1
 8003034:	d105      	bne.n	8003042 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003036:	4b48      	ldr	r3, [pc, #288]	; (8003158 <HAL_RCC_OscConfig+0x4f4>)
 8003038:	69db      	ldr	r3, [r3, #28]
 800303a:	4a47      	ldr	r2, [pc, #284]	; (8003158 <HAL_RCC_OscConfig+0x4f4>)
 800303c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003040:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	69db      	ldr	r3, [r3, #28]
 8003046:	2b00      	cmp	r3, #0
 8003048:	f000 8081 	beq.w	800314e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800304c:	4b42      	ldr	r3, [pc, #264]	; (8003158 <HAL_RCC_OscConfig+0x4f4>)
 800304e:	685b      	ldr	r3, [r3, #4]
 8003050:	f003 030c 	and.w	r3, r3, #12
 8003054:	2b08      	cmp	r3, #8
 8003056:	d061      	beq.n	800311c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	69db      	ldr	r3, [r3, #28]
 800305c:	2b02      	cmp	r3, #2
 800305e:	d146      	bne.n	80030ee <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003060:	4b3f      	ldr	r3, [pc, #252]	; (8003160 <HAL_RCC_OscConfig+0x4fc>)
 8003062:	2200      	movs	r2, #0
 8003064:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003066:	f7fd fb63 	bl	8000730 <HAL_GetTick>
 800306a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800306c:	e008      	b.n	8003080 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800306e:	f7fd fb5f 	bl	8000730 <HAL_GetTick>
 8003072:	4602      	mov	r2, r0
 8003074:	693b      	ldr	r3, [r7, #16]
 8003076:	1ad3      	subs	r3, r2, r3
 8003078:	2b02      	cmp	r3, #2
 800307a:	d901      	bls.n	8003080 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800307c:	2303      	movs	r3, #3
 800307e:	e067      	b.n	8003150 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003080:	4b35      	ldr	r3, [pc, #212]	; (8003158 <HAL_RCC_OscConfig+0x4f4>)
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003088:	2b00      	cmp	r3, #0
 800308a:	d1f0      	bne.n	800306e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6a1b      	ldr	r3, [r3, #32]
 8003090:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003094:	d108      	bne.n	80030a8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003096:	4b30      	ldr	r3, [pc, #192]	; (8003158 <HAL_RCC_OscConfig+0x4f4>)
 8003098:	685b      	ldr	r3, [r3, #4]
 800309a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	689b      	ldr	r3, [r3, #8]
 80030a2:	492d      	ldr	r1, [pc, #180]	; (8003158 <HAL_RCC_OscConfig+0x4f4>)
 80030a4:	4313      	orrs	r3, r2
 80030a6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80030a8:	4b2b      	ldr	r3, [pc, #172]	; (8003158 <HAL_RCC_OscConfig+0x4f4>)
 80030aa:	685b      	ldr	r3, [r3, #4]
 80030ac:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6a19      	ldr	r1, [r3, #32]
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030b8:	430b      	orrs	r3, r1
 80030ba:	4927      	ldr	r1, [pc, #156]	; (8003158 <HAL_RCC_OscConfig+0x4f4>)
 80030bc:	4313      	orrs	r3, r2
 80030be:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80030c0:	4b27      	ldr	r3, [pc, #156]	; (8003160 <HAL_RCC_OscConfig+0x4fc>)
 80030c2:	2201      	movs	r2, #1
 80030c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030c6:	f7fd fb33 	bl	8000730 <HAL_GetTick>
 80030ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80030cc:	e008      	b.n	80030e0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030ce:	f7fd fb2f 	bl	8000730 <HAL_GetTick>
 80030d2:	4602      	mov	r2, r0
 80030d4:	693b      	ldr	r3, [r7, #16]
 80030d6:	1ad3      	subs	r3, r2, r3
 80030d8:	2b02      	cmp	r3, #2
 80030da:	d901      	bls.n	80030e0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80030dc:	2303      	movs	r3, #3
 80030de:	e037      	b.n	8003150 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80030e0:	4b1d      	ldr	r3, [pc, #116]	; (8003158 <HAL_RCC_OscConfig+0x4f4>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d0f0      	beq.n	80030ce <HAL_RCC_OscConfig+0x46a>
 80030ec:	e02f      	b.n	800314e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030ee:	4b1c      	ldr	r3, [pc, #112]	; (8003160 <HAL_RCC_OscConfig+0x4fc>)
 80030f0:	2200      	movs	r2, #0
 80030f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030f4:	f7fd fb1c 	bl	8000730 <HAL_GetTick>
 80030f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80030fa:	e008      	b.n	800310e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030fc:	f7fd fb18 	bl	8000730 <HAL_GetTick>
 8003100:	4602      	mov	r2, r0
 8003102:	693b      	ldr	r3, [r7, #16]
 8003104:	1ad3      	subs	r3, r2, r3
 8003106:	2b02      	cmp	r3, #2
 8003108:	d901      	bls.n	800310e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800310a:	2303      	movs	r3, #3
 800310c:	e020      	b.n	8003150 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800310e:	4b12      	ldr	r3, [pc, #72]	; (8003158 <HAL_RCC_OscConfig+0x4f4>)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003116:	2b00      	cmp	r3, #0
 8003118:	d1f0      	bne.n	80030fc <HAL_RCC_OscConfig+0x498>
 800311a:	e018      	b.n	800314e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	69db      	ldr	r3, [r3, #28]
 8003120:	2b01      	cmp	r3, #1
 8003122:	d101      	bne.n	8003128 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8003124:	2301      	movs	r3, #1
 8003126:	e013      	b.n	8003150 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003128:	4b0b      	ldr	r3, [pc, #44]	; (8003158 <HAL_RCC_OscConfig+0x4f4>)
 800312a:	685b      	ldr	r3, [r3, #4]
 800312c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6a1b      	ldr	r3, [r3, #32]
 8003138:	429a      	cmp	r2, r3
 800313a:	d106      	bne.n	800314a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003146:	429a      	cmp	r2, r3
 8003148:	d001      	beq.n	800314e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800314a:	2301      	movs	r3, #1
 800314c:	e000      	b.n	8003150 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800314e:	2300      	movs	r3, #0
}
 8003150:	4618      	mov	r0, r3
 8003152:	3718      	adds	r7, #24
 8003154:	46bd      	mov	sp, r7
 8003156:	bd80      	pop	{r7, pc}
 8003158:	40021000 	.word	0x40021000
 800315c:	40007000 	.word	0x40007000
 8003160:	42420060 	.word	0x42420060

08003164 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	b084      	sub	sp, #16
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
 800316c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2b00      	cmp	r3, #0
 8003172:	d101      	bne.n	8003178 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003174:	2301      	movs	r3, #1
 8003176:	e0d0      	b.n	800331a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003178:	4b6a      	ldr	r3, [pc, #424]	; (8003324 <HAL_RCC_ClockConfig+0x1c0>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f003 0307 	and.w	r3, r3, #7
 8003180:	683a      	ldr	r2, [r7, #0]
 8003182:	429a      	cmp	r2, r3
 8003184:	d910      	bls.n	80031a8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003186:	4b67      	ldr	r3, [pc, #412]	; (8003324 <HAL_RCC_ClockConfig+0x1c0>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f023 0207 	bic.w	r2, r3, #7
 800318e:	4965      	ldr	r1, [pc, #404]	; (8003324 <HAL_RCC_ClockConfig+0x1c0>)
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	4313      	orrs	r3, r2
 8003194:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003196:	4b63      	ldr	r3, [pc, #396]	; (8003324 <HAL_RCC_ClockConfig+0x1c0>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f003 0307 	and.w	r3, r3, #7
 800319e:	683a      	ldr	r2, [r7, #0]
 80031a0:	429a      	cmp	r2, r3
 80031a2:	d001      	beq.n	80031a8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80031a4:	2301      	movs	r3, #1
 80031a6:	e0b8      	b.n	800331a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f003 0302 	and.w	r3, r3, #2
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d020      	beq.n	80031f6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f003 0304 	and.w	r3, r3, #4
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d005      	beq.n	80031cc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80031c0:	4b59      	ldr	r3, [pc, #356]	; (8003328 <HAL_RCC_ClockConfig+0x1c4>)
 80031c2:	685b      	ldr	r3, [r3, #4]
 80031c4:	4a58      	ldr	r2, [pc, #352]	; (8003328 <HAL_RCC_ClockConfig+0x1c4>)
 80031c6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80031ca:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f003 0308 	and.w	r3, r3, #8
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d005      	beq.n	80031e4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80031d8:	4b53      	ldr	r3, [pc, #332]	; (8003328 <HAL_RCC_ClockConfig+0x1c4>)
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	4a52      	ldr	r2, [pc, #328]	; (8003328 <HAL_RCC_ClockConfig+0x1c4>)
 80031de:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80031e2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80031e4:	4b50      	ldr	r3, [pc, #320]	; (8003328 <HAL_RCC_ClockConfig+0x1c4>)
 80031e6:	685b      	ldr	r3, [r3, #4]
 80031e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	689b      	ldr	r3, [r3, #8]
 80031f0:	494d      	ldr	r1, [pc, #308]	; (8003328 <HAL_RCC_ClockConfig+0x1c4>)
 80031f2:	4313      	orrs	r3, r2
 80031f4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f003 0301 	and.w	r3, r3, #1
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d040      	beq.n	8003284 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	685b      	ldr	r3, [r3, #4]
 8003206:	2b01      	cmp	r3, #1
 8003208:	d107      	bne.n	800321a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800320a:	4b47      	ldr	r3, [pc, #284]	; (8003328 <HAL_RCC_ClockConfig+0x1c4>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003212:	2b00      	cmp	r3, #0
 8003214:	d115      	bne.n	8003242 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003216:	2301      	movs	r3, #1
 8003218:	e07f      	b.n	800331a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	685b      	ldr	r3, [r3, #4]
 800321e:	2b02      	cmp	r3, #2
 8003220:	d107      	bne.n	8003232 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003222:	4b41      	ldr	r3, [pc, #260]	; (8003328 <HAL_RCC_ClockConfig+0x1c4>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800322a:	2b00      	cmp	r3, #0
 800322c:	d109      	bne.n	8003242 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800322e:	2301      	movs	r3, #1
 8003230:	e073      	b.n	800331a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003232:	4b3d      	ldr	r3, [pc, #244]	; (8003328 <HAL_RCC_ClockConfig+0x1c4>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f003 0302 	and.w	r3, r3, #2
 800323a:	2b00      	cmp	r3, #0
 800323c:	d101      	bne.n	8003242 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800323e:	2301      	movs	r3, #1
 8003240:	e06b      	b.n	800331a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003242:	4b39      	ldr	r3, [pc, #228]	; (8003328 <HAL_RCC_ClockConfig+0x1c4>)
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	f023 0203 	bic.w	r2, r3, #3
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	685b      	ldr	r3, [r3, #4]
 800324e:	4936      	ldr	r1, [pc, #216]	; (8003328 <HAL_RCC_ClockConfig+0x1c4>)
 8003250:	4313      	orrs	r3, r2
 8003252:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003254:	f7fd fa6c 	bl	8000730 <HAL_GetTick>
 8003258:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800325a:	e00a      	b.n	8003272 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800325c:	f7fd fa68 	bl	8000730 <HAL_GetTick>
 8003260:	4602      	mov	r2, r0
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	1ad3      	subs	r3, r2, r3
 8003266:	f241 3288 	movw	r2, #5000	; 0x1388
 800326a:	4293      	cmp	r3, r2
 800326c:	d901      	bls.n	8003272 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800326e:	2303      	movs	r3, #3
 8003270:	e053      	b.n	800331a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003272:	4b2d      	ldr	r3, [pc, #180]	; (8003328 <HAL_RCC_ClockConfig+0x1c4>)
 8003274:	685b      	ldr	r3, [r3, #4]
 8003276:	f003 020c 	and.w	r2, r3, #12
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	685b      	ldr	r3, [r3, #4]
 800327e:	009b      	lsls	r3, r3, #2
 8003280:	429a      	cmp	r2, r3
 8003282:	d1eb      	bne.n	800325c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003284:	4b27      	ldr	r3, [pc, #156]	; (8003324 <HAL_RCC_ClockConfig+0x1c0>)
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f003 0307 	and.w	r3, r3, #7
 800328c:	683a      	ldr	r2, [r7, #0]
 800328e:	429a      	cmp	r2, r3
 8003290:	d210      	bcs.n	80032b4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003292:	4b24      	ldr	r3, [pc, #144]	; (8003324 <HAL_RCC_ClockConfig+0x1c0>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f023 0207 	bic.w	r2, r3, #7
 800329a:	4922      	ldr	r1, [pc, #136]	; (8003324 <HAL_RCC_ClockConfig+0x1c0>)
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	4313      	orrs	r3, r2
 80032a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80032a2:	4b20      	ldr	r3, [pc, #128]	; (8003324 <HAL_RCC_ClockConfig+0x1c0>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f003 0307 	and.w	r3, r3, #7
 80032aa:	683a      	ldr	r2, [r7, #0]
 80032ac:	429a      	cmp	r2, r3
 80032ae:	d001      	beq.n	80032b4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80032b0:	2301      	movs	r3, #1
 80032b2:	e032      	b.n	800331a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f003 0304 	and.w	r3, r3, #4
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d008      	beq.n	80032d2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80032c0:	4b19      	ldr	r3, [pc, #100]	; (8003328 <HAL_RCC_ClockConfig+0x1c4>)
 80032c2:	685b      	ldr	r3, [r3, #4]
 80032c4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	68db      	ldr	r3, [r3, #12]
 80032cc:	4916      	ldr	r1, [pc, #88]	; (8003328 <HAL_RCC_ClockConfig+0x1c4>)
 80032ce:	4313      	orrs	r3, r2
 80032d0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f003 0308 	and.w	r3, r3, #8
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d009      	beq.n	80032f2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80032de:	4b12      	ldr	r3, [pc, #72]	; (8003328 <HAL_RCC_ClockConfig+0x1c4>)
 80032e0:	685b      	ldr	r3, [r3, #4]
 80032e2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	691b      	ldr	r3, [r3, #16]
 80032ea:	00db      	lsls	r3, r3, #3
 80032ec:	490e      	ldr	r1, [pc, #56]	; (8003328 <HAL_RCC_ClockConfig+0x1c4>)
 80032ee:	4313      	orrs	r3, r2
 80032f0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80032f2:	f000 f821 	bl	8003338 <HAL_RCC_GetSysClockFreq>
 80032f6:	4602      	mov	r2, r0
 80032f8:	4b0b      	ldr	r3, [pc, #44]	; (8003328 <HAL_RCC_ClockConfig+0x1c4>)
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	091b      	lsrs	r3, r3, #4
 80032fe:	f003 030f 	and.w	r3, r3, #15
 8003302:	490a      	ldr	r1, [pc, #40]	; (800332c <HAL_RCC_ClockConfig+0x1c8>)
 8003304:	5ccb      	ldrb	r3, [r1, r3]
 8003306:	fa22 f303 	lsr.w	r3, r2, r3
 800330a:	4a09      	ldr	r2, [pc, #36]	; (8003330 <HAL_RCC_ClockConfig+0x1cc>)
 800330c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800330e:	4b09      	ldr	r3, [pc, #36]	; (8003334 <HAL_RCC_ClockConfig+0x1d0>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4618      	mov	r0, r3
 8003314:	f7fd f9ca 	bl	80006ac <HAL_InitTick>

  return HAL_OK;
 8003318:	2300      	movs	r3, #0
}
 800331a:	4618      	mov	r0, r3
 800331c:	3710      	adds	r7, #16
 800331e:	46bd      	mov	sp, r7
 8003320:	bd80      	pop	{r7, pc}
 8003322:	bf00      	nop
 8003324:	40022000 	.word	0x40022000
 8003328:	40021000 	.word	0x40021000
 800332c:	08007584 	.word	0x08007584
 8003330:	20000000 	.word	0x20000000
 8003334:	20000004 	.word	0x20000004

08003338 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003338:	b490      	push	{r4, r7}
 800333a:	b08a      	sub	sp, #40	; 0x28
 800333c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800333e:	4b2a      	ldr	r3, [pc, #168]	; (80033e8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003340:	1d3c      	adds	r4, r7, #4
 8003342:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003344:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003348:	f240 2301 	movw	r3, #513	; 0x201
 800334c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800334e:	2300      	movs	r3, #0
 8003350:	61fb      	str	r3, [r7, #28]
 8003352:	2300      	movs	r3, #0
 8003354:	61bb      	str	r3, [r7, #24]
 8003356:	2300      	movs	r3, #0
 8003358:	627b      	str	r3, [r7, #36]	; 0x24
 800335a:	2300      	movs	r3, #0
 800335c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800335e:	2300      	movs	r3, #0
 8003360:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003362:	4b22      	ldr	r3, [pc, #136]	; (80033ec <HAL_RCC_GetSysClockFreq+0xb4>)
 8003364:	685b      	ldr	r3, [r3, #4]
 8003366:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003368:	69fb      	ldr	r3, [r7, #28]
 800336a:	f003 030c 	and.w	r3, r3, #12
 800336e:	2b04      	cmp	r3, #4
 8003370:	d002      	beq.n	8003378 <HAL_RCC_GetSysClockFreq+0x40>
 8003372:	2b08      	cmp	r3, #8
 8003374:	d003      	beq.n	800337e <HAL_RCC_GetSysClockFreq+0x46>
 8003376:	e02d      	b.n	80033d4 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003378:	4b1d      	ldr	r3, [pc, #116]	; (80033f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800337a:	623b      	str	r3, [r7, #32]
      break;
 800337c:	e02d      	b.n	80033da <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800337e:	69fb      	ldr	r3, [r7, #28]
 8003380:	0c9b      	lsrs	r3, r3, #18
 8003382:	f003 030f 	and.w	r3, r3, #15
 8003386:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800338a:	4413      	add	r3, r2
 800338c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003390:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003392:	69fb      	ldr	r3, [r7, #28]
 8003394:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003398:	2b00      	cmp	r3, #0
 800339a:	d013      	beq.n	80033c4 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800339c:	4b13      	ldr	r3, [pc, #76]	; (80033ec <HAL_RCC_GetSysClockFreq+0xb4>)
 800339e:	685b      	ldr	r3, [r3, #4]
 80033a0:	0c5b      	lsrs	r3, r3, #17
 80033a2:	f003 0301 	and.w	r3, r3, #1
 80033a6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80033aa:	4413      	add	r3, r2
 80033ac:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80033b0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80033b2:	697b      	ldr	r3, [r7, #20]
 80033b4:	4a0e      	ldr	r2, [pc, #56]	; (80033f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 80033b6:	fb02 f203 	mul.w	r2, r2, r3
 80033ba:	69bb      	ldr	r3, [r7, #24]
 80033bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80033c0:	627b      	str	r3, [r7, #36]	; 0x24
 80033c2:	e004      	b.n	80033ce <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80033c4:	697b      	ldr	r3, [r7, #20]
 80033c6:	4a0b      	ldr	r2, [pc, #44]	; (80033f4 <HAL_RCC_GetSysClockFreq+0xbc>)
 80033c8:	fb02 f303 	mul.w	r3, r2, r3
 80033cc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80033ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033d0:	623b      	str	r3, [r7, #32]
      break;
 80033d2:	e002      	b.n	80033da <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80033d4:	4b06      	ldr	r3, [pc, #24]	; (80033f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 80033d6:	623b      	str	r3, [r7, #32]
      break;
 80033d8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80033da:	6a3b      	ldr	r3, [r7, #32]
}
 80033dc:	4618      	mov	r0, r3
 80033de:	3728      	adds	r7, #40	; 0x28
 80033e0:	46bd      	mov	sp, r7
 80033e2:	bc90      	pop	{r4, r7}
 80033e4:	4770      	bx	lr
 80033e6:	bf00      	nop
 80033e8:	0800751c 	.word	0x0800751c
 80033ec:	40021000 	.word	0x40021000
 80033f0:	007a1200 	.word	0x007a1200
 80033f4:	003d0900 	.word	0x003d0900

080033f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80033f8:	b480      	push	{r7}
 80033fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80033fc:	4b02      	ldr	r3, [pc, #8]	; (8003408 <HAL_RCC_GetHCLKFreq+0x10>)
 80033fe:	681b      	ldr	r3, [r3, #0]
}
 8003400:	4618      	mov	r0, r3
 8003402:	46bd      	mov	sp, r7
 8003404:	bc80      	pop	{r7}
 8003406:	4770      	bx	lr
 8003408:	20000000 	.word	0x20000000

0800340c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003410:	f7ff fff2 	bl	80033f8 <HAL_RCC_GetHCLKFreq>
 8003414:	4602      	mov	r2, r0
 8003416:	4b05      	ldr	r3, [pc, #20]	; (800342c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003418:	685b      	ldr	r3, [r3, #4]
 800341a:	0adb      	lsrs	r3, r3, #11
 800341c:	f003 0307 	and.w	r3, r3, #7
 8003420:	4903      	ldr	r1, [pc, #12]	; (8003430 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003422:	5ccb      	ldrb	r3, [r1, r3]
 8003424:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003428:	4618      	mov	r0, r3
 800342a:	bd80      	pop	{r7, pc}
 800342c:	40021000 	.word	0x40021000
 8003430:	08007594 	.word	0x08007594

08003434 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003434:	b480      	push	{r7}
 8003436:	b085      	sub	sp, #20
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800343c:	4b0a      	ldr	r3, [pc, #40]	; (8003468 <RCC_Delay+0x34>)
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	4a0a      	ldr	r2, [pc, #40]	; (800346c <RCC_Delay+0x38>)
 8003442:	fba2 2303 	umull	r2, r3, r2, r3
 8003446:	0a5b      	lsrs	r3, r3, #9
 8003448:	687a      	ldr	r2, [r7, #4]
 800344a:	fb02 f303 	mul.w	r3, r2, r3
 800344e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003450:	bf00      	nop
  }
  while (Delay --);
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	1e5a      	subs	r2, r3, #1
 8003456:	60fa      	str	r2, [r7, #12]
 8003458:	2b00      	cmp	r3, #0
 800345a:	d1f9      	bne.n	8003450 <RCC_Delay+0x1c>
}
 800345c:	bf00      	nop
 800345e:	bf00      	nop
 8003460:	3714      	adds	r7, #20
 8003462:	46bd      	mov	sp, r7
 8003464:	bc80      	pop	{r7}
 8003466:	4770      	bx	lr
 8003468:	20000000 	.word	0x20000000
 800346c:	10624dd3 	.word	0x10624dd3

08003470 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	b086      	sub	sp, #24
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003478:	2300      	movs	r3, #0
 800347a:	613b      	str	r3, [r7, #16]
 800347c:	2300      	movs	r3, #0
 800347e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f003 0301 	and.w	r3, r3, #1
 8003488:	2b00      	cmp	r3, #0
 800348a:	d07d      	beq.n	8003588 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 800348c:	2300      	movs	r3, #0
 800348e:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003490:	4b4f      	ldr	r3, [pc, #316]	; (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003492:	69db      	ldr	r3, [r3, #28]
 8003494:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003498:	2b00      	cmp	r3, #0
 800349a:	d10d      	bne.n	80034b8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800349c:	4b4c      	ldr	r3, [pc, #304]	; (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800349e:	69db      	ldr	r3, [r3, #28]
 80034a0:	4a4b      	ldr	r2, [pc, #300]	; (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034a6:	61d3      	str	r3, [r2, #28]
 80034a8:	4b49      	ldr	r3, [pc, #292]	; (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034aa:	69db      	ldr	r3, [r3, #28]
 80034ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034b0:	60bb      	str	r3, [r7, #8]
 80034b2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80034b4:	2301      	movs	r3, #1
 80034b6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034b8:	4b46      	ldr	r3, [pc, #280]	; (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d118      	bne.n	80034f6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80034c4:	4b43      	ldr	r3, [pc, #268]	; (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	4a42      	ldr	r2, [pc, #264]	; (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80034ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034ce:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80034d0:	f7fd f92e 	bl	8000730 <HAL_GetTick>
 80034d4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034d6:	e008      	b.n	80034ea <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034d8:	f7fd f92a 	bl	8000730 <HAL_GetTick>
 80034dc:	4602      	mov	r2, r0
 80034de:	693b      	ldr	r3, [r7, #16]
 80034e0:	1ad3      	subs	r3, r2, r3
 80034e2:	2b64      	cmp	r3, #100	; 0x64
 80034e4:	d901      	bls.n	80034ea <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80034e6:	2303      	movs	r3, #3
 80034e8:	e06d      	b.n	80035c6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034ea:	4b3a      	ldr	r3, [pc, #232]	; (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d0f0      	beq.n	80034d8 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80034f6:	4b36      	ldr	r3, [pc, #216]	; (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034f8:	6a1b      	ldr	r3, [r3, #32]
 80034fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034fe:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	2b00      	cmp	r3, #0
 8003504:	d02e      	beq.n	8003564 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	685b      	ldr	r3, [r3, #4]
 800350a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800350e:	68fa      	ldr	r2, [r7, #12]
 8003510:	429a      	cmp	r2, r3
 8003512:	d027      	beq.n	8003564 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003514:	4b2e      	ldr	r3, [pc, #184]	; (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003516:	6a1b      	ldr	r3, [r3, #32]
 8003518:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800351c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800351e:	4b2e      	ldr	r3, [pc, #184]	; (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003520:	2201      	movs	r2, #1
 8003522:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003524:	4b2c      	ldr	r3, [pc, #176]	; (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003526:	2200      	movs	r2, #0
 8003528:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800352a:	4a29      	ldr	r2, [pc, #164]	; (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	f003 0301 	and.w	r3, r3, #1
 8003536:	2b00      	cmp	r3, #0
 8003538:	d014      	beq.n	8003564 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800353a:	f7fd f8f9 	bl	8000730 <HAL_GetTick>
 800353e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003540:	e00a      	b.n	8003558 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003542:	f7fd f8f5 	bl	8000730 <HAL_GetTick>
 8003546:	4602      	mov	r2, r0
 8003548:	693b      	ldr	r3, [r7, #16]
 800354a:	1ad3      	subs	r3, r2, r3
 800354c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003550:	4293      	cmp	r3, r2
 8003552:	d901      	bls.n	8003558 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003554:	2303      	movs	r3, #3
 8003556:	e036      	b.n	80035c6 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003558:	4b1d      	ldr	r3, [pc, #116]	; (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800355a:	6a1b      	ldr	r3, [r3, #32]
 800355c:	f003 0302 	and.w	r3, r3, #2
 8003560:	2b00      	cmp	r3, #0
 8003562:	d0ee      	beq.n	8003542 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003564:	4b1a      	ldr	r3, [pc, #104]	; (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003566:	6a1b      	ldr	r3, [r3, #32]
 8003568:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	685b      	ldr	r3, [r3, #4]
 8003570:	4917      	ldr	r1, [pc, #92]	; (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003572:	4313      	orrs	r3, r2
 8003574:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003576:	7dfb      	ldrb	r3, [r7, #23]
 8003578:	2b01      	cmp	r3, #1
 800357a:	d105      	bne.n	8003588 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800357c:	4b14      	ldr	r3, [pc, #80]	; (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800357e:	69db      	ldr	r3, [r3, #28]
 8003580:	4a13      	ldr	r2, [pc, #76]	; (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003582:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003586:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f003 0302 	and.w	r3, r3, #2
 8003590:	2b00      	cmp	r3, #0
 8003592:	d008      	beq.n	80035a6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003594:	4b0e      	ldr	r3, [pc, #56]	; (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003596:	685b      	ldr	r3, [r3, #4]
 8003598:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	689b      	ldr	r3, [r3, #8]
 80035a0:	490b      	ldr	r1, [pc, #44]	; (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035a2:	4313      	orrs	r3, r2
 80035a4:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f003 0310 	and.w	r3, r3, #16
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d008      	beq.n	80035c4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80035b2:	4b07      	ldr	r3, [pc, #28]	; (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035b4:	685b      	ldr	r3, [r3, #4]
 80035b6:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	68db      	ldr	r3, [r3, #12]
 80035be:	4904      	ldr	r1, [pc, #16]	; (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035c0:	4313      	orrs	r3, r2
 80035c2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80035c4:	2300      	movs	r3, #0
}
 80035c6:	4618      	mov	r0, r3
 80035c8:	3718      	adds	r7, #24
 80035ca:	46bd      	mov	sp, r7
 80035cc:	bd80      	pop	{r7, pc}
 80035ce:	bf00      	nop
 80035d0:	40021000 	.word	0x40021000
 80035d4:	40007000 	.word	0x40007000
 80035d8:	42420440 	.word	0x42420440

080035dc <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80035dc:	b590      	push	{r4, r7, lr}
 80035de:	b08d      	sub	sp, #52	; 0x34
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80035e4:	4b5a      	ldr	r3, [pc, #360]	; (8003750 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 80035e6:	f107 040c 	add.w	r4, r7, #12
 80035ea:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80035ec:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80035f0:	f240 2301 	movw	r3, #513	; 0x201
 80035f4:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80035f6:	2300      	movs	r3, #0
 80035f8:	627b      	str	r3, [r7, #36]	; 0x24
 80035fa:	2300      	movs	r3, #0
 80035fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80035fe:	2300      	movs	r3, #0
 8003600:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8003602:	2300      	movs	r3, #0
 8003604:	61fb      	str	r3, [r7, #28]
 8003606:	2300      	movs	r3, #0
 8003608:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	2b10      	cmp	r3, #16
 800360e:	d00a      	beq.n	8003626 <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2b10      	cmp	r3, #16
 8003614:	f200 8091 	bhi.w	800373a <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2b01      	cmp	r3, #1
 800361c:	d04c      	beq.n	80036b8 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	2b02      	cmp	r3, #2
 8003622:	d07c      	beq.n	800371e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8003624:	e089      	b.n	800373a <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
      temp_reg = RCC->CFGR;
 8003626:	4b4b      	ldr	r3, [pc, #300]	; (8003754 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8003628:	685b      	ldr	r3, [r3, #4]
 800362a:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 800362c:	4b49      	ldr	r3, [pc, #292]	; (8003754 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003634:	2b00      	cmp	r3, #0
 8003636:	f000 8082 	beq.w	800373e <HAL_RCCEx_GetPeriphCLKFreq+0x162>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800363a:	69fb      	ldr	r3, [r7, #28]
 800363c:	0c9b      	lsrs	r3, r3, #18
 800363e:	f003 030f 	and.w	r3, r3, #15
 8003642:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8003646:	4413      	add	r3, r2
 8003648:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800364c:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800364e:	69fb      	ldr	r3, [r7, #28]
 8003650:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003654:	2b00      	cmp	r3, #0
 8003656:	d018      	beq.n	800368a <HAL_RCCEx_GetPeriphCLKFreq+0xae>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003658:	4b3e      	ldr	r3, [pc, #248]	; (8003754 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 800365a:	685b      	ldr	r3, [r3, #4]
 800365c:	0c5b      	lsrs	r3, r3, #17
 800365e:	f003 0301 	and.w	r3, r3, #1
 8003662:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8003666:	4413      	add	r3, r2
 8003668:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800366c:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800366e:	69fb      	ldr	r3, [r7, #28]
 8003670:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003674:	2b00      	cmp	r3, #0
 8003676:	d00d      	beq.n	8003694 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8003678:	4a37      	ldr	r2, [pc, #220]	; (8003758 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 800367a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800367c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003680:	6a3b      	ldr	r3, [r7, #32]
 8003682:	fb02 f303 	mul.w	r3, r2, r3
 8003686:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003688:	e004      	b.n	8003694 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800368a:	6a3b      	ldr	r3, [r7, #32]
 800368c:	4a33      	ldr	r2, [pc, #204]	; (800375c <HAL_RCCEx_GetPeriphCLKFreq+0x180>)
 800368e:	fb02 f303 	mul.w	r3, r2, r3
 8003692:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8003694:	4b2f      	ldr	r3, [pc, #188]	; (8003754 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8003696:	685b      	ldr	r3, [r3, #4]
 8003698:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800369c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80036a0:	d102      	bne.n	80036a8 <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
          frequency = pllclk;
 80036a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036a4:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80036a6:	e04a      	b.n	800373e <HAL_RCCEx_GetPeriphCLKFreq+0x162>
          frequency = (pllclk * 2) / 3;
 80036a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036aa:	005b      	lsls	r3, r3, #1
 80036ac:	4a2c      	ldr	r2, [pc, #176]	; (8003760 <HAL_RCCEx_GetPeriphCLKFreq+0x184>)
 80036ae:	fba2 2303 	umull	r2, r3, r2, r3
 80036b2:	085b      	lsrs	r3, r3, #1
 80036b4:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80036b6:	e042      	b.n	800373e <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      temp_reg = RCC->BDCR;
 80036b8:	4b26      	ldr	r3, [pc, #152]	; (8003754 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80036ba:	6a1b      	ldr	r3, [r3, #32]
 80036bc:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80036be:	69fb      	ldr	r3, [r7, #28]
 80036c0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80036c8:	d108      	bne.n	80036dc <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 80036ca:	69fb      	ldr	r3, [r7, #28]
 80036cc:	f003 0302 	and.w	r3, r3, #2
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d003      	beq.n	80036dc <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSE_VALUE;
 80036d4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80036d8:	62bb      	str	r3, [r7, #40]	; 0x28
 80036da:	e01f      	b.n	800371c <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80036dc:	69fb      	ldr	r3, [r7, #28]
 80036de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036e2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80036e6:	d109      	bne.n	80036fc <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 80036e8:	4b1a      	ldr	r3, [pc, #104]	; (8003754 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80036ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ec:	f003 0302 	and.w	r3, r3, #2
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d003      	beq.n	80036fc <HAL_RCCEx_GetPeriphCLKFreq+0x120>
        frequency = LSI_VALUE;
 80036f4:	f649 4340 	movw	r3, #40000	; 0x9c40
 80036f8:	62bb      	str	r3, [r7, #40]	; 0x28
 80036fa:	e00f      	b.n	800371c <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80036fc:	69fb      	ldr	r3, [r7, #28]
 80036fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003702:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003706:	d11c      	bne.n	8003742 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 8003708:	4b12      	ldr	r3, [pc, #72]	; (8003754 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003710:	2b00      	cmp	r3, #0
 8003712:	d016      	beq.n	8003742 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
        frequency = HSE_VALUE / 128U;
 8003714:	f24f 4324 	movw	r3, #62500	; 0xf424
 8003718:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800371a:	e012      	b.n	8003742 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 800371c:	e011      	b.n	8003742 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 800371e:	f7ff fe75 	bl	800340c <HAL_RCC_GetPCLK2Freq>
 8003722:	4602      	mov	r2, r0
 8003724:	4b0b      	ldr	r3, [pc, #44]	; (8003754 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8003726:	685b      	ldr	r3, [r3, #4]
 8003728:	0b9b      	lsrs	r3, r3, #14
 800372a:	f003 0303 	and.w	r3, r3, #3
 800372e:	3301      	adds	r3, #1
 8003730:	005b      	lsls	r3, r3, #1
 8003732:	fbb2 f3f3 	udiv	r3, r2, r3
 8003736:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003738:	e004      	b.n	8003744 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 800373a:	bf00      	nop
 800373c:	e002      	b.n	8003744 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 800373e:	bf00      	nop
 8003740:	e000      	b.n	8003744 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 8003742:	bf00      	nop
    }
  }
  return (frequency);
 8003744:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8003746:	4618      	mov	r0, r3
 8003748:	3734      	adds	r7, #52	; 0x34
 800374a:	46bd      	mov	sp, r7
 800374c:	bd90      	pop	{r4, r7, pc}
 800374e:	bf00      	nop
 8003750:	0800752c 	.word	0x0800752c
 8003754:	40021000 	.word	0x40021000
 8003758:	007a1200 	.word	0x007a1200
 800375c:	003d0900 	.word	0x003d0900
 8003760:	aaaaaaab 	.word	0xaaaaaaab

08003764 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003764:	b084      	sub	sp, #16
 8003766:	b480      	push	{r7}
 8003768:	b083      	sub	sp, #12
 800376a:	af00      	add	r7, sp, #0
 800376c:	6078      	str	r0, [r7, #4]
 800376e:	f107 0014 	add.w	r0, r7, #20
 8003772:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8003776:	2300      	movs	r3, #0
}
 8003778:	4618      	mov	r0, r3
 800377a:	370c      	adds	r7, #12
 800377c:	46bd      	mov	sp, r7
 800377e:	bc80      	pop	{r7}
 8003780:	b004      	add	sp, #16
 8003782:	4770      	bx	lr

08003784 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8003784:	b480      	push	{r7}
 8003786:	b085      	sub	sp, #20
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2200      	movs	r2, #0
 8003790:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003794:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8003798:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	b29a      	uxth	r2, r3
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80037a4:	2300      	movs	r3, #0
}
 80037a6:	4618      	mov	r0, r3
 80037a8:	3714      	adds	r7, #20
 80037aa:	46bd      	mov	sp, r7
 80037ac:	bc80      	pop	{r7}
 80037ae:	4770      	bx	lr

080037b0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80037b0:	b480      	push	{r7}
 80037b2:	b085      	sub	sp, #20
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80037b8:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80037bc:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80037c4:	b29a      	uxth	r2, r3
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	b29b      	uxth	r3, r3
 80037ca:	43db      	mvns	r3, r3
 80037cc:	b29b      	uxth	r3, r3
 80037ce:	4013      	ands	r3, r2
 80037d0:	b29a      	uxth	r2, r3
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80037d8:	2300      	movs	r3, #0
}
 80037da:	4618      	mov	r0, r3
 80037dc:	3714      	adds	r7, #20
 80037de:	46bd      	mov	sp, r7
 80037e0:	bc80      	pop	{r7}
 80037e2:	4770      	bx	lr

080037e4 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 80037e4:	b480      	push	{r7}
 80037e6:	b083      	sub	sp, #12
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
 80037ec:	460b      	mov	r3, r1
 80037ee:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80037f0:	2300      	movs	r3, #0
}
 80037f2:	4618      	mov	r0, r3
 80037f4:	370c      	adds	r7, #12
 80037f6:	46bd      	mov	sp, r7
 80037f8:	bc80      	pop	{r7}
 80037fa:	4770      	bx	lr

080037fc <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80037fc:	b084      	sub	sp, #16
 80037fe:	b480      	push	{r7}
 8003800:	b083      	sub	sp, #12
 8003802:	af00      	add	r7, sp, #0
 8003804:	6078      	str	r0, [r7, #4]
 8003806:	f107 0014 	add.w	r0, r7, #20
 800380a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2201      	movs	r2, #1
 8003812:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2200      	movs	r2, #0
 800381a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2200      	movs	r2, #0
 8003822:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	2200      	movs	r2, #0
 800382a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800382e:	2300      	movs	r3, #0
}
 8003830:	4618      	mov	r0, r3
 8003832:	370c      	adds	r7, #12
 8003834:	46bd      	mov	sp, r7
 8003836:	bc80      	pop	{r7}
 8003838:	b004      	add	sp, #16
 800383a:	4770      	bx	lr

0800383c <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800383c:	b480      	push	{r7}
 800383e:	b09b      	sub	sp, #108	; 0x6c
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
 8003844:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8003846:	2300      	movs	r3, #0
 8003848:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800384c:	687a      	ldr	r2, [r7, #4]
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	781b      	ldrb	r3, [r3, #0]
 8003852:	009b      	lsls	r3, r3, #2
 8003854:	4413      	add	r3, r2
 8003856:	881b      	ldrh	r3, [r3, #0]
 8003858:	b29b      	uxth	r3, r3
 800385a:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800385e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003862:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	78db      	ldrb	r3, [r3, #3]
 800386a:	2b03      	cmp	r3, #3
 800386c:	d81f      	bhi.n	80038ae <USB_ActivateEndpoint+0x72>
 800386e:	a201      	add	r2, pc, #4	; (adr r2, 8003874 <USB_ActivateEndpoint+0x38>)
 8003870:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003874:	08003885 	.word	0x08003885
 8003878:	080038a1 	.word	0x080038a1
 800387c:	080038b7 	.word	0x080038b7
 8003880:	08003893 	.word	0x08003893
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8003884:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003888:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800388c:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8003890:	e012      	b.n	80038b8 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8003892:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003896:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800389a:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 800389e:	e00b      	b.n	80038b8 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80038a0:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80038a4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80038a8:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80038ac:	e004      	b.n	80038b8 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80038ae:	2301      	movs	r3, #1
 80038b0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 80038b4:	e000      	b.n	80038b8 <USB_ActivateEndpoint+0x7c>
      break;
 80038b6:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80038b8:	687a      	ldr	r2, [r7, #4]
 80038ba:	683b      	ldr	r3, [r7, #0]
 80038bc:	781b      	ldrb	r3, [r3, #0]
 80038be:	009b      	lsls	r3, r3, #2
 80038c0:	441a      	add	r2, r3
 80038c2:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80038c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80038ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80038ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80038d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80038d6:	b29b      	uxth	r3, r3
 80038d8:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80038da:	687a      	ldr	r2, [r7, #4]
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	781b      	ldrb	r3, [r3, #0]
 80038e0:	009b      	lsls	r3, r3, #2
 80038e2:	4413      	add	r3, r2
 80038e4:	881b      	ldrh	r3, [r3, #0]
 80038e6:	b29b      	uxth	r3, r3
 80038e8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80038ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038f0:	b29a      	uxth	r2, r3
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	781b      	ldrb	r3, [r3, #0]
 80038f6:	b29b      	uxth	r3, r3
 80038f8:	4313      	orrs	r3, r2
 80038fa:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 80038fe:	687a      	ldr	r2, [r7, #4]
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	781b      	ldrb	r3, [r3, #0]
 8003904:	009b      	lsls	r3, r3, #2
 8003906:	441a      	add	r2, r3
 8003908:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 800390c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003910:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003914:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003918:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800391c:	b29b      	uxth	r3, r3
 800391e:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	7b1b      	ldrb	r3, [r3, #12]
 8003924:	2b00      	cmp	r3, #0
 8003926:	f040 8149 	bne.w	8003bbc <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	785b      	ldrb	r3, [r3, #1]
 800392e:	2b00      	cmp	r3, #0
 8003930:	f000 8084 	beq.w	8003a3c <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	617b      	str	r3, [r7, #20]
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800393e:	b29b      	uxth	r3, r3
 8003940:	461a      	mov	r2, r3
 8003942:	697b      	ldr	r3, [r7, #20]
 8003944:	4413      	add	r3, r2
 8003946:	617b      	str	r3, [r7, #20]
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	781b      	ldrb	r3, [r3, #0]
 800394c:	011a      	lsls	r2, r3, #4
 800394e:	697b      	ldr	r3, [r7, #20]
 8003950:	4413      	add	r3, r2
 8003952:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003956:	613b      	str	r3, [r7, #16]
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	88db      	ldrh	r3, [r3, #6]
 800395c:	085b      	lsrs	r3, r3, #1
 800395e:	b29b      	uxth	r3, r3
 8003960:	005b      	lsls	r3, r3, #1
 8003962:	b29a      	uxth	r2, r3
 8003964:	693b      	ldr	r3, [r7, #16]
 8003966:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003968:	687a      	ldr	r2, [r7, #4]
 800396a:	683b      	ldr	r3, [r7, #0]
 800396c:	781b      	ldrb	r3, [r3, #0]
 800396e:	009b      	lsls	r3, r3, #2
 8003970:	4413      	add	r3, r2
 8003972:	881b      	ldrh	r3, [r3, #0]
 8003974:	81fb      	strh	r3, [r7, #14]
 8003976:	89fb      	ldrh	r3, [r7, #14]
 8003978:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800397c:	2b00      	cmp	r3, #0
 800397e:	d01b      	beq.n	80039b8 <USB_ActivateEndpoint+0x17c>
 8003980:	687a      	ldr	r2, [r7, #4]
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	781b      	ldrb	r3, [r3, #0]
 8003986:	009b      	lsls	r3, r3, #2
 8003988:	4413      	add	r3, r2
 800398a:	881b      	ldrh	r3, [r3, #0]
 800398c:	b29b      	uxth	r3, r3
 800398e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003992:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003996:	81bb      	strh	r3, [r7, #12]
 8003998:	687a      	ldr	r2, [r7, #4]
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	781b      	ldrb	r3, [r3, #0]
 800399e:	009b      	lsls	r3, r3, #2
 80039a0:	441a      	add	r2, r3
 80039a2:	89bb      	ldrh	r3, [r7, #12]
 80039a4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80039a8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80039ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80039b0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80039b4:	b29b      	uxth	r3, r3
 80039b6:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	78db      	ldrb	r3, [r3, #3]
 80039bc:	2b01      	cmp	r3, #1
 80039be:	d020      	beq.n	8003a02 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80039c0:	687a      	ldr	r2, [r7, #4]
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	781b      	ldrb	r3, [r3, #0]
 80039c6:	009b      	lsls	r3, r3, #2
 80039c8:	4413      	add	r3, r2
 80039ca:	881b      	ldrh	r3, [r3, #0]
 80039cc:	b29b      	uxth	r3, r3
 80039ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80039d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80039d6:	813b      	strh	r3, [r7, #8]
 80039d8:	893b      	ldrh	r3, [r7, #8]
 80039da:	f083 0320 	eor.w	r3, r3, #32
 80039de:	813b      	strh	r3, [r7, #8]
 80039e0:	687a      	ldr	r2, [r7, #4]
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	781b      	ldrb	r3, [r3, #0]
 80039e6:	009b      	lsls	r3, r3, #2
 80039e8:	441a      	add	r2, r3
 80039ea:	893b      	ldrh	r3, [r7, #8]
 80039ec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80039f0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80039f4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80039f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80039fc:	b29b      	uxth	r3, r3
 80039fe:	8013      	strh	r3, [r2, #0]
 8003a00:	e27f      	b.n	8003f02 <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003a02:	687a      	ldr	r2, [r7, #4]
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	781b      	ldrb	r3, [r3, #0]
 8003a08:	009b      	lsls	r3, r3, #2
 8003a0a:	4413      	add	r3, r2
 8003a0c:	881b      	ldrh	r3, [r3, #0]
 8003a0e:	b29b      	uxth	r3, r3
 8003a10:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a14:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003a18:	817b      	strh	r3, [r7, #10]
 8003a1a:	687a      	ldr	r2, [r7, #4]
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	781b      	ldrb	r3, [r3, #0]
 8003a20:	009b      	lsls	r3, r3, #2
 8003a22:	441a      	add	r2, r3
 8003a24:	897b      	ldrh	r3, [r7, #10]
 8003a26:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003a2a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003a2e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a36:	b29b      	uxth	r3, r3
 8003a38:	8013      	strh	r3, [r2, #0]
 8003a3a:	e262      	b.n	8003f02 <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003a46:	b29b      	uxth	r3, r3
 8003a48:	461a      	mov	r2, r3
 8003a4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a4c:	4413      	add	r3, r2
 8003a4e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	781b      	ldrb	r3, [r3, #0]
 8003a54:	011a      	lsls	r2, r3, #4
 8003a56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a58:	4413      	add	r3, r2
 8003a5a:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8003a5e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	88db      	ldrh	r3, [r3, #6]
 8003a64:	085b      	lsrs	r3, r3, #1
 8003a66:	b29b      	uxth	r3, r3
 8003a68:	005b      	lsls	r3, r3, #1
 8003a6a:	b29a      	uxth	r2, r3
 8003a6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a6e:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	627b      	str	r3, [r7, #36]	; 0x24
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003a7a:	b29b      	uxth	r3, r3
 8003a7c:	461a      	mov	r2, r3
 8003a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a80:	4413      	add	r3, r2
 8003a82:	627b      	str	r3, [r7, #36]	; 0x24
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	781b      	ldrb	r3, [r3, #0]
 8003a88:	011a      	lsls	r2, r3, #4
 8003a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a8c:	4413      	add	r3, r2
 8003a8e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003a92:	623b      	str	r3, [r7, #32]
 8003a94:	683b      	ldr	r3, [r7, #0]
 8003a96:	691b      	ldr	r3, [r3, #16]
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d112      	bne.n	8003ac2 <USB_ActivateEndpoint+0x286>
 8003a9c:	6a3b      	ldr	r3, [r7, #32]
 8003a9e:	881b      	ldrh	r3, [r3, #0]
 8003aa0:	b29b      	uxth	r3, r3
 8003aa2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003aa6:	b29a      	uxth	r2, r3
 8003aa8:	6a3b      	ldr	r3, [r7, #32]
 8003aaa:	801a      	strh	r2, [r3, #0]
 8003aac:	6a3b      	ldr	r3, [r7, #32]
 8003aae:	881b      	ldrh	r3, [r3, #0]
 8003ab0:	b29b      	uxth	r3, r3
 8003ab2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003ab6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003aba:	b29a      	uxth	r2, r3
 8003abc:	6a3b      	ldr	r3, [r7, #32]
 8003abe:	801a      	strh	r2, [r3, #0]
 8003ac0:	e02f      	b.n	8003b22 <USB_ActivateEndpoint+0x2e6>
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	691b      	ldr	r3, [r3, #16]
 8003ac6:	2b3e      	cmp	r3, #62	; 0x3e
 8003ac8:	d813      	bhi.n	8003af2 <USB_ActivateEndpoint+0x2b6>
 8003aca:	683b      	ldr	r3, [r7, #0]
 8003acc:	691b      	ldr	r3, [r3, #16]
 8003ace:	085b      	lsrs	r3, r3, #1
 8003ad0:	663b      	str	r3, [r7, #96]	; 0x60
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	691b      	ldr	r3, [r3, #16]
 8003ad6:	f003 0301 	and.w	r3, r3, #1
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d002      	beq.n	8003ae4 <USB_ActivateEndpoint+0x2a8>
 8003ade:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003ae0:	3301      	adds	r3, #1
 8003ae2:	663b      	str	r3, [r7, #96]	; 0x60
 8003ae4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003ae6:	b29b      	uxth	r3, r3
 8003ae8:	029b      	lsls	r3, r3, #10
 8003aea:	b29a      	uxth	r2, r3
 8003aec:	6a3b      	ldr	r3, [r7, #32]
 8003aee:	801a      	strh	r2, [r3, #0]
 8003af0:	e017      	b.n	8003b22 <USB_ActivateEndpoint+0x2e6>
 8003af2:	683b      	ldr	r3, [r7, #0]
 8003af4:	691b      	ldr	r3, [r3, #16]
 8003af6:	095b      	lsrs	r3, r3, #5
 8003af8:	663b      	str	r3, [r7, #96]	; 0x60
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	691b      	ldr	r3, [r3, #16]
 8003afe:	f003 031f 	and.w	r3, r3, #31
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d102      	bne.n	8003b0c <USB_ActivateEndpoint+0x2d0>
 8003b06:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003b08:	3b01      	subs	r3, #1
 8003b0a:	663b      	str	r3, [r7, #96]	; 0x60
 8003b0c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003b0e:	b29b      	uxth	r3, r3
 8003b10:	029b      	lsls	r3, r3, #10
 8003b12:	b29b      	uxth	r3, r3
 8003b14:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003b18:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003b1c:	b29a      	uxth	r2, r3
 8003b1e:	6a3b      	ldr	r3, [r7, #32]
 8003b20:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003b22:	687a      	ldr	r2, [r7, #4]
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	781b      	ldrb	r3, [r3, #0]
 8003b28:	009b      	lsls	r3, r3, #2
 8003b2a:	4413      	add	r3, r2
 8003b2c:	881b      	ldrh	r3, [r3, #0]
 8003b2e:	83fb      	strh	r3, [r7, #30]
 8003b30:	8bfb      	ldrh	r3, [r7, #30]
 8003b32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d01b      	beq.n	8003b72 <USB_ActivateEndpoint+0x336>
 8003b3a:	687a      	ldr	r2, [r7, #4]
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	781b      	ldrb	r3, [r3, #0]
 8003b40:	009b      	lsls	r3, r3, #2
 8003b42:	4413      	add	r3, r2
 8003b44:	881b      	ldrh	r3, [r3, #0]
 8003b46:	b29b      	uxth	r3, r3
 8003b48:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b50:	83bb      	strh	r3, [r7, #28]
 8003b52:	687a      	ldr	r2, [r7, #4]
 8003b54:	683b      	ldr	r3, [r7, #0]
 8003b56:	781b      	ldrb	r3, [r3, #0]
 8003b58:	009b      	lsls	r3, r3, #2
 8003b5a:	441a      	add	r2, r3
 8003b5c:	8bbb      	ldrh	r3, [r7, #28]
 8003b5e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003b62:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003b66:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003b6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b6e:	b29b      	uxth	r3, r3
 8003b70:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003b72:	687a      	ldr	r2, [r7, #4]
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	781b      	ldrb	r3, [r3, #0]
 8003b78:	009b      	lsls	r3, r3, #2
 8003b7a:	4413      	add	r3, r2
 8003b7c:	881b      	ldrh	r3, [r3, #0]
 8003b7e:	b29b      	uxth	r3, r3
 8003b80:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003b84:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b88:	837b      	strh	r3, [r7, #26]
 8003b8a:	8b7b      	ldrh	r3, [r7, #26]
 8003b8c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8003b90:	837b      	strh	r3, [r7, #26]
 8003b92:	8b7b      	ldrh	r3, [r7, #26]
 8003b94:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003b98:	837b      	strh	r3, [r7, #26]
 8003b9a:	687a      	ldr	r2, [r7, #4]
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	781b      	ldrb	r3, [r3, #0]
 8003ba0:	009b      	lsls	r3, r3, #2
 8003ba2:	441a      	add	r2, r3
 8003ba4:	8b7b      	ldrh	r3, [r7, #26]
 8003ba6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003baa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003bae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003bb2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003bb6:	b29b      	uxth	r3, r3
 8003bb8:	8013      	strh	r3, [r2, #0]
 8003bba:	e1a2      	b.n	8003f02 <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8003bbc:	687a      	ldr	r2, [r7, #4]
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	781b      	ldrb	r3, [r3, #0]
 8003bc2:	009b      	lsls	r3, r3, #2
 8003bc4:	4413      	add	r3, r2
 8003bc6:	881b      	ldrh	r3, [r3, #0]
 8003bc8:	b29b      	uxth	r3, r3
 8003bca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003bce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bd2:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8003bd6:	687a      	ldr	r2, [r7, #4]
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	781b      	ldrb	r3, [r3, #0]
 8003bdc:	009b      	lsls	r3, r3, #2
 8003bde:	441a      	add	r2, r3
 8003be0:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8003be4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003be8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003bec:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8003bf0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003bf4:	b29b      	uxth	r3, r3
 8003bf6:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	65bb      	str	r3, [r7, #88]	; 0x58
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003c02:	b29b      	uxth	r3, r3
 8003c04:	461a      	mov	r2, r3
 8003c06:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003c08:	4413      	add	r3, r2
 8003c0a:	65bb      	str	r3, [r7, #88]	; 0x58
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	781b      	ldrb	r3, [r3, #0]
 8003c10:	011a      	lsls	r2, r3, #4
 8003c12:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003c14:	4413      	add	r3, r2
 8003c16:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003c1a:	657b      	str	r3, [r7, #84]	; 0x54
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	891b      	ldrh	r3, [r3, #8]
 8003c20:	085b      	lsrs	r3, r3, #1
 8003c22:	b29b      	uxth	r3, r3
 8003c24:	005b      	lsls	r3, r3, #1
 8003c26:	b29a      	uxth	r2, r3
 8003c28:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c2a:	801a      	strh	r2, [r3, #0]
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	653b      	str	r3, [r7, #80]	; 0x50
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003c36:	b29b      	uxth	r3, r3
 8003c38:	461a      	mov	r2, r3
 8003c3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c3c:	4413      	add	r3, r2
 8003c3e:	653b      	str	r3, [r7, #80]	; 0x50
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	781b      	ldrb	r3, [r3, #0]
 8003c44:	011a      	lsls	r2, r3, #4
 8003c46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c48:	4413      	add	r3, r2
 8003c4a:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8003c4e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003c50:	683b      	ldr	r3, [r7, #0]
 8003c52:	895b      	ldrh	r3, [r3, #10]
 8003c54:	085b      	lsrs	r3, r3, #1
 8003c56:	b29b      	uxth	r3, r3
 8003c58:	005b      	lsls	r3, r3, #1
 8003c5a:	b29a      	uxth	r2, r3
 8003c5c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c5e:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	785b      	ldrb	r3, [r3, #1]
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	f040 8091 	bne.w	8003d8c <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003c6a:	687a      	ldr	r2, [r7, #4]
 8003c6c:	683b      	ldr	r3, [r7, #0]
 8003c6e:	781b      	ldrb	r3, [r3, #0]
 8003c70:	009b      	lsls	r3, r3, #2
 8003c72:	4413      	add	r3, r2
 8003c74:	881b      	ldrh	r3, [r3, #0]
 8003c76:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8003c78:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8003c7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d01b      	beq.n	8003cba <USB_ActivateEndpoint+0x47e>
 8003c82:	687a      	ldr	r2, [r7, #4]
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	781b      	ldrb	r3, [r3, #0]
 8003c88:	009b      	lsls	r3, r3, #2
 8003c8a:	4413      	add	r3, r2
 8003c8c:	881b      	ldrh	r3, [r3, #0]
 8003c8e:	b29b      	uxth	r3, r3
 8003c90:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c98:	877b      	strh	r3, [r7, #58]	; 0x3a
 8003c9a:	687a      	ldr	r2, [r7, #4]
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	781b      	ldrb	r3, [r3, #0]
 8003ca0:	009b      	lsls	r3, r3, #2
 8003ca2:	441a      	add	r2, r3
 8003ca4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8003ca6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003caa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003cae:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003cb2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003cb6:	b29b      	uxth	r3, r3
 8003cb8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003cba:	687a      	ldr	r2, [r7, #4]
 8003cbc:	683b      	ldr	r3, [r7, #0]
 8003cbe:	781b      	ldrb	r3, [r3, #0]
 8003cc0:	009b      	lsls	r3, r3, #2
 8003cc2:	4413      	add	r3, r2
 8003cc4:	881b      	ldrh	r3, [r3, #0]
 8003cc6:	873b      	strh	r3, [r7, #56]	; 0x38
 8003cc8:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8003cca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d01b      	beq.n	8003d0a <USB_ActivateEndpoint+0x4ce>
 8003cd2:	687a      	ldr	r2, [r7, #4]
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	781b      	ldrb	r3, [r3, #0]
 8003cd8:	009b      	lsls	r3, r3, #2
 8003cda:	4413      	add	r3, r2
 8003cdc:	881b      	ldrh	r3, [r3, #0]
 8003cde:	b29b      	uxth	r3, r3
 8003ce0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ce4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ce8:	86fb      	strh	r3, [r7, #54]	; 0x36
 8003cea:	687a      	ldr	r2, [r7, #4]
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	781b      	ldrb	r3, [r3, #0]
 8003cf0:	009b      	lsls	r3, r3, #2
 8003cf2:	441a      	add	r2, r3
 8003cf4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003cf6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003cfa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003cfe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d02:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003d06:	b29b      	uxth	r3, r3
 8003d08:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003d0a:	687a      	ldr	r2, [r7, #4]
 8003d0c:	683b      	ldr	r3, [r7, #0]
 8003d0e:	781b      	ldrb	r3, [r3, #0]
 8003d10:	009b      	lsls	r3, r3, #2
 8003d12:	4413      	add	r3, r2
 8003d14:	881b      	ldrh	r3, [r3, #0]
 8003d16:	b29b      	uxth	r3, r3
 8003d18:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003d1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d20:	86bb      	strh	r3, [r7, #52]	; 0x34
 8003d22:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8003d24:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8003d28:	86bb      	strh	r3, [r7, #52]	; 0x34
 8003d2a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8003d2c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003d30:	86bb      	strh	r3, [r7, #52]	; 0x34
 8003d32:	687a      	ldr	r2, [r7, #4]
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	781b      	ldrb	r3, [r3, #0]
 8003d38:	009b      	lsls	r3, r3, #2
 8003d3a:	441a      	add	r2, r3
 8003d3c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8003d3e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003d42:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003d46:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d4e:	b29b      	uxth	r3, r3
 8003d50:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003d52:	687a      	ldr	r2, [r7, #4]
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	781b      	ldrb	r3, [r3, #0]
 8003d58:	009b      	lsls	r3, r3, #2
 8003d5a:	4413      	add	r3, r2
 8003d5c:	881b      	ldrh	r3, [r3, #0]
 8003d5e:	b29b      	uxth	r3, r3
 8003d60:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d64:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003d68:	867b      	strh	r3, [r7, #50]	; 0x32
 8003d6a:	687a      	ldr	r2, [r7, #4]
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	781b      	ldrb	r3, [r3, #0]
 8003d70:	009b      	lsls	r3, r3, #2
 8003d72:	441a      	add	r2, r3
 8003d74:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8003d76:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003d7a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003d7e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d86:	b29b      	uxth	r3, r3
 8003d88:	8013      	strh	r3, [r2, #0]
 8003d8a:	e0ba      	b.n	8003f02 <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003d8c:	687a      	ldr	r2, [r7, #4]
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	781b      	ldrb	r3, [r3, #0]
 8003d92:	009b      	lsls	r3, r3, #2
 8003d94:	4413      	add	r3, r2
 8003d96:	881b      	ldrh	r3, [r3, #0]
 8003d98:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8003d9c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003da0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d01d      	beq.n	8003de4 <USB_ActivateEndpoint+0x5a8>
 8003da8:	687a      	ldr	r2, [r7, #4]
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	781b      	ldrb	r3, [r3, #0]
 8003dae:	009b      	lsls	r3, r3, #2
 8003db0:	4413      	add	r3, r2
 8003db2:	881b      	ldrh	r3, [r3, #0]
 8003db4:	b29b      	uxth	r3, r3
 8003db6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003dba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003dbe:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8003dc2:	687a      	ldr	r2, [r7, #4]
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	781b      	ldrb	r3, [r3, #0]
 8003dc8:	009b      	lsls	r3, r3, #2
 8003dca:	441a      	add	r2, r3
 8003dcc:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003dd0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003dd4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003dd8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003ddc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003de0:	b29b      	uxth	r3, r3
 8003de2:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003de4:	687a      	ldr	r2, [r7, #4]
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	781b      	ldrb	r3, [r3, #0]
 8003dea:	009b      	lsls	r3, r3, #2
 8003dec:	4413      	add	r3, r2
 8003dee:	881b      	ldrh	r3, [r3, #0]
 8003df0:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8003df4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8003df8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d01d      	beq.n	8003e3c <USB_ActivateEndpoint+0x600>
 8003e00:	687a      	ldr	r2, [r7, #4]
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	781b      	ldrb	r3, [r3, #0]
 8003e06:	009b      	lsls	r3, r3, #2
 8003e08:	4413      	add	r3, r2
 8003e0a:	881b      	ldrh	r3, [r3, #0]
 8003e0c:	b29b      	uxth	r3, r3
 8003e0e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e16:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8003e1a:	687a      	ldr	r2, [r7, #4]
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	781b      	ldrb	r3, [r3, #0]
 8003e20:	009b      	lsls	r3, r3, #2
 8003e22:	441a      	add	r2, r3
 8003e24:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8003e28:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003e2c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003e30:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e34:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003e38:	b29b      	uxth	r3, r3
 8003e3a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	78db      	ldrb	r3, [r3, #3]
 8003e40:	2b01      	cmp	r3, #1
 8003e42:	d024      	beq.n	8003e8e <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003e44:	687a      	ldr	r2, [r7, #4]
 8003e46:	683b      	ldr	r3, [r7, #0]
 8003e48:	781b      	ldrb	r3, [r3, #0]
 8003e4a:	009b      	lsls	r3, r3, #2
 8003e4c:	4413      	add	r3, r2
 8003e4e:	881b      	ldrh	r3, [r3, #0]
 8003e50:	b29b      	uxth	r3, r3
 8003e52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e56:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003e5a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8003e5e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003e62:	f083 0320 	eor.w	r3, r3, #32
 8003e66:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8003e6a:	687a      	ldr	r2, [r7, #4]
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	781b      	ldrb	r3, [r3, #0]
 8003e70:	009b      	lsls	r3, r3, #2
 8003e72:	441a      	add	r2, r3
 8003e74:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003e78:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003e7c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003e80:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e88:	b29b      	uxth	r3, r3
 8003e8a:	8013      	strh	r3, [r2, #0]
 8003e8c:	e01d      	b.n	8003eca <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003e8e:	687a      	ldr	r2, [r7, #4]
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	781b      	ldrb	r3, [r3, #0]
 8003e94:	009b      	lsls	r3, r3, #2
 8003e96:	4413      	add	r3, r2
 8003e98:	881b      	ldrh	r3, [r3, #0]
 8003e9a:	b29b      	uxth	r3, r3
 8003e9c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ea0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003ea4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8003ea8:	687a      	ldr	r2, [r7, #4]
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	781b      	ldrb	r3, [r3, #0]
 8003eae:	009b      	lsls	r3, r3, #2
 8003eb0:	441a      	add	r2, r3
 8003eb2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8003eb6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003eba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003ebe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003ec2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ec6:	b29b      	uxth	r3, r3
 8003ec8:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003eca:	687a      	ldr	r2, [r7, #4]
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	781b      	ldrb	r3, [r3, #0]
 8003ed0:	009b      	lsls	r3, r3, #2
 8003ed2:	4413      	add	r3, r2
 8003ed4:	881b      	ldrh	r3, [r3, #0]
 8003ed6:	b29b      	uxth	r3, r3
 8003ed8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003edc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ee0:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8003ee2:	687a      	ldr	r2, [r7, #4]
 8003ee4:	683b      	ldr	r3, [r7, #0]
 8003ee6:	781b      	ldrb	r3, [r3, #0]
 8003ee8:	009b      	lsls	r3, r3, #2
 8003eea:	441a      	add	r2, r3
 8003eec:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8003eee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003ef2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003ef6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003efa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003efe:	b29b      	uxth	r3, r3
 8003f00:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8003f02:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8003f06:	4618      	mov	r0, r3
 8003f08:	376c      	adds	r7, #108	; 0x6c
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	bc80      	pop	{r7}
 8003f0e:	4770      	bx	lr

08003f10 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003f10:	b480      	push	{r7}
 8003f12:	b08d      	sub	sp, #52	; 0x34
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
 8003f18:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8003f1a:	683b      	ldr	r3, [r7, #0]
 8003f1c:	7b1b      	ldrb	r3, [r3, #12]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	f040 808e 	bne.w	8004040 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	785b      	ldrb	r3, [r3, #1]
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d044      	beq.n	8003fb6 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003f2c:	687a      	ldr	r2, [r7, #4]
 8003f2e:	683b      	ldr	r3, [r7, #0]
 8003f30:	781b      	ldrb	r3, [r3, #0]
 8003f32:	009b      	lsls	r3, r3, #2
 8003f34:	4413      	add	r3, r2
 8003f36:	881b      	ldrh	r3, [r3, #0]
 8003f38:	81bb      	strh	r3, [r7, #12]
 8003f3a:	89bb      	ldrh	r3, [r7, #12]
 8003f3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d01b      	beq.n	8003f7c <USB_DeactivateEndpoint+0x6c>
 8003f44:	687a      	ldr	r2, [r7, #4]
 8003f46:	683b      	ldr	r3, [r7, #0]
 8003f48:	781b      	ldrb	r3, [r3, #0]
 8003f4a:	009b      	lsls	r3, r3, #2
 8003f4c:	4413      	add	r3, r2
 8003f4e:	881b      	ldrh	r3, [r3, #0]
 8003f50:	b29b      	uxth	r3, r3
 8003f52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f5a:	817b      	strh	r3, [r7, #10]
 8003f5c:	687a      	ldr	r2, [r7, #4]
 8003f5e:	683b      	ldr	r3, [r7, #0]
 8003f60:	781b      	ldrb	r3, [r3, #0]
 8003f62:	009b      	lsls	r3, r3, #2
 8003f64:	441a      	add	r2, r3
 8003f66:	897b      	ldrh	r3, [r7, #10]
 8003f68:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003f6c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003f70:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f74:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003f78:	b29b      	uxth	r3, r3
 8003f7a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003f7c:	687a      	ldr	r2, [r7, #4]
 8003f7e:	683b      	ldr	r3, [r7, #0]
 8003f80:	781b      	ldrb	r3, [r3, #0]
 8003f82:	009b      	lsls	r3, r3, #2
 8003f84:	4413      	add	r3, r2
 8003f86:	881b      	ldrh	r3, [r3, #0]
 8003f88:	b29b      	uxth	r3, r3
 8003f8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f8e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f92:	813b      	strh	r3, [r7, #8]
 8003f94:	687a      	ldr	r2, [r7, #4]
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	781b      	ldrb	r3, [r3, #0]
 8003f9a:	009b      	lsls	r3, r3, #2
 8003f9c:	441a      	add	r2, r3
 8003f9e:	893b      	ldrh	r3, [r7, #8]
 8003fa0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003fa4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003fa8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003fac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003fb0:	b29b      	uxth	r3, r3
 8003fb2:	8013      	strh	r3, [r2, #0]
 8003fb4:	e192      	b.n	80042dc <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003fb6:	687a      	ldr	r2, [r7, #4]
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	781b      	ldrb	r3, [r3, #0]
 8003fbc:	009b      	lsls	r3, r3, #2
 8003fbe:	4413      	add	r3, r2
 8003fc0:	881b      	ldrh	r3, [r3, #0]
 8003fc2:	827b      	strh	r3, [r7, #18]
 8003fc4:	8a7b      	ldrh	r3, [r7, #18]
 8003fc6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d01b      	beq.n	8004006 <USB_DeactivateEndpoint+0xf6>
 8003fce:	687a      	ldr	r2, [r7, #4]
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	781b      	ldrb	r3, [r3, #0]
 8003fd4:	009b      	lsls	r3, r3, #2
 8003fd6:	4413      	add	r3, r2
 8003fd8:	881b      	ldrh	r3, [r3, #0]
 8003fda:	b29b      	uxth	r3, r3
 8003fdc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003fe0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fe4:	823b      	strh	r3, [r7, #16]
 8003fe6:	687a      	ldr	r2, [r7, #4]
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	781b      	ldrb	r3, [r3, #0]
 8003fec:	009b      	lsls	r3, r3, #2
 8003fee:	441a      	add	r2, r3
 8003ff0:	8a3b      	ldrh	r3, [r7, #16]
 8003ff2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003ff6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003ffa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003ffe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004002:	b29b      	uxth	r3, r3
 8004004:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004006:	687a      	ldr	r2, [r7, #4]
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	781b      	ldrb	r3, [r3, #0]
 800400c:	009b      	lsls	r3, r3, #2
 800400e:	4413      	add	r3, r2
 8004010:	881b      	ldrh	r3, [r3, #0]
 8004012:	b29b      	uxth	r3, r3
 8004014:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004018:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800401c:	81fb      	strh	r3, [r7, #14]
 800401e:	687a      	ldr	r2, [r7, #4]
 8004020:	683b      	ldr	r3, [r7, #0]
 8004022:	781b      	ldrb	r3, [r3, #0]
 8004024:	009b      	lsls	r3, r3, #2
 8004026:	441a      	add	r2, r3
 8004028:	89fb      	ldrh	r3, [r7, #14]
 800402a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800402e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004032:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004036:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800403a:	b29b      	uxth	r3, r3
 800403c:	8013      	strh	r3, [r2, #0]
 800403e:	e14d      	b.n	80042dc <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	785b      	ldrb	r3, [r3, #1]
 8004044:	2b00      	cmp	r3, #0
 8004046:	f040 80a5 	bne.w	8004194 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800404a:	687a      	ldr	r2, [r7, #4]
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	781b      	ldrb	r3, [r3, #0]
 8004050:	009b      	lsls	r3, r3, #2
 8004052:	4413      	add	r3, r2
 8004054:	881b      	ldrh	r3, [r3, #0]
 8004056:	843b      	strh	r3, [r7, #32]
 8004058:	8c3b      	ldrh	r3, [r7, #32]
 800405a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800405e:	2b00      	cmp	r3, #0
 8004060:	d01b      	beq.n	800409a <USB_DeactivateEndpoint+0x18a>
 8004062:	687a      	ldr	r2, [r7, #4]
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	781b      	ldrb	r3, [r3, #0]
 8004068:	009b      	lsls	r3, r3, #2
 800406a:	4413      	add	r3, r2
 800406c:	881b      	ldrh	r3, [r3, #0]
 800406e:	b29b      	uxth	r3, r3
 8004070:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004074:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004078:	83fb      	strh	r3, [r7, #30]
 800407a:	687a      	ldr	r2, [r7, #4]
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	781b      	ldrb	r3, [r3, #0]
 8004080:	009b      	lsls	r3, r3, #2
 8004082:	441a      	add	r2, r3
 8004084:	8bfb      	ldrh	r3, [r7, #30]
 8004086:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800408a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800408e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004092:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004096:	b29b      	uxth	r3, r3
 8004098:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800409a:	687a      	ldr	r2, [r7, #4]
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	781b      	ldrb	r3, [r3, #0]
 80040a0:	009b      	lsls	r3, r3, #2
 80040a2:	4413      	add	r3, r2
 80040a4:	881b      	ldrh	r3, [r3, #0]
 80040a6:	83bb      	strh	r3, [r7, #28]
 80040a8:	8bbb      	ldrh	r3, [r7, #28]
 80040aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d01b      	beq.n	80040ea <USB_DeactivateEndpoint+0x1da>
 80040b2:	687a      	ldr	r2, [r7, #4]
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	781b      	ldrb	r3, [r3, #0]
 80040b8:	009b      	lsls	r3, r3, #2
 80040ba:	4413      	add	r3, r2
 80040bc:	881b      	ldrh	r3, [r3, #0]
 80040be:	b29b      	uxth	r3, r3
 80040c0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80040c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040c8:	837b      	strh	r3, [r7, #26]
 80040ca:	687a      	ldr	r2, [r7, #4]
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	781b      	ldrb	r3, [r3, #0]
 80040d0:	009b      	lsls	r3, r3, #2
 80040d2:	441a      	add	r2, r3
 80040d4:	8b7b      	ldrh	r3, [r7, #26]
 80040d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80040da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80040de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80040e2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80040e6:	b29b      	uxth	r3, r3
 80040e8:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80040ea:	687a      	ldr	r2, [r7, #4]
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	781b      	ldrb	r3, [r3, #0]
 80040f0:	009b      	lsls	r3, r3, #2
 80040f2:	4413      	add	r3, r2
 80040f4:	881b      	ldrh	r3, [r3, #0]
 80040f6:	b29b      	uxth	r3, r3
 80040f8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80040fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004100:	833b      	strh	r3, [r7, #24]
 8004102:	687a      	ldr	r2, [r7, #4]
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	781b      	ldrb	r3, [r3, #0]
 8004108:	009b      	lsls	r3, r3, #2
 800410a:	441a      	add	r2, r3
 800410c:	8b3b      	ldrh	r3, [r7, #24]
 800410e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004112:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004116:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800411a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800411e:	b29b      	uxth	r3, r3
 8004120:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004122:	687a      	ldr	r2, [r7, #4]
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	781b      	ldrb	r3, [r3, #0]
 8004128:	009b      	lsls	r3, r3, #2
 800412a:	4413      	add	r3, r2
 800412c:	881b      	ldrh	r3, [r3, #0]
 800412e:	b29b      	uxth	r3, r3
 8004130:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004134:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004138:	82fb      	strh	r3, [r7, #22]
 800413a:	687a      	ldr	r2, [r7, #4]
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	781b      	ldrb	r3, [r3, #0]
 8004140:	009b      	lsls	r3, r3, #2
 8004142:	441a      	add	r2, r3
 8004144:	8afb      	ldrh	r3, [r7, #22]
 8004146:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800414a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800414e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004152:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004156:	b29b      	uxth	r3, r3
 8004158:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800415a:	687a      	ldr	r2, [r7, #4]
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	781b      	ldrb	r3, [r3, #0]
 8004160:	009b      	lsls	r3, r3, #2
 8004162:	4413      	add	r3, r2
 8004164:	881b      	ldrh	r3, [r3, #0]
 8004166:	b29b      	uxth	r3, r3
 8004168:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800416c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004170:	82bb      	strh	r3, [r7, #20]
 8004172:	687a      	ldr	r2, [r7, #4]
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	781b      	ldrb	r3, [r3, #0]
 8004178:	009b      	lsls	r3, r3, #2
 800417a:	441a      	add	r2, r3
 800417c:	8abb      	ldrh	r3, [r7, #20]
 800417e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004182:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004186:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800418a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800418e:	b29b      	uxth	r3, r3
 8004190:	8013      	strh	r3, [r2, #0]
 8004192:	e0a3      	b.n	80042dc <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004194:	687a      	ldr	r2, [r7, #4]
 8004196:	683b      	ldr	r3, [r7, #0]
 8004198:	781b      	ldrb	r3, [r3, #0]
 800419a:	009b      	lsls	r3, r3, #2
 800419c:	4413      	add	r3, r2
 800419e:	881b      	ldrh	r3, [r3, #0]
 80041a0:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80041a2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80041a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d01b      	beq.n	80041e4 <USB_DeactivateEndpoint+0x2d4>
 80041ac:	687a      	ldr	r2, [r7, #4]
 80041ae:	683b      	ldr	r3, [r7, #0]
 80041b0:	781b      	ldrb	r3, [r3, #0]
 80041b2:	009b      	lsls	r3, r3, #2
 80041b4:	4413      	add	r3, r2
 80041b6:	881b      	ldrh	r3, [r3, #0]
 80041b8:	b29b      	uxth	r3, r3
 80041ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80041be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041c2:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80041c4:	687a      	ldr	r2, [r7, #4]
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	781b      	ldrb	r3, [r3, #0]
 80041ca:	009b      	lsls	r3, r3, #2
 80041cc:	441a      	add	r2, r3
 80041ce:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80041d0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80041d4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80041d8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80041dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80041e0:	b29b      	uxth	r3, r3
 80041e2:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80041e4:	687a      	ldr	r2, [r7, #4]
 80041e6:	683b      	ldr	r3, [r7, #0]
 80041e8:	781b      	ldrb	r3, [r3, #0]
 80041ea:	009b      	lsls	r3, r3, #2
 80041ec:	4413      	add	r3, r2
 80041ee:	881b      	ldrh	r3, [r3, #0]
 80041f0:	857b      	strh	r3, [r7, #42]	; 0x2a
 80041f2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80041f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d01b      	beq.n	8004234 <USB_DeactivateEndpoint+0x324>
 80041fc:	687a      	ldr	r2, [r7, #4]
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	781b      	ldrb	r3, [r3, #0]
 8004202:	009b      	lsls	r3, r3, #2
 8004204:	4413      	add	r3, r2
 8004206:	881b      	ldrh	r3, [r3, #0]
 8004208:	b29b      	uxth	r3, r3
 800420a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800420e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004212:	853b      	strh	r3, [r7, #40]	; 0x28
 8004214:	687a      	ldr	r2, [r7, #4]
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	781b      	ldrb	r3, [r3, #0]
 800421a:	009b      	lsls	r3, r3, #2
 800421c:	441a      	add	r2, r3
 800421e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004220:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004224:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004228:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800422c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004230:	b29b      	uxth	r3, r3
 8004232:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8004234:	687a      	ldr	r2, [r7, #4]
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	781b      	ldrb	r3, [r3, #0]
 800423a:	009b      	lsls	r3, r3, #2
 800423c:	4413      	add	r3, r2
 800423e:	881b      	ldrh	r3, [r3, #0]
 8004240:	b29b      	uxth	r3, r3
 8004242:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004246:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800424a:	84fb      	strh	r3, [r7, #38]	; 0x26
 800424c:	687a      	ldr	r2, [r7, #4]
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	781b      	ldrb	r3, [r3, #0]
 8004252:	009b      	lsls	r3, r3, #2
 8004254:	441a      	add	r2, r3
 8004256:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004258:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800425c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004260:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004264:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004268:	b29b      	uxth	r3, r3
 800426a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800426c:	687a      	ldr	r2, [r7, #4]
 800426e:	683b      	ldr	r3, [r7, #0]
 8004270:	781b      	ldrb	r3, [r3, #0]
 8004272:	009b      	lsls	r3, r3, #2
 8004274:	4413      	add	r3, r2
 8004276:	881b      	ldrh	r3, [r3, #0]
 8004278:	b29b      	uxth	r3, r3
 800427a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800427e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004282:	84bb      	strh	r3, [r7, #36]	; 0x24
 8004284:	687a      	ldr	r2, [r7, #4]
 8004286:	683b      	ldr	r3, [r7, #0]
 8004288:	781b      	ldrb	r3, [r3, #0]
 800428a:	009b      	lsls	r3, r3, #2
 800428c:	441a      	add	r2, r3
 800428e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004290:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004294:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004298:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800429c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80042a0:	b29b      	uxth	r3, r3
 80042a2:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80042a4:	687a      	ldr	r2, [r7, #4]
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	781b      	ldrb	r3, [r3, #0]
 80042aa:	009b      	lsls	r3, r3, #2
 80042ac:	4413      	add	r3, r2
 80042ae:	881b      	ldrh	r3, [r3, #0]
 80042b0:	b29b      	uxth	r3, r3
 80042b2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80042b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042ba:	847b      	strh	r3, [r7, #34]	; 0x22
 80042bc:	687a      	ldr	r2, [r7, #4]
 80042be:	683b      	ldr	r3, [r7, #0]
 80042c0:	781b      	ldrb	r3, [r3, #0]
 80042c2:	009b      	lsls	r3, r3, #2
 80042c4:	441a      	add	r2, r3
 80042c6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80042c8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80042cc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80042d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80042d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80042d8:	b29b      	uxth	r3, r3
 80042da:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80042dc:	2300      	movs	r3, #0
}
 80042de:	4618      	mov	r0, r3
 80042e0:	3734      	adds	r7, #52	; 0x34
 80042e2:	46bd      	mov	sp, r7
 80042e4:	bc80      	pop	{r7}
 80042e6:	4770      	bx	lr

080042e8 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b0c4      	sub	sp, #272	; 0x110
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	1d3b      	adds	r3, r7, #4
 80042f0:	6018      	str	r0, [r3, #0]
 80042f2:	463b      	mov	r3, r7
 80042f4:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80042f6:	463b      	mov	r3, r7
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	785b      	ldrb	r3, [r3, #1]
 80042fc:	2b01      	cmp	r3, #1
 80042fe:	f040 8557 	bne.w	8004db0 <USB_EPStartXfer+0xac8>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8004302:	463b      	mov	r3, r7
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	699a      	ldr	r2, [r3, #24]
 8004308:	463b      	mov	r3, r7
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	691b      	ldr	r3, [r3, #16]
 800430e:	429a      	cmp	r2, r3
 8004310:	d905      	bls.n	800431e <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 8004312:	463b      	mov	r3, r7
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	691b      	ldr	r3, [r3, #16]
 8004318:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800431c:	e004      	b.n	8004328 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 800431e:	463b      	mov	r3, r7
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	699b      	ldr	r3, [r3, #24]
 8004324:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8004328:	463b      	mov	r3, r7
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	7b1b      	ldrb	r3, [r3, #12]
 800432e:	2b00      	cmp	r3, #0
 8004330:	d12c      	bne.n	800438c <USB_EPStartXfer+0xa4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8004332:	463b      	mov	r3, r7
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	6959      	ldr	r1, [r3, #20]
 8004338:	463b      	mov	r3, r7
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	88da      	ldrh	r2, [r3, #6]
 800433e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004342:	b29b      	uxth	r3, r3
 8004344:	1d38      	adds	r0, r7, #4
 8004346:	6800      	ldr	r0, [r0, #0]
 8004348:	f001 fa2c 	bl	80057a4 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800434c:	1d3b      	adds	r3, r7, #4
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	617b      	str	r3, [r7, #20]
 8004352:	1d3b      	adds	r3, r7, #4
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800435a:	b29b      	uxth	r3, r3
 800435c:	461a      	mov	r2, r3
 800435e:	697b      	ldr	r3, [r7, #20]
 8004360:	4413      	add	r3, r2
 8004362:	617b      	str	r3, [r7, #20]
 8004364:	463b      	mov	r3, r7
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	781b      	ldrb	r3, [r3, #0]
 800436a:	011a      	lsls	r2, r3, #4
 800436c:	697b      	ldr	r3, [r7, #20]
 800436e:	4413      	add	r3, r2
 8004370:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8004374:	f107 0310 	add.w	r3, r7, #16
 8004378:	601a      	str	r2, [r3, #0]
 800437a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800437e:	b29a      	uxth	r2, r3
 8004380:	f107 0310 	add.w	r3, r7, #16
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	801a      	strh	r2, [r3, #0]
 8004388:	f000 bcdd 	b.w	8004d46 <USB_EPStartXfer+0xa5e>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800438c:	463b      	mov	r3, r7
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	78db      	ldrb	r3, [r3, #3]
 8004392:	2b02      	cmp	r3, #2
 8004394:	f040 8347 	bne.w	8004a26 <USB_EPStartXfer+0x73e>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8004398:	463b      	mov	r3, r7
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	6a1a      	ldr	r2, [r3, #32]
 800439e:	463b      	mov	r3, r7
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	691b      	ldr	r3, [r3, #16]
 80043a4:	429a      	cmp	r2, r3
 80043a6:	f240 82eb 	bls.w	8004980 <USB_EPStartXfer+0x698>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 80043aa:	1d3b      	adds	r3, r7, #4
 80043ac:	681a      	ldr	r2, [r3, #0]
 80043ae:	463b      	mov	r3, r7
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	781b      	ldrb	r3, [r3, #0]
 80043b4:	009b      	lsls	r3, r3, #2
 80043b6:	4413      	add	r3, r2
 80043b8:	881b      	ldrh	r3, [r3, #0]
 80043ba:	b29b      	uxth	r3, r3
 80043bc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80043c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043c4:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 80043c8:	1d3b      	adds	r3, r7, #4
 80043ca:	681a      	ldr	r2, [r3, #0]
 80043cc:	463b      	mov	r3, r7
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	781b      	ldrb	r3, [r3, #0]
 80043d2:	009b      	lsls	r3, r3, #2
 80043d4:	441a      	add	r2, r3
 80043d6:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 80043da:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80043de:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80043e2:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80043e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80043ea:	b29b      	uxth	r3, r3
 80043ec:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80043ee:	463b      	mov	r3, r7
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	6a1a      	ldr	r2, [r3, #32]
 80043f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80043f8:	1ad2      	subs	r2, r2, r3
 80043fa:	463b      	mov	r3, r7
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004400:	1d3b      	adds	r3, r7, #4
 8004402:	681a      	ldr	r2, [r3, #0]
 8004404:	463b      	mov	r3, r7
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	781b      	ldrb	r3, [r3, #0]
 800440a:	009b      	lsls	r3, r3, #2
 800440c:	4413      	add	r3, r2
 800440e:	881b      	ldrh	r3, [r3, #0]
 8004410:	b29b      	uxth	r3, r3
 8004412:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004416:	2b00      	cmp	r3, #0
 8004418:	f000 8159 	beq.w	80046ce <USB_EPStartXfer+0x3e6>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800441c:	1d3b      	adds	r3, r7, #4
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	637b      	str	r3, [r7, #52]	; 0x34
 8004422:	463b      	mov	r3, r7
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	785b      	ldrb	r3, [r3, #1]
 8004428:	2b00      	cmp	r3, #0
 800442a:	d164      	bne.n	80044f6 <USB_EPStartXfer+0x20e>
 800442c:	1d3b      	adds	r3, r7, #4
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004432:	1d3b      	adds	r3, r7, #4
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800443a:	b29b      	uxth	r3, r3
 800443c:	461a      	mov	r2, r3
 800443e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004440:	4413      	add	r3, r2
 8004442:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004444:	463b      	mov	r3, r7
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	781b      	ldrb	r3, [r3, #0]
 800444a:	011a      	lsls	r2, r3, #4
 800444c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800444e:	4413      	add	r3, r2
 8004450:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004454:	62bb      	str	r3, [r7, #40]	; 0x28
 8004456:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800445a:	2b00      	cmp	r3, #0
 800445c:	d112      	bne.n	8004484 <USB_EPStartXfer+0x19c>
 800445e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004460:	881b      	ldrh	r3, [r3, #0]
 8004462:	b29b      	uxth	r3, r3
 8004464:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004468:	b29a      	uxth	r2, r3
 800446a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800446c:	801a      	strh	r2, [r3, #0]
 800446e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004470:	881b      	ldrh	r3, [r3, #0]
 8004472:	b29b      	uxth	r3, r3
 8004474:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004478:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800447c:	b29a      	uxth	r2, r3
 800447e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004480:	801a      	strh	r2, [r3, #0]
 8004482:	e054      	b.n	800452e <USB_EPStartXfer+0x246>
 8004484:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004488:	2b3e      	cmp	r3, #62	; 0x3e
 800448a:	d817      	bhi.n	80044bc <USB_EPStartXfer+0x1d4>
 800448c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004490:	085b      	lsrs	r3, r3, #1
 8004492:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004496:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800449a:	f003 0301 	and.w	r3, r3, #1
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d004      	beq.n	80044ac <USB_EPStartXfer+0x1c4>
 80044a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80044a6:	3301      	adds	r3, #1
 80044a8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80044ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80044b0:	b29b      	uxth	r3, r3
 80044b2:	029b      	lsls	r3, r3, #10
 80044b4:	b29a      	uxth	r2, r3
 80044b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044b8:	801a      	strh	r2, [r3, #0]
 80044ba:	e038      	b.n	800452e <USB_EPStartXfer+0x246>
 80044bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80044c0:	095b      	lsrs	r3, r3, #5
 80044c2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80044c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80044ca:	f003 031f 	and.w	r3, r3, #31
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d104      	bne.n	80044dc <USB_EPStartXfer+0x1f4>
 80044d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80044d6:	3b01      	subs	r3, #1
 80044d8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80044dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80044e0:	b29b      	uxth	r3, r3
 80044e2:	029b      	lsls	r3, r3, #10
 80044e4:	b29b      	uxth	r3, r3
 80044e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80044ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80044ee:	b29a      	uxth	r2, r3
 80044f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044f2:	801a      	strh	r2, [r3, #0]
 80044f4:	e01b      	b.n	800452e <USB_EPStartXfer+0x246>
 80044f6:	463b      	mov	r3, r7
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	785b      	ldrb	r3, [r3, #1]
 80044fc:	2b01      	cmp	r3, #1
 80044fe:	d116      	bne.n	800452e <USB_EPStartXfer+0x246>
 8004500:	1d3b      	adds	r3, r7, #4
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004508:	b29b      	uxth	r3, r3
 800450a:	461a      	mov	r2, r3
 800450c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800450e:	4413      	add	r3, r2
 8004510:	637b      	str	r3, [r7, #52]	; 0x34
 8004512:	463b      	mov	r3, r7
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	781b      	ldrb	r3, [r3, #0]
 8004518:	011a      	lsls	r2, r3, #4
 800451a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800451c:	4413      	add	r3, r2
 800451e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004522:	633b      	str	r3, [r7, #48]	; 0x30
 8004524:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004528:	b29a      	uxth	r2, r3
 800452a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800452c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800452e:	463b      	mov	r3, r7
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	895b      	ldrh	r3, [r3, #10]
 8004534:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004538:	463b      	mov	r3, r7
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	6959      	ldr	r1, [r3, #20]
 800453e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004542:	b29b      	uxth	r3, r3
 8004544:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8004548:	1d38      	adds	r0, r7, #4
 800454a:	6800      	ldr	r0, [r0, #0]
 800454c:	f001 f92a 	bl	80057a4 <USB_WritePMA>
            ep->xfer_buff += len;
 8004550:	463b      	mov	r3, r7
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	695a      	ldr	r2, [r3, #20]
 8004556:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800455a:	441a      	add	r2, r3
 800455c:	463b      	mov	r3, r7
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8004562:	463b      	mov	r3, r7
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	6a1a      	ldr	r2, [r3, #32]
 8004568:	463b      	mov	r3, r7
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	691b      	ldr	r3, [r3, #16]
 800456e:	429a      	cmp	r2, r3
 8004570:	d909      	bls.n	8004586 <USB_EPStartXfer+0x29e>
            {
              ep->xfer_len_db -= len;
 8004572:	463b      	mov	r3, r7
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	6a1a      	ldr	r2, [r3, #32]
 8004578:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800457c:	1ad2      	subs	r2, r2, r3
 800457e:	463b      	mov	r3, r7
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	621a      	str	r2, [r3, #32]
 8004584:	e008      	b.n	8004598 <USB_EPStartXfer+0x2b0>
            }
            else
            {
              len = ep->xfer_len_db;
 8004586:	463b      	mov	r3, r7
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	6a1b      	ldr	r3, [r3, #32]
 800458c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 8004590:	463b      	mov	r3, r7
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	2200      	movs	r2, #0
 8004596:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004598:	463b      	mov	r3, r7
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	785b      	ldrb	r3, [r3, #1]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d164      	bne.n	800466c <USB_EPStartXfer+0x384>
 80045a2:	1d3b      	adds	r3, r7, #4
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	61fb      	str	r3, [r7, #28]
 80045a8:	1d3b      	adds	r3, r7, #4
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80045b0:	b29b      	uxth	r3, r3
 80045b2:	461a      	mov	r2, r3
 80045b4:	69fb      	ldr	r3, [r7, #28]
 80045b6:	4413      	add	r3, r2
 80045b8:	61fb      	str	r3, [r7, #28]
 80045ba:	463b      	mov	r3, r7
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	781b      	ldrb	r3, [r3, #0]
 80045c0:	011a      	lsls	r2, r3, #4
 80045c2:	69fb      	ldr	r3, [r7, #28]
 80045c4:	4413      	add	r3, r2
 80045c6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80045ca:	61bb      	str	r3, [r7, #24]
 80045cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d112      	bne.n	80045fa <USB_EPStartXfer+0x312>
 80045d4:	69bb      	ldr	r3, [r7, #24]
 80045d6:	881b      	ldrh	r3, [r3, #0]
 80045d8:	b29b      	uxth	r3, r3
 80045da:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80045de:	b29a      	uxth	r2, r3
 80045e0:	69bb      	ldr	r3, [r7, #24]
 80045e2:	801a      	strh	r2, [r3, #0]
 80045e4:	69bb      	ldr	r3, [r7, #24]
 80045e6:	881b      	ldrh	r3, [r3, #0]
 80045e8:	b29b      	uxth	r3, r3
 80045ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80045ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80045f2:	b29a      	uxth	r2, r3
 80045f4:	69bb      	ldr	r3, [r7, #24]
 80045f6:	801a      	strh	r2, [r3, #0]
 80045f8:	e057      	b.n	80046aa <USB_EPStartXfer+0x3c2>
 80045fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80045fe:	2b3e      	cmp	r3, #62	; 0x3e
 8004600:	d817      	bhi.n	8004632 <USB_EPStartXfer+0x34a>
 8004602:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004606:	085b      	lsrs	r3, r3, #1
 8004608:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800460c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004610:	f003 0301 	and.w	r3, r3, #1
 8004614:	2b00      	cmp	r3, #0
 8004616:	d004      	beq.n	8004622 <USB_EPStartXfer+0x33a>
 8004618:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800461c:	3301      	adds	r3, #1
 800461e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004622:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8004626:	b29b      	uxth	r3, r3
 8004628:	029b      	lsls	r3, r3, #10
 800462a:	b29a      	uxth	r2, r3
 800462c:	69bb      	ldr	r3, [r7, #24]
 800462e:	801a      	strh	r2, [r3, #0]
 8004630:	e03b      	b.n	80046aa <USB_EPStartXfer+0x3c2>
 8004632:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004636:	095b      	lsrs	r3, r3, #5
 8004638:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800463c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004640:	f003 031f 	and.w	r3, r3, #31
 8004644:	2b00      	cmp	r3, #0
 8004646:	d104      	bne.n	8004652 <USB_EPStartXfer+0x36a>
 8004648:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800464c:	3b01      	subs	r3, #1
 800464e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004652:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8004656:	b29b      	uxth	r3, r3
 8004658:	029b      	lsls	r3, r3, #10
 800465a:	b29b      	uxth	r3, r3
 800465c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004660:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004664:	b29a      	uxth	r2, r3
 8004666:	69bb      	ldr	r3, [r7, #24]
 8004668:	801a      	strh	r2, [r3, #0]
 800466a:	e01e      	b.n	80046aa <USB_EPStartXfer+0x3c2>
 800466c:	463b      	mov	r3, r7
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	785b      	ldrb	r3, [r3, #1]
 8004672:	2b01      	cmp	r3, #1
 8004674:	d119      	bne.n	80046aa <USB_EPStartXfer+0x3c2>
 8004676:	1d3b      	adds	r3, r7, #4
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	627b      	str	r3, [r7, #36]	; 0x24
 800467c:	1d3b      	adds	r3, r7, #4
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004684:	b29b      	uxth	r3, r3
 8004686:	461a      	mov	r2, r3
 8004688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800468a:	4413      	add	r3, r2
 800468c:	627b      	str	r3, [r7, #36]	; 0x24
 800468e:	463b      	mov	r3, r7
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	781b      	ldrb	r3, [r3, #0]
 8004694:	011a      	lsls	r2, r3, #4
 8004696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004698:	4413      	add	r3, r2
 800469a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800469e:	623b      	str	r3, [r7, #32]
 80046a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80046a4:	b29a      	uxth	r2, r3
 80046a6:	6a3b      	ldr	r3, [r7, #32]
 80046a8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80046aa:	463b      	mov	r3, r7
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	891b      	ldrh	r3, [r3, #8]
 80046b0:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80046b4:	463b      	mov	r3, r7
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	6959      	ldr	r1, [r3, #20]
 80046ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80046be:	b29b      	uxth	r3, r3
 80046c0:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 80046c4:	1d38      	adds	r0, r7, #4
 80046c6:	6800      	ldr	r0, [r0, #0]
 80046c8:	f001 f86c 	bl	80057a4 <USB_WritePMA>
 80046cc:	e33b      	b.n	8004d46 <USB_EPStartXfer+0xa5e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80046ce:	463b      	mov	r3, r7
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	785b      	ldrb	r3, [r3, #1]
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d164      	bne.n	80047a2 <USB_EPStartXfer+0x4ba>
 80046d8:	1d3b      	adds	r3, r7, #4
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80046de:	1d3b      	adds	r3, r7, #4
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80046e6:	b29b      	uxth	r3, r3
 80046e8:	461a      	mov	r2, r3
 80046ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80046ec:	4413      	add	r3, r2
 80046ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 80046f0:	463b      	mov	r3, r7
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	781b      	ldrb	r3, [r3, #0]
 80046f6:	011a      	lsls	r2, r3, #4
 80046f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80046fa:	4413      	add	r3, r2
 80046fc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004700:	64bb      	str	r3, [r7, #72]	; 0x48
 8004702:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004706:	2b00      	cmp	r3, #0
 8004708:	d112      	bne.n	8004730 <USB_EPStartXfer+0x448>
 800470a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800470c:	881b      	ldrh	r3, [r3, #0]
 800470e:	b29b      	uxth	r3, r3
 8004710:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004714:	b29a      	uxth	r2, r3
 8004716:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004718:	801a      	strh	r2, [r3, #0]
 800471a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800471c:	881b      	ldrh	r3, [r3, #0]
 800471e:	b29b      	uxth	r3, r3
 8004720:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004724:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004728:	b29a      	uxth	r2, r3
 800472a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800472c:	801a      	strh	r2, [r3, #0]
 800472e:	e057      	b.n	80047e0 <USB_EPStartXfer+0x4f8>
 8004730:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004734:	2b3e      	cmp	r3, #62	; 0x3e
 8004736:	d817      	bhi.n	8004768 <USB_EPStartXfer+0x480>
 8004738:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800473c:	085b      	lsrs	r3, r3, #1
 800473e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004742:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004746:	f003 0301 	and.w	r3, r3, #1
 800474a:	2b00      	cmp	r3, #0
 800474c:	d004      	beq.n	8004758 <USB_EPStartXfer+0x470>
 800474e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004752:	3301      	adds	r3, #1
 8004754:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004758:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800475c:	b29b      	uxth	r3, r3
 800475e:	029b      	lsls	r3, r3, #10
 8004760:	b29a      	uxth	r2, r3
 8004762:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004764:	801a      	strh	r2, [r3, #0]
 8004766:	e03b      	b.n	80047e0 <USB_EPStartXfer+0x4f8>
 8004768:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800476c:	095b      	lsrs	r3, r3, #5
 800476e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004772:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004776:	f003 031f 	and.w	r3, r3, #31
 800477a:	2b00      	cmp	r3, #0
 800477c:	d104      	bne.n	8004788 <USB_EPStartXfer+0x4a0>
 800477e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004782:	3b01      	subs	r3, #1
 8004784:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004788:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800478c:	b29b      	uxth	r3, r3
 800478e:	029b      	lsls	r3, r3, #10
 8004790:	b29b      	uxth	r3, r3
 8004792:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004796:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800479a:	b29a      	uxth	r2, r3
 800479c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800479e:	801a      	strh	r2, [r3, #0]
 80047a0:	e01e      	b.n	80047e0 <USB_EPStartXfer+0x4f8>
 80047a2:	463b      	mov	r3, r7
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	785b      	ldrb	r3, [r3, #1]
 80047a8:	2b01      	cmp	r3, #1
 80047aa:	d119      	bne.n	80047e0 <USB_EPStartXfer+0x4f8>
 80047ac:	1d3b      	adds	r3, r7, #4
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	657b      	str	r3, [r7, #84]	; 0x54
 80047b2:	1d3b      	adds	r3, r7, #4
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80047ba:	b29b      	uxth	r3, r3
 80047bc:	461a      	mov	r2, r3
 80047be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80047c0:	4413      	add	r3, r2
 80047c2:	657b      	str	r3, [r7, #84]	; 0x54
 80047c4:	463b      	mov	r3, r7
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	781b      	ldrb	r3, [r3, #0]
 80047ca:	011a      	lsls	r2, r3, #4
 80047cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80047ce:	4413      	add	r3, r2
 80047d0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80047d4:	653b      	str	r3, [r7, #80]	; 0x50
 80047d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80047da:	b29a      	uxth	r2, r3
 80047dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80047de:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80047e0:	463b      	mov	r3, r7
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	891b      	ldrh	r3, [r3, #8]
 80047e6:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80047ea:	463b      	mov	r3, r7
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	6959      	ldr	r1, [r3, #20]
 80047f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80047f4:	b29b      	uxth	r3, r3
 80047f6:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 80047fa:	1d38      	adds	r0, r7, #4
 80047fc:	6800      	ldr	r0, [r0, #0]
 80047fe:	f000 ffd1 	bl	80057a4 <USB_WritePMA>
            ep->xfer_buff += len;
 8004802:	463b      	mov	r3, r7
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	695a      	ldr	r2, [r3, #20]
 8004808:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800480c:	441a      	add	r2, r3
 800480e:	463b      	mov	r3, r7
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8004814:	463b      	mov	r3, r7
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	6a1a      	ldr	r2, [r3, #32]
 800481a:	463b      	mov	r3, r7
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	691b      	ldr	r3, [r3, #16]
 8004820:	429a      	cmp	r2, r3
 8004822:	d909      	bls.n	8004838 <USB_EPStartXfer+0x550>
            {
              ep->xfer_len_db -= len;
 8004824:	463b      	mov	r3, r7
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	6a1a      	ldr	r2, [r3, #32]
 800482a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800482e:	1ad2      	subs	r2, r2, r3
 8004830:	463b      	mov	r3, r7
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	621a      	str	r2, [r3, #32]
 8004836:	e008      	b.n	800484a <USB_EPStartXfer+0x562>
            }
            else
            {
              len = ep->xfer_len_db;
 8004838:	463b      	mov	r3, r7
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	6a1b      	ldr	r3, [r3, #32]
 800483e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 8004842:	463b      	mov	r3, r7
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	2200      	movs	r2, #0
 8004848:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800484a:	1d3b      	adds	r3, r7, #4
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	647b      	str	r3, [r7, #68]	; 0x44
 8004850:	463b      	mov	r3, r7
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	785b      	ldrb	r3, [r3, #1]
 8004856:	2b00      	cmp	r3, #0
 8004858:	d164      	bne.n	8004924 <USB_EPStartXfer+0x63c>
 800485a:	1d3b      	adds	r3, r7, #4
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004860:	1d3b      	adds	r3, r7, #4
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004868:	b29b      	uxth	r3, r3
 800486a:	461a      	mov	r2, r3
 800486c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800486e:	4413      	add	r3, r2
 8004870:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004872:	463b      	mov	r3, r7
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	781b      	ldrb	r3, [r3, #0]
 8004878:	011a      	lsls	r2, r3, #4
 800487a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800487c:	4413      	add	r3, r2
 800487e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004882:	63bb      	str	r3, [r7, #56]	; 0x38
 8004884:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004888:	2b00      	cmp	r3, #0
 800488a:	d112      	bne.n	80048b2 <USB_EPStartXfer+0x5ca>
 800488c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800488e:	881b      	ldrh	r3, [r3, #0]
 8004890:	b29b      	uxth	r3, r3
 8004892:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004896:	b29a      	uxth	r2, r3
 8004898:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800489a:	801a      	strh	r2, [r3, #0]
 800489c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800489e:	881b      	ldrh	r3, [r3, #0]
 80048a0:	b29b      	uxth	r3, r3
 80048a2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80048a6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80048aa:	b29a      	uxth	r2, r3
 80048ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048ae:	801a      	strh	r2, [r3, #0]
 80048b0:	e054      	b.n	800495c <USB_EPStartXfer+0x674>
 80048b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80048b6:	2b3e      	cmp	r3, #62	; 0x3e
 80048b8:	d817      	bhi.n	80048ea <USB_EPStartXfer+0x602>
 80048ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80048be:	085b      	lsrs	r3, r3, #1
 80048c0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80048c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80048c8:	f003 0301 	and.w	r3, r3, #1
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d004      	beq.n	80048da <USB_EPStartXfer+0x5f2>
 80048d0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80048d4:	3301      	adds	r3, #1
 80048d6:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80048da:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80048de:	b29b      	uxth	r3, r3
 80048e0:	029b      	lsls	r3, r3, #10
 80048e2:	b29a      	uxth	r2, r3
 80048e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048e6:	801a      	strh	r2, [r3, #0]
 80048e8:	e038      	b.n	800495c <USB_EPStartXfer+0x674>
 80048ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80048ee:	095b      	lsrs	r3, r3, #5
 80048f0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80048f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80048f8:	f003 031f 	and.w	r3, r3, #31
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d104      	bne.n	800490a <USB_EPStartXfer+0x622>
 8004900:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004904:	3b01      	subs	r3, #1
 8004906:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800490a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800490e:	b29b      	uxth	r3, r3
 8004910:	029b      	lsls	r3, r3, #10
 8004912:	b29b      	uxth	r3, r3
 8004914:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004918:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800491c:	b29a      	uxth	r2, r3
 800491e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004920:	801a      	strh	r2, [r3, #0]
 8004922:	e01b      	b.n	800495c <USB_EPStartXfer+0x674>
 8004924:	463b      	mov	r3, r7
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	785b      	ldrb	r3, [r3, #1]
 800492a:	2b01      	cmp	r3, #1
 800492c:	d116      	bne.n	800495c <USB_EPStartXfer+0x674>
 800492e:	1d3b      	adds	r3, r7, #4
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004936:	b29b      	uxth	r3, r3
 8004938:	461a      	mov	r2, r3
 800493a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800493c:	4413      	add	r3, r2
 800493e:	647b      	str	r3, [r7, #68]	; 0x44
 8004940:	463b      	mov	r3, r7
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	781b      	ldrb	r3, [r3, #0]
 8004946:	011a      	lsls	r2, r3, #4
 8004948:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800494a:	4413      	add	r3, r2
 800494c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004950:	643b      	str	r3, [r7, #64]	; 0x40
 8004952:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004956:	b29a      	uxth	r2, r3
 8004958:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800495a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800495c:	463b      	mov	r3, r7
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	895b      	ldrh	r3, [r3, #10]
 8004962:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004966:	463b      	mov	r3, r7
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	6959      	ldr	r1, [r3, #20]
 800496c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004970:	b29b      	uxth	r3, r3
 8004972:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8004976:	1d38      	adds	r0, r7, #4
 8004978:	6800      	ldr	r0, [r0, #0]
 800497a:	f000 ff13 	bl	80057a4 <USB_WritePMA>
 800497e:	e1e2      	b.n	8004d46 <USB_EPStartXfer+0xa5e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8004980:	463b      	mov	r3, r7
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	6a1b      	ldr	r3, [r3, #32]
 8004986:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 800498a:	1d3b      	adds	r3, r7, #4
 800498c:	681a      	ldr	r2, [r3, #0]
 800498e:	463b      	mov	r3, r7
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	781b      	ldrb	r3, [r3, #0]
 8004994:	009b      	lsls	r3, r3, #2
 8004996:	4413      	add	r3, r2
 8004998:	881b      	ldrh	r3, [r3, #0]
 800499a:	b29b      	uxth	r3, r3
 800499c:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80049a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049a4:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 80049a8:	1d3b      	adds	r3, r7, #4
 80049aa:	681a      	ldr	r2, [r3, #0]
 80049ac:	463b      	mov	r3, r7
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	781b      	ldrb	r3, [r3, #0]
 80049b2:	009b      	lsls	r3, r3, #2
 80049b4:	441a      	add	r2, r3
 80049b6:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80049ba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80049be:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80049c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80049c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049ca:	b29b      	uxth	r3, r3
 80049cc:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80049ce:	1d3b      	adds	r3, r7, #4
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	663b      	str	r3, [r7, #96]	; 0x60
 80049d4:	1d3b      	adds	r3, r7, #4
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80049dc:	b29b      	uxth	r3, r3
 80049de:	461a      	mov	r2, r3
 80049e0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80049e2:	4413      	add	r3, r2
 80049e4:	663b      	str	r3, [r7, #96]	; 0x60
 80049e6:	463b      	mov	r3, r7
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	781b      	ldrb	r3, [r3, #0]
 80049ec:	011a      	lsls	r2, r3, #4
 80049ee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80049f0:	4413      	add	r3, r2
 80049f2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80049f6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80049f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80049fc:	b29a      	uxth	r2, r3
 80049fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004a00:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8004a02:	463b      	mov	r3, r7
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	891b      	ldrh	r3, [r3, #8]
 8004a08:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004a0c:	463b      	mov	r3, r7
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	6959      	ldr	r1, [r3, #20]
 8004a12:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004a16:	b29b      	uxth	r3, r3
 8004a18:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8004a1c:	1d38      	adds	r0, r7, #4
 8004a1e:	6800      	ldr	r0, [r0, #0]
 8004a20:	f000 fec0 	bl	80057a4 <USB_WritePMA>
 8004a24:	e18f      	b.n	8004d46 <USB_EPStartXfer+0xa5e>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* Write the data to the USB endpoint */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004a26:	1d3b      	adds	r3, r7, #4
 8004a28:	681a      	ldr	r2, [r3, #0]
 8004a2a:	463b      	mov	r3, r7
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	781b      	ldrb	r3, [r3, #0]
 8004a30:	009b      	lsls	r3, r3, #2
 8004a32:	4413      	add	r3, r2
 8004a34:	881b      	ldrh	r3, [r3, #0]
 8004a36:	b29b      	uxth	r3, r3
 8004a38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	f000 808f 	beq.w	8004b60 <USB_EPStartXfer+0x878>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004a42:	1d3b      	adds	r3, r7, #4
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	67bb      	str	r3, [r7, #120]	; 0x78
 8004a48:	463b      	mov	r3, r7
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	785b      	ldrb	r3, [r3, #1]
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d164      	bne.n	8004b1c <USB_EPStartXfer+0x834>
 8004a52:	1d3b      	adds	r3, r7, #4
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	673b      	str	r3, [r7, #112]	; 0x70
 8004a58:	1d3b      	adds	r3, r7, #4
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004a60:	b29b      	uxth	r3, r3
 8004a62:	461a      	mov	r2, r3
 8004a64:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004a66:	4413      	add	r3, r2
 8004a68:	673b      	str	r3, [r7, #112]	; 0x70
 8004a6a:	463b      	mov	r3, r7
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	781b      	ldrb	r3, [r3, #0]
 8004a70:	011a      	lsls	r2, r3, #4
 8004a72:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004a74:	4413      	add	r3, r2
 8004a76:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004a7a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004a7c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d112      	bne.n	8004aaa <USB_EPStartXfer+0x7c2>
 8004a84:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a86:	881b      	ldrh	r3, [r3, #0]
 8004a88:	b29b      	uxth	r3, r3
 8004a8a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004a8e:	b29a      	uxth	r2, r3
 8004a90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a92:	801a      	strh	r2, [r3, #0]
 8004a94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a96:	881b      	ldrh	r3, [r3, #0]
 8004a98:	b29b      	uxth	r3, r3
 8004a9a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004a9e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004aa2:	b29a      	uxth	r2, r3
 8004aa4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004aa6:	801a      	strh	r2, [r3, #0]
 8004aa8:	e054      	b.n	8004b54 <USB_EPStartXfer+0x86c>
 8004aaa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004aae:	2b3e      	cmp	r3, #62	; 0x3e
 8004ab0:	d817      	bhi.n	8004ae2 <USB_EPStartXfer+0x7fa>
 8004ab2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004ab6:	085b      	lsrs	r3, r3, #1
 8004ab8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8004abc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004ac0:	f003 0301 	and.w	r3, r3, #1
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d004      	beq.n	8004ad2 <USB_EPStartXfer+0x7ea>
 8004ac8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004acc:	3301      	adds	r3, #1
 8004ace:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8004ad2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ad6:	b29b      	uxth	r3, r3
 8004ad8:	029b      	lsls	r3, r3, #10
 8004ada:	b29a      	uxth	r2, r3
 8004adc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ade:	801a      	strh	r2, [r3, #0]
 8004ae0:	e038      	b.n	8004b54 <USB_EPStartXfer+0x86c>
 8004ae2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004ae6:	095b      	lsrs	r3, r3, #5
 8004ae8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8004aec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004af0:	f003 031f 	and.w	r3, r3, #31
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d104      	bne.n	8004b02 <USB_EPStartXfer+0x81a>
 8004af8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004afc:	3b01      	subs	r3, #1
 8004afe:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8004b02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b06:	b29b      	uxth	r3, r3
 8004b08:	029b      	lsls	r3, r3, #10
 8004b0a:	b29b      	uxth	r3, r3
 8004b0c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004b10:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004b14:	b29a      	uxth	r2, r3
 8004b16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b18:	801a      	strh	r2, [r3, #0]
 8004b1a:	e01b      	b.n	8004b54 <USB_EPStartXfer+0x86c>
 8004b1c:	463b      	mov	r3, r7
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	785b      	ldrb	r3, [r3, #1]
 8004b22:	2b01      	cmp	r3, #1
 8004b24:	d116      	bne.n	8004b54 <USB_EPStartXfer+0x86c>
 8004b26:	1d3b      	adds	r3, r7, #4
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004b2e:	b29b      	uxth	r3, r3
 8004b30:	461a      	mov	r2, r3
 8004b32:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004b34:	4413      	add	r3, r2
 8004b36:	67bb      	str	r3, [r7, #120]	; 0x78
 8004b38:	463b      	mov	r3, r7
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	781b      	ldrb	r3, [r3, #0]
 8004b3e:	011a      	lsls	r2, r3, #4
 8004b40:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004b42:	4413      	add	r3, r2
 8004b44:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004b48:	677b      	str	r3, [r7, #116]	; 0x74
 8004b4a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004b4e:	b29a      	uxth	r2, r3
 8004b50:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004b52:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8004b54:	463b      	mov	r3, r7
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	895b      	ldrh	r3, [r3, #10]
 8004b5a:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
 8004b5e:	e097      	b.n	8004c90 <USB_EPStartXfer+0x9a8>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004b60:	463b      	mov	r3, r7
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	785b      	ldrb	r3, [r3, #1]
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d168      	bne.n	8004c3c <USB_EPStartXfer+0x954>
 8004b6a:	1d3b      	adds	r3, r7, #4
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004b72:	1d3b      	adds	r3, r7, #4
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004b7a:	b29b      	uxth	r3, r3
 8004b7c:	461a      	mov	r2, r3
 8004b7e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004b82:	4413      	add	r3, r2
 8004b84:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004b88:	463b      	mov	r3, r7
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	781b      	ldrb	r3, [r3, #0]
 8004b8e:	011a      	lsls	r2, r3, #4
 8004b90:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004b94:	4413      	add	r3, r2
 8004b96:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004b9a:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004b9c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d112      	bne.n	8004bca <USB_EPStartXfer+0x8e2>
 8004ba4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004ba6:	881b      	ldrh	r3, [r3, #0]
 8004ba8:	b29b      	uxth	r3, r3
 8004baa:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004bae:	b29a      	uxth	r2, r3
 8004bb0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004bb2:	801a      	strh	r2, [r3, #0]
 8004bb4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004bb6:	881b      	ldrh	r3, [r3, #0]
 8004bb8:	b29b      	uxth	r3, r3
 8004bba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004bbe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004bc2:	b29a      	uxth	r2, r3
 8004bc4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004bc6:	801a      	strh	r2, [r3, #0]
 8004bc8:	e05d      	b.n	8004c86 <USB_EPStartXfer+0x99e>
 8004bca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004bce:	2b3e      	cmp	r3, #62	; 0x3e
 8004bd0:	d817      	bhi.n	8004c02 <USB_EPStartXfer+0x91a>
 8004bd2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004bd6:	085b      	lsrs	r3, r3, #1
 8004bd8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8004bdc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004be0:	f003 0301 	and.w	r3, r3, #1
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d004      	beq.n	8004bf2 <USB_EPStartXfer+0x90a>
 8004be8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004bec:	3301      	adds	r3, #1
 8004bee:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8004bf2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004bf6:	b29b      	uxth	r3, r3
 8004bf8:	029b      	lsls	r3, r3, #10
 8004bfa:	b29a      	uxth	r2, r3
 8004bfc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004bfe:	801a      	strh	r2, [r3, #0]
 8004c00:	e041      	b.n	8004c86 <USB_EPStartXfer+0x99e>
 8004c02:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004c06:	095b      	lsrs	r3, r3, #5
 8004c08:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8004c0c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004c10:	f003 031f 	and.w	r3, r3, #31
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d104      	bne.n	8004c22 <USB_EPStartXfer+0x93a>
 8004c18:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004c1c:	3b01      	subs	r3, #1
 8004c1e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8004c22:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004c26:	b29b      	uxth	r3, r3
 8004c28:	029b      	lsls	r3, r3, #10
 8004c2a:	b29b      	uxth	r3, r3
 8004c2c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004c30:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004c34:	b29a      	uxth	r2, r3
 8004c36:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004c38:	801a      	strh	r2, [r3, #0]
 8004c3a:	e024      	b.n	8004c86 <USB_EPStartXfer+0x99e>
 8004c3c:	463b      	mov	r3, r7
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	785b      	ldrb	r3, [r3, #1]
 8004c42:	2b01      	cmp	r3, #1
 8004c44:	d11f      	bne.n	8004c86 <USB_EPStartXfer+0x99e>
 8004c46:	1d3b      	adds	r3, r7, #4
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004c4e:	1d3b      	adds	r3, r7, #4
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004c56:	b29b      	uxth	r3, r3
 8004c58:	461a      	mov	r2, r3
 8004c5a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004c5e:	4413      	add	r3, r2
 8004c60:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004c64:	463b      	mov	r3, r7
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	781b      	ldrb	r3, [r3, #0]
 8004c6a:	011a      	lsls	r2, r3, #4
 8004c6c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004c70:	4413      	add	r3, r2
 8004c72:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004c76:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004c7a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004c7e:	b29a      	uxth	r2, r3
 8004c80:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004c84:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8004c86:	463b      	mov	r3, r7
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	891b      	ldrh	r3, [r3, #8]
 8004c8c:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
        }

        USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004c90:	463b      	mov	r3, r7
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	6959      	ldr	r1, [r3, #20]
 8004c96:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004c9a:	b29b      	uxth	r3, r3
 8004c9c:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8004ca0:	1d38      	adds	r0, r7, #4
 8004ca2:	6800      	ldr	r0, [r0, #0]
 8004ca4:	f000 fd7e 	bl	80057a4 <USB_WritePMA>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8004ca8:	463b      	mov	r3, r7
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	785b      	ldrb	r3, [r3, #1]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d122      	bne.n	8004cf8 <USB_EPStartXfer+0xa10>
 8004cb2:	1d3b      	adds	r3, r7, #4
 8004cb4:	681a      	ldr	r2, [r3, #0]
 8004cb6:	463b      	mov	r3, r7
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	781b      	ldrb	r3, [r3, #0]
 8004cbc:	009b      	lsls	r3, r3, #2
 8004cbe:	4413      	add	r3, r2
 8004cc0:	881b      	ldrh	r3, [r3, #0]
 8004cc2:	b29b      	uxth	r3, r3
 8004cc4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004cc8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ccc:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 8004cd0:	1d3b      	adds	r3, r7, #4
 8004cd2:	681a      	ldr	r2, [r3, #0]
 8004cd4:	463b      	mov	r3, r7
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	781b      	ldrb	r3, [r3, #0]
 8004cda:	009b      	lsls	r3, r3, #2
 8004cdc:	441a      	add	r2, r3
 8004cde:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8004ce2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ce6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004cea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004cee:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004cf2:	b29b      	uxth	r3, r3
 8004cf4:	8013      	strh	r3, [r2, #0]
 8004cf6:	e026      	b.n	8004d46 <USB_EPStartXfer+0xa5e>
 8004cf8:	463b      	mov	r3, r7
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	785b      	ldrb	r3, [r3, #1]
 8004cfe:	2b01      	cmp	r3, #1
 8004d00:	d121      	bne.n	8004d46 <USB_EPStartXfer+0xa5e>
 8004d02:	1d3b      	adds	r3, r7, #4
 8004d04:	681a      	ldr	r2, [r3, #0]
 8004d06:	463b      	mov	r3, r7
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	781b      	ldrb	r3, [r3, #0]
 8004d0c:	009b      	lsls	r3, r3, #2
 8004d0e:	4413      	add	r3, r2
 8004d10:	881b      	ldrh	r3, [r3, #0]
 8004d12:	b29b      	uxth	r3, r3
 8004d14:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d1c:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 8004d20:	1d3b      	adds	r3, r7, #4
 8004d22:	681a      	ldr	r2, [r3, #0]
 8004d24:	463b      	mov	r3, r7
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	781b      	ldrb	r3, [r3, #0]
 8004d2a:	009b      	lsls	r3, r3, #2
 8004d2c:	441a      	add	r2, r3
 8004d2e:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8004d32:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d36:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d3a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004d3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d42:	b29b      	uxth	r3, r3
 8004d44:	8013      	strh	r3, [r2, #0]
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8004d46:	1d3b      	adds	r3, r7, #4
 8004d48:	681a      	ldr	r2, [r3, #0]
 8004d4a:	463b      	mov	r3, r7
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	781b      	ldrb	r3, [r3, #0]
 8004d50:	009b      	lsls	r3, r3, #2
 8004d52:	4413      	add	r3, r2
 8004d54:	881b      	ldrh	r3, [r3, #0]
 8004d56:	b29b      	uxth	r3, r3
 8004d58:	f107 020e 	add.w	r2, r7, #14
 8004d5c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d60:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d64:	8013      	strh	r3, [r2, #0]
 8004d66:	f107 030e 	add.w	r3, r7, #14
 8004d6a:	f107 020e 	add.w	r2, r7, #14
 8004d6e:	8812      	ldrh	r2, [r2, #0]
 8004d70:	f082 0210 	eor.w	r2, r2, #16
 8004d74:	801a      	strh	r2, [r3, #0]
 8004d76:	f107 030e 	add.w	r3, r7, #14
 8004d7a:	f107 020e 	add.w	r2, r7, #14
 8004d7e:	8812      	ldrh	r2, [r2, #0]
 8004d80:	f082 0220 	eor.w	r2, r2, #32
 8004d84:	801a      	strh	r2, [r3, #0]
 8004d86:	1d3b      	adds	r3, r7, #4
 8004d88:	681a      	ldr	r2, [r3, #0]
 8004d8a:	463b      	mov	r3, r7
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	781b      	ldrb	r3, [r3, #0]
 8004d90:	009b      	lsls	r3, r3, #2
 8004d92:	441a      	add	r2, r3
 8004d94:	f107 030e 	add.w	r3, r7, #14
 8004d98:	881b      	ldrh	r3, [r3, #0]
 8004d9a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d9e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004da2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004da6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004daa:	b29b      	uxth	r3, r3
 8004dac:	8013      	strh	r3, [r2, #0]
 8004dae:	e3b5      	b.n	800551c <USB_EPStartXfer+0x1234>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8004db0:	463b      	mov	r3, r7
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	7b1b      	ldrb	r3, [r3, #12]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	f040 8090 	bne.w	8004edc <USB_EPStartXfer+0xbf4>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8004dbc:	463b      	mov	r3, r7
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	699a      	ldr	r2, [r3, #24]
 8004dc2:	463b      	mov	r3, r7
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	691b      	ldr	r3, [r3, #16]
 8004dc8:	429a      	cmp	r2, r3
 8004dca:	d90e      	bls.n	8004dea <USB_EPStartXfer+0xb02>
      {
        len = ep->maxpacket;
 8004dcc:	463b      	mov	r3, r7
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	691b      	ldr	r3, [r3, #16]
 8004dd2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len -= len;
 8004dd6:	463b      	mov	r3, r7
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	699a      	ldr	r2, [r3, #24]
 8004ddc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004de0:	1ad2      	subs	r2, r2, r3
 8004de2:	463b      	mov	r3, r7
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	619a      	str	r2, [r3, #24]
 8004de8:	e008      	b.n	8004dfc <USB_EPStartXfer+0xb14>
      }
      else
      {
        len = ep->xfer_len;
 8004dea:	463b      	mov	r3, r7
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	699b      	ldr	r3, [r3, #24]
 8004df0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len = 0U;
 8004df4:	463b      	mov	r3, r7
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	2200      	movs	r2, #0
 8004dfa:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8004dfc:	1d3b      	adds	r3, r7, #4
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004e04:	1d3b      	adds	r3, r7, #4
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e0c:	b29b      	uxth	r3, r3
 8004e0e:	461a      	mov	r2, r3
 8004e10:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004e14:	4413      	add	r3, r2
 8004e16:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004e1a:	463b      	mov	r3, r7
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	781b      	ldrb	r3, [r3, #0]
 8004e20:	011a      	lsls	r2, r3, #4
 8004e22:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004e26:	4413      	add	r3, r2
 8004e28:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004e2c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004e30:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d116      	bne.n	8004e66 <USB_EPStartXfer+0xb7e>
 8004e38:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004e3c:	881b      	ldrh	r3, [r3, #0]
 8004e3e:	b29b      	uxth	r3, r3
 8004e40:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004e44:	b29a      	uxth	r2, r3
 8004e46:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004e4a:	801a      	strh	r2, [r3, #0]
 8004e4c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004e50:	881b      	ldrh	r3, [r3, #0]
 8004e52:	b29b      	uxth	r3, r3
 8004e54:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004e58:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004e5c:	b29a      	uxth	r2, r3
 8004e5e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004e62:	801a      	strh	r2, [r3, #0]
 8004e64:	e32c      	b.n	80054c0 <USB_EPStartXfer+0x11d8>
 8004e66:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004e6a:	2b3e      	cmp	r3, #62	; 0x3e
 8004e6c:	d818      	bhi.n	8004ea0 <USB_EPStartXfer+0xbb8>
 8004e6e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004e72:	085b      	lsrs	r3, r3, #1
 8004e74:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8004e78:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004e7c:	f003 0301 	and.w	r3, r3, #1
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d004      	beq.n	8004e8e <USB_EPStartXfer+0xba6>
 8004e84:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8004e88:	3301      	adds	r3, #1
 8004e8a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8004e8e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8004e92:	b29b      	uxth	r3, r3
 8004e94:	029b      	lsls	r3, r3, #10
 8004e96:	b29a      	uxth	r2, r3
 8004e98:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004e9c:	801a      	strh	r2, [r3, #0]
 8004e9e:	e30f      	b.n	80054c0 <USB_EPStartXfer+0x11d8>
 8004ea0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004ea4:	095b      	lsrs	r3, r3, #5
 8004ea6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8004eaa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004eae:	f003 031f 	and.w	r3, r3, #31
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d104      	bne.n	8004ec0 <USB_EPStartXfer+0xbd8>
 8004eb6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8004eba:	3b01      	subs	r3, #1
 8004ebc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8004ec0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8004ec4:	b29b      	uxth	r3, r3
 8004ec6:	029b      	lsls	r3, r3, #10
 8004ec8:	b29b      	uxth	r3, r3
 8004eca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004ece:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004ed2:	b29a      	uxth	r2, r3
 8004ed4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004ed8:	801a      	strh	r2, [r3, #0]
 8004eda:	e2f1      	b.n	80054c0 <USB_EPStartXfer+0x11d8>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8004edc:	463b      	mov	r3, r7
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	78db      	ldrb	r3, [r3, #3]
 8004ee2:	2b02      	cmp	r3, #2
 8004ee4:	f040 818f 	bne.w	8005206 <USB_EPStartXfer+0xf1e>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8004ee8:	463b      	mov	r3, r7
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	785b      	ldrb	r3, [r3, #1]
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d175      	bne.n	8004fde <USB_EPStartXfer+0xcf6>
 8004ef2:	1d3b      	adds	r3, r7, #4
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004efa:	1d3b      	adds	r3, r7, #4
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f02:	b29b      	uxth	r3, r3
 8004f04:	461a      	mov	r2, r3
 8004f06:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004f0a:	4413      	add	r3, r2
 8004f0c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004f10:	463b      	mov	r3, r7
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	781b      	ldrb	r3, [r3, #0]
 8004f16:	011a      	lsls	r2, r3, #4
 8004f18:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004f1c:	4413      	add	r3, r2
 8004f1e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004f22:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004f26:	463b      	mov	r3, r7
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	691b      	ldr	r3, [r3, #16]
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d116      	bne.n	8004f5e <USB_EPStartXfer+0xc76>
 8004f30:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004f34:	881b      	ldrh	r3, [r3, #0]
 8004f36:	b29b      	uxth	r3, r3
 8004f38:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004f3c:	b29a      	uxth	r2, r3
 8004f3e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004f42:	801a      	strh	r2, [r3, #0]
 8004f44:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004f48:	881b      	ldrh	r3, [r3, #0]
 8004f4a:	b29b      	uxth	r3, r3
 8004f4c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004f50:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004f54:	b29a      	uxth	r2, r3
 8004f56:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004f5a:	801a      	strh	r2, [r3, #0]
 8004f5c:	e065      	b.n	800502a <USB_EPStartXfer+0xd42>
 8004f5e:	463b      	mov	r3, r7
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	691b      	ldr	r3, [r3, #16]
 8004f64:	2b3e      	cmp	r3, #62	; 0x3e
 8004f66:	d81a      	bhi.n	8004f9e <USB_EPStartXfer+0xcb6>
 8004f68:	463b      	mov	r3, r7
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	691b      	ldr	r3, [r3, #16]
 8004f6e:	085b      	lsrs	r3, r3, #1
 8004f70:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004f74:	463b      	mov	r3, r7
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	691b      	ldr	r3, [r3, #16]
 8004f7a:	f003 0301 	and.w	r3, r3, #1
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d004      	beq.n	8004f8c <USB_EPStartXfer+0xca4>
 8004f82:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004f86:	3301      	adds	r3, #1
 8004f88:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004f8c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004f90:	b29b      	uxth	r3, r3
 8004f92:	029b      	lsls	r3, r3, #10
 8004f94:	b29a      	uxth	r2, r3
 8004f96:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004f9a:	801a      	strh	r2, [r3, #0]
 8004f9c:	e045      	b.n	800502a <USB_EPStartXfer+0xd42>
 8004f9e:	463b      	mov	r3, r7
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	691b      	ldr	r3, [r3, #16]
 8004fa4:	095b      	lsrs	r3, r3, #5
 8004fa6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004faa:	463b      	mov	r3, r7
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	691b      	ldr	r3, [r3, #16]
 8004fb0:	f003 031f 	and.w	r3, r3, #31
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d104      	bne.n	8004fc2 <USB_EPStartXfer+0xcda>
 8004fb8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004fbc:	3b01      	subs	r3, #1
 8004fbe:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004fc2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004fc6:	b29b      	uxth	r3, r3
 8004fc8:	029b      	lsls	r3, r3, #10
 8004fca:	b29b      	uxth	r3, r3
 8004fcc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004fd0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004fd4:	b29a      	uxth	r2, r3
 8004fd6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004fda:	801a      	strh	r2, [r3, #0]
 8004fdc:	e025      	b.n	800502a <USB_EPStartXfer+0xd42>
 8004fde:	463b      	mov	r3, r7
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	785b      	ldrb	r3, [r3, #1]
 8004fe4:	2b01      	cmp	r3, #1
 8004fe6:	d120      	bne.n	800502a <USB_EPStartXfer+0xd42>
 8004fe8:	1d3b      	adds	r3, r7, #4
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004ff0:	1d3b      	adds	r3, r7, #4
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ff8:	b29b      	uxth	r3, r3
 8004ffa:	461a      	mov	r2, r3
 8004ffc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005000:	4413      	add	r3, r2
 8005002:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005006:	463b      	mov	r3, r7
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	781b      	ldrb	r3, [r3, #0]
 800500c:	011a      	lsls	r2, r3, #4
 800500e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005012:	4413      	add	r3, r2
 8005014:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005018:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800501c:	463b      	mov	r3, r7
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	691b      	ldr	r3, [r3, #16]
 8005022:	b29a      	uxth	r2, r3
 8005024:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005028:	801a      	strh	r2, [r3, #0]
 800502a:	1d3b      	adds	r3, r7, #4
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005032:	463b      	mov	r3, r7
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	785b      	ldrb	r3, [r3, #1]
 8005038:	2b00      	cmp	r3, #0
 800503a:	d175      	bne.n	8005128 <USB_EPStartXfer+0xe40>
 800503c:	1d3b      	adds	r3, r7, #4
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005044:	1d3b      	adds	r3, r7, #4
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800504c:	b29b      	uxth	r3, r3
 800504e:	461a      	mov	r2, r3
 8005050:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005054:	4413      	add	r3, r2
 8005056:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800505a:	463b      	mov	r3, r7
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	781b      	ldrb	r3, [r3, #0]
 8005060:	011a      	lsls	r2, r3, #4
 8005062:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005066:	4413      	add	r3, r2
 8005068:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800506c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005070:	463b      	mov	r3, r7
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	691b      	ldr	r3, [r3, #16]
 8005076:	2b00      	cmp	r3, #0
 8005078:	d116      	bne.n	80050a8 <USB_EPStartXfer+0xdc0>
 800507a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800507e:	881b      	ldrh	r3, [r3, #0]
 8005080:	b29b      	uxth	r3, r3
 8005082:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005086:	b29a      	uxth	r2, r3
 8005088:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800508c:	801a      	strh	r2, [r3, #0]
 800508e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005092:	881b      	ldrh	r3, [r3, #0]
 8005094:	b29b      	uxth	r3, r3
 8005096:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800509a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800509e:	b29a      	uxth	r2, r3
 80050a0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80050a4:	801a      	strh	r2, [r3, #0]
 80050a6:	e061      	b.n	800516c <USB_EPStartXfer+0xe84>
 80050a8:	463b      	mov	r3, r7
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	691b      	ldr	r3, [r3, #16]
 80050ae:	2b3e      	cmp	r3, #62	; 0x3e
 80050b0:	d81a      	bhi.n	80050e8 <USB_EPStartXfer+0xe00>
 80050b2:	463b      	mov	r3, r7
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	691b      	ldr	r3, [r3, #16]
 80050b8:	085b      	lsrs	r3, r3, #1
 80050ba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80050be:	463b      	mov	r3, r7
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	691b      	ldr	r3, [r3, #16]
 80050c4:	f003 0301 	and.w	r3, r3, #1
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d004      	beq.n	80050d6 <USB_EPStartXfer+0xdee>
 80050cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80050d0:	3301      	adds	r3, #1
 80050d2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80050d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80050da:	b29b      	uxth	r3, r3
 80050dc:	029b      	lsls	r3, r3, #10
 80050de:	b29a      	uxth	r2, r3
 80050e0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80050e4:	801a      	strh	r2, [r3, #0]
 80050e6:	e041      	b.n	800516c <USB_EPStartXfer+0xe84>
 80050e8:	463b      	mov	r3, r7
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	691b      	ldr	r3, [r3, #16]
 80050ee:	095b      	lsrs	r3, r3, #5
 80050f0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80050f4:	463b      	mov	r3, r7
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	691b      	ldr	r3, [r3, #16]
 80050fa:	f003 031f 	and.w	r3, r3, #31
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d104      	bne.n	800510c <USB_EPStartXfer+0xe24>
 8005102:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005106:	3b01      	subs	r3, #1
 8005108:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800510c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005110:	b29b      	uxth	r3, r3
 8005112:	029b      	lsls	r3, r3, #10
 8005114:	b29b      	uxth	r3, r3
 8005116:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800511a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800511e:	b29a      	uxth	r2, r3
 8005120:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005124:	801a      	strh	r2, [r3, #0]
 8005126:	e021      	b.n	800516c <USB_EPStartXfer+0xe84>
 8005128:	463b      	mov	r3, r7
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	785b      	ldrb	r3, [r3, #1]
 800512e:	2b01      	cmp	r3, #1
 8005130:	d11c      	bne.n	800516c <USB_EPStartXfer+0xe84>
 8005132:	1d3b      	adds	r3, r7, #4
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800513a:	b29b      	uxth	r3, r3
 800513c:	461a      	mov	r2, r3
 800513e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005142:	4413      	add	r3, r2
 8005144:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005148:	463b      	mov	r3, r7
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	781b      	ldrb	r3, [r3, #0]
 800514e:	011a      	lsls	r2, r3, #4
 8005150:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005154:	4413      	add	r3, r2
 8005156:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800515a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800515e:	463b      	mov	r3, r7
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	691b      	ldr	r3, [r3, #16]
 8005164:	b29a      	uxth	r2, r3
 8005166:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800516a:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800516c:	463b      	mov	r3, r7
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	69db      	ldr	r3, [r3, #28]
 8005172:	2b00      	cmp	r3, #0
 8005174:	f000 81a4 	beq.w	80054c0 <USB_EPStartXfer+0x11d8>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8005178:	1d3b      	adds	r3, r7, #4
 800517a:	681a      	ldr	r2, [r3, #0]
 800517c:	463b      	mov	r3, r7
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	781b      	ldrb	r3, [r3, #0]
 8005182:	009b      	lsls	r3, r3, #2
 8005184:	4413      	add	r3, r2
 8005186:	881b      	ldrh	r3, [r3, #0]
 8005188:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800518c:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8005190:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005194:	2b00      	cmp	r3, #0
 8005196:	d005      	beq.n	80051a4 <USB_EPStartXfer+0xebc>
 8005198:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800519c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d10d      	bne.n	80051c0 <USB_EPStartXfer+0xed8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80051a4:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80051a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	f040 8187 	bne.w	80054c0 <USB_EPStartXfer+0x11d8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80051b2:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80051b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	f040 8180 	bne.w	80054c0 <USB_EPStartXfer+0x11d8>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 80051c0:	1d3b      	adds	r3, r7, #4
 80051c2:	681a      	ldr	r2, [r3, #0]
 80051c4:	463b      	mov	r3, r7
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	781b      	ldrb	r3, [r3, #0]
 80051ca:	009b      	lsls	r3, r3, #2
 80051cc:	4413      	add	r3, r2
 80051ce:	881b      	ldrh	r3, [r3, #0]
 80051d0:	b29b      	uxth	r3, r3
 80051d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80051d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051da:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
 80051de:	1d3b      	adds	r3, r7, #4
 80051e0:	681a      	ldr	r2, [r3, #0]
 80051e2:	463b      	mov	r3, r7
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	781b      	ldrb	r3, [r3, #0]
 80051e8:	009b      	lsls	r3, r3, #2
 80051ea:	441a      	add	r2, r3
 80051ec:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 80051f0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80051f4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80051f8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80051fc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005200:	b29b      	uxth	r3, r3
 8005202:	8013      	strh	r3, [r2, #0]
 8005204:	e15c      	b.n	80054c0 <USB_EPStartXfer+0x11d8>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8005206:	463b      	mov	r3, r7
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	78db      	ldrb	r3, [r3, #3]
 800520c:	2b01      	cmp	r3, #1
 800520e:	f040 8155 	bne.w	80054bc <USB_EPStartXfer+0x11d4>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8005212:	463b      	mov	r3, r7
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	699a      	ldr	r2, [r3, #24]
 8005218:	463b      	mov	r3, r7
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	691b      	ldr	r3, [r3, #16]
 800521e:	429a      	cmp	r2, r3
 8005220:	d90e      	bls.n	8005240 <USB_EPStartXfer+0xf58>
        {
          len = ep->maxpacket;
 8005222:	463b      	mov	r3, r7
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	691b      	ldr	r3, [r3, #16]
 8005228:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len -= len;
 800522c:	463b      	mov	r3, r7
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	699a      	ldr	r2, [r3, #24]
 8005232:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005236:	1ad2      	subs	r2, r2, r3
 8005238:	463b      	mov	r3, r7
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	619a      	str	r2, [r3, #24]
 800523e:	e008      	b.n	8005252 <USB_EPStartXfer+0xf6a>
        }
        else
        {
          len = ep->xfer_len;
 8005240:	463b      	mov	r3, r7
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	699b      	ldr	r3, [r3, #24]
 8005246:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len = 0U;
 800524a:	463b      	mov	r3, r7
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	2200      	movs	r2, #0
 8005250:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8005252:	463b      	mov	r3, r7
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	785b      	ldrb	r3, [r3, #1]
 8005258:	2b00      	cmp	r3, #0
 800525a:	d16f      	bne.n	800533c <USB_EPStartXfer+0x1054>
 800525c:	1d3b      	adds	r3, r7, #4
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005264:	1d3b      	adds	r3, r7, #4
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800526c:	b29b      	uxth	r3, r3
 800526e:	461a      	mov	r2, r3
 8005270:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005274:	4413      	add	r3, r2
 8005276:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800527a:	463b      	mov	r3, r7
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	781b      	ldrb	r3, [r3, #0]
 8005280:	011a      	lsls	r2, r3, #4
 8005282:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005286:	4413      	add	r3, r2
 8005288:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800528c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005290:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005294:	2b00      	cmp	r3, #0
 8005296:	d116      	bne.n	80052c6 <USB_EPStartXfer+0xfde>
 8005298:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800529c:	881b      	ldrh	r3, [r3, #0]
 800529e:	b29b      	uxth	r3, r3
 80052a0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80052a4:	b29a      	uxth	r2, r3
 80052a6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80052aa:	801a      	strh	r2, [r3, #0]
 80052ac:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80052b0:	881b      	ldrh	r3, [r3, #0]
 80052b2:	b29b      	uxth	r3, r3
 80052b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80052b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80052bc:	b29a      	uxth	r2, r3
 80052be:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80052c2:	801a      	strh	r2, [r3, #0]
 80052c4:	e05f      	b.n	8005386 <USB_EPStartXfer+0x109e>
 80052c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80052ca:	2b3e      	cmp	r3, #62	; 0x3e
 80052cc:	d818      	bhi.n	8005300 <USB_EPStartXfer+0x1018>
 80052ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80052d2:	085b      	lsrs	r3, r3, #1
 80052d4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80052d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80052dc:	f003 0301 	and.w	r3, r3, #1
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d004      	beq.n	80052ee <USB_EPStartXfer+0x1006>
 80052e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80052e8:	3301      	adds	r3, #1
 80052ea:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80052ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80052f2:	b29b      	uxth	r3, r3
 80052f4:	029b      	lsls	r3, r3, #10
 80052f6:	b29a      	uxth	r2, r3
 80052f8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80052fc:	801a      	strh	r2, [r3, #0]
 80052fe:	e042      	b.n	8005386 <USB_EPStartXfer+0x109e>
 8005300:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005304:	095b      	lsrs	r3, r3, #5
 8005306:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800530a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800530e:	f003 031f 	and.w	r3, r3, #31
 8005312:	2b00      	cmp	r3, #0
 8005314:	d104      	bne.n	8005320 <USB_EPStartXfer+0x1038>
 8005316:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800531a:	3b01      	subs	r3, #1
 800531c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005320:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005324:	b29b      	uxth	r3, r3
 8005326:	029b      	lsls	r3, r3, #10
 8005328:	b29b      	uxth	r3, r3
 800532a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800532e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005332:	b29a      	uxth	r2, r3
 8005334:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005338:	801a      	strh	r2, [r3, #0]
 800533a:	e024      	b.n	8005386 <USB_EPStartXfer+0x109e>
 800533c:	463b      	mov	r3, r7
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	785b      	ldrb	r3, [r3, #1]
 8005342:	2b01      	cmp	r3, #1
 8005344:	d11f      	bne.n	8005386 <USB_EPStartXfer+0x109e>
 8005346:	1d3b      	adds	r3, r7, #4
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800534e:	1d3b      	adds	r3, r7, #4
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005356:	b29b      	uxth	r3, r3
 8005358:	461a      	mov	r2, r3
 800535a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800535e:	4413      	add	r3, r2
 8005360:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005364:	463b      	mov	r3, r7
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	781b      	ldrb	r3, [r3, #0]
 800536a:	011a      	lsls	r2, r3, #4
 800536c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005370:	4413      	add	r3, r2
 8005372:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005376:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800537a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800537e:	b29a      	uxth	r2, r3
 8005380:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005384:	801a      	strh	r2, [r3, #0]
 8005386:	1d3b      	adds	r3, r7, #4
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800538e:	463b      	mov	r3, r7
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	785b      	ldrb	r3, [r3, #1]
 8005394:	2b00      	cmp	r3, #0
 8005396:	d16f      	bne.n	8005478 <USB_EPStartXfer+0x1190>
 8005398:	1d3b      	adds	r3, r7, #4
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80053a0:	1d3b      	adds	r3, r7, #4
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80053a8:	b29b      	uxth	r3, r3
 80053aa:	461a      	mov	r2, r3
 80053ac:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80053b0:	4413      	add	r3, r2
 80053b2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80053b6:	463b      	mov	r3, r7
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	781b      	ldrb	r3, [r3, #0]
 80053bc:	011a      	lsls	r2, r3, #4
 80053be:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80053c2:	4413      	add	r3, r2
 80053c4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80053c8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80053cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d116      	bne.n	8005402 <USB_EPStartXfer+0x111a>
 80053d4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80053d8:	881b      	ldrh	r3, [r3, #0]
 80053da:	b29b      	uxth	r3, r3
 80053dc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80053e0:	b29a      	uxth	r2, r3
 80053e2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80053e6:	801a      	strh	r2, [r3, #0]
 80053e8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80053ec:	881b      	ldrh	r3, [r3, #0]
 80053ee:	b29b      	uxth	r3, r3
 80053f0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80053f4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80053f8:	b29a      	uxth	r2, r3
 80053fa:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80053fe:	801a      	strh	r2, [r3, #0]
 8005400:	e05e      	b.n	80054c0 <USB_EPStartXfer+0x11d8>
 8005402:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005406:	2b3e      	cmp	r3, #62	; 0x3e
 8005408:	d818      	bhi.n	800543c <USB_EPStartXfer+0x1154>
 800540a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800540e:	085b      	lsrs	r3, r3, #1
 8005410:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005414:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005418:	f003 0301 	and.w	r3, r3, #1
 800541c:	2b00      	cmp	r3, #0
 800541e:	d004      	beq.n	800542a <USB_EPStartXfer+0x1142>
 8005420:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005424:	3301      	adds	r3, #1
 8005426:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800542a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800542e:	b29b      	uxth	r3, r3
 8005430:	029b      	lsls	r3, r3, #10
 8005432:	b29a      	uxth	r2, r3
 8005434:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005438:	801a      	strh	r2, [r3, #0]
 800543a:	e041      	b.n	80054c0 <USB_EPStartXfer+0x11d8>
 800543c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005440:	095b      	lsrs	r3, r3, #5
 8005442:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005446:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800544a:	f003 031f 	and.w	r3, r3, #31
 800544e:	2b00      	cmp	r3, #0
 8005450:	d104      	bne.n	800545c <USB_EPStartXfer+0x1174>
 8005452:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005456:	3b01      	subs	r3, #1
 8005458:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800545c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005460:	b29b      	uxth	r3, r3
 8005462:	029b      	lsls	r3, r3, #10
 8005464:	b29b      	uxth	r3, r3
 8005466:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800546a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800546e:	b29a      	uxth	r2, r3
 8005470:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005474:	801a      	strh	r2, [r3, #0]
 8005476:	e023      	b.n	80054c0 <USB_EPStartXfer+0x11d8>
 8005478:	463b      	mov	r3, r7
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	785b      	ldrb	r3, [r3, #1]
 800547e:	2b01      	cmp	r3, #1
 8005480:	d11e      	bne.n	80054c0 <USB_EPStartXfer+0x11d8>
 8005482:	1d3b      	adds	r3, r7, #4
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800548a:	b29b      	uxth	r3, r3
 800548c:	461a      	mov	r2, r3
 800548e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005492:	4413      	add	r3, r2
 8005494:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005498:	463b      	mov	r3, r7
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	781b      	ldrb	r3, [r3, #0]
 800549e:	011a      	lsls	r2, r3, #4
 80054a0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80054a4:	4413      	add	r3, r2
 80054a6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80054aa:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80054ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80054b2:	b29a      	uxth	r2, r3
 80054b4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80054b8:	801a      	strh	r2, [r3, #0]
 80054ba:	e001      	b.n	80054c0 <USB_EPStartXfer+0x11d8>
      }
      else
      {
        return HAL_ERROR;
 80054bc:	2301      	movs	r3, #1
 80054be:	e02e      	b.n	800551e <USB_EPStartXfer+0x1236>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80054c0:	1d3b      	adds	r3, r7, #4
 80054c2:	681a      	ldr	r2, [r3, #0]
 80054c4:	463b      	mov	r3, r7
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	781b      	ldrb	r3, [r3, #0]
 80054ca:	009b      	lsls	r3, r3, #2
 80054cc:	4413      	add	r3, r2
 80054ce:	881b      	ldrh	r3, [r3, #0]
 80054d0:	b29b      	uxth	r3, r3
 80054d2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80054d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054da:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 80054de:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80054e2:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80054e6:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 80054ea:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80054ee:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80054f2:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 80054f6:	1d3b      	adds	r3, r7, #4
 80054f8:	681a      	ldr	r2, [r3, #0]
 80054fa:	463b      	mov	r3, r7
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	781b      	ldrb	r3, [r3, #0]
 8005500:	009b      	lsls	r3, r3, #2
 8005502:	441a      	add	r2, r3
 8005504:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8005508:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800550c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005510:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005514:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005518:	b29b      	uxth	r3, r3
 800551a:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800551c:	2300      	movs	r3, #0
}
 800551e:	4618      	mov	r0, r3
 8005520:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8005524:	46bd      	mov	sp, r7
 8005526:	bd80      	pop	{r7, pc}

08005528 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005528:	b480      	push	{r7}
 800552a:	b085      	sub	sp, #20
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]
 8005530:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8005532:	683b      	ldr	r3, [r7, #0]
 8005534:	785b      	ldrb	r3, [r3, #1]
 8005536:	2b00      	cmp	r3, #0
 8005538:	d020      	beq.n	800557c <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800553a:	687a      	ldr	r2, [r7, #4]
 800553c:	683b      	ldr	r3, [r7, #0]
 800553e:	781b      	ldrb	r3, [r3, #0]
 8005540:	009b      	lsls	r3, r3, #2
 8005542:	4413      	add	r3, r2
 8005544:	881b      	ldrh	r3, [r3, #0]
 8005546:	b29b      	uxth	r3, r3
 8005548:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800554c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005550:	81bb      	strh	r3, [r7, #12]
 8005552:	89bb      	ldrh	r3, [r7, #12]
 8005554:	f083 0310 	eor.w	r3, r3, #16
 8005558:	81bb      	strh	r3, [r7, #12]
 800555a:	687a      	ldr	r2, [r7, #4]
 800555c:	683b      	ldr	r3, [r7, #0]
 800555e:	781b      	ldrb	r3, [r3, #0]
 8005560:	009b      	lsls	r3, r3, #2
 8005562:	441a      	add	r2, r3
 8005564:	89bb      	ldrh	r3, [r7, #12]
 8005566:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800556a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800556e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005572:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005576:	b29b      	uxth	r3, r3
 8005578:	8013      	strh	r3, [r2, #0]
 800557a:	e01f      	b.n	80055bc <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800557c:	687a      	ldr	r2, [r7, #4]
 800557e:	683b      	ldr	r3, [r7, #0]
 8005580:	781b      	ldrb	r3, [r3, #0]
 8005582:	009b      	lsls	r3, r3, #2
 8005584:	4413      	add	r3, r2
 8005586:	881b      	ldrh	r3, [r3, #0]
 8005588:	b29b      	uxth	r3, r3
 800558a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800558e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005592:	81fb      	strh	r3, [r7, #14]
 8005594:	89fb      	ldrh	r3, [r7, #14]
 8005596:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800559a:	81fb      	strh	r3, [r7, #14]
 800559c:	687a      	ldr	r2, [r7, #4]
 800559e:	683b      	ldr	r3, [r7, #0]
 80055a0:	781b      	ldrb	r3, [r3, #0]
 80055a2:	009b      	lsls	r3, r3, #2
 80055a4:	441a      	add	r2, r3
 80055a6:	89fb      	ldrh	r3, [r7, #14]
 80055a8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80055ac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80055b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80055b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80055b8:	b29b      	uxth	r3, r3
 80055ba:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80055bc:	2300      	movs	r3, #0
}
 80055be:	4618      	mov	r0, r3
 80055c0:	3714      	adds	r7, #20
 80055c2:	46bd      	mov	sp, r7
 80055c4:	bc80      	pop	{r7}
 80055c6:	4770      	bx	lr

080055c8 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80055c8:	b480      	push	{r7}
 80055ca:	b087      	sub	sp, #28
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]
 80055d0:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80055d2:	683b      	ldr	r3, [r7, #0]
 80055d4:	7b1b      	ldrb	r3, [r3, #12]
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	f040 809d 	bne.w	8005716 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 80055dc:	683b      	ldr	r3, [r7, #0]
 80055de:	785b      	ldrb	r3, [r3, #1]
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d04c      	beq.n	800567e <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80055e4:	687a      	ldr	r2, [r7, #4]
 80055e6:	683b      	ldr	r3, [r7, #0]
 80055e8:	781b      	ldrb	r3, [r3, #0]
 80055ea:	009b      	lsls	r3, r3, #2
 80055ec:	4413      	add	r3, r2
 80055ee:	881b      	ldrh	r3, [r3, #0]
 80055f0:	823b      	strh	r3, [r7, #16]
 80055f2:	8a3b      	ldrh	r3, [r7, #16]
 80055f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d01b      	beq.n	8005634 <USB_EPClearStall+0x6c>
 80055fc:	687a      	ldr	r2, [r7, #4]
 80055fe:	683b      	ldr	r3, [r7, #0]
 8005600:	781b      	ldrb	r3, [r3, #0]
 8005602:	009b      	lsls	r3, r3, #2
 8005604:	4413      	add	r3, r2
 8005606:	881b      	ldrh	r3, [r3, #0]
 8005608:	b29b      	uxth	r3, r3
 800560a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800560e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005612:	81fb      	strh	r3, [r7, #14]
 8005614:	687a      	ldr	r2, [r7, #4]
 8005616:	683b      	ldr	r3, [r7, #0]
 8005618:	781b      	ldrb	r3, [r3, #0]
 800561a:	009b      	lsls	r3, r3, #2
 800561c:	441a      	add	r2, r3
 800561e:	89fb      	ldrh	r3, [r7, #14]
 8005620:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005624:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005628:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800562c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005630:	b29b      	uxth	r3, r3
 8005632:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005634:	683b      	ldr	r3, [r7, #0]
 8005636:	78db      	ldrb	r3, [r3, #3]
 8005638:	2b01      	cmp	r3, #1
 800563a:	d06c      	beq.n	8005716 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800563c:	687a      	ldr	r2, [r7, #4]
 800563e:	683b      	ldr	r3, [r7, #0]
 8005640:	781b      	ldrb	r3, [r3, #0]
 8005642:	009b      	lsls	r3, r3, #2
 8005644:	4413      	add	r3, r2
 8005646:	881b      	ldrh	r3, [r3, #0]
 8005648:	b29b      	uxth	r3, r3
 800564a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800564e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005652:	81bb      	strh	r3, [r7, #12]
 8005654:	89bb      	ldrh	r3, [r7, #12]
 8005656:	f083 0320 	eor.w	r3, r3, #32
 800565a:	81bb      	strh	r3, [r7, #12]
 800565c:	687a      	ldr	r2, [r7, #4]
 800565e:	683b      	ldr	r3, [r7, #0]
 8005660:	781b      	ldrb	r3, [r3, #0]
 8005662:	009b      	lsls	r3, r3, #2
 8005664:	441a      	add	r2, r3
 8005666:	89bb      	ldrh	r3, [r7, #12]
 8005668:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800566c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005670:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005674:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005678:	b29b      	uxth	r3, r3
 800567a:	8013      	strh	r3, [r2, #0]
 800567c:	e04b      	b.n	8005716 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800567e:	687a      	ldr	r2, [r7, #4]
 8005680:	683b      	ldr	r3, [r7, #0]
 8005682:	781b      	ldrb	r3, [r3, #0]
 8005684:	009b      	lsls	r3, r3, #2
 8005686:	4413      	add	r3, r2
 8005688:	881b      	ldrh	r3, [r3, #0]
 800568a:	82fb      	strh	r3, [r7, #22]
 800568c:	8afb      	ldrh	r3, [r7, #22]
 800568e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005692:	2b00      	cmp	r3, #0
 8005694:	d01b      	beq.n	80056ce <USB_EPClearStall+0x106>
 8005696:	687a      	ldr	r2, [r7, #4]
 8005698:	683b      	ldr	r3, [r7, #0]
 800569a:	781b      	ldrb	r3, [r3, #0]
 800569c:	009b      	lsls	r3, r3, #2
 800569e:	4413      	add	r3, r2
 80056a0:	881b      	ldrh	r3, [r3, #0]
 80056a2:	b29b      	uxth	r3, r3
 80056a4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80056a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056ac:	82bb      	strh	r3, [r7, #20]
 80056ae:	687a      	ldr	r2, [r7, #4]
 80056b0:	683b      	ldr	r3, [r7, #0]
 80056b2:	781b      	ldrb	r3, [r3, #0]
 80056b4:	009b      	lsls	r3, r3, #2
 80056b6:	441a      	add	r2, r3
 80056b8:	8abb      	ldrh	r3, [r7, #20]
 80056ba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80056be:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80056c2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80056c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80056ca:	b29b      	uxth	r3, r3
 80056cc:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80056ce:	687a      	ldr	r2, [r7, #4]
 80056d0:	683b      	ldr	r3, [r7, #0]
 80056d2:	781b      	ldrb	r3, [r3, #0]
 80056d4:	009b      	lsls	r3, r3, #2
 80056d6:	4413      	add	r3, r2
 80056d8:	881b      	ldrh	r3, [r3, #0]
 80056da:	b29b      	uxth	r3, r3
 80056dc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80056e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056e4:	827b      	strh	r3, [r7, #18]
 80056e6:	8a7b      	ldrh	r3, [r7, #18]
 80056e8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80056ec:	827b      	strh	r3, [r7, #18]
 80056ee:	8a7b      	ldrh	r3, [r7, #18]
 80056f0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80056f4:	827b      	strh	r3, [r7, #18]
 80056f6:	687a      	ldr	r2, [r7, #4]
 80056f8:	683b      	ldr	r3, [r7, #0]
 80056fa:	781b      	ldrb	r3, [r3, #0]
 80056fc:	009b      	lsls	r3, r3, #2
 80056fe:	441a      	add	r2, r3
 8005700:	8a7b      	ldrh	r3, [r7, #18]
 8005702:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005706:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800570a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800570e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005712:	b29b      	uxth	r3, r3
 8005714:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8005716:	2300      	movs	r3, #0
}
 8005718:	4618      	mov	r0, r3
 800571a:	371c      	adds	r7, #28
 800571c:	46bd      	mov	sp, r7
 800571e:	bc80      	pop	{r7}
 8005720:	4770      	bx	lr

08005722 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8005722:	b480      	push	{r7}
 8005724:	b083      	sub	sp, #12
 8005726:	af00      	add	r7, sp, #0
 8005728:	6078      	str	r0, [r7, #4]
 800572a:	460b      	mov	r3, r1
 800572c:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800572e:	78fb      	ldrb	r3, [r7, #3]
 8005730:	2b00      	cmp	r3, #0
 8005732:	d103      	bne.n	800573c <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2280      	movs	r2, #128	; 0x80
 8005738:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800573c:	2300      	movs	r3, #0
}
 800573e:	4618      	mov	r0, r3
 8005740:	370c      	adds	r7, #12
 8005742:	46bd      	mov	sp, r7
 8005744:	bc80      	pop	{r7}
 8005746:	4770      	bx	lr

08005748 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8005748:	b480      	push	{r7}
 800574a:	b083      	sub	sp, #12
 800574c:	af00      	add	r7, sp, #0
 800574e:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8005750:	2300      	movs	r3, #0
}
 8005752:	4618      	mov	r0, r3
 8005754:	370c      	adds	r7, #12
 8005756:	46bd      	mov	sp, r7
 8005758:	bc80      	pop	{r7}
 800575a:	4770      	bx	lr

0800575c <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 800575c:	b480      	push	{r7}
 800575e:	b083      	sub	sp, #12
 8005760:	af00      	add	r7, sp, #0
 8005762:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8005764:	2300      	movs	r3, #0
}
 8005766:	4618      	mov	r0, r3
 8005768:	370c      	adds	r7, #12
 800576a:	46bd      	mov	sp, r7
 800576c:	bc80      	pop	{r7}
 800576e:	4770      	bx	lr

08005770 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8005770:	b480      	push	{r7}
 8005772:	b085      	sub	sp, #20
 8005774:	af00      	add	r7, sp, #0
 8005776:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800577e:	b29b      	uxth	r3, r3
 8005780:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8005782:	68fb      	ldr	r3, [r7, #12]
}
 8005784:	4618      	mov	r0, r3
 8005786:	3714      	adds	r7, #20
 8005788:	46bd      	mov	sp, r7
 800578a:	bc80      	pop	{r7}
 800578c:	4770      	bx	lr

0800578e <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 800578e:	b480      	push	{r7}
 8005790:	b083      	sub	sp, #12
 8005792:	af00      	add	r7, sp, #0
 8005794:	6078      	str	r0, [r7, #4]
 8005796:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8005798:	2300      	movs	r3, #0
}
 800579a:	4618      	mov	r0, r3
 800579c:	370c      	adds	r7, #12
 800579e:	46bd      	mov	sp, r7
 80057a0:	bc80      	pop	{r7}
 80057a2:	4770      	bx	lr

080057a4 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80057a4:	b480      	push	{r7}
 80057a6:	b08d      	sub	sp, #52	; 0x34
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	60f8      	str	r0, [r7, #12]
 80057ac:	60b9      	str	r1, [r7, #8]
 80057ae:	4611      	mov	r1, r2
 80057b0:	461a      	mov	r2, r3
 80057b2:	460b      	mov	r3, r1
 80057b4:	80fb      	strh	r3, [r7, #6]
 80057b6:	4613      	mov	r3, r2
 80057b8:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80057ba:	88bb      	ldrh	r3, [r7, #4]
 80057bc:	3301      	adds	r3, #1
 80057be:	085b      	lsrs	r3, r3, #1
 80057c0:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80057c6:	68bb      	ldr	r3, [r7, #8]
 80057c8:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80057ca:	88fb      	ldrh	r3, [r7, #6]
 80057cc:	005a      	lsls	r2, r3, #1
 80057ce:	69fb      	ldr	r3, [r7, #28]
 80057d0:	4413      	add	r3, r2
 80057d2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80057d6:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 80057d8:	6a3b      	ldr	r3, [r7, #32]
 80057da:	62fb      	str	r3, [r7, #44]	; 0x2c
 80057dc:	e01e      	b.n	800581c <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 80057de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057e0:	781b      	ldrb	r3, [r3, #0]
 80057e2:	61bb      	str	r3, [r7, #24]
    pBuf++;
 80057e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057e6:	3301      	adds	r3, #1
 80057e8:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 80057ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057ec:	781b      	ldrb	r3, [r3, #0]
 80057ee:	b29b      	uxth	r3, r3
 80057f0:	021b      	lsls	r3, r3, #8
 80057f2:	b29b      	uxth	r3, r3
 80057f4:	461a      	mov	r2, r3
 80057f6:	69bb      	ldr	r3, [r7, #24]
 80057f8:	4313      	orrs	r3, r2
 80057fa:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 80057fc:	697b      	ldr	r3, [r7, #20]
 80057fe:	b29a      	uxth	r2, r3
 8005800:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005802:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8005804:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005806:	3302      	adds	r3, #2
 8005808:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 800580a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800580c:	3302      	adds	r3, #2
 800580e:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8005810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005812:	3301      	adds	r3, #1
 8005814:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8005816:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005818:	3b01      	subs	r3, #1
 800581a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800581c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800581e:	2b00      	cmp	r3, #0
 8005820:	d1dd      	bne.n	80057de <USB_WritePMA+0x3a>
  }
}
 8005822:	bf00      	nop
 8005824:	bf00      	nop
 8005826:	3734      	adds	r7, #52	; 0x34
 8005828:	46bd      	mov	sp, r7
 800582a:	bc80      	pop	{r7}
 800582c:	4770      	bx	lr

0800582e <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800582e:	b480      	push	{r7}
 8005830:	b08b      	sub	sp, #44	; 0x2c
 8005832:	af00      	add	r7, sp, #0
 8005834:	60f8      	str	r0, [r7, #12]
 8005836:	60b9      	str	r1, [r7, #8]
 8005838:	4611      	mov	r1, r2
 800583a:	461a      	mov	r2, r3
 800583c:	460b      	mov	r3, r1
 800583e:	80fb      	strh	r3, [r7, #6]
 8005840:	4613      	mov	r3, r2
 8005842:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8005844:	88bb      	ldrh	r3, [r7, #4]
 8005846:	085b      	lsrs	r3, r3, #1
 8005848:	b29b      	uxth	r3, r3
 800584a:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8005850:	68bb      	ldr	r3, [r7, #8]
 8005852:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005854:	88fb      	ldrh	r3, [r7, #6]
 8005856:	005a      	lsls	r2, r3, #1
 8005858:	697b      	ldr	r3, [r7, #20]
 800585a:	4413      	add	r3, r2
 800585c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005860:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8005862:	69bb      	ldr	r3, [r7, #24]
 8005864:	627b      	str	r3, [r7, #36]	; 0x24
 8005866:	e01b      	b.n	80058a0 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8005868:	6a3b      	ldr	r3, [r7, #32]
 800586a:	881b      	ldrh	r3, [r3, #0]
 800586c:	b29b      	uxth	r3, r3
 800586e:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8005870:	6a3b      	ldr	r3, [r7, #32]
 8005872:	3302      	adds	r3, #2
 8005874:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8005876:	693b      	ldr	r3, [r7, #16]
 8005878:	b2da      	uxtb	r2, r3
 800587a:	69fb      	ldr	r3, [r7, #28]
 800587c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800587e:	69fb      	ldr	r3, [r7, #28]
 8005880:	3301      	adds	r3, #1
 8005882:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8005884:	693b      	ldr	r3, [r7, #16]
 8005886:	0a1b      	lsrs	r3, r3, #8
 8005888:	b2da      	uxtb	r2, r3
 800588a:	69fb      	ldr	r3, [r7, #28]
 800588c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800588e:	69fb      	ldr	r3, [r7, #28]
 8005890:	3301      	adds	r3, #1
 8005892:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8005894:	6a3b      	ldr	r3, [r7, #32]
 8005896:	3302      	adds	r3, #2
 8005898:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 800589a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800589c:	3b01      	subs	r3, #1
 800589e:	627b      	str	r3, [r7, #36]	; 0x24
 80058a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d1e0      	bne.n	8005868 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 80058a6:	88bb      	ldrh	r3, [r7, #4]
 80058a8:	f003 0301 	and.w	r3, r3, #1
 80058ac:	b29b      	uxth	r3, r3
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d007      	beq.n	80058c2 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 80058b2:	6a3b      	ldr	r3, [r7, #32]
 80058b4:	881b      	ldrh	r3, [r3, #0]
 80058b6:	b29b      	uxth	r3, r3
 80058b8:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80058ba:	693b      	ldr	r3, [r7, #16]
 80058bc:	b2da      	uxtb	r2, r3
 80058be:	69fb      	ldr	r3, [r7, #28]
 80058c0:	701a      	strb	r2, [r3, #0]
  }
}
 80058c2:	bf00      	nop
 80058c4:	372c      	adds	r7, #44	; 0x2c
 80058c6:	46bd      	mov	sp, r7
 80058c8:	bc80      	pop	{r7}
 80058ca:	4770      	bx	lr

080058cc <USBD_HID_Init>:
 *         Initialize the HID interface
 * @param  pdev: device instance
 * @param  cfgidx: Configuration index
 * @retval status
 */
static uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx) {
 80058cc:	b580      	push	{r7, lr}
 80058ce:	b082      	sub	sp, #8
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	6078      	str	r0, [r7, #4]
 80058d4:	460b      	mov	r3, r1
 80058d6:	70fb      	strb	r3, [r7, #3]
/* Open EP IN */
USBD_LL_OpenEP(pdev, HID_EPIN_ADDR, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 80058d8:	2304      	movs	r3, #4
 80058da:	2203      	movs	r2, #3
 80058dc:	2181      	movs	r1, #129	; 0x81
 80058de:	6878      	ldr	r0, [r7, #4]
 80058e0:	f001 fc83 	bl	80071ea <USBD_LL_OpenEP>
pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 1U;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	2201      	movs	r2, #1
 80058e8:	62da      	str	r2, [r3, #44]	; 0x2c

pdev->pClassData = USBD_malloc (sizeof(USBD_HID_HandleTypeDef));
 80058ea:	2010      	movs	r0, #16
 80058ec:	f001 fd92 	bl	8007414 <USBD_static_malloc>
 80058f0:	4602      	mov	r2, r0
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

if (pdev->pClassData == NULL) {
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d101      	bne.n	8005906 <USBD_HID_Init+0x3a>
	return USBD_FAIL;
 8005902:	2302      	movs	r3, #2
 8005904:	e005      	b.n	8005912 <USBD_HID_Init+0x46>
}

((USBD_HID_HandleTypeDef*) pdev->pClassData)->state = HID_IDLE;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800590c:	2200      	movs	r2, #0
 800590e:	731a      	strb	r2, [r3, #12]

return USBD_OK;
 8005910:	2300      	movs	r3, #0
}
 8005912:	4618      	mov	r0, r3
 8005914:	3708      	adds	r7, #8
 8005916:	46bd      	mov	sp, r7
 8005918:	bd80      	pop	{r7, pc}

0800591a <USBD_HID_DeInit>:
 *         DeInitialize the HID layer
 * @param  pdev: device instance
 * @param  cfgidx: Configuration index
 * @retval status
 */
static uint8_t USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx) {
 800591a:	b580      	push	{r7, lr}
 800591c:	b082      	sub	sp, #8
 800591e:	af00      	add	r7, sp, #0
 8005920:	6078      	str	r0, [r7, #4]
 8005922:	460b      	mov	r3, r1
 8005924:	70fb      	strb	r3, [r7, #3]
/* Close HID EPs */
USBD_LL_CloseEP(pdev, HID_EPIN_ADDR);
 8005926:	2181      	movs	r1, #129	; 0x81
 8005928:	6878      	ldr	r0, [r7, #4]
 800592a:	f001 fc84 	bl	8007236 <USBD_LL_CloseEP>
pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 0U;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	2200      	movs	r2, #0
 8005932:	62da      	str	r2, [r3, #44]	; 0x2c

/* FRee allocated memory */
if (pdev->pClassData != NULL) {
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800593a:	2b00      	cmp	r3, #0
 800593c:	d009      	beq.n	8005952 <USBD_HID_DeInit+0x38>
	USBD_free(pdev->pClassData);
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005944:	4618      	mov	r0, r3
 8005946:	f001 fd71 	bl	800742c <USBD_static_free>
	pdev->pClassData = NULL;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	2200      	movs	r2, #0
 800594e:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
}

return USBD_OK;
 8005952:	2300      	movs	r3, #0
}
 8005954:	4618      	mov	r0, r3
 8005956:	3708      	adds	r7, #8
 8005958:	46bd      	mov	sp, r7
 800595a:	bd80      	pop	{r7, pc}

0800595c <USBD_HID_Setup>:
 * @param  pdev: instance
 * @param  req: usb requests
 * @retval status
 */
static uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev,
	USBD_SetupReqTypedef *req) {
 800595c:	b580      	push	{r7, lr}
 800595e:	b088      	sub	sp, #32
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
 8005964:	6039      	str	r1, [r7, #0]
USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef*) pdev->pClassData;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800596c:	613b      	str	r3, [r7, #16]
uint16_t len = 0U;
 800596e:	2300      	movs	r3, #0
 8005970:	83fb      	strh	r3, [r7, #30]
uint8_t *pbuf = NULL;
 8005972:	2300      	movs	r3, #0
 8005974:	61bb      	str	r3, [r7, #24]
uint16_t status_info = 0U;
 8005976:	2300      	movs	r3, #0
 8005978:	81fb      	strh	r3, [r7, #14]
USBD_StatusTypeDef ret = USBD_OK;
 800597a:	2300      	movs	r3, #0
 800597c:	75fb      	strb	r3, [r7, #23]

switch (req->bmRequest & USB_REQ_TYPE_MASK) {
 800597e:	683b      	ldr	r3, [r7, #0]
 8005980:	781b      	ldrb	r3, [r3, #0]
 8005982:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005986:	2b00      	cmp	r3, #0
 8005988:	d045      	beq.n	8005a16 <USBD_HID_Setup+0xba>
 800598a:	2b20      	cmp	r3, #32
 800598c:	f040 80d3 	bne.w	8005b36 <USBD_HID_Setup+0x1da>
case USB_REQ_TYPE_CLASS:
	switch (req->bRequest) {
 8005990:	683b      	ldr	r3, [r7, #0]
 8005992:	785b      	ldrb	r3, [r3, #1]
 8005994:	3b02      	subs	r3, #2
 8005996:	2b09      	cmp	r3, #9
 8005998:	d835      	bhi.n	8005a06 <USBD_HID_Setup+0xaa>
 800599a:	a201      	add	r2, pc, #4	; (adr r2, 80059a0 <USBD_HID_Setup+0x44>)
 800599c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059a0:	080059f7 	.word	0x080059f7
 80059a4:	080059d7 	.word	0x080059d7
 80059a8:	08005a07 	.word	0x08005a07
 80059ac:	08005a07 	.word	0x08005a07
 80059b0:	08005a07 	.word	0x08005a07
 80059b4:	08005a07 	.word	0x08005a07
 80059b8:	08005a07 	.word	0x08005a07
 80059bc:	08005a07 	.word	0x08005a07
 80059c0:	080059e5 	.word	0x080059e5
 80059c4:	080059c9 	.word	0x080059c9
	case HID_REQ_SET_PROTOCOL:
		hhid->Protocol = (uint8_t) (req->wValue);
 80059c8:	683b      	ldr	r3, [r7, #0]
 80059ca:	885b      	ldrh	r3, [r3, #2]
 80059cc:	b2db      	uxtb	r3, r3
 80059ce:	461a      	mov	r2, r3
 80059d0:	693b      	ldr	r3, [r7, #16]
 80059d2:	601a      	str	r2, [r3, #0]
		break;
 80059d4:	e01e      	b.n	8005a14 <USBD_HID_Setup+0xb8>

	case HID_REQ_GET_PROTOCOL:
		USBD_CtlSendData(pdev, (uint8_t*) (void*) &hhid->Protocol, 1U);
 80059d6:	693b      	ldr	r3, [r7, #16]
 80059d8:	2201      	movs	r2, #1
 80059da:	4619      	mov	r1, r3
 80059dc:	6878      	ldr	r0, [r7, #4]
 80059de:	f001 f944 	bl	8006c6a <USBD_CtlSendData>
		break;
 80059e2:	e017      	b.n	8005a14 <USBD_HID_Setup+0xb8>

	case HID_REQ_SET_IDLE:
		hhid->IdleState = (uint8_t) (req->wValue >> 8);
 80059e4:	683b      	ldr	r3, [r7, #0]
 80059e6:	885b      	ldrh	r3, [r3, #2]
 80059e8:	0a1b      	lsrs	r3, r3, #8
 80059ea:	b29b      	uxth	r3, r3
 80059ec:	b2db      	uxtb	r3, r3
 80059ee:	461a      	mov	r2, r3
 80059f0:	693b      	ldr	r3, [r7, #16]
 80059f2:	605a      	str	r2, [r3, #4]
		break;
 80059f4:	e00e      	b.n	8005a14 <USBD_HID_Setup+0xb8>

	case HID_REQ_GET_IDLE:
		USBD_CtlSendData(pdev, (uint8_t*) (void*) &hhid->IdleState, 1U);
 80059f6:	693b      	ldr	r3, [r7, #16]
 80059f8:	3304      	adds	r3, #4
 80059fa:	2201      	movs	r2, #1
 80059fc:	4619      	mov	r1, r3
 80059fe:	6878      	ldr	r0, [r7, #4]
 8005a00:	f001 f933 	bl	8006c6a <USBD_CtlSendData>
		break;
 8005a04:	e006      	b.n	8005a14 <USBD_HID_Setup+0xb8>

	default:
		USBD_CtlError(pdev, req);
 8005a06:	6839      	ldr	r1, [r7, #0]
 8005a08:	6878      	ldr	r0, [r7, #4]
 8005a0a:	f001 f8c4 	bl	8006b96 <USBD_CtlError>
		ret = USBD_FAIL;
 8005a0e:	2302      	movs	r3, #2
 8005a10:	75fb      	strb	r3, [r7, #23]
		break;
 8005a12:	bf00      	nop
	}
	break;
 8005a14:	e096      	b.n	8005b44 <USBD_HID_Setup+0x1e8>
case USB_REQ_TYPE_STANDARD:
	switch (req->bRequest) {
 8005a16:	683b      	ldr	r3, [r7, #0]
 8005a18:	785b      	ldrb	r3, [r3, #1]
 8005a1a:	2b0b      	cmp	r3, #11
 8005a1c:	f200 8083 	bhi.w	8005b26 <USBD_HID_Setup+0x1ca>
 8005a20:	a201      	add	r2, pc, #4	; (adr r2, 8005a28 <USBD_HID_Setup+0xcc>)
 8005a22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a26:	bf00      	nop
 8005a28:	08005a59 	.word	0x08005a59
 8005a2c:	08005b27 	.word	0x08005b27
 8005a30:	08005b27 	.word	0x08005b27
 8005a34:	08005b27 	.word	0x08005b27
 8005a38:	08005b27 	.word	0x08005b27
 8005a3c:	08005b27 	.word	0x08005b27
 8005a40:	08005a81 	.word	0x08005a81
 8005a44:	08005b27 	.word	0x08005b27
 8005a48:	08005b27 	.word	0x08005b27
 8005a4c:	08005b27 	.word	0x08005b27
 8005a50:	08005ad9 	.word	0x08005ad9
 8005a54:	08005b01 	.word	0x08005b01
	case USB_REQ_GET_STATUS:
		if (pdev->dev_state == USBD_STATE_CONFIGURED) {
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005a5e:	2b03      	cmp	r3, #3
 8005a60:	d107      	bne.n	8005a72 <USBD_HID_Setup+0x116>
			USBD_CtlSendData(pdev, (uint8_t*) (void*) &status_info, 2U);
 8005a62:	f107 030e 	add.w	r3, r7, #14
 8005a66:	2202      	movs	r2, #2
 8005a68:	4619      	mov	r1, r3
 8005a6a:	6878      	ldr	r0, [r7, #4]
 8005a6c:	f001 f8fd 	bl	8006c6a <USBD_CtlSendData>
		} else {
			USBD_CtlError(pdev, req);
			ret = USBD_FAIL;
		}
		break;
 8005a70:	e060      	b.n	8005b34 <USBD_HID_Setup+0x1d8>
			USBD_CtlError(pdev, req);
 8005a72:	6839      	ldr	r1, [r7, #0]
 8005a74:	6878      	ldr	r0, [r7, #4]
 8005a76:	f001 f88e 	bl	8006b96 <USBD_CtlError>
			ret = USBD_FAIL;
 8005a7a:	2302      	movs	r3, #2
 8005a7c:	75fb      	strb	r3, [r7, #23]
		break;
 8005a7e:	e059      	b.n	8005b34 <USBD_HID_Setup+0x1d8>

	case USB_REQ_GET_DESCRIPTOR:
		if (req->wValue >> 8 == HID_REPORT_DESC) {
 8005a80:	683b      	ldr	r3, [r7, #0]
 8005a82:	885b      	ldrh	r3, [r3, #2]
 8005a84:	0a1b      	lsrs	r3, r3, #8
 8005a86:	b29b      	uxth	r3, r3
 8005a88:	2b22      	cmp	r3, #34	; 0x22
 8005a8a:	d108      	bne.n	8005a9e <USBD_HID_Setup+0x142>
			len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 8005a8c:	683b      	ldr	r3, [r7, #0]
 8005a8e:	88db      	ldrh	r3, [r3, #6]
 8005a90:	2b32      	cmp	r3, #50	; 0x32
 8005a92:	bf28      	it	cs
 8005a94:	2332      	movcs	r3, #50	; 0x32
 8005a96:	83fb      	strh	r3, [r7, #30]
			pbuf = HID_MOUSE_ReportDesc;
 8005a98:	4b2d      	ldr	r3, [pc, #180]	; (8005b50 <USBD_HID_Setup+0x1f4>)
 8005a9a:	61bb      	str	r3, [r7, #24]
 8005a9c:	e015      	b.n	8005aca <USBD_HID_Setup+0x16e>
		} else if (req->wValue >> 8 == HID_DESCRIPTOR_TYPE) {
 8005a9e:	683b      	ldr	r3, [r7, #0]
 8005aa0:	885b      	ldrh	r3, [r3, #2]
 8005aa2:	0a1b      	lsrs	r3, r3, #8
 8005aa4:	b29b      	uxth	r3, r3
 8005aa6:	2b21      	cmp	r3, #33	; 0x21
 8005aa8:	d108      	bne.n	8005abc <USBD_HID_Setup+0x160>
			pbuf = USBD_HID_Desc;
 8005aaa:	4b2a      	ldr	r3, [pc, #168]	; (8005b54 <USBD_HID_Setup+0x1f8>)
 8005aac:	61bb      	str	r3, [r7, #24]
			len = MIN(USB_HID_DESC_SIZ, req->wLength);
 8005aae:	683b      	ldr	r3, [r7, #0]
 8005ab0:	88db      	ldrh	r3, [r3, #6]
 8005ab2:	2b09      	cmp	r3, #9
 8005ab4:	bf28      	it	cs
 8005ab6:	2309      	movcs	r3, #9
 8005ab8:	83fb      	strh	r3, [r7, #30]
 8005aba:	e006      	b.n	8005aca <USBD_HID_Setup+0x16e>
		} else {
			USBD_CtlError(pdev, req);
 8005abc:	6839      	ldr	r1, [r7, #0]
 8005abe:	6878      	ldr	r0, [r7, #4]
 8005ac0:	f001 f869 	bl	8006b96 <USBD_CtlError>
			ret = USBD_FAIL;
 8005ac4:	2302      	movs	r3, #2
 8005ac6:	75fb      	strb	r3, [r7, #23]
			break;
 8005ac8:	e034      	b.n	8005b34 <USBD_HID_Setup+0x1d8>
		}
		USBD_CtlSendData(pdev, pbuf, len);
 8005aca:	8bfb      	ldrh	r3, [r7, #30]
 8005acc:	461a      	mov	r2, r3
 8005ace:	69b9      	ldr	r1, [r7, #24]
 8005ad0:	6878      	ldr	r0, [r7, #4]
 8005ad2:	f001 f8ca 	bl	8006c6a <USBD_CtlSendData>
		break;
 8005ad6:	e02d      	b.n	8005b34 <USBD_HID_Setup+0x1d8>

	case USB_REQ_GET_INTERFACE:
		if (pdev->dev_state == USBD_STATE_CONFIGURED) {
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005ade:	2b03      	cmp	r3, #3
 8005ae0:	d107      	bne.n	8005af2 <USBD_HID_Setup+0x196>
			USBD_CtlSendData(pdev, (uint8_t*) (void*) &hhid->AltSetting, 1U);
 8005ae2:	693b      	ldr	r3, [r7, #16]
 8005ae4:	3308      	adds	r3, #8
 8005ae6:	2201      	movs	r2, #1
 8005ae8:	4619      	mov	r1, r3
 8005aea:	6878      	ldr	r0, [r7, #4]
 8005aec:	f001 f8bd 	bl	8006c6a <USBD_CtlSendData>
		} else {
			USBD_CtlError(pdev, req);
			ret = USBD_FAIL;
		}
		break;
 8005af0:	e020      	b.n	8005b34 <USBD_HID_Setup+0x1d8>
			USBD_CtlError(pdev, req);
 8005af2:	6839      	ldr	r1, [r7, #0]
 8005af4:	6878      	ldr	r0, [r7, #4]
 8005af6:	f001 f84e 	bl	8006b96 <USBD_CtlError>
			ret = USBD_FAIL;
 8005afa:	2302      	movs	r3, #2
 8005afc:	75fb      	strb	r3, [r7, #23]
		break;
 8005afe:	e019      	b.n	8005b34 <USBD_HID_Setup+0x1d8>

	case USB_REQ_SET_INTERFACE:
		if (pdev->dev_state == USBD_STATE_CONFIGURED) {
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005b06:	2b03      	cmp	r3, #3
 8005b08:	d106      	bne.n	8005b18 <USBD_HID_Setup+0x1bc>
			hhid->AltSetting = (uint8_t) (req->wValue);
 8005b0a:	683b      	ldr	r3, [r7, #0]
 8005b0c:	885b      	ldrh	r3, [r3, #2]
 8005b0e:	b2db      	uxtb	r3, r3
 8005b10:	461a      	mov	r2, r3
 8005b12:	693b      	ldr	r3, [r7, #16]
 8005b14:	609a      	str	r2, [r3, #8]
		} else {
			USBD_CtlError(pdev, req);
			ret = USBD_FAIL;
		}
		break;
 8005b16:	e00d      	b.n	8005b34 <USBD_HID_Setup+0x1d8>
			USBD_CtlError(pdev, req);
 8005b18:	6839      	ldr	r1, [r7, #0]
 8005b1a:	6878      	ldr	r0, [r7, #4]
 8005b1c:	f001 f83b 	bl	8006b96 <USBD_CtlError>
			ret = USBD_FAIL;
 8005b20:	2302      	movs	r3, #2
 8005b22:	75fb      	strb	r3, [r7, #23]
		break;
 8005b24:	e006      	b.n	8005b34 <USBD_HID_Setup+0x1d8>

	default:
		USBD_CtlError(pdev, req);
 8005b26:	6839      	ldr	r1, [r7, #0]
 8005b28:	6878      	ldr	r0, [r7, #4]
 8005b2a:	f001 f834 	bl	8006b96 <USBD_CtlError>
		ret = USBD_FAIL;
 8005b2e:	2302      	movs	r3, #2
 8005b30:	75fb      	strb	r3, [r7, #23]
		break;
 8005b32:	bf00      	nop
	}
	break;
 8005b34:	e006      	b.n	8005b44 <USBD_HID_Setup+0x1e8>

default:
	USBD_CtlError(pdev, req);
 8005b36:	6839      	ldr	r1, [r7, #0]
 8005b38:	6878      	ldr	r0, [r7, #4]
 8005b3a:	f001 f82c 	bl	8006b96 <USBD_CtlError>
	ret = USBD_FAIL;
 8005b3e:	2302      	movs	r3, #2
 8005b40:	75fb      	strb	r3, [r7, #23]
	break;
 8005b42:	bf00      	nop
}

return ret;
 8005b44:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b46:	4618      	mov	r0, r3
 8005b48:	3720      	adds	r7, #32
 8005b4a:	46bd      	mov	sp, r7
 8005b4c:	bd80      	pop	{r7, pc}
 8005b4e:	bf00      	nop
 8005b50:	200000c8 	.word	0x200000c8
 8005b54:	200000b0 	.word	0x200000b0

08005b58 <USBD_HID_SendReport>:
 * @param  pdev: device instance
 * @param  buff: pointer to report
 * @retval status
 */
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef *pdev, uint8_t *report,
	uint16_t len) {
 8005b58:	b580      	push	{r7, lr}
 8005b5a:	b086      	sub	sp, #24
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	60f8      	str	r0, [r7, #12]
 8005b60:	60b9      	str	r1, [r7, #8]
 8005b62:	4613      	mov	r3, r2
 8005b64:	80fb      	strh	r3, [r7, #6]
USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef*) pdev->pClassData;
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005b6c:	617b      	str	r3, [r7, #20]

if (pdev->dev_state == USBD_STATE_CONFIGURED) {
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005b74:	2b03      	cmp	r3, #3
 8005b76:	d10c      	bne.n	8005b92 <USBD_HID_SendReport+0x3a>
	if (hhid->state == HID_IDLE) {
 8005b78:	697b      	ldr	r3, [r7, #20]
 8005b7a:	7b1b      	ldrb	r3, [r3, #12]
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d108      	bne.n	8005b92 <USBD_HID_SendReport+0x3a>
		hhid->state = HID_BUSY;
 8005b80:	697b      	ldr	r3, [r7, #20]
 8005b82:	2201      	movs	r2, #1
 8005b84:	731a      	strb	r2, [r3, #12]
		USBD_LL_Transmit(pdev,
 8005b86:	88fb      	ldrh	r3, [r7, #6]
 8005b88:	68ba      	ldr	r2, [r7, #8]
 8005b8a:	2181      	movs	r1, #129	; 0x81
 8005b8c:	68f8      	ldr	r0, [r7, #12]
 8005b8e:	f001 fbfa 	bl	8007386 <USBD_LL_Transmit>
		HID_EPIN_ADDR, report, len);
	}
}
return USBD_OK;
 8005b92:	2300      	movs	r3, #0
}
 8005b94:	4618      	mov	r0, r3
 8005b96:	3718      	adds	r7, #24
 8005b98:	46bd      	mov	sp, r7
 8005b9a:	bd80      	pop	{r7, pc}

08005b9c <USBD_HID_GetFSCfgDesc>:
 *         return FS configuration descriptor
 * @param  speed : current device speed
 * @param  length : pointer data length
 * @retval pointer to descriptor buffer
 */
static uint8_t* USBD_HID_GetFSCfgDesc(uint16_t *length) {
 8005b9c:	b480      	push	{r7}
 8005b9e:	b083      	sub	sp, #12
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	6078      	str	r0, [r7, #4]
*length = sizeof(USBD_HID_CfgFSDesc);
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	2222      	movs	r2, #34	; 0x22
 8005ba8:	801a      	strh	r2, [r3, #0]
return USBD_HID_CfgFSDesc;
 8005baa:	4b03      	ldr	r3, [pc, #12]	; (8005bb8 <USBD_HID_GetFSCfgDesc+0x1c>)
}
 8005bac:	4618      	mov	r0, r3
 8005bae:	370c      	adds	r7, #12
 8005bb0:	46bd      	mov	sp, r7
 8005bb2:	bc80      	pop	{r7}
 8005bb4:	4770      	bx	lr
 8005bb6:	bf00      	nop
 8005bb8:	20000044 	.word	0x20000044

08005bbc <USBD_HID_GetHSCfgDesc>:
 *         return HS configuration descriptor
 * @param  speed : current device speed
 * @param  length : pointer data length
 * @retval pointer to descriptor buffer
 */
static uint8_t* USBD_HID_GetHSCfgDesc(uint16_t *length) {
 8005bbc:	b480      	push	{r7}
 8005bbe:	b083      	sub	sp, #12
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	6078      	str	r0, [r7, #4]
*length = sizeof(USBD_HID_CfgHSDesc);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	2222      	movs	r2, #34	; 0x22
 8005bc8:	801a      	strh	r2, [r3, #0]
return USBD_HID_CfgHSDesc;
 8005bca:	4b03      	ldr	r3, [pc, #12]	; (8005bd8 <USBD_HID_GetHSCfgDesc+0x1c>)
}
 8005bcc:	4618      	mov	r0, r3
 8005bce:	370c      	adds	r7, #12
 8005bd0:	46bd      	mov	sp, r7
 8005bd2:	bc80      	pop	{r7}
 8005bd4:	4770      	bx	lr
 8005bd6:	bf00      	nop
 8005bd8:	20000068 	.word	0x20000068

08005bdc <USBD_HID_GetOtherSpeedCfgDesc>:
 *         return other speed configuration descriptor
 * @param  speed : current device speed
 * @param  length : pointer data length
 * @retval pointer to descriptor buffer
 */
static uint8_t* USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length) {
 8005bdc:	b480      	push	{r7}
 8005bde:	b083      	sub	sp, #12
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	6078      	str	r0, [r7, #4]
*length = sizeof(USBD_HID_OtherSpeedCfgDesc);
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	2222      	movs	r2, #34	; 0x22
 8005be8:	801a      	strh	r2, [r3, #0]
return USBD_HID_OtherSpeedCfgDesc;
 8005bea:	4b03      	ldr	r3, [pc, #12]	; (8005bf8 <USBD_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 8005bec:	4618      	mov	r0, r3
 8005bee:	370c      	adds	r7, #12
 8005bf0:	46bd      	mov	sp, r7
 8005bf2:	bc80      	pop	{r7}
 8005bf4:	4770      	bx	lr
 8005bf6:	bf00      	nop
 8005bf8:	2000008c 	.word	0x2000008c

08005bfc <USBD_HID_DataIn>:
 *         handle data IN Stage
 * @param  pdev: device instance
 * @param  epnum: endpoint index
 * @retval status
 */
static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum) {
 8005bfc:	b480      	push	{r7}
 8005bfe:	b083      	sub	sp, #12
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	6078      	str	r0, [r7, #4]
 8005c04:	460b      	mov	r3, r1
 8005c06:	70fb      	strb	r3, [r7, #3]

/* Ensure that the FIFO is empty before a new transfer, this condition could
 be caused by  a new transfer before the end of the previous transfer */
((USBD_HID_HandleTypeDef*) pdev->pClassData)->state = HID_IDLE;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c0e:	2200      	movs	r2, #0
 8005c10:	731a      	strb	r2, [r3, #12]
return USBD_OK;
 8005c12:	2300      	movs	r3, #0
}
 8005c14:	4618      	mov	r0, r3
 8005c16:	370c      	adds	r7, #12
 8005c18:	46bd      	mov	sp, r7
 8005c1a:	bc80      	pop	{r7}
 8005c1c:	4770      	bx	lr
	...

08005c20 <USBD_HID_GetDeviceQualifierDesc>:
 * @brief  DeviceQualifierDescriptor
 *         return Device Qualifier descriptor
 * @param  length : pointer data length
 * @retval pointer to descriptor buffer
 */
static uint8_t* USBD_HID_GetDeviceQualifierDesc(uint16_t *length) {
 8005c20:	b480      	push	{r7}
 8005c22:	b083      	sub	sp, #12
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	6078      	str	r0, [r7, #4]
*length = sizeof(USBD_HID_DeviceQualifierDesc);
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	220a      	movs	r2, #10
 8005c2c:	801a      	strh	r2, [r3, #0]
return USBD_HID_DeviceQualifierDesc;
 8005c2e:	4b03      	ldr	r3, [pc, #12]	; (8005c3c <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 8005c30:	4618      	mov	r0, r3
 8005c32:	370c      	adds	r7, #12
 8005c34:	46bd      	mov	sp, r7
 8005c36:	bc80      	pop	{r7}
 8005c38:	4770      	bx	lr
 8005c3a:	bf00      	nop
 8005c3c:	200000bc 	.word	0x200000bc

08005c40 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005c40:	b580      	push	{r7, lr}
 8005c42:	b084      	sub	sp, #16
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	60f8      	str	r0, [r7, #12]
 8005c48:	60b9      	str	r1, [r7, #8]
 8005c4a:	4613      	mov	r3, r2
 8005c4c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d101      	bne.n	8005c58 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8005c54:	2302      	movs	r3, #2
 8005c56:	e01a      	b.n	8005c8e <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d003      	beq.n	8005c6a <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	2200      	movs	r2, #0
 8005c66:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005c6a:	68bb      	ldr	r3, [r7, #8]
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d003      	beq.n	8005c78 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	68ba      	ldr	r2, [r7, #8]
 8005c74:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	2201      	movs	r2, #1
 8005c7c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	79fa      	ldrb	r2, [r7, #7]
 8005c84:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8005c86:	68f8      	ldr	r0, [r7, #12]
 8005c88:	f001 fa4c 	bl	8007124 <USBD_LL_Init>

  return USBD_OK;
 8005c8c:	2300      	movs	r3, #0
}
 8005c8e:	4618      	mov	r0, r3
 8005c90:	3710      	adds	r7, #16
 8005c92:	46bd      	mov	sp, r7
 8005c94:	bd80      	pop	{r7, pc}

08005c96 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005c96:	b480      	push	{r7}
 8005c98:	b085      	sub	sp, #20
 8005c9a:	af00      	add	r7, sp, #0
 8005c9c:	6078      	str	r0, [r7, #4]
 8005c9e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8005ca0:	2300      	movs	r3, #0
 8005ca2:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8005ca4:	683b      	ldr	r3, [r7, #0]
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d006      	beq.n	8005cb8 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	683a      	ldr	r2, [r7, #0]
 8005cae:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8005cb2:	2300      	movs	r3, #0
 8005cb4:	73fb      	strb	r3, [r7, #15]
 8005cb6:	e001      	b.n	8005cbc <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8005cb8:	2302      	movs	r3, #2
 8005cba:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8005cbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cbe:	4618      	mov	r0, r3
 8005cc0:	3714      	adds	r7, #20
 8005cc2:	46bd      	mov	sp, r7
 8005cc4:	bc80      	pop	{r7}
 8005cc6:	4770      	bx	lr

08005cc8 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005cc8:	b580      	push	{r7, lr}
 8005cca:	b082      	sub	sp, #8
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8005cd0:	6878      	ldr	r0, [r7, #4]
 8005cd2:	f001 fa6f 	bl	80071b4 <USBD_LL_Start>

  return USBD_OK;
 8005cd6:	2300      	movs	r3, #0
}
 8005cd8:	4618      	mov	r0, r3
 8005cda:	3708      	adds	r7, #8
 8005cdc:	46bd      	mov	sp, r7
 8005cde:	bd80      	pop	{r7, pc}

08005ce0 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8005ce0:	b480      	push	{r7}
 8005ce2:	b083      	sub	sp, #12
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005ce8:	2300      	movs	r3, #0
}
 8005cea:	4618      	mov	r0, r3
 8005cec:	370c      	adds	r7, #12
 8005cee:	46bd      	mov	sp, r7
 8005cf0:	bc80      	pop	{r7}
 8005cf2:	4770      	bx	lr

08005cf4 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8005cf4:	b580      	push	{r7, lr}
 8005cf6:	b084      	sub	sp, #16
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	6078      	str	r0, [r7, #4]
 8005cfc:	460b      	mov	r3, r1
 8005cfe:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8005d00:	2302      	movs	r3, #2
 8005d02:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d00c      	beq.n	8005d28 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	78fa      	ldrb	r2, [r7, #3]
 8005d18:	4611      	mov	r1, r2
 8005d1a:	6878      	ldr	r0, [r7, #4]
 8005d1c:	4798      	blx	r3
 8005d1e:	4603      	mov	r3, r0
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d101      	bne.n	8005d28 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8005d24:	2300      	movs	r3, #0
 8005d26:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8005d28:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d2a:	4618      	mov	r0, r3
 8005d2c:	3710      	adds	r7, #16
 8005d2e:	46bd      	mov	sp, r7
 8005d30:	bd80      	pop	{r7, pc}

08005d32 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8005d32:	b580      	push	{r7, lr}
 8005d34:	b082      	sub	sp, #8
 8005d36:	af00      	add	r7, sp, #0
 8005d38:	6078      	str	r0, [r7, #4]
 8005d3a:	460b      	mov	r3, r1
 8005d3c:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005d44:	685b      	ldr	r3, [r3, #4]
 8005d46:	78fa      	ldrb	r2, [r7, #3]
 8005d48:	4611      	mov	r1, r2
 8005d4a:	6878      	ldr	r0, [r7, #4]
 8005d4c:	4798      	blx	r3

  return USBD_OK;
 8005d4e:	2300      	movs	r3, #0
}
 8005d50:	4618      	mov	r0, r3
 8005d52:	3708      	adds	r7, #8
 8005d54:	46bd      	mov	sp, r7
 8005d56:	bd80      	pop	{r7, pc}

08005d58 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005d58:	b580      	push	{r7, lr}
 8005d5a:	b082      	sub	sp, #8
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	6078      	str	r0, [r7, #4]
 8005d60:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8005d68:	6839      	ldr	r1, [r7, #0]
 8005d6a:	4618      	mov	r0, r3
 8005d6c:	f000 fed7 	bl	8006b1e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	2201      	movs	r2, #1
 8005d74:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8005d7e:	461a      	mov	r2, r3
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8005d8c:	f003 031f 	and.w	r3, r3, #31
 8005d90:	2b02      	cmp	r3, #2
 8005d92:	d016      	beq.n	8005dc2 <USBD_LL_SetupStage+0x6a>
 8005d94:	2b02      	cmp	r3, #2
 8005d96:	d81c      	bhi.n	8005dd2 <USBD_LL_SetupStage+0x7a>
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d002      	beq.n	8005da2 <USBD_LL_SetupStage+0x4a>
 8005d9c:	2b01      	cmp	r3, #1
 8005d9e:	d008      	beq.n	8005db2 <USBD_LL_SetupStage+0x5a>
 8005da0:	e017      	b.n	8005dd2 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8005da8:	4619      	mov	r1, r3
 8005daa:	6878      	ldr	r0, [r7, #4]
 8005dac:	f000 f9ca 	bl	8006144 <USBD_StdDevReq>
      break;
 8005db0:	e01a      	b.n	8005de8 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8005db8:	4619      	mov	r1, r3
 8005dba:	6878      	ldr	r0, [r7, #4]
 8005dbc:	f000 fa2c 	bl	8006218 <USBD_StdItfReq>
      break;
 8005dc0:	e012      	b.n	8005de8 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8005dc8:	4619      	mov	r1, r3
 8005dca:	6878      	ldr	r0, [r7, #4]
 8005dcc:	f000 fa6c 	bl	80062a8 <USBD_StdEPReq>
      break;
 8005dd0:	e00a      	b.n	8005de8 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8005dd8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005ddc:	b2db      	uxtb	r3, r3
 8005dde:	4619      	mov	r1, r3
 8005de0:	6878      	ldr	r0, [r7, #4]
 8005de2:	f001 fa47 	bl	8007274 <USBD_LL_StallEP>
      break;
 8005de6:	bf00      	nop
  }

  return USBD_OK;
 8005de8:	2300      	movs	r3, #0
}
 8005dea:	4618      	mov	r0, r3
 8005dec:	3708      	adds	r7, #8
 8005dee:	46bd      	mov	sp, r7
 8005df0:	bd80      	pop	{r7, pc}

08005df2 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005df2:	b580      	push	{r7, lr}
 8005df4:	b086      	sub	sp, #24
 8005df6:	af00      	add	r7, sp, #0
 8005df8:	60f8      	str	r0, [r7, #12]
 8005dfa:	460b      	mov	r3, r1
 8005dfc:	607a      	str	r2, [r7, #4]
 8005dfe:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8005e00:	7afb      	ldrb	r3, [r7, #11]
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d14b      	bne.n	8005e9e <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8005e0c:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005e14:	2b03      	cmp	r3, #3
 8005e16:	d134      	bne.n	8005e82 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8005e18:	697b      	ldr	r3, [r7, #20]
 8005e1a:	68da      	ldr	r2, [r3, #12]
 8005e1c:	697b      	ldr	r3, [r7, #20]
 8005e1e:	691b      	ldr	r3, [r3, #16]
 8005e20:	429a      	cmp	r2, r3
 8005e22:	d919      	bls.n	8005e58 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8005e24:	697b      	ldr	r3, [r7, #20]
 8005e26:	68da      	ldr	r2, [r3, #12]
 8005e28:	697b      	ldr	r3, [r7, #20]
 8005e2a:	691b      	ldr	r3, [r3, #16]
 8005e2c:	1ad2      	subs	r2, r2, r3
 8005e2e:	697b      	ldr	r3, [r7, #20]
 8005e30:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8005e32:	697b      	ldr	r3, [r7, #20]
 8005e34:	68da      	ldr	r2, [r3, #12]
 8005e36:	697b      	ldr	r3, [r7, #20]
 8005e38:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8005e3a:	429a      	cmp	r2, r3
 8005e3c:	d203      	bcs.n	8005e46 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8005e3e:	697b      	ldr	r3, [r7, #20]
 8005e40:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8005e42:	b29b      	uxth	r3, r3
 8005e44:	e002      	b.n	8005e4c <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8005e46:	697b      	ldr	r3, [r7, #20]
 8005e48:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8005e4a:	b29b      	uxth	r3, r3
 8005e4c:	461a      	mov	r2, r3
 8005e4e:	6879      	ldr	r1, [r7, #4]
 8005e50:	68f8      	ldr	r0, [r7, #12]
 8005e52:	f000 ff38 	bl	8006cc6 <USBD_CtlContinueRx>
 8005e56:	e038      	b.n	8005eca <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005e5e:	691b      	ldr	r3, [r3, #16]
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d00a      	beq.n	8005e7a <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8005e6a:	2b03      	cmp	r3, #3
 8005e6c:	d105      	bne.n	8005e7a <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005e74:	691b      	ldr	r3, [r3, #16]
 8005e76:	68f8      	ldr	r0, [r7, #12]
 8005e78:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8005e7a:	68f8      	ldr	r0, [r7, #12]
 8005e7c:	f000 ff35 	bl	8006cea <USBD_CtlSendStatus>
 8005e80:	e023      	b.n	8005eca <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005e88:	2b05      	cmp	r3, #5
 8005e8a:	d11e      	bne.n	8005eca <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	2200      	movs	r2, #0
 8005e90:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8005e94:	2100      	movs	r1, #0
 8005e96:	68f8      	ldr	r0, [r7, #12]
 8005e98:	f001 f9ec 	bl	8007274 <USBD_LL_StallEP>
 8005e9c:	e015      	b.n	8005eca <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005ea4:	699b      	ldr	r3, [r3, #24]
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d00d      	beq.n	8005ec6 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8005eb0:	2b03      	cmp	r3, #3
 8005eb2:	d108      	bne.n	8005ec6 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005eba:	699b      	ldr	r3, [r3, #24]
 8005ebc:	7afa      	ldrb	r2, [r7, #11]
 8005ebe:	4611      	mov	r1, r2
 8005ec0:	68f8      	ldr	r0, [r7, #12]
 8005ec2:	4798      	blx	r3
 8005ec4:	e001      	b.n	8005eca <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8005ec6:	2302      	movs	r3, #2
 8005ec8:	e000      	b.n	8005ecc <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8005eca:	2300      	movs	r3, #0
}
 8005ecc:	4618      	mov	r0, r3
 8005ece:	3718      	adds	r7, #24
 8005ed0:	46bd      	mov	sp, r7
 8005ed2:	bd80      	pop	{r7, pc}

08005ed4 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005ed4:	b580      	push	{r7, lr}
 8005ed6:	b086      	sub	sp, #24
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	60f8      	str	r0, [r7, #12]
 8005edc:	460b      	mov	r3, r1
 8005ede:	607a      	str	r2, [r7, #4]
 8005ee0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8005ee2:	7afb      	ldrb	r3, [r7, #11]
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d17f      	bne.n	8005fe8 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	3314      	adds	r3, #20
 8005eec:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005ef4:	2b02      	cmp	r3, #2
 8005ef6:	d15c      	bne.n	8005fb2 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8005ef8:	697b      	ldr	r3, [r7, #20]
 8005efa:	68da      	ldr	r2, [r3, #12]
 8005efc:	697b      	ldr	r3, [r7, #20]
 8005efe:	691b      	ldr	r3, [r3, #16]
 8005f00:	429a      	cmp	r2, r3
 8005f02:	d915      	bls.n	8005f30 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8005f04:	697b      	ldr	r3, [r7, #20]
 8005f06:	68da      	ldr	r2, [r3, #12]
 8005f08:	697b      	ldr	r3, [r7, #20]
 8005f0a:	691b      	ldr	r3, [r3, #16]
 8005f0c:	1ad2      	subs	r2, r2, r3
 8005f0e:	697b      	ldr	r3, [r7, #20]
 8005f10:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8005f12:	697b      	ldr	r3, [r7, #20]
 8005f14:	68db      	ldr	r3, [r3, #12]
 8005f16:	b29b      	uxth	r3, r3
 8005f18:	461a      	mov	r2, r3
 8005f1a:	6879      	ldr	r1, [r7, #4]
 8005f1c:	68f8      	ldr	r0, [r7, #12]
 8005f1e:	f000 fec0 	bl	8006ca2 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005f22:	2300      	movs	r3, #0
 8005f24:	2200      	movs	r2, #0
 8005f26:	2100      	movs	r1, #0
 8005f28:	68f8      	ldr	r0, [r7, #12]
 8005f2a:	f001 fa4f 	bl	80073cc <USBD_LL_PrepareReceive>
 8005f2e:	e04e      	b.n	8005fce <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8005f30:	697b      	ldr	r3, [r7, #20]
 8005f32:	689b      	ldr	r3, [r3, #8]
 8005f34:	697a      	ldr	r2, [r7, #20]
 8005f36:	6912      	ldr	r2, [r2, #16]
 8005f38:	fbb3 f1f2 	udiv	r1, r3, r2
 8005f3c:	fb02 f201 	mul.w	r2, r2, r1
 8005f40:	1a9b      	subs	r3, r3, r2
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d11c      	bne.n	8005f80 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8005f46:	697b      	ldr	r3, [r7, #20]
 8005f48:	689a      	ldr	r2, [r3, #8]
 8005f4a:	697b      	ldr	r3, [r7, #20]
 8005f4c:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8005f4e:	429a      	cmp	r2, r3
 8005f50:	d316      	bcc.n	8005f80 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8005f52:	697b      	ldr	r3, [r7, #20]
 8005f54:	689a      	ldr	r2, [r3, #8]
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8005f5c:	429a      	cmp	r2, r3
 8005f5e:	d20f      	bcs.n	8005f80 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005f60:	2200      	movs	r2, #0
 8005f62:	2100      	movs	r1, #0
 8005f64:	68f8      	ldr	r0, [r7, #12]
 8005f66:	f000 fe9c 	bl	8006ca2 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	2200      	movs	r2, #0
 8005f6e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005f72:	2300      	movs	r3, #0
 8005f74:	2200      	movs	r2, #0
 8005f76:	2100      	movs	r1, #0
 8005f78:	68f8      	ldr	r0, [r7, #12]
 8005f7a:	f001 fa27 	bl	80073cc <USBD_LL_PrepareReceive>
 8005f7e:	e026      	b.n	8005fce <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005f86:	68db      	ldr	r3, [r3, #12]
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d00a      	beq.n	8005fa2 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8005f92:	2b03      	cmp	r3, #3
 8005f94:	d105      	bne.n	8005fa2 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005f9c:	68db      	ldr	r3, [r3, #12]
 8005f9e:	68f8      	ldr	r0, [r7, #12]
 8005fa0:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8005fa2:	2180      	movs	r1, #128	; 0x80
 8005fa4:	68f8      	ldr	r0, [r7, #12]
 8005fa6:	f001 f965 	bl	8007274 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8005faa:	68f8      	ldr	r0, [r7, #12]
 8005fac:	f000 feb0 	bl	8006d10 <USBD_CtlReceiveStatus>
 8005fb0:	e00d      	b.n	8005fce <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005fb8:	2b04      	cmp	r3, #4
 8005fba:	d004      	beq.n	8005fc6 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d103      	bne.n	8005fce <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8005fc6:	2180      	movs	r1, #128	; 0x80
 8005fc8:	68f8      	ldr	r0, [r7, #12]
 8005fca:	f001 f953 	bl	8007274 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8005fd4:	2b01      	cmp	r3, #1
 8005fd6:	d11d      	bne.n	8006014 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8005fd8:	68f8      	ldr	r0, [r7, #12]
 8005fda:	f7ff fe81 	bl	8005ce0 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	2200      	movs	r2, #0
 8005fe2:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8005fe6:	e015      	b.n	8006014 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005fee:	695b      	ldr	r3, [r3, #20]
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d00d      	beq.n	8006010 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8005ffa:	2b03      	cmp	r3, #3
 8005ffc:	d108      	bne.n	8006010 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006004:	695b      	ldr	r3, [r3, #20]
 8006006:	7afa      	ldrb	r2, [r7, #11]
 8006008:	4611      	mov	r1, r2
 800600a:	68f8      	ldr	r0, [r7, #12]
 800600c:	4798      	blx	r3
 800600e:	e001      	b.n	8006014 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006010:	2302      	movs	r3, #2
 8006012:	e000      	b.n	8006016 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8006014:	2300      	movs	r3, #0
}
 8006016:	4618      	mov	r0, r3
 8006018:	3718      	adds	r7, #24
 800601a:	46bd      	mov	sp, r7
 800601c:	bd80      	pop	{r7, pc}

0800601e <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800601e:	b580      	push	{r7, lr}
 8006020:	b082      	sub	sp, #8
 8006022:	af00      	add	r7, sp, #0
 8006024:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006026:	2340      	movs	r3, #64	; 0x40
 8006028:	2200      	movs	r2, #0
 800602a:	2100      	movs	r1, #0
 800602c:	6878      	ldr	r0, [r7, #4]
 800602e:	f001 f8dc 	bl	80071ea <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	2201      	movs	r2, #1
 8006036:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	2240      	movs	r2, #64	; 0x40
 800603e:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006042:	2340      	movs	r3, #64	; 0x40
 8006044:	2200      	movs	r2, #0
 8006046:	2180      	movs	r1, #128	; 0x80
 8006048:	6878      	ldr	r0, [r7, #4]
 800604a:	f001 f8ce 	bl	80071ea <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	2201      	movs	r2, #1
 8006052:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	2240      	movs	r2, #64	; 0x40
 8006058:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	2201      	movs	r2, #1
 800605e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	2200      	movs	r2, #0
 8006066:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	2200      	movs	r2, #0
 800606e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	2200      	movs	r2, #0
 8006074:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800607e:	2b00      	cmp	r3, #0
 8006080:	d009      	beq.n	8006096 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006088:	685b      	ldr	r3, [r3, #4]
 800608a:	687a      	ldr	r2, [r7, #4]
 800608c:	6852      	ldr	r2, [r2, #4]
 800608e:	b2d2      	uxtb	r2, r2
 8006090:	4611      	mov	r1, r2
 8006092:	6878      	ldr	r0, [r7, #4]
 8006094:	4798      	blx	r3
  }

  return USBD_OK;
 8006096:	2300      	movs	r3, #0
}
 8006098:	4618      	mov	r0, r3
 800609a:	3708      	adds	r7, #8
 800609c:	46bd      	mov	sp, r7
 800609e:	bd80      	pop	{r7, pc}

080060a0 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80060a0:	b480      	push	{r7}
 80060a2:	b083      	sub	sp, #12
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	6078      	str	r0, [r7, #4]
 80060a8:	460b      	mov	r3, r1
 80060aa:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	78fa      	ldrb	r2, [r7, #3]
 80060b0:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80060b2:	2300      	movs	r3, #0
}
 80060b4:	4618      	mov	r0, r3
 80060b6:	370c      	adds	r7, #12
 80060b8:	46bd      	mov	sp, r7
 80060ba:	bc80      	pop	{r7}
 80060bc:	4770      	bx	lr

080060be <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80060be:	b480      	push	{r7}
 80060c0:	b083      	sub	sp, #12
 80060c2:	af00      	add	r7, sp, #0
 80060c4:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	2204      	movs	r2, #4
 80060d6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80060da:	2300      	movs	r3, #0
}
 80060dc:	4618      	mov	r0, r3
 80060de:	370c      	adds	r7, #12
 80060e0:	46bd      	mov	sp, r7
 80060e2:	bc80      	pop	{r7}
 80060e4:	4770      	bx	lr

080060e6 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80060e6:	b480      	push	{r7}
 80060e8:	b083      	sub	sp, #12
 80060ea:	af00      	add	r7, sp, #0
 80060ec:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80060f4:	2b04      	cmp	r3, #4
 80060f6:	d105      	bne.n	8006104 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006104:	2300      	movs	r3, #0
}
 8006106:	4618      	mov	r0, r3
 8006108:	370c      	adds	r7, #12
 800610a:	46bd      	mov	sp, r7
 800610c:	bc80      	pop	{r7}
 800610e:	4770      	bx	lr

08006110 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006110:	b580      	push	{r7, lr}
 8006112:	b082      	sub	sp, #8
 8006114:	af00      	add	r7, sp, #0
 8006116:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800611e:	2b03      	cmp	r3, #3
 8006120:	d10b      	bne.n	800613a <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006128:	69db      	ldr	r3, [r3, #28]
 800612a:	2b00      	cmp	r3, #0
 800612c:	d005      	beq.n	800613a <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006134:	69db      	ldr	r3, [r3, #28]
 8006136:	6878      	ldr	r0, [r7, #4]
 8006138:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800613a:	2300      	movs	r3, #0
}
 800613c:	4618      	mov	r0, r3
 800613e:	3708      	adds	r7, #8
 8006140:	46bd      	mov	sp, r7
 8006142:	bd80      	pop	{r7, pc}

08006144 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8006144:	b580      	push	{r7, lr}
 8006146:	b084      	sub	sp, #16
 8006148:	af00      	add	r7, sp, #0
 800614a:	6078      	str	r0, [r7, #4]
 800614c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800614e:	2300      	movs	r3, #0
 8006150:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006152:	683b      	ldr	r3, [r7, #0]
 8006154:	781b      	ldrb	r3, [r3, #0]
 8006156:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800615a:	2b40      	cmp	r3, #64	; 0x40
 800615c:	d005      	beq.n	800616a <USBD_StdDevReq+0x26>
 800615e:	2b40      	cmp	r3, #64	; 0x40
 8006160:	d84f      	bhi.n	8006202 <USBD_StdDevReq+0xbe>
 8006162:	2b00      	cmp	r3, #0
 8006164:	d009      	beq.n	800617a <USBD_StdDevReq+0x36>
 8006166:	2b20      	cmp	r3, #32
 8006168:	d14b      	bne.n	8006202 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006170:	689b      	ldr	r3, [r3, #8]
 8006172:	6839      	ldr	r1, [r7, #0]
 8006174:	6878      	ldr	r0, [r7, #4]
 8006176:	4798      	blx	r3
      break;
 8006178:	e048      	b.n	800620c <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800617a:	683b      	ldr	r3, [r7, #0]
 800617c:	785b      	ldrb	r3, [r3, #1]
 800617e:	2b09      	cmp	r3, #9
 8006180:	d839      	bhi.n	80061f6 <USBD_StdDevReq+0xb2>
 8006182:	a201      	add	r2, pc, #4	; (adr r2, 8006188 <USBD_StdDevReq+0x44>)
 8006184:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006188:	080061d9 	.word	0x080061d9
 800618c:	080061ed 	.word	0x080061ed
 8006190:	080061f7 	.word	0x080061f7
 8006194:	080061e3 	.word	0x080061e3
 8006198:	080061f7 	.word	0x080061f7
 800619c:	080061bb 	.word	0x080061bb
 80061a0:	080061b1 	.word	0x080061b1
 80061a4:	080061f7 	.word	0x080061f7
 80061a8:	080061cf 	.word	0x080061cf
 80061ac:	080061c5 	.word	0x080061c5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80061b0:	6839      	ldr	r1, [r7, #0]
 80061b2:	6878      	ldr	r0, [r7, #4]
 80061b4:	f000 f9dc 	bl	8006570 <USBD_GetDescriptor>
          break;
 80061b8:	e022      	b.n	8006200 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80061ba:	6839      	ldr	r1, [r7, #0]
 80061bc:	6878      	ldr	r0, [r7, #4]
 80061be:	f000 fb3f 	bl	8006840 <USBD_SetAddress>
          break;
 80061c2:	e01d      	b.n	8006200 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 80061c4:	6839      	ldr	r1, [r7, #0]
 80061c6:	6878      	ldr	r0, [r7, #4]
 80061c8:	f000 fb7e 	bl	80068c8 <USBD_SetConfig>
          break;
 80061cc:	e018      	b.n	8006200 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80061ce:	6839      	ldr	r1, [r7, #0]
 80061d0:	6878      	ldr	r0, [r7, #4]
 80061d2:	f000 fc07 	bl	80069e4 <USBD_GetConfig>
          break;
 80061d6:	e013      	b.n	8006200 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80061d8:	6839      	ldr	r1, [r7, #0]
 80061da:	6878      	ldr	r0, [r7, #4]
 80061dc:	f000 fc37 	bl	8006a4e <USBD_GetStatus>
          break;
 80061e0:	e00e      	b.n	8006200 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80061e2:	6839      	ldr	r1, [r7, #0]
 80061e4:	6878      	ldr	r0, [r7, #4]
 80061e6:	f000 fc65 	bl	8006ab4 <USBD_SetFeature>
          break;
 80061ea:	e009      	b.n	8006200 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80061ec:	6839      	ldr	r1, [r7, #0]
 80061ee:	6878      	ldr	r0, [r7, #4]
 80061f0:	f000 fc74 	bl	8006adc <USBD_ClrFeature>
          break;
 80061f4:	e004      	b.n	8006200 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 80061f6:	6839      	ldr	r1, [r7, #0]
 80061f8:	6878      	ldr	r0, [r7, #4]
 80061fa:	f000 fccc 	bl	8006b96 <USBD_CtlError>
          break;
 80061fe:	bf00      	nop
      }
      break;
 8006200:	e004      	b.n	800620c <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8006202:	6839      	ldr	r1, [r7, #0]
 8006204:	6878      	ldr	r0, [r7, #4]
 8006206:	f000 fcc6 	bl	8006b96 <USBD_CtlError>
      break;
 800620a:	bf00      	nop
  }

  return ret;
 800620c:	7bfb      	ldrb	r3, [r7, #15]
}
 800620e:	4618      	mov	r0, r3
 8006210:	3710      	adds	r7, #16
 8006212:	46bd      	mov	sp, r7
 8006214:	bd80      	pop	{r7, pc}
 8006216:	bf00      	nop

08006218 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8006218:	b580      	push	{r7, lr}
 800621a:	b084      	sub	sp, #16
 800621c:	af00      	add	r7, sp, #0
 800621e:	6078      	str	r0, [r7, #4]
 8006220:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006222:	2300      	movs	r3, #0
 8006224:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006226:	683b      	ldr	r3, [r7, #0]
 8006228:	781b      	ldrb	r3, [r3, #0]
 800622a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800622e:	2b40      	cmp	r3, #64	; 0x40
 8006230:	d005      	beq.n	800623e <USBD_StdItfReq+0x26>
 8006232:	2b40      	cmp	r3, #64	; 0x40
 8006234:	d82e      	bhi.n	8006294 <USBD_StdItfReq+0x7c>
 8006236:	2b00      	cmp	r3, #0
 8006238:	d001      	beq.n	800623e <USBD_StdItfReq+0x26>
 800623a:	2b20      	cmp	r3, #32
 800623c:	d12a      	bne.n	8006294 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006244:	3b01      	subs	r3, #1
 8006246:	2b02      	cmp	r3, #2
 8006248:	d81d      	bhi.n	8006286 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800624a:	683b      	ldr	r3, [r7, #0]
 800624c:	889b      	ldrh	r3, [r3, #4]
 800624e:	b2db      	uxtb	r3, r3
 8006250:	2b01      	cmp	r3, #1
 8006252:	d813      	bhi.n	800627c <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800625a:	689b      	ldr	r3, [r3, #8]
 800625c:	6839      	ldr	r1, [r7, #0]
 800625e:	6878      	ldr	r0, [r7, #4]
 8006260:	4798      	blx	r3
 8006262:	4603      	mov	r3, r0
 8006264:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006266:	683b      	ldr	r3, [r7, #0]
 8006268:	88db      	ldrh	r3, [r3, #6]
 800626a:	2b00      	cmp	r3, #0
 800626c:	d110      	bne.n	8006290 <USBD_StdItfReq+0x78>
 800626e:	7bfb      	ldrb	r3, [r7, #15]
 8006270:	2b00      	cmp	r3, #0
 8006272:	d10d      	bne.n	8006290 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8006274:	6878      	ldr	r0, [r7, #4]
 8006276:	f000 fd38 	bl	8006cea <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800627a:	e009      	b.n	8006290 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 800627c:	6839      	ldr	r1, [r7, #0]
 800627e:	6878      	ldr	r0, [r7, #4]
 8006280:	f000 fc89 	bl	8006b96 <USBD_CtlError>
          break;
 8006284:	e004      	b.n	8006290 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8006286:	6839      	ldr	r1, [r7, #0]
 8006288:	6878      	ldr	r0, [r7, #4]
 800628a:	f000 fc84 	bl	8006b96 <USBD_CtlError>
          break;
 800628e:	e000      	b.n	8006292 <USBD_StdItfReq+0x7a>
          break;
 8006290:	bf00      	nop
      }
      break;
 8006292:	e004      	b.n	800629e <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8006294:	6839      	ldr	r1, [r7, #0]
 8006296:	6878      	ldr	r0, [r7, #4]
 8006298:	f000 fc7d 	bl	8006b96 <USBD_CtlError>
      break;
 800629c:	bf00      	nop
  }

  return USBD_OK;
 800629e:	2300      	movs	r3, #0
}
 80062a0:	4618      	mov	r0, r3
 80062a2:	3710      	adds	r7, #16
 80062a4:	46bd      	mov	sp, r7
 80062a6:	bd80      	pop	{r7, pc}

080062a8 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 80062a8:	b580      	push	{r7, lr}
 80062aa:	b084      	sub	sp, #16
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	6078      	str	r0, [r7, #4]
 80062b0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80062b2:	2300      	movs	r3, #0
 80062b4:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 80062b6:	683b      	ldr	r3, [r7, #0]
 80062b8:	889b      	ldrh	r3, [r3, #4]
 80062ba:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80062bc:	683b      	ldr	r3, [r7, #0]
 80062be:	781b      	ldrb	r3, [r3, #0]
 80062c0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80062c4:	2b40      	cmp	r3, #64	; 0x40
 80062c6:	d007      	beq.n	80062d8 <USBD_StdEPReq+0x30>
 80062c8:	2b40      	cmp	r3, #64	; 0x40
 80062ca:	f200 8146 	bhi.w	800655a <USBD_StdEPReq+0x2b2>
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d00a      	beq.n	80062e8 <USBD_StdEPReq+0x40>
 80062d2:	2b20      	cmp	r3, #32
 80062d4:	f040 8141 	bne.w	800655a <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80062de:	689b      	ldr	r3, [r3, #8]
 80062e0:	6839      	ldr	r1, [r7, #0]
 80062e2:	6878      	ldr	r0, [r7, #4]
 80062e4:	4798      	blx	r3
      break;
 80062e6:	e13d      	b.n	8006564 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 80062e8:	683b      	ldr	r3, [r7, #0]
 80062ea:	781b      	ldrb	r3, [r3, #0]
 80062ec:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80062f0:	2b20      	cmp	r3, #32
 80062f2:	d10a      	bne.n	800630a <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80062fa:	689b      	ldr	r3, [r3, #8]
 80062fc:	6839      	ldr	r1, [r7, #0]
 80062fe:	6878      	ldr	r0, [r7, #4]
 8006300:	4798      	blx	r3
 8006302:	4603      	mov	r3, r0
 8006304:	73fb      	strb	r3, [r7, #15]

        return ret;
 8006306:	7bfb      	ldrb	r3, [r7, #15]
 8006308:	e12d      	b.n	8006566 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 800630a:	683b      	ldr	r3, [r7, #0]
 800630c:	785b      	ldrb	r3, [r3, #1]
 800630e:	2b03      	cmp	r3, #3
 8006310:	d007      	beq.n	8006322 <USBD_StdEPReq+0x7a>
 8006312:	2b03      	cmp	r3, #3
 8006314:	f300 811b 	bgt.w	800654e <USBD_StdEPReq+0x2a6>
 8006318:	2b00      	cmp	r3, #0
 800631a:	d072      	beq.n	8006402 <USBD_StdEPReq+0x15a>
 800631c:	2b01      	cmp	r3, #1
 800631e:	d03a      	beq.n	8006396 <USBD_StdEPReq+0xee>
 8006320:	e115      	b.n	800654e <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006328:	2b02      	cmp	r3, #2
 800632a:	d002      	beq.n	8006332 <USBD_StdEPReq+0x8a>
 800632c:	2b03      	cmp	r3, #3
 800632e:	d015      	beq.n	800635c <USBD_StdEPReq+0xb4>
 8006330:	e02b      	b.n	800638a <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006332:	7bbb      	ldrb	r3, [r7, #14]
 8006334:	2b00      	cmp	r3, #0
 8006336:	d00c      	beq.n	8006352 <USBD_StdEPReq+0xaa>
 8006338:	7bbb      	ldrb	r3, [r7, #14]
 800633a:	2b80      	cmp	r3, #128	; 0x80
 800633c:	d009      	beq.n	8006352 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800633e:	7bbb      	ldrb	r3, [r7, #14]
 8006340:	4619      	mov	r1, r3
 8006342:	6878      	ldr	r0, [r7, #4]
 8006344:	f000 ff96 	bl	8007274 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8006348:	2180      	movs	r1, #128	; 0x80
 800634a:	6878      	ldr	r0, [r7, #4]
 800634c:	f000 ff92 	bl	8007274 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006350:	e020      	b.n	8006394 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8006352:	6839      	ldr	r1, [r7, #0]
 8006354:	6878      	ldr	r0, [r7, #4]
 8006356:	f000 fc1e 	bl	8006b96 <USBD_CtlError>
              break;
 800635a:	e01b      	b.n	8006394 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800635c:	683b      	ldr	r3, [r7, #0]
 800635e:	885b      	ldrh	r3, [r3, #2]
 8006360:	2b00      	cmp	r3, #0
 8006362:	d10e      	bne.n	8006382 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8006364:	7bbb      	ldrb	r3, [r7, #14]
 8006366:	2b00      	cmp	r3, #0
 8006368:	d00b      	beq.n	8006382 <USBD_StdEPReq+0xda>
 800636a:	7bbb      	ldrb	r3, [r7, #14]
 800636c:	2b80      	cmp	r3, #128	; 0x80
 800636e:	d008      	beq.n	8006382 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006370:	683b      	ldr	r3, [r7, #0]
 8006372:	88db      	ldrh	r3, [r3, #6]
 8006374:	2b00      	cmp	r3, #0
 8006376:	d104      	bne.n	8006382 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8006378:	7bbb      	ldrb	r3, [r7, #14]
 800637a:	4619      	mov	r1, r3
 800637c:	6878      	ldr	r0, [r7, #4]
 800637e:	f000 ff79 	bl	8007274 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8006382:	6878      	ldr	r0, [r7, #4]
 8006384:	f000 fcb1 	bl	8006cea <USBD_CtlSendStatus>

              break;
 8006388:	e004      	b.n	8006394 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 800638a:	6839      	ldr	r1, [r7, #0]
 800638c:	6878      	ldr	r0, [r7, #4]
 800638e:	f000 fc02 	bl	8006b96 <USBD_CtlError>
              break;
 8006392:	bf00      	nop
          }
          break;
 8006394:	e0e0      	b.n	8006558 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800639c:	2b02      	cmp	r3, #2
 800639e:	d002      	beq.n	80063a6 <USBD_StdEPReq+0xfe>
 80063a0:	2b03      	cmp	r3, #3
 80063a2:	d015      	beq.n	80063d0 <USBD_StdEPReq+0x128>
 80063a4:	e026      	b.n	80063f4 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80063a6:	7bbb      	ldrb	r3, [r7, #14]
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d00c      	beq.n	80063c6 <USBD_StdEPReq+0x11e>
 80063ac:	7bbb      	ldrb	r3, [r7, #14]
 80063ae:	2b80      	cmp	r3, #128	; 0x80
 80063b0:	d009      	beq.n	80063c6 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80063b2:	7bbb      	ldrb	r3, [r7, #14]
 80063b4:	4619      	mov	r1, r3
 80063b6:	6878      	ldr	r0, [r7, #4]
 80063b8:	f000 ff5c 	bl	8007274 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80063bc:	2180      	movs	r1, #128	; 0x80
 80063be:	6878      	ldr	r0, [r7, #4]
 80063c0:	f000 ff58 	bl	8007274 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80063c4:	e01c      	b.n	8006400 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 80063c6:	6839      	ldr	r1, [r7, #0]
 80063c8:	6878      	ldr	r0, [r7, #4]
 80063ca:	f000 fbe4 	bl	8006b96 <USBD_CtlError>
              break;
 80063ce:	e017      	b.n	8006400 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80063d0:	683b      	ldr	r3, [r7, #0]
 80063d2:	885b      	ldrh	r3, [r3, #2]
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d112      	bne.n	80063fe <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80063d8:	7bbb      	ldrb	r3, [r7, #14]
 80063da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d004      	beq.n	80063ec <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 80063e2:	7bbb      	ldrb	r3, [r7, #14]
 80063e4:	4619      	mov	r1, r3
 80063e6:	6878      	ldr	r0, [r7, #4]
 80063e8:	f000 ff63 	bl	80072b2 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 80063ec:	6878      	ldr	r0, [r7, #4]
 80063ee:	f000 fc7c 	bl	8006cea <USBD_CtlSendStatus>
              }
              break;
 80063f2:	e004      	b.n	80063fe <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 80063f4:	6839      	ldr	r1, [r7, #0]
 80063f6:	6878      	ldr	r0, [r7, #4]
 80063f8:	f000 fbcd 	bl	8006b96 <USBD_CtlError>
              break;
 80063fc:	e000      	b.n	8006400 <USBD_StdEPReq+0x158>
              break;
 80063fe:	bf00      	nop
          }
          break;
 8006400:	e0aa      	b.n	8006558 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006408:	2b02      	cmp	r3, #2
 800640a:	d002      	beq.n	8006412 <USBD_StdEPReq+0x16a>
 800640c:	2b03      	cmp	r3, #3
 800640e:	d032      	beq.n	8006476 <USBD_StdEPReq+0x1ce>
 8006410:	e097      	b.n	8006542 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006412:	7bbb      	ldrb	r3, [r7, #14]
 8006414:	2b00      	cmp	r3, #0
 8006416:	d007      	beq.n	8006428 <USBD_StdEPReq+0x180>
 8006418:	7bbb      	ldrb	r3, [r7, #14]
 800641a:	2b80      	cmp	r3, #128	; 0x80
 800641c:	d004      	beq.n	8006428 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800641e:	6839      	ldr	r1, [r7, #0]
 8006420:	6878      	ldr	r0, [r7, #4]
 8006422:	f000 fbb8 	bl	8006b96 <USBD_CtlError>
                break;
 8006426:	e091      	b.n	800654c <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006428:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800642c:	2b00      	cmp	r3, #0
 800642e:	da0b      	bge.n	8006448 <USBD_StdEPReq+0x1a0>
 8006430:	7bbb      	ldrb	r3, [r7, #14]
 8006432:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006436:	4613      	mov	r3, r2
 8006438:	009b      	lsls	r3, r3, #2
 800643a:	4413      	add	r3, r2
 800643c:	009b      	lsls	r3, r3, #2
 800643e:	3310      	adds	r3, #16
 8006440:	687a      	ldr	r2, [r7, #4]
 8006442:	4413      	add	r3, r2
 8006444:	3304      	adds	r3, #4
 8006446:	e00b      	b.n	8006460 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006448:	7bbb      	ldrb	r3, [r7, #14]
 800644a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800644e:	4613      	mov	r3, r2
 8006450:	009b      	lsls	r3, r3, #2
 8006452:	4413      	add	r3, r2
 8006454:	009b      	lsls	r3, r3, #2
 8006456:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800645a:	687a      	ldr	r2, [r7, #4]
 800645c:	4413      	add	r3, r2
 800645e:	3304      	adds	r3, #4
 8006460:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006462:	68bb      	ldr	r3, [r7, #8]
 8006464:	2200      	movs	r2, #0
 8006466:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8006468:	68bb      	ldr	r3, [r7, #8]
 800646a:	2202      	movs	r2, #2
 800646c:	4619      	mov	r1, r3
 800646e:	6878      	ldr	r0, [r7, #4]
 8006470:	f000 fbfb 	bl	8006c6a <USBD_CtlSendData>
              break;
 8006474:	e06a      	b.n	800654c <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006476:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800647a:	2b00      	cmp	r3, #0
 800647c:	da11      	bge.n	80064a2 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800647e:	7bbb      	ldrb	r3, [r7, #14]
 8006480:	f003 020f 	and.w	r2, r3, #15
 8006484:	6879      	ldr	r1, [r7, #4]
 8006486:	4613      	mov	r3, r2
 8006488:	009b      	lsls	r3, r3, #2
 800648a:	4413      	add	r3, r2
 800648c:	009b      	lsls	r3, r3, #2
 800648e:	440b      	add	r3, r1
 8006490:	3318      	adds	r3, #24
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	2b00      	cmp	r3, #0
 8006496:	d117      	bne.n	80064c8 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8006498:	6839      	ldr	r1, [r7, #0]
 800649a:	6878      	ldr	r0, [r7, #4]
 800649c:	f000 fb7b 	bl	8006b96 <USBD_CtlError>
                  break;
 80064a0:	e054      	b.n	800654c <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80064a2:	7bbb      	ldrb	r3, [r7, #14]
 80064a4:	f003 020f 	and.w	r2, r3, #15
 80064a8:	6879      	ldr	r1, [r7, #4]
 80064aa:	4613      	mov	r3, r2
 80064ac:	009b      	lsls	r3, r3, #2
 80064ae:	4413      	add	r3, r2
 80064b0:	009b      	lsls	r3, r3, #2
 80064b2:	440b      	add	r3, r1
 80064b4:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d104      	bne.n	80064c8 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 80064be:	6839      	ldr	r1, [r7, #0]
 80064c0:	6878      	ldr	r0, [r7, #4]
 80064c2:	f000 fb68 	bl	8006b96 <USBD_CtlError>
                  break;
 80064c6:	e041      	b.n	800654c <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80064c8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	da0b      	bge.n	80064e8 <USBD_StdEPReq+0x240>
 80064d0:	7bbb      	ldrb	r3, [r7, #14]
 80064d2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80064d6:	4613      	mov	r3, r2
 80064d8:	009b      	lsls	r3, r3, #2
 80064da:	4413      	add	r3, r2
 80064dc:	009b      	lsls	r3, r3, #2
 80064de:	3310      	adds	r3, #16
 80064e0:	687a      	ldr	r2, [r7, #4]
 80064e2:	4413      	add	r3, r2
 80064e4:	3304      	adds	r3, #4
 80064e6:	e00b      	b.n	8006500 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80064e8:	7bbb      	ldrb	r3, [r7, #14]
 80064ea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80064ee:	4613      	mov	r3, r2
 80064f0:	009b      	lsls	r3, r3, #2
 80064f2:	4413      	add	r3, r2
 80064f4:	009b      	lsls	r3, r3, #2
 80064f6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80064fa:	687a      	ldr	r2, [r7, #4]
 80064fc:	4413      	add	r3, r2
 80064fe:	3304      	adds	r3, #4
 8006500:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006502:	7bbb      	ldrb	r3, [r7, #14]
 8006504:	2b00      	cmp	r3, #0
 8006506:	d002      	beq.n	800650e <USBD_StdEPReq+0x266>
 8006508:	7bbb      	ldrb	r3, [r7, #14]
 800650a:	2b80      	cmp	r3, #128	; 0x80
 800650c:	d103      	bne.n	8006516 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800650e:	68bb      	ldr	r3, [r7, #8]
 8006510:	2200      	movs	r2, #0
 8006512:	601a      	str	r2, [r3, #0]
 8006514:	e00e      	b.n	8006534 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8006516:	7bbb      	ldrb	r3, [r7, #14]
 8006518:	4619      	mov	r1, r3
 800651a:	6878      	ldr	r0, [r7, #4]
 800651c:	f000 fee8 	bl	80072f0 <USBD_LL_IsStallEP>
 8006520:	4603      	mov	r3, r0
 8006522:	2b00      	cmp	r3, #0
 8006524:	d003      	beq.n	800652e <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8006526:	68bb      	ldr	r3, [r7, #8]
 8006528:	2201      	movs	r2, #1
 800652a:	601a      	str	r2, [r3, #0]
 800652c:	e002      	b.n	8006534 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800652e:	68bb      	ldr	r3, [r7, #8]
 8006530:	2200      	movs	r2, #0
 8006532:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8006534:	68bb      	ldr	r3, [r7, #8]
 8006536:	2202      	movs	r2, #2
 8006538:	4619      	mov	r1, r3
 800653a:	6878      	ldr	r0, [r7, #4]
 800653c:	f000 fb95 	bl	8006c6a <USBD_CtlSendData>
              break;
 8006540:	e004      	b.n	800654c <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8006542:	6839      	ldr	r1, [r7, #0]
 8006544:	6878      	ldr	r0, [r7, #4]
 8006546:	f000 fb26 	bl	8006b96 <USBD_CtlError>
              break;
 800654a:	bf00      	nop
          }
          break;
 800654c:	e004      	b.n	8006558 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800654e:	6839      	ldr	r1, [r7, #0]
 8006550:	6878      	ldr	r0, [r7, #4]
 8006552:	f000 fb20 	bl	8006b96 <USBD_CtlError>
          break;
 8006556:	bf00      	nop
      }
      break;
 8006558:	e004      	b.n	8006564 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 800655a:	6839      	ldr	r1, [r7, #0]
 800655c:	6878      	ldr	r0, [r7, #4]
 800655e:	f000 fb1a 	bl	8006b96 <USBD_CtlError>
      break;
 8006562:	bf00      	nop
  }

  return ret;
 8006564:	7bfb      	ldrb	r3, [r7, #15]
}
 8006566:	4618      	mov	r0, r3
 8006568:	3710      	adds	r7, #16
 800656a:	46bd      	mov	sp, r7
 800656c:	bd80      	pop	{r7, pc}
	...

08006570 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8006570:	b580      	push	{r7, lr}
 8006572:	b084      	sub	sp, #16
 8006574:	af00      	add	r7, sp, #0
 8006576:	6078      	str	r0, [r7, #4]
 8006578:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800657a:	2300      	movs	r3, #0
 800657c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800657e:	2300      	movs	r3, #0
 8006580:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006582:	2300      	movs	r3, #0
 8006584:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006586:	683b      	ldr	r3, [r7, #0]
 8006588:	885b      	ldrh	r3, [r3, #2]
 800658a:	0a1b      	lsrs	r3, r3, #8
 800658c:	b29b      	uxth	r3, r3
 800658e:	3b01      	subs	r3, #1
 8006590:	2b06      	cmp	r3, #6
 8006592:	f200 8128 	bhi.w	80067e6 <USBD_GetDescriptor+0x276>
 8006596:	a201      	add	r2, pc, #4	; (adr r2, 800659c <USBD_GetDescriptor+0x2c>)
 8006598:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800659c:	080065b9 	.word	0x080065b9
 80065a0:	080065d1 	.word	0x080065d1
 80065a4:	08006611 	.word	0x08006611
 80065a8:	080067e7 	.word	0x080067e7
 80065ac:	080067e7 	.word	0x080067e7
 80065b0:	08006787 	.word	0x08006787
 80065b4:	080067b3 	.word	0x080067b3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	687a      	ldr	r2, [r7, #4]
 80065c2:	7c12      	ldrb	r2, [r2, #16]
 80065c4:	f107 0108 	add.w	r1, r7, #8
 80065c8:	4610      	mov	r0, r2
 80065ca:	4798      	blx	r3
 80065cc:	60f8      	str	r0, [r7, #12]
      break;
 80065ce:	e112      	b.n	80067f6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	7c1b      	ldrb	r3, [r3, #16]
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d10d      	bne.n	80065f4 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80065de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065e0:	f107 0208 	add.w	r2, r7, #8
 80065e4:	4610      	mov	r0, r2
 80065e6:	4798      	blx	r3
 80065e8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	3301      	adds	r3, #1
 80065ee:	2202      	movs	r2, #2
 80065f0:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80065f2:	e100      	b.n	80067f6 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80065fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065fc:	f107 0208 	add.w	r2, r7, #8
 8006600:	4610      	mov	r0, r2
 8006602:	4798      	blx	r3
 8006604:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	3301      	adds	r3, #1
 800660a:	2202      	movs	r2, #2
 800660c:	701a      	strb	r2, [r3, #0]
      break;
 800660e:	e0f2      	b.n	80067f6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006610:	683b      	ldr	r3, [r7, #0]
 8006612:	885b      	ldrh	r3, [r3, #2]
 8006614:	b2db      	uxtb	r3, r3
 8006616:	2b05      	cmp	r3, #5
 8006618:	f200 80ac 	bhi.w	8006774 <USBD_GetDescriptor+0x204>
 800661c:	a201      	add	r2, pc, #4	; (adr r2, 8006624 <USBD_GetDescriptor+0xb4>)
 800661e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006622:	bf00      	nop
 8006624:	0800663d 	.word	0x0800663d
 8006628:	08006671 	.word	0x08006671
 800662c:	080066a5 	.word	0x080066a5
 8006630:	080066d9 	.word	0x080066d9
 8006634:	0800670d 	.word	0x0800670d
 8006638:	08006741 	.word	0x08006741
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006642:	685b      	ldr	r3, [r3, #4]
 8006644:	2b00      	cmp	r3, #0
 8006646:	d00b      	beq.n	8006660 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800664e:	685b      	ldr	r3, [r3, #4]
 8006650:	687a      	ldr	r2, [r7, #4]
 8006652:	7c12      	ldrb	r2, [r2, #16]
 8006654:	f107 0108 	add.w	r1, r7, #8
 8006658:	4610      	mov	r0, r2
 800665a:	4798      	blx	r3
 800665c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800665e:	e091      	b.n	8006784 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006660:	6839      	ldr	r1, [r7, #0]
 8006662:	6878      	ldr	r0, [r7, #4]
 8006664:	f000 fa97 	bl	8006b96 <USBD_CtlError>
            err++;
 8006668:	7afb      	ldrb	r3, [r7, #11]
 800666a:	3301      	adds	r3, #1
 800666c:	72fb      	strb	r3, [r7, #11]
          break;
 800666e:	e089      	b.n	8006784 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006676:	689b      	ldr	r3, [r3, #8]
 8006678:	2b00      	cmp	r3, #0
 800667a:	d00b      	beq.n	8006694 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006682:	689b      	ldr	r3, [r3, #8]
 8006684:	687a      	ldr	r2, [r7, #4]
 8006686:	7c12      	ldrb	r2, [r2, #16]
 8006688:	f107 0108 	add.w	r1, r7, #8
 800668c:	4610      	mov	r0, r2
 800668e:	4798      	blx	r3
 8006690:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006692:	e077      	b.n	8006784 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006694:	6839      	ldr	r1, [r7, #0]
 8006696:	6878      	ldr	r0, [r7, #4]
 8006698:	f000 fa7d 	bl	8006b96 <USBD_CtlError>
            err++;
 800669c:	7afb      	ldrb	r3, [r7, #11]
 800669e:	3301      	adds	r3, #1
 80066a0:	72fb      	strb	r3, [r7, #11]
          break;
 80066a2:	e06f      	b.n	8006784 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80066aa:	68db      	ldr	r3, [r3, #12]
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d00b      	beq.n	80066c8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80066b6:	68db      	ldr	r3, [r3, #12]
 80066b8:	687a      	ldr	r2, [r7, #4]
 80066ba:	7c12      	ldrb	r2, [r2, #16]
 80066bc:	f107 0108 	add.w	r1, r7, #8
 80066c0:	4610      	mov	r0, r2
 80066c2:	4798      	blx	r3
 80066c4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80066c6:	e05d      	b.n	8006784 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80066c8:	6839      	ldr	r1, [r7, #0]
 80066ca:	6878      	ldr	r0, [r7, #4]
 80066cc:	f000 fa63 	bl	8006b96 <USBD_CtlError>
            err++;
 80066d0:	7afb      	ldrb	r3, [r7, #11]
 80066d2:	3301      	adds	r3, #1
 80066d4:	72fb      	strb	r3, [r7, #11]
          break;
 80066d6:	e055      	b.n	8006784 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80066de:	691b      	ldr	r3, [r3, #16]
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d00b      	beq.n	80066fc <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80066ea:	691b      	ldr	r3, [r3, #16]
 80066ec:	687a      	ldr	r2, [r7, #4]
 80066ee:	7c12      	ldrb	r2, [r2, #16]
 80066f0:	f107 0108 	add.w	r1, r7, #8
 80066f4:	4610      	mov	r0, r2
 80066f6:	4798      	blx	r3
 80066f8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80066fa:	e043      	b.n	8006784 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80066fc:	6839      	ldr	r1, [r7, #0]
 80066fe:	6878      	ldr	r0, [r7, #4]
 8006700:	f000 fa49 	bl	8006b96 <USBD_CtlError>
            err++;
 8006704:	7afb      	ldrb	r3, [r7, #11]
 8006706:	3301      	adds	r3, #1
 8006708:	72fb      	strb	r3, [r7, #11]
          break;
 800670a:	e03b      	b.n	8006784 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006712:	695b      	ldr	r3, [r3, #20]
 8006714:	2b00      	cmp	r3, #0
 8006716:	d00b      	beq.n	8006730 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800671e:	695b      	ldr	r3, [r3, #20]
 8006720:	687a      	ldr	r2, [r7, #4]
 8006722:	7c12      	ldrb	r2, [r2, #16]
 8006724:	f107 0108 	add.w	r1, r7, #8
 8006728:	4610      	mov	r0, r2
 800672a:	4798      	blx	r3
 800672c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800672e:	e029      	b.n	8006784 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006730:	6839      	ldr	r1, [r7, #0]
 8006732:	6878      	ldr	r0, [r7, #4]
 8006734:	f000 fa2f 	bl	8006b96 <USBD_CtlError>
            err++;
 8006738:	7afb      	ldrb	r3, [r7, #11]
 800673a:	3301      	adds	r3, #1
 800673c:	72fb      	strb	r3, [r7, #11]
          break;
 800673e:	e021      	b.n	8006784 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006746:	699b      	ldr	r3, [r3, #24]
 8006748:	2b00      	cmp	r3, #0
 800674a:	d00b      	beq.n	8006764 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006752:	699b      	ldr	r3, [r3, #24]
 8006754:	687a      	ldr	r2, [r7, #4]
 8006756:	7c12      	ldrb	r2, [r2, #16]
 8006758:	f107 0108 	add.w	r1, r7, #8
 800675c:	4610      	mov	r0, r2
 800675e:	4798      	blx	r3
 8006760:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006762:	e00f      	b.n	8006784 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006764:	6839      	ldr	r1, [r7, #0]
 8006766:	6878      	ldr	r0, [r7, #4]
 8006768:	f000 fa15 	bl	8006b96 <USBD_CtlError>
            err++;
 800676c:	7afb      	ldrb	r3, [r7, #11]
 800676e:	3301      	adds	r3, #1
 8006770:	72fb      	strb	r3, [r7, #11]
          break;
 8006772:	e007      	b.n	8006784 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8006774:	6839      	ldr	r1, [r7, #0]
 8006776:	6878      	ldr	r0, [r7, #4]
 8006778:	f000 fa0d 	bl	8006b96 <USBD_CtlError>
          err++;
 800677c:	7afb      	ldrb	r3, [r7, #11]
 800677e:	3301      	adds	r3, #1
 8006780:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8006782:	e038      	b.n	80067f6 <USBD_GetDescriptor+0x286>
 8006784:	e037      	b.n	80067f6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	7c1b      	ldrb	r3, [r3, #16]
 800678a:	2b00      	cmp	r3, #0
 800678c:	d109      	bne.n	80067a2 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006794:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006796:	f107 0208 	add.w	r2, r7, #8
 800679a:	4610      	mov	r0, r2
 800679c:	4798      	blx	r3
 800679e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80067a0:	e029      	b.n	80067f6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80067a2:	6839      	ldr	r1, [r7, #0]
 80067a4:	6878      	ldr	r0, [r7, #4]
 80067a6:	f000 f9f6 	bl	8006b96 <USBD_CtlError>
        err++;
 80067aa:	7afb      	ldrb	r3, [r7, #11]
 80067ac:	3301      	adds	r3, #1
 80067ae:	72fb      	strb	r3, [r7, #11]
      break;
 80067b0:	e021      	b.n	80067f6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	7c1b      	ldrb	r3, [r3, #16]
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d10d      	bne.n	80067d6 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80067c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067c2:	f107 0208 	add.w	r2, r7, #8
 80067c6:	4610      	mov	r0, r2
 80067c8:	4798      	blx	r3
 80067ca:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	3301      	adds	r3, #1
 80067d0:	2207      	movs	r2, #7
 80067d2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80067d4:	e00f      	b.n	80067f6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80067d6:	6839      	ldr	r1, [r7, #0]
 80067d8:	6878      	ldr	r0, [r7, #4]
 80067da:	f000 f9dc 	bl	8006b96 <USBD_CtlError>
        err++;
 80067de:	7afb      	ldrb	r3, [r7, #11]
 80067e0:	3301      	adds	r3, #1
 80067e2:	72fb      	strb	r3, [r7, #11]
      break;
 80067e4:	e007      	b.n	80067f6 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80067e6:	6839      	ldr	r1, [r7, #0]
 80067e8:	6878      	ldr	r0, [r7, #4]
 80067ea:	f000 f9d4 	bl	8006b96 <USBD_CtlError>
      err++;
 80067ee:	7afb      	ldrb	r3, [r7, #11]
 80067f0:	3301      	adds	r3, #1
 80067f2:	72fb      	strb	r3, [r7, #11]
      break;
 80067f4:	bf00      	nop
  }

  if (err != 0U)
 80067f6:	7afb      	ldrb	r3, [r7, #11]
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d11c      	bne.n	8006836 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 80067fc:	893b      	ldrh	r3, [r7, #8]
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d011      	beq.n	8006826 <USBD_GetDescriptor+0x2b6>
 8006802:	683b      	ldr	r3, [r7, #0]
 8006804:	88db      	ldrh	r3, [r3, #6]
 8006806:	2b00      	cmp	r3, #0
 8006808:	d00d      	beq.n	8006826 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800680a:	683b      	ldr	r3, [r7, #0]
 800680c:	88da      	ldrh	r2, [r3, #6]
 800680e:	893b      	ldrh	r3, [r7, #8]
 8006810:	4293      	cmp	r3, r2
 8006812:	bf28      	it	cs
 8006814:	4613      	movcs	r3, r2
 8006816:	b29b      	uxth	r3, r3
 8006818:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800681a:	893b      	ldrh	r3, [r7, #8]
 800681c:	461a      	mov	r2, r3
 800681e:	68f9      	ldr	r1, [r7, #12]
 8006820:	6878      	ldr	r0, [r7, #4]
 8006822:	f000 fa22 	bl	8006c6a <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8006826:	683b      	ldr	r3, [r7, #0]
 8006828:	88db      	ldrh	r3, [r3, #6]
 800682a:	2b00      	cmp	r3, #0
 800682c:	d104      	bne.n	8006838 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800682e:	6878      	ldr	r0, [r7, #4]
 8006830:	f000 fa5b 	bl	8006cea <USBD_CtlSendStatus>
 8006834:	e000      	b.n	8006838 <USBD_GetDescriptor+0x2c8>
    return;
 8006836:	bf00      	nop
    }
  }
}
 8006838:	3710      	adds	r7, #16
 800683a:	46bd      	mov	sp, r7
 800683c:	bd80      	pop	{r7, pc}
 800683e:	bf00      	nop

08006840 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8006840:	b580      	push	{r7, lr}
 8006842:	b084      	sub	sp, #16
 8006844:	af00      	add	r7, sp, #0
 8006846:	6078      	str	r0, [r7, #4]
 8006848:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800684a:	683b      	ldr	r3, [r7, #0]
 800684c:	889b      	ldrh	r3, [r3, #4]
 800684e:	2b00      	cmp	r3, #0
 8006850:	d130      	bne.n	80068b4 <USBD_SetAddress+0x74>
 8006852:	683b      	ldr	r3, [r7, #0]
 8006854:	88db      	ldrh	r3, [r3, #6]
 8006856:	2b00      	cmp	r3, #0
 8006858:	d12c      	bne.n	80068b4 <USBD_SetAddress+0x74>
 800685a:	683b      	ldr	r3, [r7, #0]
 800685c:	885b      	ldrh	r3, [r3, #2]
 800685e:	2b7f      	cmp	r3, #127	; 0x7f
 8006860:	d828      	bhi.n	80068b4 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006862:	683b      	ldr	r3, [r7, #0]
 8006864:	885b      	ldrh	r3, [r3, #2]
 8006866:	b2db      	uxtb	r3, r3
 8006868:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800686c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006874:	2b03      	cmp	r3, #3
 8006876:	d104      	bne.n	8006882 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8006878:	6839      	ldr	r1, [r7, #0]
 800687a:	6878      	ldr	r0, [r7, #4]
 800687c:	f000 f98b 	bl	8006b96 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006880:	e01d      	b.n	80068be <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	7bfa      	ldrb	r2, [r7, #15]
 8006886:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800688a:	7bfb      	ldrb	r3, [r7, #15]
 800688c:	4619      	mov	r1, r3
 800688e:	6878      	ldr	r0, [r7, #4]
 8006890:	f000 fd5a 	bl	8007348 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8006894:	6878      	ldr	r0, [r7, #4]
 8006896:	f000 fa28 	bl	8006cea <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800689a:	7bfb      	ldrb	r3, [r7, #15]
 800689c:	2b00      	cmp	r3, #0
 800689e:	d004      	beq.n	80068aa <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	2202      	movs	r2, #2
 80068a4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80068a8:	e009      	b.n	80068be <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	2201      	movs	r2, #1
 80068ae:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80068b2:	e004      	b.n	80068be <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80068b4:	6839      	ldr	r1, [r7, #0]
 80068b6:	6878      	ldr	r0, [r7, #4]
 80068b8:	f000 f96d 	bl	8006b96 <USBD_CtlError>
  }
}
 80068bc:	bf00      	nop
 80068be:	bf00      	nop
 80068c0:	3710      	adds	r7, #16
 80068c2:	46bd      	mov	sp, r7
 80068c4:	bd80      	pop	{r7, pc}
	...

080068c8 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80068c8:	b580      	push	{r7, lr}
 80068ca:	b082      	sub	sp, #8
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	6078      	str	r0, [r7, #4]
 80068d0:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80068d2:	683b      	ldr	r3, [r7, #0]
 80068d4:	885b      	ldrh	r3, [r3, #2]
 80068d6:	b2da      	uxtb	r2, r3
 80068d8:	4b41      	ldr	r3, [pc, #260]	; (80069e0 <USBD_SetConfig+0x118>)
 80068da:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80068dc:	4b40      	ldr	r3, [pc, #256]	; (80069e0 <USBD_SetConfig+0x118>)
 80068de:	781b      	ldrb	r3, [r3, #0]
 80068e0:	2b01      	cmp	r3, #1
 80068e2:	d904      	bls.n	80068ee <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 80068e4:	6839      	ldr	r1, [r7, #0]
 80068e6:	6878      	ldr	r0, [r7, #4]
 80068e8:	f000 f955 	bl	8006b96 <USBD_CtlError>
 80068ec:	e075      	b.n	80069da <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80068f4:	2b02      	cmp	r3, #2
 80068f6:	d002      	beq.n	80068fe <USBD_SetConfig+0x36>
 80068f8:	2b03      	cmp	r3, #3
 80068fa:	d023      	beq.n	8006944 <USBD_SetConfig+0x7c>
 80068fc:	e062      	b.n	80069c4 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 80068fe:	4b38      	ldr	r3, [pc, #224]	; (80069e0 <USBD_SetConfig+0x118>)
 8006900:	781b      	ldrb	r3, [r3, #0]
 8006902:	2b00      	cmp	r3, #0
 8006904:	d01a      	beq.n	800693c <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8006906:	4b36      	ldr	r3, [pc, #216]	; (80069e0 <USBD_SetConfig+0x118>)
 8006908:	781b      	ldrb	r3, [r3, #0]
 800690a:	461a      	mov	r2, r3
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	2203      	movs	r2, #3
 8006914:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8006918:	4b31      	ldr	r3, [pc, #196]	; (80069e0 <USBD_SetConfig+0x118>)
 800691a:	781b      	ldrb	r3, [r3, #0]
 800691c:	4619      	mov	r1, r3
 800691e:	6878      	ldr	r0, [r7, #4]
 8006920:	f7ff f9e8 	bl	8005cf4 <USBD_SetClassConfig>
 8006924:	4603      	mov	r3, r0
 8006926:	2b02      	cmp	r3, #2
 8006928:	d104      	bne.n	8006934 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800692a:	6839      	ldr	r1, [r7, #0]
 800692c:	6878      	ldr	r0, [r7, #4]
 800692e:	f000 f932 	bl	8006b96 <USBD_CtlError>
            return;
 8006932:	e052      	b.n	80069da <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8006934:	6878      	ldr	r0, [r7, #4]
 8006936:	f000 f9d8 	bl	8006cea <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800693a:	e04e      	b.n	80069da <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800693c:	6878      	ldr	r0, [r7, #4]
 800693e:	f000 f9d4 	bl	8006cea <USBD_CtlSendStatus>
        break;
 8006942:	e04a      	b.n	80069da <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8006944:	4b26      	ldr	r3, [pc, #152]	; (80069e0 <USBD_SetConfig+0x118>)
 8006946:	781b      	ldrb	r3, [r3, #0]
 8006948:	2b00      	cmp	r3, #0
 800694a:	d112      	bne.n	8006972 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	2202      	movs	r2, #2
 8006950:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8006954:	4b22      	ldr	r3, [pc, #136]	; (80069e0 <USBD_SetConfig+0x118>)
 8006956:	781b      	ldrb	r3, [r3, #0]
 8006958:	461a      	mov	r2, r3
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800695e:	4b20      	ldr	r3, [pc, #128]	; (80069e0 <USBD_SetConfig+0x118>)
 8006960:	781b      	ldrb	r3, [r3, #0]
 8006962:	4619      	mov	r1, r3
 8006964:	6878      	ldr	r0, [r7, #4]
 8006966:	f7ff f9e4 	bl	8005d32 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800696a:	6878      	ldr	r0, [r7, #4]
 800696c:	f000 f9bd 	bl	8006cea <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8006970:	e033      	b.n	80069da <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8006972:	4b1b      	ldr	r3, [pc, #108]	; (80069e0 <USBD_SetConfig+0x118>)
 8006974:	781b      	ldrb	r3, [r3, #0]
 8006976:	461a      	mov	r2, r3
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	685b      	ldr	r3, [r3, #4]
 800697c:	429a      	cmp	r2, r3
 800697e:	d01d      	beq.n	80069bc <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	685b      	ldr	r3, [r3, #4]
 8006984:	b2db      	uxtb	r3, r3
 8006986:	4619      	mov	r1, r3
 8006988:	6878      	ldr	r0, [r7, #4]
 800698a:	f7ff f9d2 	bl	8005d32 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800698e:	4b14      	ldr	r3, [pc, #80]	; (80069e0 <USBD_SetConfig+0x118>)
 8006990:	781b      	ldrb	r3, [r3, #0]
 8006992:	461a      	mov	r2, r3
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8006998:	4b11      	ldr	r3, [pc, #68]	; (80069e0 <USBD_SetConfig+0x118>)
 800699a:	781b      	ldrb	r3, [r3, #0]
 800699c:	4619      	mov	r1, r3
 800699e:	6878      	ldr	r0, [r7, #4]
 80069a0:	f7ff f9a8 	bl	8005cf4 <USBD_SetClassConfig>
 80069a4:	4603      	mov	r3, r0
 80069a6:	2b02      	cmp	r3, #2
 80069a8:	d104      	bne.n	80069b4 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 80069aa:	6839      	ldr	r1, [r7, #0]
 80069ac:	6878      	ldr	r0, [r7, #4]
 80069ae:	f000 f8f2 	bl	8006b96 <USBD_CtlError>
            return;
 80069b2:	e012      	b.n	80069da <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80069b4:	6878      	ldr	r0, [r7, #4]
 80069b6:	f000 f998 	bl	8006cea <USBD_CtlSendStatus>
        break;
 80069ba:	e00e      	b.n	80069da <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80069bc:	6878      	ldr	r0, [r7, #4]
 80069be:	f000 f994 	bl	8006cea <USBD_CtlSendStatus>
        break;
 80069c2:	e00a      	b.n	80069da <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 80069c4:	6839      	ldr	r1, [r7, #0]
 80069c6:	6878      	ldr	r0, [r7, #4]
 80069c8:	f000 f8e5 	bl	8006b96 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 80069cc:	4b04      	ldr	r3, [pc, #16]	; (80069e0 <USBD_SetConfig+0x118>)
 80069ce:	781b      	ldrb	r3, [r3, #0]
 80069d0:	4619      	mov	r1, r3
 80069d2:	6878      	ldr	r0, [r7, #4]
 80069d4:	f7ff f9ad 	bl	8005d32 <USBD_ClrClassConfig>
        break;
 80069d8:	bf00      	nop
    }
  }
}
 80069da:	3708      	adds	r7, #8
 80069dc:	46bd      	mov	sp, r7
 80069de:	bd80      	pop	{r7, pc}
 80069e0:	2000016c 	.word	0x2000016c

080069e4 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80069e4:	b580      	push	{r7, lr}
 80069e6:	b082      	sub	sp, #8
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	6078      	str	r0, [r7, #4]
 80069ec:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80069ee:	683b      	ldr	r3, [r7, #0]
 80069f0:	88db      	ldrh	r3, [r3, #6]
 80069f2:	2b01      	cmp	r3, #1
 80069f4:	d004      	beq.n	8006a00 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80069f6:	6839      	ldr	r1, [r7, #0]
 80069f8:	6878      	ldr	r0, [r7, #4]
 80069fa:	f000 f8cc 	bl	8006b96 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80069fe:	e022      	b.n	8006a46 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a06:	2b02      	cmp	r3, #2
 8006a08:	dc02      	bgt.n	8006a10 <USBD_GetConfig+0x2c>
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	dc03      	bgt.n	8006a16 <USBD_GetConfig+0x32>
 8006a0e:	e015      	b.n	8006a3c <USBD_GetConfig+0x58>
 8006a10:	2b03      	cmp	r3, #3
 8006a12:	d00b      	beq.n	8006a2c <USBD_GetConfig+0x48>
 8006a14:	e012      	b.n	8006a3c <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	2200      	movs	r2, #0
 8006a1a:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	3308      	adds	r3, #8
 8006a20:	2201      	movs	r2, #1
 8006a22:	4619      	mov	r1, r3
 8006a24:	6878      	ldr	r0, [r7, #4]
 8006a26:	f000 f920 	bl	8006c6a <USBD_CtlSendData>
        break;
 8006a2a:	e00c      	b.n	8006a46 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	3304      	adds	r3, #4
 8006a30:	2201      	movs	r2, #1
 8006a32:	4619      	mov	r1, r3
 8006a34:	6878      	ldr	r0, [r7, #4]
 8006a36:	f000 f918 	bl	8006c6a <USBD_CtlSendData>
        break;
 8006a3a:	e004      	b.n	8006a46 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8006a3c:	6839      	ldr	r1, [r7, #0]
 8006a3e:	6878      	ldr	r0, [r7, #4]
 8006a40:	f000 f8a9 	bl	8006b96 <USBD_CtlError>
        break;
 8006a44:	bf00      	nop
}
 8006a46:	bf00      	nop
 8006a48:	3708      	adds	r7, #8
 8006a4a:	46bd      	mov	sp, r7
 8006a4c:	bd80      	pop	{r7, pc}

08006a4e <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006a4e:	b580      	push	{r7, lr}
 8006a50:	b082      	sub	sp, #8
 8006a52:	af00      	add	r7, sp, #0
 8006a54:	6078      	str	r0, [r7, #4]
 8006a56:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a5e:	3b01      	subs	r3, #1
 8006a60:	2b02      	cmp	r3, #2
 8006a62:	d81e      	bhi.n	8006aa2 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006a64:	683b      	ldr	r3, [r7, #0]
 8006a66:	88db      	ldrh	r3, [r3, #6]
 8006a68:	2b02      	cmp	r3, #2
 8006a6a:	d004      	beq.n	8006a76 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8006a6c:	6839      	ldr	r1, [r7, #0]
 8006a6e:	6878      	ldr	r0, [r7, #4]
 8006a70:	f000 f891 	bl	8006b96 <USBD_CtlError>
        break;
 8006a74:	e01a      	b.n	8006aac <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	2201      	movs	r2, #1
 8006a7a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d005      	beq.n	8006a92 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	68db      	ldr	r3, [r3, #12]
 8006a8a:	f043 0202 	orr.w	r2, r3, #2
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	330c      	adds	r3, #12
 8006a96:	2202      	movs	r2, #2
 8006a98:	4619      	mov	r1, r3
 8006a9a:	6878      	ldr	r0, [r7, #4]
 8006a9c:	f000 f8e5 	bl	8006c6a <USBD_CtlSendData>
      break;
 8006aa0:	e004      	b.n	8006aac <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8006aa2:	6839      	ldr	r1, [r7, #0]
 8006aa4:	6878      	ldr	r0, [r7, #4]
 8006aa6:	f000 f876 	bl	8006b96 <USBD_CtlError>
      break;
 8006aaa:	bf00      	nop
  }
}
 8006aac:	bf00      	nop
 8006aae:	3708      	adds	r7, #8
 8006ab0:	46bd      	mov	sp, r7
 8006ab2:	bd80      	pop	{r7, pc}

08006ab4 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8006ab4:	b580      	push	{r7, lr}
 8006ab6:	b082      	sub	sp, #8
 8006ab8:	af00      	add	r7, sp, #0
 8006aba:	6078      	str	r0, [r7, #4]
 8006abc:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006abe:	683b      	ldr	r3, [r7, #0]
 8006ac0:	885b      	ldrh	r3, [r3, #2]
 8006ac2:	2b01      	cmp	r3, #1
 8006ac4:	d106      	bne.n	8006ad4 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	2201      	movs	r2, #1
 8006aca:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8006ace:	6878      	ldr	r0, [r7, #4]
 8006ad0:	f000 f90b 	bl	8006cea <USBD_CtlSendStatus>
  }
}
 8006ad4:	bf00      	nop
 8006ad6:	3708      	adds	r7, #8
 8006ad8:	46bd      	mov	sp, r7
 8006ada:	bd80      	pop	{r7, pc}

08006adc <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8006adc:	b580      	push	{r7, lr}
 8006ade:	b082      	sub	sp, #8
 8006ae0:	af00      	add	r7, sp, #0
 8006ae2:	6078      	str	r0, [r7, #4]
 8006ae4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006aec:	3b01      	subs	r3, #1
 8006aee:	2b02      	cmp	r3, #2
 8006af0:	d80b      	bhi.n	8006b0a <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006af2:	683b      	ldr	r3, [r7, #0]
 8006af4:	885b      	ldrh	r3, [r3, #2]
 8006af6:	2b01      	cmp	r3, #1
 8006af8:	d10c      	bne.n	8006b14 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	2200      	movs	r2, #0
 8006afe:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8006b02:	6878      	ldr	r0, [r7, #4]
 8006b04:	f000 f8f1 	bl	8006cea <USBD_CtlSendStatus>
      }
      break;
 8006b08:	e004      	b.n	8006b14 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8006b0a:	6839      	ldr	r1, [r7, #0]
 8006b0c:	6878      	ldr	r0, [r7, #4]
 8006b0e:	f000 f842 	bl	8006b96 <USBD_CtlError>
      break;
 8006b12:	e000      	b.n	8006b16 <USBD_ClrFeature+0x3a>
      break;
 8006b14:	bf00      	nop
  }
}
 8006b16:	bf00      	nop
 8006b18:	3708      	adds	r7, #8
 8006b1a:	46bd      	mov	sp, r7
 8006b1c:	bd80      	pop	{r7, pc}

08006b1e <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006b1e:	b480      	push	{r7}
 8006b20:	b083      	sub	sp, #12
 8006b22:	af00      	add	r7, sp, #0
 8006b24:	6078      	str	r0, [r7, #4]
 8006b26:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8006b28:	683b      	ldr	r3, [r7, #0]
 8006b2a:	781a      	ldrb	r2, [r3, #0]
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8006b30:	683b      	ldr	r3, [r7, #0]
 8006b32:	785a      	ldrb	r2, [r3, #1]
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8006b38:	683b      	ldr	r3, [r7, #0]
 8006b3a:	3302      	adds	r3, #2
 8006b3c:	781b      	ldrb	r3, [r3, #0]
 8006b3e:	b29a      	uxth	r2, r3
 8006b40:	683b      	ldr	r3, [r7, #0]
 8006b42:	3303      	adds	r3, #3
 8006b44:	781b      	ldrb	r3, [r3, #0]
 8006b46:	b29b      	uxth	r3, r3
 8006b48:	021b      	lsls	r3, r3, #8
 8006b4a:	b29b      	uxth	r3, r3
 8006b4c:	4413      	add	r3, r2
 8006b4e:	b29a      	uxth	r2, r3
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8006b54:	683b      	ldr	r3, [r7, #0]
 8006b56:	3304      	adds	r3, #4
 8006b58:	781b      	ldrb	r3, [r3, #0]
 8006b5a:	b29a      	uxth	r2, r3
 8006b5c:	683b      	ldr	r3, [r7, #0]
 8006b5e:	3305      	adds	r3, #5
 8006b60:	781b      	ldrb	r3, [r3, #0]
 8006b62:	b29b      	uxth	r3, r3
 8006b64:	021b      	lsls	r3, r3, #8
 8006b66:	b29b      	uxth	r3, r3
 8006b68:	4413      	add	r3, r2
 8006b6a:	b29a      	uxth	r2, r3
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8006b70:	683b      	ldr	r3, [r7, #0]
 8006b72:	3306      	adds	r3, #6
 8006b74:	781b      	ldrb	r3, [r3, #0]
 8006b76:	b29a      	uxth	r2, r3
 8006b78:	683b      	ldr	r3, [r7, #0]
 8006b7a:	3307      	adds	r3, #7
 8006b7c:	781b      	ldrb	r3, [r3, #0]
 8006b7e:	b29b      	uxth	r3, r3
 8006b80:	021b      	lsls	r3, r3, #8
 8006b82:	b29b      	uxth	r3, r3
 8006b84:	4413      	add	r3, r2
 8006b86:	b29a      	uxth	r2, r3
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	80da      	strh	r2, [r3, #6]

}
 8006b8c:	bf00      	nop
 8006b8e:	370c      	adds	r7, #12
 8006b90:	46bd      	mov	sp, r7
 8006b92:	bc80      	pop	{r7}
 8006b94:	4770      	bx	lr

08006b96 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8006b96:	b580      	push	{r7, lr}
 8006b98:	b082      	sub	sp, #8
 8006b9a:	af00      	add	r7, sp, #0
 8006b9c:	6078      	str	r0, [r7, #4]
 8006b9e:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8006ba0:	2180      	movs	r1, #128	; 0x80
 8006ba2:	6878      	ldr	r0, [r7, #4]
 8006ba4:	f000 fb66 	bl	8007274 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8006ba8:	2100      	movs	r1, #0
 8006baa:	6878      	ldr	r0, [r7, #4]
 8006bac:	f000 fb62 	bl	8007274 <USBD_LL_StallEP>
}
 8006bb0:	bf00      	nop
 8006bb2:	3708      	adds	r7, #8
 8006bb4:	46bd      	mov	sp, r7
 8006bb6:	bd80      	pop	{r7, pc}

08006bb8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006bb8:	b580      	push	{r7, lr}
 8006bba:	b086      	sub	sp, #24
 8006bbc:	af00      	add	r7, sp, #0
 8006bbe:	60f8      	str	r0, [r7, #12]
 8006bc0:	60b9      	str	r1, [r7, #8]
 8006bc2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006bc4:	2300      	movs	r3, #0
 8006bc6:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d032      	beq.n	8006c34 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8006bce:	68f8      	ldr	r0, [r7, #12]
 8006bd0:	f000 f834 	bl	8006c3c <USBD_GetLen>
 8006bd4:	4603      	mov	r3, r0
 8006bd6:	3301      	adds	r3, #1
 8006bd8:	b29b      	uxth	r3, r3
 8006bda:	005b      	lsls	r3, r3, #1
 8006bdc:	b29a      	uxth	r2, r3
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8006be2:	7dfb      	ldrb	r3, [r7, #23]
 8006be4:	1c5a      	adds	r2, r3, #1
 8006be6:	75fa      	strb	r2, [r7, #23]
 8006be8:	461a      	mov	r2, r3
 8006bea:	68bb      	ldr	r3, [r7, #8]
 8006bec:	4413      	add	r3, r2
 8006bee:	687a      	ldr	r2, [r7, #4]
 8006bf0:	7812      	ldrb	r2, [r2, #0]
 8006bf2:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8006bf4:	7dfb      	ldrb	r3, [r7, #23]
 8006bf6:	1c5a      	adds	r2, r3, #1
 8006bf8:	75fa      	strb	r2, [r7, #23]
 8006bfa:	461a      	mov	r2, r3
 8006bfc:	68bb      	ldr	r3, [r7, #8]
 8006bfe:	4413      	add	r3, r2
 8006c00:	2203      	movs	r2, #3
 8006c02:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8006c04:	e012      	b.n	8006c2c <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	1c5a      	adds	r2, r3, #1
 8006c0a:	60fa      	str	r2, [r7, #12]
 8006c0c:	7dfa      	ldrb	r2, [r7, #23]
 8006c0e:	1c51      	adds	r1, r2, #1
 8006c10:	75f9      	strb	r1, [r7, #23]
 8006c12:	4611      	mov	r1, r2
 8006c14:	68ba      	ldr	r2, [r7, #8]
 8006c16:	440a      	add	r2, r1
 8006c18:	781b      	ldrb	r3, [r3, #0]
 8006c1a:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8006c1c:	7dfb      	ldrb	r3, [r7, #23]
 8006c1e:	1c5a      	adds	r2, r3, #1
 8006c20:	75fa      	strb	r2, [r7, #23]
 8006c22:	461a      	mov	r2, r3
 8006c24:	68bb      	ldr	r3, [r7, #8]
 8006c26:	4413      	add	r3, r2
 8006c28:	2200      	movs	r2, #0
 8006c2a:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	781b      	ldrb	r3, [r3, #0]
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d1e8      	bne.n	8006c06 <USBD_GetString+0x4e>
    }
  }
}
 8006c34:	bf00      	nop
 8006c36:	3718      	adds	r7, #24
 8006c38:	46bd      	mov	sp, r7
 8006c3a:	bd80      	pop	{r7, pc}

08006c3c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006c3c:	b480      	push	{r7}
 8006c3e:	b085      	sub	sp, #20
 8006c40:	af00      	add	r7, sp, #0
 8006c42:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006c44:	2300      	movs	r3, #0
 8006c46:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8006c48:	e005      	b.n	8006c56 <USBD_GetLen+0x1a>
  {
    len++;
 8006c4a:	7bfb      	ldrb	r3, [r7, #15]
 8006c4c:	3301      	adds	r3, #1
 8006c4e:	73fb      	strb	r3, [r7, #15]
    buf++;
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	3301      	adds	r3, #1
 8006c54:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	781b      	ldrb	r3, [r3, #0]
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d1f5      	bne.n	8006c4a <USBD_GetLen+0xe>
  }

  return len;
 8006c5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c60:	4618      	mov	r0, r3
 8006c62:	3714      	adds	r7, #20
 8006c64:	46bd      	mov	sp, r7
 8006c66:	bc80      	pop	{r7}
 8006c68:	4770      	bx	lr

08006c6a <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8006c6a:	b580      	push	{r7, lr}
 8006c6c:	b084      	sub	sp, #16
 8006c6e:	af00      	add	r7, sp, #0
 8006c70:	60f8      	str	r0, [r7, #12]
 8006c72:	60b9      	str	r1, [r7, #8]
 8006c74:	4613      	mov	r3, r2
 8006c76:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	2202      	movs	r2, #2
 8006c7c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8006c80:	88fa      	ldrh	r2, [r7, #6]
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8006c86:	88fa      	ldrh	r2, [r7, #6]
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006c8c:	88fb      	ldrh	r3, [r7, #6]
 8006c8e:	68ba      	ldr	r2, [r7, #8]
 8006c90:	2100      	movs	r1, #0
 8006c92:	68f8      	ldr	r0, [r7, #12]
 8006c94:	f000 fb77 	bl	8007386 <USBD_LL_Transmit>

  return USBD_OK;
 8006c98:	2300      	movs	r3, #0
}
 8006c9a:	4618      	mov	r0, r3
 8006c9c:	3710      	adds	r7, #16
 8006c9e:	46bd      	mov	sp, r7
 8006ca0:	bd80      	pop	{r7, pc}

08006ca2 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8006ca2:	b580      	push	{r7, lr}
 8006ca4:	b084      	sub	sp, #16
 8006ca6:	af00      	add	r7, sp, #0
 8006ca8:	60f8      	str	r0, [r7, #12]
 8006caa:	60b9      	str	r1, [r7, #8]
 8006cac:	4613      	mov	r3, r2
 8006cae:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006cb0:	88fb      	ldrh	r3, [r7, #6]
 8006cb2:	68ba      	ldr	r2, [r7, #8]
 8006cb4:	2100      	movs	r1, #0
 8006cb6:	68f8      	ldr	r0, [r7, #12]
 8006cb8:	f000 fb65 	bl	8007386 <USBD_LL_Transmit>

  return USBD_OK;
 8006cbc:	2300      	movs	r3, #0
}
 8006cbe:	4618      	mov	r0, r3
 8006cc0:	3710      	adds	r7, #16
 8006cc2:	46bd      	mov	sp, r7
 8006cc4:	bd80      	pop	{r7, pc}

08006cc6 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8006cc6:	b580      	push	{r7, lr}
 8006cc8:	b084      	sub	sp, #16
 8006cca:	af00      	add	r7, sp, #0
 8006ccc:	60f8      	str	r0, [r7, #12]
 8006cce:	60b9      	str	r1, [r7, #8]
 8006cd0:	4613      	mov	r3, r2
 8006cd2:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006cd4:	88fb      	ldrh	r3, [r7, #6]
 8006cd6:	68ba      	ldr	r2, [r7, #8]
 8006cd8:	2100      	movs	r1, #0
 8006cda:	68f8      	ldr	r0, [r7, #12]
 8006cdc:	f000 fb76 	bl	80073cc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006ce0:	2300      	movs	r3, #0
}
 8006ce2:	4618      	mov	r0, r3
 8006ce4:	3710      	adds	r7, #16
 8006ce6:	46bd      	mov	sp, r7
 8006ce8:	bd80      	pop	{r7, pc}

08006cea <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006cea:	b580      	push	{r7, lr}
 8006cec:	b082      	sub	sp, #8
 8006cee:	af00      	add	r7, sp, #0
 8006cf0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	2204      	movs	r2, #4
 8006cf6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006cfa:	2300      	movs	r3, #0
 8006cfc:	2200      	movs	r2, #0
 8006cfe:	2100      	movs	r1, #0
 8006d00:	6878      	ldr	r0, [r7, #4]
 8006d02:	f000 fb40 	bl	8007386 <USBD_LL_Transmit>

  return USBD_OK;
 8006d06:	2300      	movs	r3, #0
}
 8006d08:	4618      	mov	r0, r3
 8006d0a:	3708      	adds	r7, #8
 8006d0c:	46bd      	mov	sp, r7
 8006d0e:	bd80      	pop	{r7, pc}

08006d10 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006d10:	b580      	push	{r7, lr}
 8006d12:	b082      	sub	sp, #8
 8006d14:	af00      	add	r7, sp, #0
 8006d16:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	2205      	movs	r2, #5
 8006d1c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006d20:	2300      	movs	r3, #0
 8006d22:	2200      	movs	r2, #0
 8006d24:	2100      	movs	r1, #0
 8006d26:	6878      	ldr	r0, [r7, #4]
 8006d28:	f000 fb50 	bl	80073cc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006d2c:	2300      	movs	r3, #0
}
 8006d2e:	4618      	mov	r0, r3
 8006d30:	3708      	adds	r7, #8
 8006d32:	46bd      	mov	sp, r7
 8006d34:	bd80      	pop	{r7, pc}
	...

08006d38 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8006d38:	b580      	push	{r7, lr}
 8006d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8006d3c:	2200      	movs	r2, #0
 8006d3e:	490e      	ldr	r1, [pc, #56]	; (8006d78 <MX_USB_DEVICE_Init+0x40>)
 8006d40:	480e      	ldr	r0, [pc, #56]	; (8006d7c <MX_USB_DEVICE_Init+0x44>)
 8006d42:	f7fe ff7d 	bl	8005c40 <USBD_Init>
 8006d46:	4603      	mov	r3, r0
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d001      	beq.n	8006d50 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8006d4c:	f7f9 fbc4 	bl	80004d8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 8006d50:	490b      	ldr	r1, [pc, #44]	; (8006d80 <MX_USB_DEVICE_Init+0x48>)
 8006d52:	480a      	ldr	r0, [pc, #40]	; (8006d7c <MX_USB_DEVICE_Init+0x44>)
 8006d54:	f7fe ff9f 	bl	8005c96 <USBD_RegisterClass>
 8006d58:	4603      	mov	r3, r0
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d001      	beq.n	8006d62 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8006d5e:	f7f9 fbbb 	bl	80004d8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8006d62:	4806      	ldr	r0, [pc, #24]	; (8006d7c <MX_USB_DEVICE_Init+0x44>)
 8006d64:	f7fe ffb0 	bl	8005cc8 <USBD_Start>
 8006d68:	4603      	mov	r3, r0
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d001      	beq.n	8006d72 <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 8006d6e:	f7f9 fbb3 	bl	80004d8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8006d72:	bf00      	nop
 8006d74:	bd80      	pop	{r7, pc}
 8006d76:	bf00      	nop
 8006d78:	200000fc 	.word	0x200000fc
 8006d7c:	200001b8 	.word	0x200001b8
 8006d80:	2000000c 	.word	0x2000000c

08006d84 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006d84:	b480      	push	{r7}
 8006d86:	b083      	sub	sp, #12
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	4603      	mov	r3, r0
 8006d8c:	6039      	str	r1, [r7, #0]
 8006d8e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8006d90:	683b      	ldr	r3, [r7, #0]
 8006d92:	2212      	movs	r2, #18
 8006d94:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8006d96:	4b03      	ldr	r3, [pc, #12]	; (8006da4 <USBD_FS_DeviceDescriptor+0x20>)
}
 8006d98:	4618      	mov	r0, r3
 8006d9a:	370c      	adds	r7, #12
 8006d9c:	46bd      	mov	sp, r7
 8006d9e:	bc80      	pop	{r7}
 8006da0:	4770      	bx	lr
 8006da2:	bf00      	nop
 8006da4:	20000118 	.word	0x20000118

08006da8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006da8:	b480      	push	{r7}
 8006daa:	b083      	sub	sp, #12
 8006dac:	af00      	add	r7, sp, #0
 8006dae:	4603      	mov	r3, r0
 8006db0:	6039      	str	r1, [r7, #0]
 8006db2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8006db4:	683b      	ldr	r3, [r7, #0]
 8006db6:	2204      	movs	r2, #4
 8006db8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8006dba:	4b03      	ldr	r3, [pc, #12]	; (8006dc8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8006dbc:	4618      	mov	r0, r3
 8006dbe:	370c      	adds	r7, #12
 8006dc0:	46bd      	mov	sp, r7
 8006dc2:	bc80      	pop	{r7}
 8006dc4:	4770      	bx	lr
 8006dc6:	bf00      	nop
 8006dc8:	2000012c 	.word	0x2000012c

08006dcc <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006dcc:	b580      	push	{r7, lr}
 8006dce:	b082      	sub	sp, #8
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	4603      	mov	r3, r0
 8006dd4:	6039      	str	r1, [r7, #0]
 8006dd6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006dd8:	79fb      	ldrb	r3, [r7, #7]
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d105      	bne.n	8006dea <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006dde:	683a      	ldr	r2, [r7, #0]
 8006de0:	4907      	ldr	r1, [pc, #28]	; (8006e00 <USBD_FS_ProductStrDescriptor+0x34>)
 8006de2:	4808      	ldr	r0, [pc, #32]	; (8006e04 <USBD_FS_ProductStrDescriptor+0x38>)
 8006de4:	f7ff fee8 	bl	8006bb8 <USBD_GetString>
 8006de8:	e004      	b.n	8006df4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006dea:	683a      	ldr	r2, [r7, #0]
 8006dec:	4904      	ldr	r1, [pc, #16]	; (8006e00 <USBD_FS_ProductStrDescriptor+0x34>)
 8006dee:	4805      	ldr	r0, [pc, #20]	; (8006e04 <USBD_FS_ProductStrDescriptor+0x38>)
 8006df0:	f7ff fee2 	bl	8006bb8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006df4:	4b02      	ldr	r3, [pc, #8]	; (8006e00 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8006df6:	4618      	mov	r0, r3
 8006df8:	3708      	adds	r7, #8
 8006dfa:	46bd      	mov	sp, r7
 8006dfc:	bd80      	pop	{r7, pc}
 8006dfe:	bf00      	nop
 8006e00:	2000047c 	.word	0x2000047c
 8006e04:	0800753c 	.word	0x0800753c

08006e08 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006e08:	b580      	push	{r7, lr}
 8006e0a:	b082      	sub	sp, #8
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	4603      	mov	r3, r0
 8006e10:	6039      	str	r1, [r7, #0]
 8006e12:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8006e14:	683a      	ldr	r2, [r7, #0]
 8006e16:	4904      	ldr	r1, [pc, #16]	; (8006e28 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8006e18:	4804      	ldr	r0, [pc, #16]	; (8006e2c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8006e1a:	f7ff fecd 	bl	8006bb8 <USBD_GetString>
  return USBD_StrDesc;
 8006e1e:	4b02      	ldr	r3, [pc, #8]	; (8006e28 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8006e20:	4618      	mov	r0, r3
 8006e22:	3708      	adds	r7, #8
 8006e24:	46bd      	mov	sp, r7
 8006e26:	bd80      	pop	{r7, pc}
 8006e28:	2000047c 	.word	0x2000047c
 8006e2c:	08007554 	.word	0x08007554

08006e30 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006e30:	b580      	push	{r7, lr}
 8006e32:	b082      	sub	sp, #8
 8006e34:	af00      	add	r7, sp, #0
 8006e36:	4603      	mov	r3, r0
 8006e38:	6039      	str	r1, [r7, #0]
 8006e3a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8006e3c:	683b      	ldr	r3, [r7, #0]
 8006e3e:	221a      	movs	r2, #26
 8006e40:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8006e42:	f000 f843 	bl	8006ecc <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8006e46:	4b02      	ldr	r3, [pc, #8]	; (8006e50 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8006e48:	4618      	mov	r0, r3
 8006e4a:	3708      	adds	r7, #8
 8006e4c:	46bd      	mov	sp, r7
 8006e4e:	bd80      	pop	{r7, pc}
 8006e50:	20000130 	.word	0x20000130

08006e54 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006e54:	b580      	push	{r7, lr}
 8006e56:	b082      	sub	sp, #8
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	4603      	mov	r3, r0
 8006e5c:	6039      	str	r1, [r7, #0]
 8006e5e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8006e60:	79fb      	ldrb	r3, [r7, #7]
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d105      	bne.n	8006e72 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006e66:	683a      	ldr	r2, [r7, #0]
 8006e68:	4907      	ldr	r1, [pc, #28]	; (8006e88 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006e6a:	4808      	ldr	r0, [pc, #32]	; (8006e8c <USBD_FS_ConfigStrDescriptor+0x38>)
 8006e6c:	f7ff fea4 	bl	8006bb8 <USBD_GetString>
 8006e70:	e004      	b.n	8006e7c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006e72:	683a      	ldr	r2, [r7, #0]
 8006e74:	4904      	ldr	r1, [pc, #16]	; (8006e88 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006e76:	4805      	ldr	r0, [pc, #20]	; (8006e8c <USBD_FS_ConfigStrDescriptor+0x38>)
 8006e78:	f7ff fe9e 	bl	8006bb8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006e7c:	4b02      	ldr	r3, [pc, #8]	; (8006e88 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8006e7e:	4618      	mov	r0, r3
 8006e80:	3708      	adds	r7, #8
 8006e82:	46bd      	mov	sp, r7
 8006e84:	bd80      	pop	{r7, pc}
 8006e86:	bf00      	nop
 8006e88:	2000047c 	.word	0x2000047c
 8006e8c:	08007568 	.word	0x08007568

08006e90 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006e90:	b580      	push	{r7, lr}
 8006e92:	b082      	sub	sp, #8
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	4603      	mov	r3, r0
 8006e98:	6039      	str	r1, [r7, #0]
 8006e9a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006e9c:	79fb      	ldrb	r3, [r7, #7]
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d105      	bne.n	8006eae <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006ea2:	683a      	ldr	r2, [r7, #0]
 8006ea4:	4907      	ldr	r1, [pc, #28]	; (8006ec4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006ea6:	4808      	ldr	r0, [pc, #32]	; (8006ec8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006ea8:	f7ff fe86 	bl	8006bb8 <USBD_GetString>
 8006eac:	e004      	b.n	8006eb8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006eae:	683a      	ldr	r2, [r7, #0]
 8006eb0:	4904      	ldr	r1, [pc, #16]	; (8006ec4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006eb2:	4805      	ldr	r0, [pc, #20]	; (8006ec8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006eb4:	f7ff fe80 	bl	8006bb8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006eb8:	4b02      	ldr	r3, [pc, #8]	; (8006ec4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8006eba:	4618      	mov	r0, r3
 8006ebc:	3708      	adds	r7, #8
 8006ebe:	46bd      	mov	sp, r7
 8006ec0:	bd80      	pop	{r7, pc}
 8006ec2:	bf00      	nop
 8006ec4:	2000047c 	.word	0x2000047c
 8006ec8:	08007574 	.word	0x08007574

08006ecc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8006ecc:	b580      	push	{r7, lr}
 8006ece:	b084      	sub	sp, #16
 8006ed0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8006ed2:	4b0f      	ldr	r3, [pc, #60]	; (8006f10 <Get_SerialNum+0x44>)
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8006ed8:	4b0e      	ldr	r3, [pc, #56]	; (8006f14 <Get_SerialNum+0x48>)
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8006ede:	4b0e      	ldr	r3, [pc, #56]	; (8006f18 <Get_SerialNum+0x4c>)
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8006ee4:	68fa      	ldr	r2, [r7, #12]
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	4413      	add	r3, r2
 8006eea:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d009      	beq.n	8006f06 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8006ef2:	2208      	movs	r2, #8
 8006ef4:	4909      	ldr	r1, [pc, #36]	; (8006f1c <Get_SerialNum+0x50>)
 8006ef6:	68f8      	ldr	r0, [r7, #12]
 8006ef8:	f000 f814 	bl	8006f24 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8006efc:	2204      	movs	r2, #4
 8006efe:	4908      	ldr	r1, [pc, #32]	; (8006f20 <Get_SerialNum+0x54>)
 8006f00:	68b8      	ldr	r0, [r7, #8]
 8006f02:	f000 f80f 	bl	8006f24 <IntToUnicode>
  }
}
 8006f06:	bf00      	nop
 8006f08:	3710      	adds	r7, #16
 8006f0a:	46bd      	mov	sp, r7
 8006f0c:	bd80      	pop	{r7, pc}
 8006f0e:	bf00      	nop
 8006f10:	1ffff7e8 	.word	0x1ffff7e8
 8006f14:	1ffff7ec 	.word	0x1ffff7ec
 8006f18:	1ffff7f0 	.word	0x1ffff7f0
 8006f1c:	20000132 	.word	0x20000132
 8006f20:	20000142 	.word	0x20000142

08006f24 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8006f24:	b480      	push	{r7}
 8006f26:	b087      	sub	sp, #28
 8006f28:	af00      	add	r7, sp, #0
 8006f2a:	60f8      	str	r0, [r7, #12]
 8006f2c:	60b9      	str	r1, [r7, #8]
 8006f2e:	4613      	mov	r3, r2
 8006f30:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8006f32:	2300      	movs	r3, #0
 8006f34:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8006f36:	2300      	movs	r3, #0
 8006f38:	75fb      	strb	r3, [r7, #23]
 8006f3a:	e027      	b.n	8006f8c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	0f1b      	lsrs	r3, r3, #28
 8006f40:	2b09      	cmp	r3, #9
 8006f42:	d80b      	bhi.n	8006f5c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	0f1b      	lsrs	r3, r3, #28
 8006f48:	b2da      	uxtb	r2, r3
 8006f4a:	7dfb      	ldrb	r3, [r7, #23]
 8006f4c:	005b      	lsls	r3, r3, #1
 8006f4e:	4619      	mov	r1, r3
 8006f50:	68bb      	ldr	r3, [r7, #8]
 8006f52:	440b      	add	r3, r1
 8006f54:	3230      	adds	r2, #48	; 0x30
 8006f56:	b2d2      	uxtb	r2, r2
 8006f58:	701a      	strb	r2, [r3, #0]
 8006f5a:	e00a      	b.n	8006f72 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	0f1b      	lsrs	r3, r3, #28
 8006f60:	b2da      	uxtb	r2, r3
 8006f62:	7dfb      	ldrb	r3, [r7, #23]
 8006f64:	005b      	lsls	r3, r3, #1
 8006f66:	4619      	mov	r1, r3
 8006f68:	68bb      	ldr	r3, [r7, #8]
 8006f6a:	440b      	add	r3, r1
 8006f6c:	3237      	adds	r2, #55	; 0x37
 8006f6e:	b2d2      	uxtb	r2, r2
 8006f70:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	011b      	lsls	r3, r3, #4
 8006f76:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8006f78:	7dfb      	ldrb	r3, [r7, #23]
 8006f7a:	005b      	lsls	r3, r3, #1
 8006f7c:	3301      	adds	r3, #1
 8006f7e:	68ba      	ldr	r2, [r7, #8]
 8006f80:	4413      	add	r3, r2
 8006f82:	2200      	movs	r2, #0
 8006f84:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8006f86:	7dfb      	ldrb	r3, [r7, #23]
 8006f88:	3301      	adds	r3, #1
 8006f8a:	75fb      	strb	r3, [r7, #23]
 8006f8c:	7dfa      	ldrb	r2, [r7, #23]
 8006f8e:	79fb      	ldrb	r3, [r7, #7]
 8006f90:	429a      	cmp	r2, r3
 8006f92:	d3d3      	bcc.n	8006f3c <IntToUnicode+0x18>
  }
}
 8006f94:	bf00      	nop
 8006f96:	bf00      	nop
 8006f98:	371c      	adds	r7, #28
 8006f9a:	46bd      	mov	sp, r7
 8006f9c:	bc80      	pop	{r7}
 8006f9e:	4770      	bx	lr

08006fa0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8006fa0:	b580      	push	{r7, lr}
 8006fa2:	b084      	sub	sp, #16
 8006fa4:	af00      	add	r7, sp, #0
 8006fa6:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	4a0d      	ldr	r2, [pc, #52]	; (8006fe4 <HAL_PCD_MspInit+0x44>)
 8006fae:	4293      	cmp	r3, r2
 8006fb0:	d113      	bne.n	8006fda <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8006fb2:	4b0d      	ldr	r3, [pc, #52]	; (8006fe8 <HAL_PCD_MspInit+0x48>)
 8006fb4:	69db      	ldr	r3, [r3, #28]
 8006fb6:	4a0c      	ldr	r2, [pc, #48]	; (8006fe8 <HAL_PCD_MspInit+0x48>)
 8006fb8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006fbc:	61d3      	str	r3, [r2, #28]
 8006fbe:	4b0a      	ldr	r3, [pc, #40]	; (8006fe8 <HAL_PCD_MspInit+0x48>)
 8006fc0:	69db      	ldr	r3, [r3, #28]
 8006fc2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006fc6:	60fb      	str	r3, [r7, #12]
 8006fc8:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8006fca:	2200      	movs	r2, #0
 8006fcc:	2100      	movs	r1, #0
 8006fce:	2014      	movs	r0, #20
 8006fd0:	f7fa f8cb 	bl	800116a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8006fd4:	2014      	movs	r0, #20
 8006fd6:	f7fa f8e4 	bl	80011a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8006fda:	bf00      	nop
 8006fdc:	3710      	adds	r7, #16
 8006fde:	46bd      	mov	sp, r7
 8006fe0:	bd80      	pop	{r7, pc}
 8006fe2:	bf00      	nop
 8006fe4:	40005c00 	.word	0x40005c00
 8006fe8:	40021000 	.word	0x40021000

08006fec <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006fec:	b580      	push	{r7, lr}
 8006fee:	b082      	sub	sp, #8
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8007000:	4619      	mov	r1, r3
 8007002:	4610      	mov	r0, r2
 8007004:	f7fe fea8 	bl	8005d58 <USBD_LL_SetupStage>
}
 8007008:	bf00      	nop
 800700a:	3708      	adds	r7, #8
 800700c:	46bd      	mov	sp, r7
 800700e:	bd80      	pop	{r7, pc}

08007010 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007010:	b580      	push	{r7, lr}
 8007012:	b082      	sub	sp, #8
 8007014:	af00      	add	r7, sp, #0
 8007016:	6078      	str	r0, [r7, #4]
 8007018:	460b      	mov	r3, r1
 800701a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8007022:	78fa      	ldrb	r2, [r7, #3]
 8007024:	6879      	ldr	r1, [r7, #4]
 8007026:	4613      	mov	r3, r2
 8007028:	009b      	lsls	r3, r3, #2
 800702a:	4413      	add	r3, r2
 800702c:	00db      	lsls	r3, r3, #3
 800702e:	440b      	add	r3, r1
 8007030:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8007034:	681a      	ldr	r2, [r3, #0]
 8007036:	78fb      	ldrb	r3, [r7, #3]
 8007038:	4619      	mov	r1, r3
 800703a:	f7fe feda 	bl	8005df2 <USBD_LL_DataOutStage>
}
 800703e:	bf00      	nop
 8007040:	3708      	adds	r7, #8
 8007042:	46bd      	mov	sp, r7
 8007044:	bd80      	pop	{r7, pc}

08007046 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007046:	b580      	push	{r7, lr}
 8007048:	b082      	sub	sp, #8
 800704a:	af00      	add	r7, sp, #0
 800704c:	6078      	str	r0, [r7, #4]
 800704e:	460b      	mov	r3, r1
 8007050:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8007058:	78fa      	ldrb	r2, [r7, #3]
 800705a:	6879      	ldr	r1, [r7, #4]
 800705c:	4613      	mov	r3, r2
 800705e:	009b      	lsls	r3, r3, #2
 8007060:	4413      	add	r3, r2
 8007062:	00db      	lsls	r3, r3, #3
 8007064:	440b      	add	r3, r1
 8007066:	333c      	adds	r3, #60	; 0x3c
 8007068:	681a      	ldr	r2, [r3, #0]
 800706a:	78fb      	ldrb	r3, [r7, #3]
 800706c:	4619      	mov	r1, r3
 800706e:	f7fe ff31 	bl	8005ed4 <USBD_LL_DataInStage>
}
 8007072:	bf00      	nop
 8007074:	3708      	adds	r7, #8
 8007076:	46bd      	mov	sp, r7
 8007078:	bd80      	pop	{r7, pc}

0800707a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800707a:	b580      	push	{r7, lr}
 800707c:	b082      	sub	sp, #8
 800707e:	af00      	add	r7, sp, #0
 8007080:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007088:	4618      	mov	r0, r3
 800708a:	f7ff f841 	bl	8006110 <USBD_LL_SOF>
}
 800708e:	bf00      	nop
 8007090:	3708      	adds	r7, #8
 8007092:	46bd      	mov	sp, r7
 8007094:	bd80      	pop	{r7, pc}

08007096 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007096:	b580      	push	{r7, lr}
 8007098:	b084      	sub	sp, #16
 800709a:	af00      	add	r7, sp, #0
 800709c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800709e:	2301      	movs	r3, #1
 80070a0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	689b      	ldr	r3, [r3, #8]
 80070a6:	2b02      	cmp	r3, #2
 80070a8:	d001      	beq.n	80070ae <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80070aa:	f7f9 fa15 	bl	80004d8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80070b4:	7bfa      	ldrb	r2, [r7, #15]
 80070b6:	4611      	mov	r1, r2
 80070b8:	4618      	mov	r0, r3
 80070ba:	f7fe fff1 	bl	80060a0 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80070c4:	4618      	mov	r0, r3
 80070c6:	f7fe ffaa 	bl	800601e <USBD_LL_Reset>
}
 80070ca:	bf00      	nop
 80070cc:	3710      	adds	r7, #16
 80070ce:	46bd      	mov	sp, r7
 80070d0:	bd80      	pop	{r7, pc}
	...

080070d4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80070d4:	b580      	push	{r7, lr}
 80070d6:	b082      	sub	sp, #8
 80070d8:	af00      	add	r7, sp, #0
 80070da:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80070e2:	4618      	mov	r0, r3
 80070e4:	f7fe ffeb 	bl	80060be <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	699b      	ldr	r3, [r3, #24]
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d005      	beq.n	80070fc <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80070f0:	4b04      	ldr	r3, [pc, #16]	; (8007104 <HAL_PCD_SuspendCallback+0x30>)
 80070f2:	691b      	ldr	r3, [r3, #16]
 80070f4:	4a03      	ldr	r2, [pc, #12]	; (8007104 <HAL_PCD_SuspendCallback+0x30>)
 80070f6:	f043 0306 	orr.w	r3, r3, #6
 80070fa:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80070fc:	bf00      	nop
 80070fe:	3708      	adds	r7, #8
 8007100:	46bd      	mov	sp, r7
 8007102:	bd80      	pop	{r7, pc}
 8007104:	e000ed00 	.word	0xe000ed00

08007108 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007108:	b580      	push	{r7, lr}
 800710a:	b082      	sub	sp, #8
 800710c:	af00      	add	r7, sp, #0
 800710e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007116:	4618      	mov	r0, r3
 8007118:	f7fe ffe5 	bl	80060e6 <USBD_LL_Resume>
}
 800711c:	bf00      	nop
 800711e:	3708      	adds	r7, #8
 8007120:	46bd      	mov	sp, r7
 8007122:	bd80      	pop	{r7, pc}

08007124 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007124:	b580      	push	{r7, lr}
 8007126:	b082      	sub	sp, #8
 8007128:	af00      	add	r7, sp, #0
 800712a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800712c:	4a1f      	ldr	r2, [pc, #124]	; (80071ac <USBD_LL_Init+0x88>)
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	4a1d      	ldr	r2, [pc, #116]	; (80071ac <USBD_LL_Init+0x88>)
 8007138:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800713c:	4b1b      	ldr	r3, [pc, #108]	; (80071ac <USBD_LL_Init+0x88>)
 800713e:	4a1c      	ldr	r2, [pc, #112]	; (80071b0 <USBD_LL_Init+0x8c>)
 8007140:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8007142:	4b1a      	ldr	r3, [pc, #104]	; (80071ac <USBD_LL_Init+0x88>)
 8007144:	2208      	movs	r2, #8
 8007146:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8007148:	4b18      	ldr	r3, [pc, #96]	; (80071ac <USBD_LL_Init+0x88>)
 800714a:	2202      	movs	r2, #2
 800714c:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800714e:	4b17      	ldr	r3, [pc, #92]	; (80071ac <USBD_LL_Init+0x88>)
 8007150:	2200      	movs	r2, #0
 8007152:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8007154:	4b15      	ldr	r3, [pc, #84]	; (80071ac <USBD_LL_Init+0x88>)
 8007156:	2200      	movs	r2, #0
 8007158:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800715a:	4b14      	ldr	r3, [pc, #80]	; (80071ac <USBD_LL_Init+0x88>)
 800715c:	2200      	movs	r2, #0
 800715e:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8007160:	4812      	ldr	r0, [pc, #72]	; (80071ac <USBD_LL_Init+0x88>)
 8007162:	f7fa fa05 	bl	8001570 <HAL_PCD_Init>
 8007166:	4603      	mov	r3, r0
 8007168:	2b00      	cmp	r3, #0
 800716a:	d001      	beq.n	8007170 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800716c:	f7f9 f9b4 	bl	80004d8 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007176:	2318      	movs	r3, #24
 8007178:	2200      	movs	r2, #0
 800717a:	2100      	movs	r1, #0
 800717c:	f7fb fd30 	bl	8002be0 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007186:	2358      	movs	r3, #88	; 0x58
 8007188:	2200      	movs	r2, #0
 800718a:	2180      	movs	r1, #128	; 0x80
 800718c:	f7fb fd28 	bl	8002be0 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_HID */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0x100);
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007196:	f44f 7380 	mov.w	r3, #256	; 0x100
 800719a:	2200      	movs	r2, #0
 800719c:	2181      	movs	r1, #129	; 0x81
 800719e:	f7fb fd1f 	bl	8002be0 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_HID */
  return USBD_OK;
 80071a2:	2300      	movs	r3, #0
}
 80071a4:	4618      	mov	r0, r3
 80071a6:	3708      	adds	r7, #8
 80071a8:	46bd      	mov	sp, r7
 80071aa:	bd80      	pop	{r7, pc}
 80071ac:	2000067c 	.word	0x2000067c
 80071b0:	40005c00 	.word	0x40005c00

080071b4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80071b4:	b580      	push	{r7, lr}
 80071b6:	b084      	sub	sp, #16
 80071b8:	af00      	add	r7, sp, #0
 80071ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80071bc:	2300      	movs	r3, #0
 80071be:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80071c0:	2300      	movs	r3, #0
 80071c2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80071ca:	4618      	mov	r0, r3
 80071cc:	f7fa fadb 	bl	8001786 <HAL_PCD_Start>
 80071d0:	4603      	mov	r3, r0
 80071d2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80071d4:	7bfb      	ldrb	r3, [r7, #15]
 80071d6:	4618      	mov	r0, r3
 80071d8:	f000 f93c 	bl	8007454 <USBD_Get_USB_Status>
 80071dc:	4603      	mov	r3, r0
 80071de:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80071e0:	7bbb      	ldrb	r3, [r7, #14]
}
 80071e2:	4618      	mov	r0, r3
 80071e4:	3710      	adds	r7, #16
 80071e6:	46bd      	mov	sp, r7
 80071e8:	bd80      	pop	{r7, pc}

080071ea <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80071ea:	b580      	push	{r7, lr}
 80071ec:	b084      	sub	sp, #16
 80071ee:	af00      	add	r7, sp, #0
 80071f0:	6078      	str	r0, [r7, #4]
 80071f2:	4608      	mov	r0, r1
 80071f4:	4611      	mov	r1, r2
 80071f6:	461a      	mov	r2, r3
 80071f8:	4603      	mov	r3, r0
 80071fa:	70fb      	strb	r3, [r7, #3]
 80071fc:	460b      	mov	r3, r1
 80071fe:	70bb      	strb	r3, [r7, #2]
 8007200:	4613      	mov	r3, r2
 8007202:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007204:	2300      	movs	r3, #0
 8007206:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007208:	2300      	movs	r3, #0
 800720a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007212:	78bb      	ldrb	r3, [r7, #2]
 8007214:	883a      	ldrh	r2, [r7, #0]
 8007216:	78f9      	ldrb	r1, [r7, #3]
 8007218:	f7fa fc55 	bl	8001ac6 <HAL_PCD_EP_Open>
 800721c:	4603      	mov	r3, r0
 800721e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007220:	7bfb      	ldrb	r3, [r7, #15]
 8007222:	4618      	mov	r0, r3
 8007224:	f000 f916 	bl	8007454 <USBD_Get_USB_Status>
 8007228:	4603      	mov	r3, r0
 800722a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800722c:	7bbb      	ldrb	r3, [r7, #14]
}
 800722e:	4618      	mov	r0, r3
 8007230:	3710      	adds	r7, #16
 8007232:	46bd      	mov	sp, r7
 8007234:	bd80      	pop	{r7, pc}

08007236 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007236:	b580      	push	{r7, lr}
 8007238:	b084      	sub	sp, #16
 800723a:	af00      	add	r7, sp, #0
 800723c:	6078      	str	r0, [r7, #4]
 800723e:	460b      	mov	r3, r1
 8007240:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007242:	2300      	movs	r3, #0
 8007244:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007246:	2300      	movs	r3, #0
 8007248:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007250:	78fa      	ldrb	r2, [r7, #3]
 8007252:	4611      	mov	r1, r2
 8007254:	4618      	mov	r0, r3
 8007256:	f7fa fc9c 	bl	8001b92 <HAL_PCD_EP_Close>
 800725a:	4603      	mov	r3, r0
 800725c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800725e:	7bfb      	ldrb	r3, [r7, #15]
 8007260:	4618      	mov	r0, r3
 8007262:	f000 f8f7 	bl	8007454 <USBD_Get_USB_Status>
 8007266:	4603      	mov	r3, r0
 8007268:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800726a:	7bbb      	ldrb	r3, [r7, #14]
}
 800726c:	4618      	mov	r0, r3
 800726e:	3710      	adds	r7, #16
 8007270:	46bd      	mov	sp, r7
 8007272:	bd80      	pop	{r7, pc}

08007274 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007274:	b580      	push	{r7, lr}
 8007276:	b084      	sub	sp, #16
 8007278:	af00      	add	r7, sp, #0
 800727a:	6078      	str	r0, [r7, #4]
 800727c:	460b      	mov	r3, r1
 800727e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007280:	2300      	movs	r3, #0
 8007282:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007284:	2300      	movs	r3, #0
 8007286:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800728e:	78fa      	ldrb	r2, [r7, #3]
 8007290:	4611      	mov	r1, r2
 8007292:	4618      	mov	r0, r3
 8007294:	f7fa fd45 	bl	8001d22 <HAL_PCD_EP_SetStall>
 8007298:	4603      	mov	r3, r0
 800729a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800729c:	7bfb      	ldrb	r3, [r7, #15]
 800729e:	4618      	mov	r0, r3
 80072a0:	f000 f8d8 	bl	8007454 <USBD_Get_USB_Status>
 80072a4:	4603      	mov	r3, r0
 80072a6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80072a8:	7bbb      	ldrb	r3, [r7, #14]
}
 80072aa:	4618      	mov	r0, r3
 80072ac:	3710      	adds	r7, #16
 80072ae:	46bd      	mov	sp, r7
 80072b0:	bd80      	pop	{r7, pc}

080072b2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80072b2:	b580      	push	{r7, lr}
 80072b4:	b084      	sub	sp, #16
 80072b6:	af00      	add	r7, sp, #0
 80072b8:	6078      	str	r0, [r7, #4]
 80072ba:	460b      	mov	r3, r1
 80072bc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80072be:	2300      	movs	r3, #0
 80072c0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80072c2:	2300      	movs	r3, #0
 80072c4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80072cc:	78fa      	ldrb	r2, [r7, #3]
 80072ce:	4611      	mov	r1, r2
 80072d0:	4618      	mov	r0, r3
 80072d2:	f7fa fd86 	bl	8001de2 <HAL_PCD_EP_ClrStall>
 80072d6:	4603      	mov	r3, r0
 80072d8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80072da:	7bfb      	ldrb	r3, [r7, #15]
 80072dc:	4618      	mov	r0, r3
 80072de:	f000 f8b9 	bl	8007454 <USBD_Get_USB_Status>
 80072e2:	4603      	mov	r3, r0
 80072e4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80072e6:	7bbb      	ldrb	r3, [r7, #14]
}
 80072e8:	4618      	mov	r0, r3
 80072ea:	3710      	adds	r7, #16
 80072ec:	46bd      	mov	sp, r7
 80072ee:	bd80      	pop	{r7, pc}

080072f0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80072f0:	b480      	push	{r7}
 80072f2:	b085      	sub	sp, #20
 80072f4:	af00      	add	r7, sp, #0
 80072f6:	6078      	str	r0, [r7, #4]
 80072f8:	460b      	mov	r3, r1
 80072fa:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007302:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007304:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007308:	2b00      	cmp	r3, #0
 800730a:	da0c      	bge.n	8007326 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800730c:	78fb      	ldrb	r3, [r7, #3]
 800730e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007312:	68f9      	ldr	r1, [r7, #12]
 8007314:	1c5a      	adds	r2, r3, #1
 8007316:	4613      	mov	r3, r2
 8007318:	009b      	lsls	r3, r3, #2
 800731a:	4413      	add	r3, r2
 800731c:	00db      	lsls	r3, r3, #3
 800731e:	440b      	add	r3, r1
 8007320:	3302      	adds	r3, #2
 8007322:	781b      	ldrb	r3, [r3, #0]
 8007324:	e00b      	b.n	800733e <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007326:	78fb      	ldrb	r3, [r7, #3]
 8007328:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800732c:	68f9      	ldr	r1, [r7, #12]
 800732e:	4613      	mov	r3, r2
 8007330:	009b      	lsls	r3, r3, #2
 8007332:	4413      	add	r3, r2
 8007334:	00db      	lsls	r3, r3, #3
 8007336:	440b      	add	r3, r1
 8007338:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800733c:	781b      	ldrb	r3, [r3, #0]
  }
}
 800733e:	4618      	mov	r0, r3
 8007340:	3714      	adds	r7, #20
 8007342:	46bd      	mov	sp, r7
 8007344:	bc80      	pop	{r7}
 8007346:	4770      	bx	lr

08007348 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007348:	b580      	push	{r7, lr}
 800734a:	b084      	sub	sp, #16
 800734c:	af00      	add	r7, sp, #0
 800734e:	6078      	str	r0, [r7, #4]
 8007350:	460b      	mov	r3, r1
 8007352:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007354:	2300      	movs	r3, #0
 8007356:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007358:	2300      	movs	r3, #0
 800735a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007362:	78fa      	ldrb	r2, [r7, #3]
 8007364:	4611      	mov	r1, r2
 8007366:	4618      	mov	r0, r3
 8007368:	f7fa fb88 	bl	8001a7c <HAL_PCD_SetAddress>
 800736c:	4603      	mov	r3, r0
 800736e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007370:	7bfb      	ldrb	r3, [r7, #15]
 8007372:	4618      	mov	r0, r3
 8007374:	f000 f86e 	bl	8007454 <USBD_Get_USB_Status>
 8007378:	4603      	mov	r3, r0
 800737a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800737c:	7bbb      	ldrb	r3, [r7, #14]
}
 800737e:	4618      	mov	r0, r3
 8007380:	3710      	adds	r7, #16
 8007382:	46bd      	mov	sp, r7
 8007384:	bd80      	pop	{r7, pc}

08007386 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8007386:	b580      	push	{r7, lr}
 8007388:	b086      	sub	sp, #24
 800738a:	af00      	add	r7, sp, #0
 800738c:	60f8      	str	r0, [r7, #12]
 800738e:	607a      	str	r2, [r7, #4]
 8007390:	461a      	mov	r2, r3
 8007392:	460b      	mov	r3, r1
 8007394:	72fb      	strb	r3, [r7, #11]
 8007396:	4613      	mov	r3, r2
 8007398:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800739a:	2300      	movs	r3, #0
 800739c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800739e:	2300      	movs	r3, #0
 80073a0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80073a8:	893b      	ldrh	r3, [r7, #8]
 80073aa:	7af9      	ldrb	r1, [r7, #11]
 80073ac:	687a      	ldr	r2, [r7, #4]
 80073ae:	f7fa fc75 	bl	8001c9c <HAL_PCD_EP_Transmit>
 80073b2:	4603      	mov	r3, r0
 80073b4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80073b6:	7dfb      	ldrb	r3, [r7, #23]
 80073b8:	4618      	mov	r0, r3
 80073ba:	f000 f84b 	bl	8007454 <USBD_Get_USB_Status>
 80073be:	4603      	mov	r3, r0
 80073c0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80073c2:	7dbb      	ldrb	r3, [r7, #22]
}
 80073c4:	4618      	mov	r0, r3
 80073c6:	3718      	adds	r7, #24
 80073c8:	46bd      	mov	sp, r7
 80073ca:	bd80      	pop	{r7, pc}

080073cc <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80073cc:	b580      	push	{r7, lr}
 80073ce:	b086      	sub	sp, #24
 80073d0:	af00      	add	r7, sp, #0
 80073d2:	60f8      	str	r0, [r7, #12]
 80073d4:	607a      	str	r2, [r7, #4]
 80073d6:	461a      	mov	r2, r3
 80073d8:	460b      	mov	r3, r1
 80073da:	72fb      	strb	r3, [r7, #11]
 80073dc:	4613      	mov	r3, r2
 80073de:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80073e0:	2300      	movs	r3, #0
 80073e2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80073e4:	2300      	movs	r3, #0
 80073e6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80073ee:	893b      	ldrh	r3, [r7, #8]
 80073f0:	7af9      	ldrb	r1, [r7, #11]
 80073f2:	687a      	ldr	r2, [r7, #4]
 80073f4:	f7fa fc15 	bl	8001c22 <HAL_PCD_EP_Receive>
 80073f8:	4603      	mov	r3, r0
 80073fa:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80073fc:	7dfb      	ldrb	r3, [r7, #23]
 80073fe:	4618      	mov	r0, r3
 8007400:	f000 f828 	bl	8007454 <USBD_Get_USB_Status>
 8007404:	4603      	mov	r3, r0
 8007406:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007408:	7dbb      	ldrb	r3, [r7, #22]
}
 800740a:	4618      	mov	r0, r3
 800740c:	3718      	adds	r7, #24
 800740e:	46bd      	mov	sp, r7
 8007410:	bd80      	pop	{r7, pc}
	...

08007414 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007414:	b480      	push	{r7}
 8007416:	b083      	sub	sp, #12
 8007418:	af00      	add	r7, sp, #0
 800741a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800741c:	4b02      	ldr	r3, [pc, #8]	; (8007428 <USBD_static_malloc+0x14>)
}
 800741e:	4618      	mov	r0, r3
 8007420:	370c      	adds	r7, #12
 8007422:	46bd      	mov	sp, r7
 8007424:	bc80      	pop	{r7}
 8007426:	4770      	bx	lr
 8007428:	20000170 	.word	0x20000170

0800742c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800742c:	b480      	push	{r7}
 800742e:	b083      	sub	sp, #12
 8007430:	af00      	add	r7, sp, #0
 8007432:	6078      	str	r0, [r7, #4]

}
 8007434:	bf00      	nop
 8007436:	370c      	adds	r7, #12
 8007438:	46bd      	mov	sp, r7
 800743a:	bc80      	pop	{r7}
 800743c:	4770      	bx	lr

0800743e <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800743e:	b480      	push	{r7}
 8007440:	b083      	sub	sp, #12
 8007442:	af00      	add	r7, sp, #0
 8007444:	6078      	str	r0, [r7, #4]
 8007446:	460b      	mov	r3, r1
 8007448:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800744a:	bf00      	nop
 800744c:	370c      	adds	r7, #12
 800744e:	46bd      	mov	sp, r7
 8007450:	bc80      	pop	{r7}
 8007452:	4770      	bx	lr

08007454 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007454:	b480      	push	{r7}
 8007456:	b085      	sub	sp, #20
 8007458:	af00      	add	r7, sp, #0
 800745a:	4603      	mov	r3, r0
 800745c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800745e:	2300      	movs	r3, #0
 8007460:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007462:	79fb      	ldrb	r3, [r7, #7]
 8007464:	2b03      	cmp	r3, #3
 8007466:	d817      	bhi.n	8007498 <USBD_Get_USB_Status+0x44>
 8007468:	a201      	add	r2, pc, #4	; (adr r2, 8007470 <USBD_Get_USB_Status+0x1c>)
 800746a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800746e:	bf00      	nop
 8007470:	08007481 	.word	0x08007481
 8007474:	08007487 	.word	0x08007487
 8007478:	0800748d 	.word	0x0800748d
 800747c:	08007493 	.word	0x08007493
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007480:	2300      	movs	r3, #0
 8007482:	73fb      	strb	r3, [r7, #15]
    break;
 8007484:	e00b      	b.n	800749e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007486:	2302      	movs	r3, #2
 8007488:	73fb      	strb	r3, [r7, #15]
    break;
 800748a:	e008      	b.n	800749e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800748c:	2301      	movs	r3, #1
 800748e:	73fb      	strb	r3, [r7, #15]
    break;
 8007490:	e005      	b.n	800749e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007492:	2302      	movs	r3, #2
 8007494:	73fb      	strb	r3, [r7, #15]
    break;
 8007496:	e002      	b.n	800749e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007498:	2302      	movs	r3, #2
 800749a:	73fb      	strb	r3, [r7, #15]
    break;
 800749c:	bf00      	nop
  }
  return usb_status;
 800749e:	7bfb      	ldrb	r3, [r7, #15]
}
 80074a0:	4618      	mov	r0, r3
 80074a2:	3714      	adds	r7, #20
 80074a4:	46bd      	mov	sp, r7
 80074a6:	bc80      	pop	{r7}
 80074a8:	4770      	bx	lr
 80074aa:	bf00      	nop

080074ac <__libc_init_array>:
 80074ac:	b570      	push	{r4, r5, r6, lr}
 80074ae:	2600      	movs	r6, #0
 80074b0:	4d0c      	ldr	r5, [pc, #48]	; (80074e4 <__libc_init_array+0x38>)
 80074b2:	4c0d      	ldr	r4, [pc, #52]	; (80074e8 <__libc_init_array+0x3c>)
 80074b4:	1b64      	subs	r4, r4, r5
 80074b6:	10a4      	asrs	r4, r4, #2
 80074b8:	42a6      	cmp	r6, r4
 80074ba:	d109      	bne.n	80074d0 <__libc_init_array+0x24>
 80074bc:	f000 f822 	bl	8007504 <_init>
 80074c0:	2600      	movs	r6, #0
 80074c2:	4d0a      	ldr	r5, [pc, #40]	; (80074ec <__libc_init_array+0x40>)
 80074c4:	4c0a      	ldr	r4, [pc, #40]	; (80074f0 <__libc_init_array+0x44>)
 80074c6:	1b64      	subs	r4, r4, r5
 80074c8:	10a4      	asrs	r4, r4, #2
 80074ca:	42a6      	cmp	r6, r4
 80074cc:	d105      	bne.n	80074da <__libc_init_array+0x2e>
 80074ce:	bd70      	pop	{r4, r5, r6, pc}
 80074d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80074d4:	4798      	blx	r3
 80074d6:	3601      	adds	r6, #1
 80074d8:	e7ee      	b.n	80074b8 <__libc_init_array+0xc>
 80074da:	f855 3b04 	ldr.w	r3, [r5], #4
 80074de:	4798      	blx	r3
 80074e0:	3601      	adds	r6, #1
 80074e2:	e7f2      	b.n	80074ca <__libc_init_array+0x1e>
 80074e4:	0800759c 	.word	0x0800759c
 80074e8:	0800759c 	.word	0x0800759c
 80074ec:	0800759c 	.word	0x0800759c
 80074f0:	080075a0 	.word	0x080075a0

080074f4 <memset>:
 80074f4:	4603      	mov	r3, r0
 80074f6:	4402      	add	r2, r0
 80074f8:	4293      	cmp	r3, r2
 80074fa:	d100      	bne.n	80074fe <memset+0xa>
 80074fc:	4770      	bx	lr
 80074fe:	f803 1b01 	strb.w	r1, [r3], #1
 8007502:	e7f9      	b.n	80074f8 <memset+0x4>

08007504 <_init>:
 8007504:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007506:	bf00      	nop
 8007508:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800750a:	bc08      	pop	{r3}
 800750c:	469e      	mov	lr, r3
 800750e:	4770      	bx	lr

08007510 <_fini>:
 8007510:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007512:	bf00      	nop
 8007514:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007516:	bc08      	pop	{r3}
 8007518:	469e      	mov	lr, r3
 800751a:	4770      	bx	lr
